CCS PCH C Compiler, Version 4.104, 5967               10-oct.-18 10:27

               Filename: H:\JP\JP\Laboratorio\Cabina de Flujo Laminar Horizontal\2018\CFLH 60 Avantika #0045878XX\Firmware Prueba\CabinaCFLH.lst

               ROM used: 14446 bytes (44%)
                         Largest free fragment is 18320
               RAM used: 179 (9%) at main() level
                         216 (11%) worst case
               Stack:    7 worst case (6 in main + 1 for interrupts)

*
0000:  GOTO   1944
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   00B4
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina de PCR. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz UV, Luz Blanca, Motor Ventilador y Cambio de Contraseña. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,NOVREGEN,NOMCLR,NOPUT// PLL1 para 4 MHz 
.................... //#fuses XT,NOWDT,NOPROTECT,NOLVP,NODEBUG,NOVREGEN,NOMCLR// PLL1 para 4 MHz 
.................... #use delay(clock=48000000) 
*
06E2:  CLRF   FEA
06E4:  MOVLW  C6
06E6:  MOVWF  FE9
06E8:  MOVF   FEF,W
06EA:  BZ    0708
06EC:  MOVLW  0F
06EE:  MOVWF  01
06F0:  CLRF   00
06F2:  DECFSZ 00,F
06F4:  BRA    06F2
06F6:  DECFSZ 01,F
06F8:  BRA    06F0
06FA:  MOVLW  8F
06FC:  MOVWF  00
06FE:  DECFSZ 00,F
0700:  BRA    06FE
0702:  NOP   
0704:  DECFSZ FEF,F
0706:  BRA    06EC
0708:  RETLW  00
.................... //#use delay(clock=20000000) 
.................... #include <MATH.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
*
15E4:  BCF    xC2.0
....................    y = x; 
15E6:  MOVFF  B6,BB
15EA:  MOVFF  B5,BA
15EE:  MOVFF  B4,B9
15F2:  MOVFF  B3,B8
....................  
....................    if (x < 0) 
15F6:  MOVFF  B6,C6
15FA:  MOVFF  B5,C5
15FE:  MOVFF  B4,C4
1602:  MOVFF  B3,C3
1606:  CLRF   xCA
1608:  CLRF   xC9
160A:  CLRF   xC8
160C:  CLRF   xC7
160E:  CALL   0932
1612:  BNC   161C
....................    { 
....................       s = 1; 
1614:  BSF    xC2.0
....................       y = -y; 
1616:  MOVF   xB9,W
1618:  XORLW  80
161A:  MOVWF  xB9
....................    } 
....................  
....................    if (y <= 32768.0) 
161C:  MOVFF  BB,C6
1620:  MOVFF  BA,C5
1624:  MOVFF  B9,C4
1628:  MOVFF  B8,C3
162C:  CLRF   xCA
162E:  CLRF   xC9
1630:  CLRF   xC8
1632:  MOVLW  8E
1634:  MOVWF  xC7
1636:  CALL   0932
163A:  BC    163E
163C:  BNZ   166E
....................   res = (float32)(unsigned int16)y; 
163E:  MOVFF  BB,C6
1642:  MOVFF  BA,C5
1646:  MOVFF  B9,C4
164A:  MOVFF  B8,C3
164E:  RCALL  15AC
1650:  MOVFF  02,C8
1654:  MOVFF  01,C7
1658:  CALL   07CA
165C:  MOVFF  03,BF
1660:  MOVFF  02,BE
1664:  MOVFF  01,BD
1668:  MOVFF  00,BC
....................  
....................  else if (y < 10000000.0) 
166C:  BRA    17F8
166E:  MOVFF  BB,C6
1672:  MOVFF  BA,C5
1676:  MOVFF  B9,C4
167A:  MOVFF  B8,C3
167E:  MOVLW  80
1680:  MOVWF  xCA
1682:  MOVLW  96
1684:  MOVWF  xC9
1686:  MOVLW  18
1688:  MOVWF  xC8
168A:  MOVLW  96
168C:  MOVWF  xC7
168E:  CALL   0932
1692:  BTFSS  FD8.0
1694:  BRA    17E8
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
1696:  MOVFF  BB,C6
169A:  MOVFF  BA,C5
169E:  MOVFF  B9,C4
16A2:  MOVFF  B8,C3
16A6:  CLRF   xCA
16A8:  CLRF   xC9
16AA:  CLRF   xC8
16AC:  MOVLW  8E
16AE:  MOVWF  xC7
16B0:  CALL   0D1E
16B4:  MOVFF  03,C6
16B8:  MOVFF  02,C5
16BC:  MOVFF  01,C4
16C0:  MOVFF  00,C3
16C4:  RCALL  15AC
16C6:  MOVFF  02,C1
16CA:  MOVFF  01,C0
....................       y = 32768.0*(y/32768.0 - (float32)l); 
16CE:  MOVFF  BB,C6
16D2:  MOVFF  BA,C5
16D6:  MOVFF  B9,C4
16DA:  MOVFF  B8,C3
16DE:  CLRF   xCA
16E0:  CLRF   xC9
16E2:  CLRF   xC8
16E4:  MOVLW  8E
16E6:  MOVWF  xC7
16E8:  CALL   0D1E
16EC:  MOVFF  00,C3
16F0:  MOVFF  01,C4
16F4:  MOVFF  02,C5
16F8:  MOVFF  03,C6
16FC:  MOVFF  C1,C8
1700:  MOVFF  C0,C7
1704:  CALL   07CA
1708:  BSF    FD8.1
170A:  MOVFF  C6,CA
170E:  MOVFF  C5,C9
1712:  MOVFF  C4,C8
1716:  MOVFF  C3,C7
171A:  MOVFF  03,CE
171E:  MOVFF  02,CD
1722:  MOVFF  01,CC
1726:  MOVFF  00,CB
172A:  CALL   0E78
172E:  CLRF   xC6
1730:  CLRF   xC5
1732:  CLRF   xC4
1734:  MOVLW  8E
1736:  MOVWF  xC3
1738:  MOVFF  03,CA
173C:  MOVFF  02,C9
1740:  MOVFF  01,C8
1744:  MOVFF  00,C7
1748:  RCALL  127A
174A:  MOVFF  03,BB
174E:  MOVFF  02,BA
1752:  MOVFF  01,B9
1756:  MOVFF  00,B8
....................   res = 32768.0*(float32)l; 
175A:  MOVFF  C1,C8
175E:  MOVFF  C0,C7
1762:  CALL   07CA
1766:  CLRF   xC6
1768:  CLRF   xC5
176A:  CLRF   xC4
176C:  MOVLW  8E
176E:  MOVWF  xC3
1770:  MOVFF  03,CA
1774:  MOVFF  02,C9
1778:  MOVFF  01,C8
177C:  MOVFF  00,C7
1780:  RCALL  127A
1782:  MOVFF  03,BF
1786:  MOVFF  02,BE
178A:  MOVFF  01,BD
178E:  MOVFF  00,BC
....................   res += (float32)(unsigned int16)y; 
1792:  MOVFF  BB,C6
1796:  MOVFF  BA,C5
179A:  MOVFF  B9,C4
179E:  MOVFF  B8,C3
17A2:  RCALL  15AC
17A4:  MOVFF  02,C8
17A8:  MOVFF  01,C7
17AC:  CALL   07CA
17B0:  BCF    FD8.1
17B2:  MOVFF  BF,CA
17B6:  MOVFF  BE,C9
17BA:  MOVFF  BD,C8
17BE:  MOVFF  BC,C7
17C2:  MOVFF  03,CE
17C6:  MOVFF  02,CD
17CA:  MOVFF  01,CC
17CE:  MOVFF  00,CB
17D2:  CALL   0E78
17D6:  MOVFF  03,BF
17DA:  MOVFF  02,BE
17DE:  MOVFF  01,BD
17E2:  MOVFF  00,BC
....................  } 
....................  
....................  else 
17E6:  BRA    17F8
....................   res = y; 
17E8:  MOVFF  BB,BF
17EC:  MOVFF  BA,BE
17F0:  MOVFF  B9,BD
17F4:  MOVFF  B8,BC
....................  
....................  y = y - (float32)(unsigned int16)y; 
17F8:  MOVFF  BB,C6
17FC:  MOVFF  BA,C5
1800:  MOVFF  B9,C4
1804:  MOVFF  B8,C3
1808:  RCALL  15AC
180A:  MOVFF  02,C8
180E:  MOVFF  01,C7
1812:  CALL   07CA
1816:  BSF    FD8.1
1818:  MOVFF  BB,CA
181C:  MOVFF  BA,C9
1820:  MOVFF  B9,C8
1824:  MOVFF  B8,C7
1828:  MOVFF  03,CE
182C:  MOVFF  02,CD
1830:  MOVFF  01,CC
1834:  MOVFF  00,CB
1838:  CALL   0E78
183C:  MOVFF  03,BB
1840:  MOVFF  02,BA
1844:  MOVFF  01,B9
1848:  MOVFF  00,B8
....................  
....................  if (s) 
184C:  BTFSS  xC2.0
184E:  BRA    1856
....................   res = -res; 
1850:  MOVF   xBD,W
1852:  XORLW  80
1854:  MOVWF  xBD
....................  
....................  if (y != 0) 
1856:  MOVFF  BB,C6
185A:  MOVFF  BA,C5
185E:  MOVFF  B9,C4
1862:  MOVFF  B8,C3
1866:  CLRF   xCA
1868:  CLRF   xC9
186A:  CLRF   xC8
186C:  CLRF   xC7
186E:  CALL   0932
1872:  BZ    18E4
....................  { 
....................   if (s == 1 && n == 0) 
1874:  BTFSS  xC2.0
1876:  BRA    18AC
1878:  MOVF   xB7,F
187A:  BNZ   18AC
....................    res -= 1.0; 
187C:  BSF    FD8.1
187E:  MOVFF  BF,CA
1882:  MOVFF  BE,C9
1886:  MOVFF  BD,C8
188A:  MOVFF  BC,C7
188E:  CLRF   xCE
1890:  CLRF   xCD
1892:  CLRF   xCC
1894:  MOVLW  7F
1896:  MOVWF  xCB
1898:  CALL   0E78
189C:  MOVFF  03,BF
18A0:  MOVFF  02,BE
18A4:  MOVFF  01,BD
18A8:  MOVFF  00,BC
....................  
....................   if (s == 0 && n == 1) 
18AC:  BTFSC  xC2.0
18AE:  BRA    18E4
18B0:  DECFSZ xB7,W
18B2:  BRA    18E4
....................    res += 1.0; 
18B4:  BCF    FD8.1
18B6:  MOVFF  BF,CA
18BA:  MOVFF  BE,C9
18BE:  MOVFF  BD,C8
18C2:  MOVFF  BC,C7
18C6:  CLRF   xCE
18C8:  CLRF   xCD
18CA:  CLRF   xCC
18CC:  MOVLW  7F
18CE:  MOVWF  xCB
18D0:  CALL   0E78
18D4:  MOVFF  03,BF
18D8:  MOVFF  02,BE
18DC:  MOVFF  01,BD
18E0:  MOVFF  00,BC
....................  } 
....................  if (x == 0) 
18E4:  MOVFF  B6,C6
18E8:  MOVFF  B5,C5
18EC:  MOVFF  B4,C4
18F0:  MOVFF  B3,C3
18F4:  CLRF   xCA
18F6:  CLRF   xC9
18F8:  CLRF   xC8
18FA:  CLRF   xC7
18FC:  CALL   0932
1900:  BNZ   190A
....................     res = 0; 
1902:  CLRF   xBF
1904:  CLRF   xBE
1906:  CLRF   xBD
1908:  CLRF   xBC
....................  
....................  return (res); 
190A:  MOVFF  BC,00
190E:  MOVFF  BD,01
1912:  MOVFF  BE,02
1916:  MOVFF  BF,03
.................... } 
191A:  GOTO   1932 (RETURN)
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
191E:  MOVFF  B2,B6
1922:  MOVFF  B1,B5
1926:  MOVFF  B0,B4
192A:  MOVFF  AF,B3
192E:  CLRF   xB7
1930:  BRA    15E4
.................... } 
1932:  RETLW  00
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   UP            input(PIN_A5) 
.................... #define   DOWN          input(PIN_E0) 
.................... #define   RIGHT         input(PIN_E1) 
.................... #define   IZQU          input(PIN_E2) 
.................... #define   VIDRIO        !input(PIN_A2) 
....................  
.................... // Definición de otros puertos 
.................... #define   Luz_UV_on         output_bit(PIN_D1,1) 
.................... #define   Luz_UV_off        output_bit(PIN_D1,0) 
.................... #define   Luz_Blanca_on     output_bit(PIN_D2,1) 
.................... #define   Luz_Blanca_off    output_bit(PIN_D2,0) 
.................... #define   Motor_L1_on       output_bit(PIN_D3,1) 
.................... #define   Motor_L1_off      output_bit(PIN_D3,0) 
.................... #define   Buzzer_on         output_bit(PIN_D0,1) 
.................... #define   Buzzer_off        output_bit(PIN_D0,0) 
.................... #define   ON  1 
.................... #define   OFF 0 
....................  
.................... short estadouv=0,estadofl=0,estadomv=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,tiempo_cumplido=0,Lectura=0,flaguv=0,flagfl=0,estadobuzzer=0,estadoalarma=0; 
.................... int8 Menu=0, n_opcionH=6,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,segundos=0,minutos=0,horasL=0,horasH=0,G_l=0,G_h=0; 
.................... int8 tempo_minutos=0,tempo_segundos=0,tempo_minutos_pro=0,tempo_segundos_pro=0,r=0,q=0,i=0,unidad2=1,tiemporeset=0,guardaruv=0; 
.................... signed int8   paso=0; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... signed  int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 ActivaBuzzer=0; 
.................... int16 tiempos,horas=0,G16=0,tiempobloqueo=0; 
.................... float PromPresion[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float V1=0.0,Presion=0.0,Saturacion=0.0,CaidaPresion=0.0; 
.................... float G=2; 
.................... short Cambio=ON,flagmv=0,Ruido=OFF,Bloqueo=OFF; 
.................... char dato[3]; 
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN unused;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN enable;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTB")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_b(LCD_READ); 
....................       lcd.rw = 1; 
....................       delay_cycles(30);//30 
....................       lcd.enable = 1; 
....................       delay_cycles(30);//30 
....................       high = lcd.data; 
....................       lcd.enable = 0; 
....................       delay_cycles(30);//30 
....................       lcd.enable = 1; 
....................       delay_us(30);//30 
....................       low = lcd.data; 
....................       lcd.enable = 0; 
....................       set_tris_b(LCD_WRITE); 
....................       return( (high<<4) | low); 
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
070A:  SWAPF  xC7,W
070C:  ANDLW  F0
070E:  MOVWF  00
0710:  MOVLW  0F
0712:  ANDWF  F81,W
0714:  IORWF  00,W
0716:  MOVWF  F81
....................       delay_cycles(30);//30 
0718:  MOVLW  09
071A:  MOVWF  00
071C:  DECFSZ 00,F
071E:  BRA    071C
0720:  BRA    0722
....................       lcd.enable = 1; 
0722:  BSF    F81.3
....................       delay_us(55);//55 
0724:  MOVLW  DB
0726:  MOVWF  00
0728:  DECFSZ 00,F
072A:  BRA    0728
072C:  BRA    072E
....................       lcd.enable = 0; 
072E:  BCF    F81.3
.................... } 
0730:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
0732:  BCF    F81.1
....................       //while ( bit_test(lcd_read_byte(),7)); 
....................       delay_ms(1); 
0734:  MOVLW  01
0736:  MOVWF  xC6
0738:  RCALL  06E2
....................       lcd.rs = address; 
073A:  BTFSS  xC4.0
073C:  BCF    F81.1
073E:  BTFSC  xC4.0
0740:  BSF    F81.1
....................       delay_cycles(30);//30 
0742:  MOVLW  09
0744:  MOVWF  00
0746:  DECFSZ 00,F
0748:  BRA    0746
074A:  BRA    074C
....................       lcd.rw = 0; 
074C:  BCF    F81.2
....................       delay_cycles(30);//30 
074E:  MOVLW  09
0750:  MOVWF  00
0752:  DECFSZ 00,F
0754:  BRA    0752
0756:  BRA    0758
....................       lcd.enable = 0; 
0758:  BCF    F81.3
....................       lcd_send_nibble(n >> 4); 
075A:  SWAPF  xC5,W
075C:  MOVWF  xC6
075E:  MOVLW  0F
0760:  ANDWF  xC6,F
0762:  MOVFF  C6,C7
0766:  RCALL  070A
....................       lcd_send_nibble(n & 0xf); 
0768:  MOVF   xC5,W
076A:  ANDLW  0F
076C:  MOVWF  xC6
076E:  MOVWF  xC7
0770:  RCALL  070A
.................... } 
0772:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_b(LCD_WRITE); 
0774:  MOVLW  00
0776:  MOVWF  F93
....................     lcd.rs = 0; 
0778:  BCF    F81.1
....................     lcd.rw = 0; 
077A:  BCF    F81.2
....................     lcd.enable = 0; 
077C:  BCF    F81.3
....................     delay_ms(15); 
077E:  MOVLW  0F
0780:  MOVWF  xC6
0782:  RCALL  06E2
....................     for(i=1;i<=3;++i) { 
0784:  MOVLW  01
0786:  MOVWF  xAF
0788:  MOVF   xAF,W
078A:  SUBLW  03
078C:  BNC   079E
....................        lcd_send_nibble(3); 
078E:  MOVLW  03
0790:  MOVWF  xC7
0792:  RCALL  070A
....................        delay_ms(5); 
0794:  MOVLW  05
0796:  MOVWF  xC6
0798:  RCALL  06E2
....................     } 
079A:  INCF   xAF,F
079C:  BRA    0788
....................     lcd_send_nibble(2); 
079E:  MOVLW  02
07A0:  MOVWF  xC7
07A2:  RCALL  070A
....................     for(i=0;i<=3;++i) 
07A4:  CLRF   xAF
07A6:  MOVF   xAF,W
07A8:  SUBLW  03
07AA:  BNC   07C8
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
07AC:  CLRF   03
07AE:  MOVF   xAF,W
07B0:  MOVFF  FF2,B0
07B4:  BCF    FF2.7
07B6:  RCALL  0096
07B8:  BTFSC  xB0.7
07BA:  BSF    FF2.7
07BC:  MOVWF  xB0
07BE:  CLRF   xC4
07C0:  MOVWF  xC5
07C2:  RCALL  0732
07C4:  INCF   xAF,F
07C6:  BRA    07A6
.................... } 
07C8:  RETLW  00
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
*
0852:  MOVLW  01
0854:  SUBWF  xC2,W
0856:  ADDLW  FC
0858:  BC    0878
085A:  ADDLW  04
085C:  GOTO   0888
....................      case 1 : address=0x80;break; 
0860:  MOVLW  80
0862:  MOVWF  xC3
0864:  BRA    0878
....................      case 2 : address=0xc0;break; 
0866:  MOVLW  C0
0868:  MOVWF  xC3
086A:  BRA    0878
....................      case 3 : address=0x94;break; 
086C:  MOVLW  94
086E:  MOVWF  xC3
0870:  BRA    0878
....................      case 4 : address=0xd4;break; 
0872:  MOVLW  D4
0874:  MOVWF  xC3
0876:  BRA    0878
....................    } 
....................    address+=x-1; 
0878:  MOVLW  01
087A:  SUBWF  xC1,W
087C:  ADDWF  xC3,F
....................    lcd_send_byte(0,address); 
087E:  CLRF   xC4
0880:  MOVFF  C3,C5
0884:  RCALL  0732
.................... } 
0886:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
....................    if(c=='ñ') 
*
08B4:  MOVF   xC0,W
08B6:  SUBLW  F1
08B8:  BNZ   08BE
....................    { 
....................       c=238; 
08BA:  MOVLW  EE
08BC:  MOVWF  xC0
....................    } 
....................    if(c=='Ñ') 
08BE:  MOVF   xC0,W
08C0:  SUBLW  D1
08C2:  BNZ   08C8
....................    { 
....................       c=255; 
08C4:  MOVLW  FF
08C6:  MOVWF  xC0
....................    } 
....................     
....................    switch (c) { 
08C8:  MOVF   xC0,W
08CA:  XORLW  0C
08CC:  BZ    08D8
08CE:  XORLW  06
08D0:  BZ    08EC
08D2:  XORLW  02
08D4:  BZ    08FA
08D6:  BRA    0904
....................      case '\f'   : lcd_send_byte(0,1); 
08D8:  CLRF   xC4
08DA:  MOVLW  01
08DC:  MOVWF  xC5
08DE:  RCALL  0732
....................                    lcdline=1; 
08E0:  MOVLW  01
08E2:  MOVWF  xAE
....................                    delay_ms(2); 
08E4:  MOVLW  02
08E6:  MOVWF  xC6
08E8:  RCALL  06E2
....................                                            break; 
08EA:  BRA    0910
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
08EC:  INCF   xAE,F
08EE:  MOVLW  01
08F0:  MOVWF  xC1
08F2:  MOVFF  AE,C2
08F6:  RCALL  0852
08F8:  BRA    0910
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
08FA:  CLRF   xC4
08FC:  MOVLW  10
08FE:  MOVWF  xC5
0900:  RCALL  0732
0902:  BRA    0910
....................      default     : lcd_send_byte(1,c);     break; 
0904:  MOVLW  01
0906:  MOVWF  xC4
0908:  MOVFF  C0,C5
090C:  RCALL  0732
090E:  BRA    0910
....................    } 
.................... } 
0910:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
....................  
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    set_timer1(5536);  // 5 ms 
*
00B4:  MOVLW  15
00B6:  MOVWF  FCF
00B8:  MOVLW  A0
00BA:  MOVWF  FCE
....................    //set_timer1(45536);  // 5 ms 
....................    tiempos++; 
00BC:  INCF   3E,F
00BE:  BTFSC  FD8.2
00C0:  INCF   3F,F
....................     
....................    if(Bloqueo){ 
00C2:  BTFSS  xAA.0
00C4:  BRA    00CC
....................       tiempobloqueo++; 
00C6:  INCF   44,F
00C8:  BTFSC  FD8.2
00CA:  INCF   45,F
....................    } 
....................     
....................    if(tiempos>=200)   // Ha transcurrido una decima de segundo (PIC18F4550 con XT = 16MHZ) 
00CC:  MOVF   3F,F
00CE:  BNZ   00D6
00D0:  MOVF   3E,W
00D2:  SUBLW  C7
00D4:  BC    0124
....................    {tiempos=0;tiemporeset++;Lectura=1; 
00D6:  CLRF   3F
00D8:  CLRF   3E
00DA:  INCF   2F,F
00DC:  BSF    17.0
....................     
....................    if(ActivaBuzzer==1) 
00DE:  DECFSZ 3D,W
00E0:  BRA    00F6
....................    { 
....................       if(estadobuzzer==0) 
00E2:  BTFSC  17.3
00E4:  BRA    00EC
....................       { 
....................          Buzzer_off; 
00E6:  BCF    F8C.0
00E8:  BCF    F95.0
....................       } 
....................       else 
00EA:  BRA    00F4
....................       { 
....................          if(estadoalarma==1) 
00EC:  BTFSS  17.4
00EE:  BRA    00F4
....................             Buzzer_on; 
00F0:  BSF    F8C.0
00F2:  BCF    F95.0
....................       } 
....................       estadobuzzer=!estadobuzzer; 
00F4:  BTG    17.3
....................    } 
....................    //----------------------------- Tiempo Total-----------------------------// 
....................    if(estadouv==1) 
00F6:  BTFSS  16.0
00F8:  BRA    0124
....................    { 
....................       segundos++; 
00FA:  INCF   21,F
....................       if(tiempo_cumplido==0) 
00FC:  BTFSC  16.7
00FE:  BRA    0124
....................       { 
....................          if(tempo_segundos>0) 
0100:  MOVF   28,F
0102:  BZ    0108
....................          { 
....................             tempo_segundos--; 
0104:  DECF   28,F
....................          } 
....................          else 
0106:  BRA    0124
....................          { 
....................             if(tempo_minutos>0) 
0108:  MOVF   27,F
010A:  BZ    0114
....................             { 
....................                tempo_minutos--; 
010C:  DECF   27,F
....................                tempo_segundos=59; 
010E:  MOVLW  3B
0110:  MOVWF  28
....................             } 
....................             else 
0112:  BRA    0124
....................             { 
....................                tiempo_cumplido=1; 
0114:  BSF    16.7
....................                estadouv=0;Luz_UV_off; 
0116:  BCF    16.0
0118:  BCF    F8C.1
011A:  BCF    F95.1
....................                tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
011C:  MOVFF  29,27
0120:  MOVFF  2A,28
....................             } 
....................          } 
....................       } 
....................    } 
....................          
....................    } 
.................... } 
....................  
....................  
0124:  BCF    F9E.0
0126:  GOTO   0054
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {   
....................    if(x==1) 
*
0B66:  DECFSZ xB0,W
0B68:  BRA    0B7E
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Temporizador UV    ");} 
0B6A:  MOVLW  02
0B6C:  MOVWF  xC1
0B6E:  MOVFF  B1,C2
0B72:  RCALL  0852
0B74:  MOVLW  2A
0B76:  MOVWF  FF6
0B78:  MOVLW  01
0B7A:  MOVWF  FF7
0B7C:  RCALL  0912
....................    if(x==2) 
0B7E:  MOVF   xB0,W
0B80:  SUBLW  02
0B82:  BNZ   0B98
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
0B84:  MOVLW  02
0B86:  MOVWF  xC1
0B88:  MOVFF  B1,C2
0B8C:  RCALL  0852
0B8E:  MOVLW  3E
0B90:  MOVWF  FF6
0B92:  MOVLW  01
0B94:  MOVWF  FF7
0B96:  RCALL  0912
....................    if(x==3) 
0B98:  MOVF   xB0,W
0B9A:  SUBLW  03
0B9C:  BNZ   0BB2
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo Trabajo UV  ");} 
0B9E:  MOVLW  02
0BA0:  MOVWF  xC1
0BA2:  MOVFF  B1,C2
0BA6:  RCALL  0852
0BA8:  MOVLW  52
0BAA:  MOVWF  FF6
0BAC:  MOVLW  01
0BAE:  MOVWF  FF7
0BB0:  RCALL  0912
....................    if(x==4) 
0BB2:  MOVF   xB0,W
0BB4:  SUBLW  04
0BB6:  BNZ   0BCC
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Punto Cero         ");} 
0BB8:  MOVLW  02
0BBA:  MOVWF  xC1
0BBC:  MOVFF  B1,C2
0BC0:  RCALL  0852
0BC2:  MOVLW  66
0BC4:  MOVWF  FF6
0BC6:  MOVLW  01
0BC8:  MOVWF  FF7
0BCA:  RCALL  0912
....................     
....................    if(x==5) 
0BCC:  MOVF   xB0,W
0BCE:  SUBLW  05
0BD0:  BNZ   0C02
....................    {if(estadoalarma==0) 
0BD2:  BTFSC  17.4
0BD4:  BRA    0BEA
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma          OFF");} 
0BD6:  MOVLW  02
0BD8:  MOVWF  xC1
0BDA:  MOVFF  B1,C2
0BDE:  RCALL  0852
0BE0:  MOVLW  7A
0BE2:  MOVWF  FF6
0BE4:  MOVLW  01
0BE6:  MOVWF  FF7
0BE8:  RCALL  0912
....................    if(estadoalarma==1) 
0BEA:  BTFSS  17.4
0BEC:  BRA    0C02
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma           ON");} 
0BEE:  MOVLW  02
0BF0:  MOVWF  xC1
0BF2:  MOVFF  B1,C2
0BF6:  RCALL  0852
0BF8:  MOVLW  8E
0BFA:  MOVWF  FF6
0BFC:  MOVLW  01
0BFE:  MOVWF  FF7
0C00:  RCALL  0912
....................    } 
.................... } 
0C02:  RETLW  00
....................  
.................... void velocidades(int8 x)// Funcion para imprimir mensajes de Menu Principal. 
.................... {  if(x==0) 
*
1934:  MOVF   xAF,F
1936:  BNZ   193E
....................    { 
....................       Motor_L1_off; 
1938:  BCF    F8C.3
193A:  BCF    F95.3
....................    } 
....................    else 
193C:  BRA    1942
....................    { 
....................       Motor_L1_on; 
193E:  BSF    F8C.3
1940:  BCF    F95.3
....................    } 
.................... } 
1942:  RETLW  00
....................  
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
0800:  RLCF   xB4,W
0802:  MOVWF  00
0804:  RLCF   00,F
0806:  MOVLW  FC
0808:  ANDWF  00,F
080A:  MOVFF  00,01
080E:  MOVF   FC2,W
0810:  ANDLW  C3
0812:  IORWF  00,W
0814:  MOVWF  FC2
0816:  MOVLW  0A
0818:  MOVWF  xC6
081A:  RCALL  06E2
081C:  BSF    FC2.1
081E:  BTFSC  FC2.1
0820:  BRA    081E
0822:  MOVFF  FC4,03
0826:  MOVFF  FC3,C7
082A:  MOVFF  FC4,C8
082E:  RCALL  07CA
0830:  MOVFF  03,B8
0834:  MOVFF  02,B7
0838:  MOVFF  01,B6
083C:  MOVFF  00,B5
0840:  MOVFF  B5,00
0844:  MOVFF  B6,01
0848:  MOVFF  B7,02
084C:  MOVFF  B8,03
.................... } 
0850:  RETLW  00
....................  
.................... float Leer_Sensor_Presion(int media){ 
*
10E2:  CLRF   xB3
10E4:  CLRF   xB2
10E6:  CLRF   xB1
10E8:  CLRF   xB0
....................    float promediopresion=0.0; 
....................     
....................    V1=sensores(0);  
10EA:  CLRF   xB4
10EC:  CALL   0800
10F0:  MOVFF  03,99
10F4:  MOVFF  02,98
10F8:  MOVFF  01,97
10FC:  MOVFF  00,96
....................    //V1 = (x_uno*5.0)/1023.0;   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
....................    Presion=(V1/G)-1.0;// Presion=(Voltaje/Ganancia)-1 
1100:  MOVFF  99,C6
1104:  MOVFF  98,C5
1108:  MOVFF  97,C4
110C:  MOVFF  96,C3
1110:  MOVFF  A9,CA
1114:  MOVFF  A8,C9
1118:  MOVFF  A7,C8
111C:  MOVFF  A6,C7
1120:  RCALL  0D1E
1122:  MOVFF  00,B4
1126:  MOVFF  01,B5
112A:  MOVFF  02,B6
112E:  MOVFF  03,B7
1132:  BSF    FD8.1
1134:  MOVFF  03,CA
1138:  MOVFF  02,C9
113C:  MOVFF  01,C8
1140:  MOVFF  00,C7
1144:  CLRF   xCE
1146:  CLRF   xCD
1148:  CLRF   xCC
114A:  MOVLW  7F
114C:  MOVWF  xCB
114E:  RCALL  0E78
1150:  MOVFF  03,9D
1154:  MOVFF  02,9C
1158:  MOVFF  01,9B
115C:  MOVFF  00,9A
....................     
....................    if(Presion<0.0) 
1160:  MOVFF  9D,C6
1164:  MOVFF  9C,C5
1168:  MOVFF  9B,C4
116C:  MOVFF  9A,C3
1170:  CLRF   xCA
1172:  CLRF   xC9
1174:  CLRF   xC8
1176:  CLRF   xC7
1178:  CALL   0932
117C:  BNC   1186
....................    { 
....................       Presion=0.0; 
117E:  CLRF   x9D
1180:  CLRF   x9C
1182:  CLRF   x9B
1184:  CLRF   x9A
....................    } 
....................  
....................    if(r>media-1) 
1186:  MOVLW  01
1188:  SUBWF  xAF,W
118A:  SUBWF  2B,W
118C:  BZ    1192
118E:  BNC   1192
....................    {r=0;} 
1190:  CLRF   2B
....................    PromPresion[r]=Presion;r++; 
1192:  MOVF   2B,W
1194:  MULLW  04
1196:  MOVF   FF3,W
1198:  CLRF   03
119A:  ADDLW  46
119C:  MOVWF  FE9
119E:  MOVLW  00
11A0:  ADDWFC 03,W
11A2:  MOVWF  FEA
11A4:  MOVFF  9A,FEF
11A8:  MOVFF  9B,FEC
11AC:  MOVFF  9C,FEC
11B0:  MOVFF  9D,FEC
11B4:  INCF   2B,F
....................           
....................    for(q=0;q<=(media-1);q++) 
11B6:  CLRF   2C
11B8:  MOVLW  01
11BA:  SUBWF  xAF,W
11BC:  SUBWF  2C,W
11BE:  BZ    11C2
11C0:  BC    122C
....................    { 
....................       promediopresion+=PromPresion[q]; 
11C2:  MOVF   2C,W
11C4:  MULLW  04
11C6:  MOVF   FF3,W
11C8:  CLRF   03
11CA:  ADDLW  46
11CC:  MOVWF  FE9
11CE:  MOVLW  00
11D0:  ADDWFC 03,W
11D2:  MOVWF  FEA
11D4:  MOVFF  FEF,00
11D8:  MOVFF  FEC,01
11DC:  MOVFF  FEC,02
11E0:  MOVFF  FEC,03
11E4:  MOVFF  FEA,B5
11E8:  MOVFF  FE9,B4
11EC:  BCF    FD8.1
11EE:  MOVFF  B3,CA
11F2:  MOVFF  B2,C9
11F6:  MOVFF  B1,C8
11FA:  MOVFF  B0,C7
11FE:  MOVFF  03,CE
1202:  MOVFF  02,CD
1206:  MOVFF  01,CC
120A:  MOVFF  00,CB
120E:  RCALL  0E78
1210:  MOVFF  B5,FEA
1214:  MOVFF  B4,FE9
1218:  MOVFF  03,B3
121C:  MOVFF  02,B2
1220:  MOVFF  01,B1
1224:  MOVFF  00,B0
....................    }  
1228:  INCF   2C,F
122A:  BRA    11B8
....................    promediopresion=promediopresion/media;    
122C:  CLRF   xC8
122E:  MOVFF  AF,C7
1232:  CALL   07CA
1236:  MOVFF  B3,C6
123A:  MOVFF  B2,C5
123E:  MOVFF  B1,C4
1242:  MOVFF  B0,C3
1246:  MOVFF  03,CA
124A:  MOVFF  02,C9
124E:  MOVFF  01,C8
1252:  MOVFF  00,C7
1256:  RCALL  0D1E
1258:  MOVFF  03,B3
125C:  MOVFF  02,B2
1260:  MOVFF  01,B1
1264:  MOVFF  00,B0
....................     
....................    return promediopresion; 
1268:  MOVFF  B0,00
126C:  MOVFF  B1,01
1270:  MOVFF  B2,02
1274:  MOVFF  B3,03
.................... } 
1278:  RETLW  00
....................  
.................... void Limita(void){ 
....................     
....................    if(Contrasena[0]>9 || Contrasena[0]<0)Contrasena[0]=0; 
*
09A8:  BTFSC  39.7
09AA:  BRA    09B2
09AC:  MOVF   39,W
09AE:  SUBLW  09
09B0:  BNC   09B6
09B2:  BTFSS  39.7
09B4:  BRA    09B8
09B6:  CLRF   39
....................    if(Contrasena[1]>9 || Contrasena[1]<0)Contrasena[1]=0; 
09B8:  BTFSC  3A.7
09BA:  BRA    09C2
09BC:  MOVF   3A,W
09BE:  SUBLW  09
09C0:  BNC   09C6
09C2:  BTFSS  3A.7
09C4:  BRA    09C8
09C6:  CLRF   3A
....................    if(Contrasena[2]>9 || Contrasena[2]<0)Contrasena[2]=0; 
09C8:  BTFSC  3B.7
09CA:  BRA    09D2
09CC:  MOVF   3B,W
09CE:  SUBLW  09
09D0:  BNC   09D6
09D2:  BTFSS  3B.7
09D4:  BRA    09D8
09D6:  CLRF   3B
....................    if(Contrasena[3]>9 || Contrasena[3]<0)Contrasena[3]=0; 
09D8:  BTFSC  3C.7
09DA:  BRA    09E2
09DC:  MOVF   3C,W
09DE:  SUBLW  09
09E0:  BNC   09E6
09E2:  BTFSS  3C.7
09E4:  BRA    09E8
09E6:  CLRF   3C
....................    if(tempo_minutos>60)tempo_minutos=20; 
09E8:  MOVF   27,W
09EA:  SUBLW  3C
09EC:  BC    09F2
09EE:  MOVLW  14
09F0:  MOVWF  27
....................    if(tempo_segundos)tempo_segundos=0; 
09F2:  MOVF   28,F
09F4:  BTFSS  FD8.2
09F6:  CLRF   28
....................    if(segundos>60)segundos=0; 
09F8:  MOVF   21,W
09FA:  SUBLW  3C
09FC:  BTFSS  FD8.0
09FE:  CLRF   21
....................    if(minutos>60)minutos=0; 
0A00:  MOVF   22,W
0A02:  SUBLW  3C
0A04:  BTFSS  FD8.0
0A06:  CLRF   22
....................    if(horas>10000)horas=0; 
0A08:  MOVF   41,W
0A0A:  SUBLW  26
0A0C:  BC    0A1C
0A0E:  XORLW  FF
0A10:  BNZ   0A18
0A12:  MOVF   40,W
0A14:  SUBLW  10
0A16:  BC    0A1C
0A18:  CLRF   41
0A1A:  CLRF   40
....................    if(G>1000)G=240; 
0A1C:  CLRF   xC6
0A1E:  CLRF   xC5
0A20:  MOVLW  7A
0A22:  MOVWF  xC4
0A24:  MOVLW  88
0A26:  MOVWF  xC3
0A28:  MOVFF  A9,CA
0A2C:  MOVFF  A8,C9
0A30:  MOVFF  A7,C8
0A34:  MOVFF  A6,C7
0A38:  RCALL  0932
0A3A:  BNC   0A48
0A3C:  CLRF   xA9
0A3E:  CLRF   xA8
0A40:  MOVLW  70
0A42:  MOVWF  xA7
0A44:  MOVLW  86
0A46:  MOVWF  xA6
....................    if(estadoalarma>10)estadoalarma=1; 
0A48:  MOVLW  00
0A4A:  BTFSC  17.4
0A4C:  MOVLW  01
0A4E:  SUBLW  0A
0A50:  BTFSS  FD8.0
0A52:  BSF    17.4
.................... } 
0A54:  GOTO   1D3A (RETURN)
....................  
.................... void EliminaRuido(void){ 
....................    /*if(Menu==50){ 
....................       dato[0]=lcd_getc(1,2); 
....................       dato[1]=lcd_getc(2,2); 
....................       dato[2]=lcd_getc(3,2); 
....................       if(dato[0]!=70 || dato[1]!=105 || dato[2]!=108){ 
....................          lcd_init();delay_ms(200);lcd_init(); 
....................          Cambio=ON; 
....................       } 
....................    }*/ 
.................... } 
*
0004:  RETLW  00
....................  
.................... void main () 
.................... { 
*
1944:  CLRF   FF8
1946:  BCF    FD0.7
1948:  BSF    07.7
194A:  CLRF   FEA
194C:  CLRF   FE9
194E:  BCF    16.0
1950:  BCF    16.1
1952:  BCF    16.2
1954:  BCF    16.3
1956:  BCF    16.4
1958:  BCF    16.5
195A:  BCF    16.6
195C:  BCF    16.7
195E:  BCF    17.0
1960:  BCF    17.1
1962:  BCF    17.2
1964:  BCF    17.3
1966:  BCF    17.4
1968:  CLRF   18
196A:  MOVLW  06
196C:  MOVWF  19
196E:  MOVLW  02
1970:  MOVWF  1A
1972:  MOVLW  0B
1974:  MOVWF  1B
1976:  MOVLW  02
1978:  MOVWF  1C
197A:  MOVLW  03
197C:  MOVWF  1D
197E:  MOVLW  02
1980:  MOVWF  1E
1982:  MOVWF  1F
1984:  MOVLW  04
1986:  MOVWF  20
1988:  CLRF   21
198A:  CLRF   22
198C:  CLRF   23
198E:  CLRF   24
1990:  CLRF   25
1992:  CLRF   26
1994:  CLRF   27
1996:  CLRF   28
1998:  CLRF   29
199A:  CLRF   2A
199C:  CLRF   2B
199E:  CLRF   2C
19A0:  CLRF   2D
19A2:  MOVLW  01
19A4:  MOVWF  2E
19A6:  CLRF   2F
19A8:  CLRF   30
19AA:  CLRF   31
19AC:  CLRF   3D
19AE:  CLRF   41
19B0:  CLRF   40
19B2:  CLRF   43
19B4:  CLRF   42
19B6:  CLRF   45
19B8:  CLRF   44
19BA:  CLRF   x99
19BC:  CLRF   x98
19BE:  CLRF   x97
19C0:  CLRF   x96
19C2:  CLRF   x9D
19C4:  CLRF   x9C
19C6:  CLRF   x9B
19C8:  CLRF   x9A
19CA:  CLRF   xA1
19CC:  CLRF   xA0
19CE:  CLRF   x9F
19D0:  CLRF   x9E
19D2:  CLRF   xA5
19D4:  CLRF   xA4
19D6:  CLRF   xA3
19D8:  CLRF   xA2
19DA:  CLRF   xA9
19DC:  CLRF   xA8
19DE:  CLRF   xA7
19E0:  MOVLW  80
19E2:  MOVWF  xA6
19E4:  BSF    17.5
19E6:  BCF    17.6
19E8:  BCF    17.7
19EA:  BCF    xAA.0
19EC:  MOVF   FC1,W
19EE:  ANDLW  C0
19F0:  IORLW  0F
19F2:  MOVWF  FC1
19F4:  MOVLW  07
19F6:  MOVWF  FB4
19F8:  MOVLW  3E
19FA:  MOVWF  32
19FC:  MOVLW  20
19FE:  MOVWF  33
1A00:  MOVLW  5E
1A02:  MOVWF  34
1A04:  CLRF   35
1A06:  CLRF   36
1A08:  CLRF   37
1A0A:  CLRF   38
1A0C:  CLRF   39
1A0E:  CLRF   3A
1A10:  CLRF   3B
1A12:  CLRF   3C
1A14:  CLRF   46
1A16:  CLRF   47
1A18:  CLRF   48
1A1A:  CLRF   49
1A1C:  CLRF   4A
1A1E:  CLRF   4B
1A20:  CLRF   4C
1A22:  CLRF   4D
1A24:  CLRF   4E
1A26:  CLRF   4F
1A28:  CLRF   50
1A2A:  CLRF   51
1A2C:  CLRF   52
1A2E:  CLRF   53
1A30:  CLRF   54
1A32:  CLRF   55
1A34:  CLRF   56
1A36:  CLRF   57
1A38:  CLRF   58
1A3A:  CLRF   59
1A3C:  CLRF   5A
1A3E:  CLRF   5B
1A40:  CLRF   5C
1A42:  CLRF   5D
1A44:  CLRF   5E
1A46:  CLRF   5F
1A48:  CLRF   x60
1A4A:  CLRF   x61
1A4C:  CLRF   x62
1A4E:  CLRF   x63
1A50:  CLRF   x64
1A52:  CLRF   x65
1A54:  CLRF   x66
1A56:  CLRF   x67
1A58:  CLRF   x68
1A5A:  CLRF   x69
1A5C:  CLRF   x6A
1A5E:  CLRF   x6B
1A60:  CLRF   x6C
1A62:  CLRF   x6D
1A64:  CLRF   x6E
1A66:  CLRF   x6F
1A68:  CLRF   x70
1A6A:  CLRF   x71
1A6C:  CLRF   x72
1A6E:  CLRF   x73
1A70:  CLRF   x74
1A72:  CLRF   x75
1A74:  CLRF   x76
1A76:  CLRF   x77
1A78:  CLRF   x78
1A7A:  CLRF   x79
1A7C:  CLRF   x7A
1A7E:  CLRF   x7B
1A80:  CLRF   x7C
1A82:  CLRF   x7D
1A84:  CLRF   x7E
1A86:  CLRF   x7F
1A88:  CLRF   x80
1A8A:  CLRF   x81
1A8C:  CLRF   x82
1A8E:  CLRF   x83
1A90:  CLRF   x84
1A92:  CLRF   x85
1A94:  CLRF   x86
1A96:  CLRF   x87
1A98:  CLRF   x88
1A9A:  CLRF   x89
1A9C:  CLRF   x8A
1A9E:  CLRF   x8B
1AA0:  CLRF   x8C
1AA2:  CLRF   x8D
1AA4:  CLRF   x8E
1AA6:  CLRF   x8F
1AA8:  CLRF   x90
1AAA:  CLRF   x91
1AAC:  CLRF   x92
1AAE:  CLRF   x93
1AB0:  CLRF   x94
1AB2:  CLRF   x95
....................    lcd_init(); 
1AB4:  CALL   0774
....................    set_tris_a(0XFF); 
1AB8:  MOVLW  FF
1ABA:  MOVWF  F92
....................    set_tris_e(0XFF); 
1ABC:  MOVWF  F96
....................    set_tris_d(0X00); 
1ABE:  MOVLW  00
1AC0:  MOVWF  F95
....................    output_d(0); 
1AC2:  CLRF   F95
1AC4:  CLRF   F8C
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
1AC6:  MOVLW  85
1AC8:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
1ACA:  BSF    F9D.0
....................    setup_adc_ports(AN0); 
1ACC:  MOVF   FC1,W
1ACE:  ANDLW  C0
1AD0:  IORLW  0E
1AD2:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
1AD4:  BCF    FC0.0
1AD6:  BSF    FC0.1
1AD8:  BCF    FC0.2
1ADA:  BSF    FC0.7
1ADC:  BSF    FC2.0
....................    enable_interrupts(global); 
1ADE:  MOVLW  C0
1AE0:  IORWF  FF2,F
....................    sensores(0); 
1AE2:  CLRF   xB4
1AE4:  CALL   0800
....................    lcd_gotoxy(1,1); 
1AE8:  MOVLW  01
1AEA:  MOVWF  xC1
1AEC:  MOVWF  xC2
1AEE:  CALL   0852
....................    printf(lcd_putc," CABINA  DE   FLUJO "); 
1AF2:  MOVLW  A2
1AF4:  MOVWF  FF6
1AF6:  MOVLW  01
1AF8:  MOVWF  FF7
1AFA:  CALL   0912
....................    lcd_gotoxy(1,2); 
1AFE:  MOVLW  01
1B00:  MOVWF  xC1
1B02:  MOVLW  02
1B04:  MOVWF  xC2
1B06:  CALL   0852
....................    printf(lcd_putc," LAMINAR HORIZONTAL "); 
1B0A:  MOVLW  B8
1B0C:  MOVWF  FF6
1B0E:  MOVLW  01
1B10:  MOVWF  FF7
1B12:  CALL   0912
....................    lcd_gotoxy(1,3); 
1B16:  MOVLW  01
1B18:  MOVWF  xC1
1B1A:  MOVLW  03
1B1C:  MOVWF  xC2
1B1E:  CALL   0852
....................    printf(lcd_putc,"    JP INGLOBAL     "); 
1B22:  MOVLW  CE
1B24:  MOVWF  FF6
1B26:  MOVLW  01
1B28:  MOVWF  FF7
1B2A:  CALL   0912
....................    lcd_gotoxy(1,4); 
1B2E:  MOVLW  01
1B30:  MOVWF  xC1
1B32:  MOVLW  04
1B34:  MOVWF  xC2
1B36:  CALL   0852
....................    printf(lcd_putc,"   REF:  JPCFLH60   "); 
1B3A:  MOVLW  E4
1B3C:  MOVWF  FF6
1B3E:  MOVLW  01
1B40:  MOVWF  FF7
1B42:  CALL   0912
....................    delay_ms(2000); 
1B46:  MOVLW  08
1B48:  MOVWF  xAF
1B4A:  MOVLW  FA
1B4C:  MOVWF  xC6
1B4E:  CALL   06E2
1B52:  DECFSZ xAF,F
1B54:  BRA    1B4A
....................    printf(lcd_putc,"\f");    
1B56:  MOVLW  0C
1B58:  MOVWF  xC0
1B5A:  CALL   08B4
....................     
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0); 
1B5E:  MOVFF  FF2,AF
1B62:  BCF    FF2.7
1B64:  CLRF   FA9
1B66:  BCF    FA6.6
1B68:  BCF    FA6.7
1B6A:  BSF    FA6.0
1B6C:  MOVF   FA8,W
1B6E:  BTFSC  xAF.7
1B70:  BSF    FF2.7
1B72:  MOVWF  39
....................    delay_ms(20);  
1B74:  MOVLW  14
1B76:  MOVWF  xC6
1B78:  CALL   06E2
....................    contrasena[1]=read_eeprom(1); 
1B7C:  MOVFF  FF2,AF
1B80:  BCF    FF2.7
1B82:  MOVLW  01
1B84:  MOVWF  FA9
1B86:  BCF    FA6.6
1B88:  BCF    FA6.7
1B8A:  BSF    FA6.0
1B8C:  MOVF   FA8,W
1B8E:  BTFSC  xAF.7
1B90:  BSF    FF2.7
1B92:  MOVWF  3A
....................    delay_ms(20); 
1B94:  MOVLW  14
1B96:  MOVWF  xC6
1B98:  CALL   06E2
....................    contrasena[2]=read_eeprom(2); 
1B9C:  MOVFF  FF2,AF
1BA0:  BCF    FF2.7
1BA2:  MOVLW  02
1BA4:  MOVWF  FA9
1BA6:  BCF    FA6.6
1BA8:  BCF    FA6.7
1BAA:  BSF    FA6.0
1BAC:  MOVF   FA8,W
1BAE:  BTFSC  xAF.7
1BB0:  BSF    FF2.7
1BB2:  MOVWF  3B
....................    delay_ms(20);  
1BB4:  MOVLW  14
1BB6:  MOVWF  xC6
1BB8:  CALL   06E2
....................    contrasena[3]=read_eeprom(3); 
1BBC:  MOVFF  FF2,AF
1BC0:  BCF    FF2.7
1BC2:  MOVLW  03
1BC4:  MOVWF  FA9
1BC6:  BCF    FA6.6
1BC8:  BCF    FA6.7
1BCA:  BSF    FA6.0
1BCC:  MOVF   FA8,W
1BCE:  BTFSC  xAF.7
1BD0:  BSF    FF2.7
1BD2:  MOVWF  3C
....................    delay_ms(20); 
1BD4:  MOVLW  14
1BD6:  MOVWF  xC6
1BD8:  CALL   06E2
....................    estadoalarma=read_eeprom(5); 
1BDC:  MOVFF  FF2,AF
1BE0:  BCF    FF2.7
1BE2:  MOVLW  05
1BE4:  MOVWF  FA9
1BE6:  BCF    FA6.6
1BE8:  BCF    FA6.7
1BEA:  BSF    FA6.0
1BEC:  MOVF   FA8,W
1BEE:  BTFSC  xAF.7
1BF0:  BSF    FF2.7
1BF2:  MOVWF  01
1BF4:  BCF    17.4
1BF6:  BTFSC  01.0
1BF8:  BSF    17.4
....................    delay_ms(20); 
1BFA:  MOVLW  14
1BFC:  MOVWF  xC6
1BFE:  CALL   06E2
....................    tempo_minutos=read_eeprom(20); 
1C02:  MOVFF  FF2,AF
1C06:  BCF    FF2.7
1C08:  MOVLW  14
1C0A:  MOVWF  FA9
1C0C:  BCF    FA6.6
1C0E:  BCF    FA6.7
1C10:  BSF    FA6.0
1C12:  MOVF   FA8,W
1C14:  BTFSC  xAF.7
1C16:  BSF    FF2.7
1C18:  MOVWF  27
....................    delay_ms(20); 
1C1A:  MOVLW  14
1C1C:  MOVWF  xC6
1C1E:  CALL   06E2
....................    tempo_segundos=read_eeprom(30); 
1C22:  MOVFF  FF2,AF
1C26:  BCF    FF2.7
1C28:  MOVLW  1E
1C2A:  MOVWF  FA9
1C2C:  BCF    FA6.6
1C2E:  BCF    FA6.7
1C30:  BSF    FA6.0
1C32:  MOVF   FA8,W
1C34:  BTFSC  xAF.7
1C36:  BSF    FF2.7
1C38:  MOVWF  28
....................    delay_ms(20); 
1C3A:  MOVLW  14
1C3C:  MOVWF  xC6
1C3E:  CALL   06E2
....................    segundos=read_eeprom(50); 
1C42:  MOVFF  FF2,AF
1C46:  BCF    FF2.7
1C48:  MOVLW  32
1C4A:  MOVWF  FA9
1C4C:  BCF    FA6.6
1C4E:  BCF    FA6.7
1C50:  BSF    FA6.0
1C52:  MOVF   FA8,W
1C54:  BTFSC  xAF.7
1C56:  BSF    FF2.7
1C58:  MOVWF  21
....................    delay_ms(20); 
1C5A:  MOVLW  14
1C5C:  MOVWF  xC6
1C5E:  CALL   06E2
....................    minutos=read_eeprom(51); 
1C62:  MOVFF  FF2,AF
1C66:  BCF    FF2.7
1C68:  MOVLW  33
1C6A:  MOVWF  FA9
1C6C:  BCF    FA6.6
1C6E:  BCF    FA6.7
1C70:  BSF    FA6.0
1C72:  MOVF   FA8,W
1C74:  BTFSC  xAF.7
1C76:  BSF    FF2.7
1C78:  MOVWF  22
....................    delay_ms(20); 
1C7A:  MOVLW  14
1C7C:  MOVWF  xC6
1C7E:  CALL   06E2
....................    horasL=read_eeprom(52); 
1C82:  MOVFF  FF2,AF
1C86:  BCF    FF2.7
1C88:  MOVLW  34
1C8A:  MOVWF  FA9
1C8C:  BCF    FA6.6
1C8E:  BCF    FA6.7
1C90:  BSF    FA6.0
1C92:  MOVF   FA8,W
1C94:  BTFSC  xAF.7
1C96:  BSF    FF2.7
1C98:  MOVWF  23
....................    delay_ms(20); 
1C9A:  MOVLW  14
1C9C:  MOVWF  xC6
1C9E:  CALL   06E2
....................    horasH=read_eeprom(53); 
1CA2:  MOVFF  FF2,AF
1CA6:  BCF    FF2.7
1CA8:  MOVLW  35
1CAA:  MOVWF  FA9
1CAC:  BCF    FA6.6
1CAE:  BCF    FA6.7
1CB0:  BSF    FA6.0
1CB2:  MOVF   FA8,W
1CB4:  BTFSC  xAF.7
1CB6:  BSF    FF2.7
1CB8:  MOVWF  24
....................    delay_ms(20); 
1CBA:  MOVLW  14
1CBC:  MOVWF  xC6
1CBE:  CALL   06E2
....................    G_l=read_eeprom(60); 
1CC2:  MOVFF  FF2,AF
1CC6:  BCF    FF2.7
1CC8:  MOVLW  3C
1CCA:  MOVWF  FA9
1CCC:  BCF    FA6.6
1CCE:  BCF    FA6.7
1CD0:  BSF    FA6.0
1CD2:  MOVF   FA8,W
1CD4:  BTFSC  xAF.7
1CD6:  BSF    FF2.7
1CD8:  MOVWF  25
....................    delay_ms(20); 
1CDA:  MOVLW  14
1CDC:  MOVWF  xC6
1CDE:  CALL   06E2
....................    G_h=read_eeprom(61); 
1CE2:  MOVFF  FF2,AF
1CE6:  BCF    FF2.7
1CE8:  MOVLW  3D
1CEA:  MOVWF  FA9
1CEC:  BCF    FA6.6
1CEE:  BCF    FA6.7
1CF0:  BSF    FA6.0
1CF2:  MOVF   FA8,W
1CF4:  BTFSC  xAF.7
1CF6:  BSF    FF2.7
1CF8:  MOVWF  26
....................    delay_ms(20); 
1CFA:  MOVLW  14
1CFC:  MOVWF  xC6
1CFE:  CALL   06E2
....................    G16=make16(G_h,G_l); 
1D02:  MOVFF  26,43
1D06:  MOVFF  25,42
....................    G=G16; 
1D0A:  MOVFF  43,C8
1D0E:  MOVFF  42,C7
1D12:  CALL   07CA
1D16:  MOVFF  03,A9
1D1A:  MOVFF  02,A8
1D1E:  MOVFF  01,A7
1D22:  MOVFF  00,A6
....................    horas=make16(horasH,horasL); 
1D26:  MOVFF  24,41
1D2A:  MOVFF  23,40
....................    tempo_minutos_pro=tempo_minutos;tempo_segundos_pro=tempo_segundos; 
1D2E:  MOVFF  27,29
1D32:  MOVFF  28,2A
....................    Limita();    
1D36:  GOTO   09A8
....................    //segundos=read_eeprom(50);minutos=read_eeprom(51);horas=read_eeprom(52); 
....................  
....................    while(true){ 
....................  
.................... //------------Menu0------------------------------------------------------------------    
....................    if(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
1D3A:  MOVF   18,F
1D3C:  BTFSS  FD8.2
1D3E:  BRA    212E
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
1D40:  MOVLW  01
1D42:  MOVWF  xC1
1D44:  MOVWF  xC2
1D46:  CALL   0852
....................          printf(lcd_putc,"     Ingrese        "); 
1D4A:  MOVLW  FA
1D4C:  MOVWF  FF6
1D4E:  MOVLW  01
1D50:  MOVWF  FF7
1D52:  CALL   0912
....................          lcd_gotoxy(1,2); 
1D56:  MOVLW  01
1D58:  MOVWF  xC1
1D5A:  MOVLW  02
1D5C:  MOVWF  xC2
1D5E:  CALL   0852
....................          printf(lcd_putc,"    Contraseña      "); 
1D62:  MOVLW  10
1D64:  MOVWF  FF6
1D66:  MOVLW  02
1D68:  MOVWF  FF7
1D6A:  CALL   0912
....................          lcd_gotoxy(1,3); 
1D6E:  MOVLW  01
1D70:  MOVWF  xC1
1D72:  MOVLW  03
1D74:  MOVWF  xC2
1D76:  CALL   0852
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
1D7A:  MOVLW  26
1D7C:  MOVWF  FF6
1D7E:  MOVLW  02
1D80:  MOVWF  FF7
1D82:  MOVLW  0A
1D84:  MOVWF  xB3
1D86:  CALL   0A58
1D8A:  MOVFF  35,AF
1D8E:  MOVLW  1F
1D90:  MOVWF  xB0
1D92:  CALL   0A9E
1D96:  MOVFF  36,AF
1D9A:  MOVLW  1F
1D9C:  MOVWF  xB0
1D9E:  CALL   0A9E
1DA2:  MOVFF  37,AF
1DA6:  MOVLW  1F
1DA8:  MOVWF  xB0
1DAA:  CALL   0A9E
1DAE:  MOVFF  38,AF
1DB2:  MOVLW  1F
1DB4:  MOVWF  xB0
1DB6:  CALL   0A9E
1DBA:  MOVLW  20
1DBC:  MOVWF  xC0
1DBE:  CALL   08B4
1DC2:  MOVLW  20
1DC4:  MOVWF  xC0
1DC6:  CALL   08B4
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
1DCA:  MOVFF  1B,C1
1DCE:  MOVLW  04
1DD0:  MOVWF  xC2
1DD2:  CALL   0852
....................          lcd_putc(t[2]); 
1DD6:  MOVFF  34,C0
1DDA:  CALL   08B4
....................           
....................          if(unidad>11&&unidad<14){ 
1DDE:  MOVF   1B,W
1DE0:  SUBLW  0B
1DE2:  BC    1E02
1DE4:  MOVF   1B,W
1DE6:  SUBLW  0D
1DE8:  BNC   1E02
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
1DEA:  MOVLW  01
1DEC:  SUBWF  1B,W
1DEE:  MOVWF  xAF
1DF0:  MOVWF  xC1
1DF2:  MOVLW  04
1DF4:  MOVWF  xC2
1DF6:  CALL   0852
....................             lcd_putc(t[1]); 
1DFA:  MOVFF  33,C0
1DFE:  CALL   08B4
....................          } 
....................           
....................          Cambio=OFF; 
1E02:  BCF    17.5
....................       //} 
....................        
....................       if(UP){//Si oprime hacia arriba 
1E04:  BSF    F92.5
1E06:  BTFSS  F80.5
1E08:  BRA    1E3C
....................          delay_ms(20); 
1E0A:  MOVLW  14
1E0C:  MOVWF  xC6
1E0E:  CALL   06E2
....................          if(UP){ 
1E12:  BSF    F92.5
1E14:  BTFSS  F80.5
1E16:  BRA    1E3A
....................             if(Flanco == 0) { 
1E18:  BTFSC  16.3
1E1A:  BRA    1E3A
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
1E1C:  MOVLW  0B
1E1E:  SUBWF  1B,W
1E20:  CLRF   03
1E22:  ADDLW  35
1E24:  MOVWF  FE9
1E26:  MOVLW  00
1E28:  ADDWFC 03,W
1E2A:  MOVWF  FEA
1E2C:  INCF   FEF,F
1E2E:  BSF    16.3
1E30:  MOVLW  1E
1E32:  MOVWF  xC6
1E34:  CALL   06E2
1E38:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
1E3A:  BRA    1E3E
....................          Flanco = 0; 
1E3C:  BCF    16.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
1E3E:  BSF    F96.0
1E40:  BTFSS  F84.0
1E42:  BRA    1E76
....................          delay_ms(20); 
1E44:  MOVLW  14
1E46:  MOVWF  xC6
1E48:  CALL   06E2
....................          if(DOWN){ 
1E4C:  BSF    F96.0
1E4E:  BTFSS  F84.0
1E50:  BRA    1E74
....................             if(Flanco2 == 0) { 
1E52:  BTFSC  16.5
1E54:  BRA    1E74
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
1E56:  MOVLW  0B
1E58:  SUBWF  1B,W
1E5A:  CLRF   03
1E5C:  ADDLW  35
1E5E:  MOVWF  FE9
1E60:  MOVLW  00
1E62:  ADDWFC 03,W
1E64:  MOVWF  FEA
1E66:  DECF   FEF,F
1E68:  BSF    16.5
1E6A:  MOVLW  1E
1E6C:  MOVWF  xC6
1E6E:  CALL   06E2
1E72:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
1E74:  BRA    1E78
....................          Flanco2 = 0; 
1E76:  BCF    16.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
1E78:  BSF    F96.1
1E7A:  BTFSS  F84.1
1E7C:  BRA    1EA8
....................          delay_ms(20); 
1E7E:  MOVLW  14
1E80:  MOVWF  xC6
1E82:  CALL   06E2
....................          if(RIGHT){ 
1E86:  BSF    F96.1
1E88:  BTFSS  F84.1
1E8A:  BRA    1EA6
....................             if(Flanco1 == 0) { 
1E8C:  BTFSC  16.4
1E8E:  BRA    1EA6
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
1E90:  BSF    16.4
1E92:  INCF   1B,F
1E94:  MOVLW  1E
1E96:  MOVWF  xC6
1E98:  CALL   06E2
1E9C:  MOVLW  0C
1E9E:  MOVWF  xC0
1EA0:  CALL   08B4
1EA4:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
1EA6:  BRA    1EAA
....................          Flanco1 = 0; 
1EA8:  BCF    16.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
1EAA:  BSF    F96.2
1EAC:  BTFSS  F84.2
1EAE:  BRA    1EDA
....................          delay_ms(150); 
1EB0:  MOVLW  96
1EB2:  MOVWF  xC6
1EB4:  CALL   06E2
....................          if(IZQU){ 
1EB8:  BSF    F96.2
1EBA:  BTFSS  F84.2
1EBC:  BRA    1ED8
....................             if(Flanco3 == 0){ 
1EBE:  BTFSC  16.6
1EC0:  BRA    1ED8
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
1EC2:  BSF    16.6
1EC4:  DECF   1B,F
1EC6:  MOVLW  1E
1EC8:  MOVWF  xC6
1ECA:  CALL   06E2
1ECE:  MOVLW  0C
1ED0:  MOVWF  xC0
1ED2:  CALL   08B4
1ED6:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
1ED8:  BRA    1EDC
....................         Flanco3 = 0; 
1EDA:  BCF    16.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
1EDC:  MOVLW  0B
1EDE:  SUBWF  1B,W
1EE0:  CLRF   03
1EE2:  ADDLW  35
1EE4:  MOVWF  FE9
1EE6:  MOVLW  00
1EE8:  ADDWFC 03,W
1EEA:  MOVWF  FEA
1EEC:  BTFSC  FEF.7
1EEE:  BRA    1EF2
1EF0:  BRA    1F06
....................          clave[unidad-11]=9; 
1EF2:  MOVLW  0B
1EF4:  SUBWF  1B,W
1EF6:  CLRF   03
1EF8:  ADDLW  35
1EFA:  MOVWF  FE9
1EFC:  MOVLW  00
1EFE:  ADDWFC 03,W
1F00:  MOVWF  FEA
1F02:  MOVLW  09
1F04:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
1F06:  MOVLW  0B
1F08:  SUBWF  1B,W
1F0A:  CLRF   03
1F0C:  ADDLW  35
1F0E:  MOVWF  FE9
1F10:  MOVLW  00
1F12:  ADDWFC 03,W
1F14:  MOVWF  FEA
1F16:  BTFSC  FEF.7
1F18:  BRA    1F32
1F1A:  MOVF   FEF,W
1F1C:  SUBLW  09
1F1E:  BC    1F32
....................          clave[unidad-11]=0; 
1F20:  MOVLW  0B
1F22:  SUBWF  1B,W
1F24:  CLRF   03
1F26:  ADDLW  35
1F28:  MOVWF  FE9
1F2A:  MOVLW  00
1F2C:  ADDWFC 03,W
1F2E:  MOVWF  FEA
1F30:  CLRF   FEF
....................         
....................       if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
1F32:  MOVF   1B,W
1F34:  SUBLW  0A
1F36:  BNC   1F3C
....................          unidad=11; 
1F38:  MOVLW  0B
1F3A:  MOVWF  1B
....................              
....................       if(unidad>14){             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
1F3C:  MOVF   1B,W
1F3E:  SUBLW  0E
1F40:  BTFSC  FD8.0
1F42:  BRA    212E
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2){ // Si Ingresa clave para reset general del sistema. 
1F44:  MOVF   35,W
1F46:  SUBLW  03
1F48:  BNZ   2024
1F4A:  MOVF   36,W
1F4C:  SUBLW  08
1F4E:  BNZ   2024
1F50:  MOVF   37,W
1F52:  SUBLW  09
1F54:  BNZ   2024
1F56:  MOVF   38,W
1F58:  SUBLW  02
1F5A:  BNZ   2024
....................             write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
1F5C:  CLRF   FA9
1F5E:  CLRF   FA8
1F60:  BCF    FA6.6
1F62:  BCF    FA6.7
1F64:  BSF    FA6.2
1F66:  MOVF   FF2,W
1F68:  MOVWF  00
1F6A:  BCF    FF2.7
1F6C:  MOVLB  F
1F6E:  MOVLW  55
1F70:  MOVWF  FA7
1F72:  MOVLW  AA
1F74:  MOVWF  FA7
1F76:  BSF    FA6.1
1F78:  BTFSC  FA6.1
1F7A:  BRA    1F78
1F7C:  BCF    FA6.2
1F7E:  MOVF   00,W
1F80:  IORWF  FF2,F
1F82:  MOVLW  14
1F84:  MOVLB  0
1F86:  MOVWF  xC6
1F88:  CALL   06E2
1F8C:  MOVLW  01
1F8E:  MOVWF  FA9
1F90:  CLRF   FA8
1F92:  BCF    FA6.6
1F94:  BCF    FA6.7
1F96:  BSF    FA6.2
1F98:  MOVF   FF2,W
1F9A:  MOVWF  00
1F9C:  BCF    FF2.7
1F9E:  MOVLB  F
1FA0:  MOVLW  55
1FA2:  MOVWF  FA7
1FA4:  MOVLW  AA
1FA6:  MOVWF  FA7
1FA8:  BSF    FA6.1
1FAA:  BTFSC  FA6.1
1FAC:  BRA    1FAA
1FAE:  BCF    FA6.2
1FB0:  MOVF   00,W
1FB2:  IORWF  FF2,F
1FB4:  MOVLW  14
1FB6:  MOVLB  0
1FB8:  MOVWF  xC6
1FBA:  CALL   06E2
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
1FBE:  MOVLW  02
1FC0:  MOVWF  FA9
1FC2:  CLRF   FA8
1FC4:  BCF    FA6.6
1FC6:  BCF    FA6.7
1FC8:  BSF    FA6.2
1FCA:  MOVF   FF2,W
1FCC:  MOVWF  00
1FCE:  BCF    FF2.7
1FD0:  MOVLB  F
1FD2:  MOVLW  55
1FD4:  MOVWF  FA7
1FD6:  MOVLW  AA
1FD8:  MOVWF  FA7
1FDA:  BSF    FA6.1
1FDC:  BTFSC  FA6.1
1FDE:  BRA    1FDC
1FE0:  BCF    FA6.2
1FE2:  MOVF   00,W
1FE4:  IORWF  FF2,F
1FE6:  MOVLW  14
1FE8:  MOVLB  0
1FEA:  MOVWF  xC6
1FEC:  CALL   06E2
1FF0:  MOVLW  03
1FF2:  MOVWF  FA9
1FF4:  CLRF   FA8
1FF6:  BCF    FA6.6
1FF8:  BCF    FA6.7
1FFA:  BSF    FA6.2
1FFC:  MOVF   FF2,W
1FFE:  MOVWF  00
2000:  BCF    FF2.7
2002:  MOVLB  F
2004:  MOVLW  55
2006:  MOVWF  FA7
2008:  MOVLW  AA
200A:  MOVWF  FA7
200C:  BSF    FA6.1
200E:  BTFSC  FA6.1
2010:  BRA    200E
2012:  BCF    FA6.2
2014:  MOVF   00,W
2016:  IORWF  FF2,F
2018:  MOVLW  14
201A:  MOVLB  0
201C:  MOVWF  xC6
201E:  CALL   06E2
....................              reset_cpu(); 
2022:  RESET
....................          } 
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]){ // Si las claves coinciden pasa a Menu Principal. 
2024:  MOVF   39,W
2026:  SUBWF  35,W
2028:  BNZ   20BE
202A:  MOVF   3A,W
202C:  SUBWF  36,W
202E:  BNZ   20BE
2030:  MOVF   3B,W
2032:  SUBWF  37,W
2034:  BNZ   20BE
2036:  MOVF   3C,W
2038:  SUBWF  38,W
203A:  BNZ   20BE
....................             lcd_gotoxy(1,1); 
203C:  MOVLW  01
203E:  MOVWF  xC1
2040:  MOVWF  xC2
2042:  CALL   0852
....................             printf(lcd_putc,"                   "); 
2046:  MOVLW  3C
2048:  MOVWF  FF6
204A:  MOVLW  02
204C:  MOVWF  FF7
204E:  CALL   0912
....................             lcd_gotoxy(1,2); 
2052:  MOVLW  01
2054:  MOVWF  xC1
2056:  MOVLW  02
2058:  MOVWF  xC2
205A:  CALL   0852
....................             printf(lcd_putc,"     Contraseña    "); 
205E:  MOVLW  50
2060:  MOVWF  FF6
2062:  MOVLW  02
2064:  MOVWF  FF7
2066:  CALL   0912
....................             lcd_gotoxy(1,3); 
206A:  MOVLW  01
206C:  MOVWF  xC1
206E:  MOVLW  03
2070:  MOVWF  xC2
2072:  CALL   0852
....................             printf(lcd_putc,"      Correcta     "); 
2076:  MOVLW  64
2078:  MOVWF  FF6
207A:  MOVLW  02
207C:  MOVWF  FF7
207E:  CALL   0912
....................             lcd_gotoxy(1,4); 
2082:  MOVLW  01
2084:  MOVWF  xC1
2086:  MOVLW  04
2088:  MOVWF  xC2
208A:  CALL   0852
....................             printf(lcd_putc,"                   "); 
208E:  MOVLW  78
2090:  MOVWF  FF6
2092:  MOVLW  02
2094:  MOVWF  FF7
2096:  CALL   0912
....................             delay_ms(1000);Menu=50;unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
209A:  MOVLW  04
209C:  MOVWF  xAF
209E:  MOVLW  FA
20A0:  MOVWF  xC6
20A2:  CALL   06E2
20A6:  DECFSZ xAF,F
20A8:  BRA    209E
20AA:  MOVLW  32
20AC:  MOVWF  18
20AE:  MOVLW  0B
20B0:  MOVWF  1B
20B2:  MOVLW  0C
20B4:  MOVWF  xC0
20B6:  CALL   08B4
20BA:  BSF    17.5
....................          } 
....................          else{                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
20BC:  BRA    212E
....................             lcd_gotoxy(1,1); 
20BE:  MOVLW  01
20C0:  MOVWF  xC1
20C2:  MOVWF  xC2
20C4:  CALL   0852
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
20C8:  MOVLW  01
20CA:  MOVWF  xC1
20CC:  MOVLW  02
20CE:  MOVWF  xC2
20D0:  CALL   0852
....................             printf(lcd_putc,"     Contraseña    "); 
20D4:  MOVLW  8C
20D6:  MOVWF  FF6
20D8:  MOVLW  02
20DA:  MOVWF  FF7
20DC:  CALL   0912
....................             lcd_gotoxy(1,3); 
20E0:  MOVLW  01
20E2:  MOVWF  xC1
20E4:  MOVLW  03
20E6:  MOVWF  xC2
20E8:  CALL   0852
....................             printf(lcd_putc,"     Incorrecta    "); 
20EC:  MOVLW  A0
20EE:  MOVWF  FF6
20F0:  MOVLW  02
20F2:  MOVWF  FF7
20F4:  CALL   0912
....................             lcd_gotoxy(1,4); 
20F8:  MOVLW  01
20FA:  MOVWF  xC1
20FC:  MOVLW  04
20FE:  MOVWF  xC2
2100:  CALL   0852
....................             printf(lcd_putc,"                   "); 
2104:  MOVLW  B4
2106:  MOVWF  FF6
2108:  MOVLW  02
210A:  MOVWF  FF7
210C:  CALL   0912
....................             delay_ms(1000);unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
2110:  MOVLW  04
2112:  MOVWF  xAF
2114:  MOVLW  FA
2116:  MOVWF  xC6
2118:  CALL   06E2
211C:  DECFSZ xAF,F
211E:  BRA    2114
2120:  MOVLW  0B
2122:  MOVWF  1B
2124:  MOVLW  0C
2126:  MOVWF  xC0
2128:  CALL   08B4
212C:  BSF    17.5
....................          } 
....................       } 
....................    } 
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
212E:  DECFSZ 18,W
2130:  BRA    2368
....................       EliminaRuido(); 
2132:  CALL   0004
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
2136:  MOVLW  01
2138:  MOVWF  xC1
213A:  MOVWF  xC2
213C:  CALL   0852
....................          printf(lcd_putc,"---MENU PRINCIPAL---"); 
2140:  MOVLW  C8
2142:  MOVWF  FF6
2144:  MOVLW  02
2146:  MOVWF  FF7
2148:  CALL   0912
....................          mensajes(1+paso,2); 
214C:  MOVLW  01
214E:  ADDWF  31,W
2150:  MOVWF  xAF
2152:  MOVWF  xB0
2154:  MOVLW  02
2156:  MOVWF  xB1
2158:  CALL   0B66
....................          mensajes(2+paso,3); 
215C:  MOVLW  02
215E:  ADDWF  31,W
2160:  MOVWF  xAF
2162:  MOVWF  xB0
2164:  MOVLW  03
2166:  MOVWF  xB1
2168:  CALL   0B66
....................          mensajes(3+paso,4); 
216C:  MOVLW  03
216E:  ADDWF  31,W
2170:  MOVWF  xAF
2172:  MOVWF  xB0
2174:  MOVLW  04
2176:  MOVWF  xB1
2178:  CALL   0B66
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
217C:  MOVLW  01
217E:  MOVWF  xC1
2180:  MOVFF  1C,C2
2184:  CALL   0852
....................         lcd_putc(t[0]); 
2188:  MOVFF  32,C0
218C:  CALL   08B4
....................  
....................         if(Flecha==2) 
2190:  MOVF   1C,W
2192:  SUBLW  02
2194:  BNZ   21BE
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
2196:  MOVLW  01
2198:  MOVWF  xC1
219A:  MOVLW  04
219C:  MOVWF  xC2
219E:  CALL   0852
....................             lcd_putc(t[1]); 
21A2:  MOVFF  33,C0
21A6:  CALL   08B4
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
21AA:  MOVLW  01
21AC:  MOVWF  xC1
21AE:  MOVLW  03
21B0:  MOVWF  xC2
21B2:  CALL   0852
....................             lcd_putc(t[1]); 
21B6:  MOVFF  33,C0
21BA:  CALL   08B4
....................           } 
....................          
....................         if(Flecha==4) 
21BE:  MOVF   1C,W
21C0:  SUBLW  04
21C2:  BNZ   21EC
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
21C4:  MOVLW  01
21C6:  MOVWF  xC1
21C8:  MOVLW  02
21CA:  MOVWF  xC2
21CC:  CALL   0852
....................             lcd_putc(t[1]); 
21D0:  MOVFF  33,C0
21D4:  CALL   08B4
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
21D8:  MOVLW  01
21DA:  MOVWF  xC1
21DC:  MOVLW  03
21DE:  MOVWF  xC2
21E0:  CALL   0852
....................             lcd_putc(t[1]); 
21E4:  MOVFF  33,C0
21E8:  CALL   08B4
....................           } 
....................          
....................         if(Flecha==3) 
21EC:  MOVF   1C,W
21EE:  SUBLW  03
21F0:  BNZ   221A
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
21F2:  MOVLW  01
21F4:  MOVWF  xC1
21F6:  MOVLW  04
21F8:  MOVWF  xC2
21FA:  CALL   0852
....................             lcd_putc(t[1]); 
21FE:  MOVFF  33,C0
2202:  CALL   08B4
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
2206:  MOVLW  01
2208:  MOVWF  xC1
220A:  MOVLW  02
220C:  MOVWF  xC2
220E:  CALL   0852
....................             lcd_putc(t[1]); 
2212:  MOVFF  33,C0
2216:  CALL   08B4
....................           } 
....................          Cambio=OFF; 
221A:  BCF    17.5
....................      // } 
....................          
....................       if(UP){//Si oprime hacia arriba 
221C:  BSF    F92.5
221E:  BTFSS  F80.5
2220:  BRA    224C
....................          delay_ms(20); 
2222:  MOVLW  14
2224:  MOVWF  xC6
2226:  CALL   06E2
....................          if(UP){ 
222A:  BSF    F92.5
222C:  BTFSS  F80.5
222E:  BRA    224A
....................             if(Flanco == 0){ 
2230:  BTFSC  16.3
2232:  BRA    224A
....................                Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30);Cambio=ON; 
2234:  DECF   1E,F
2236:  DECF   1C,F
2238:  MOVLW  01
223A:  ADDWF  1C,W
223C:  MOVWF  1D
223E:  BSF    16.3
2240:  MOVLW  1E
2242:  MOVWF  xC6
2244:  CALL   06E2
2248:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
224A:  BRA    224E
....................          Flanco = 0; 
224C:  BCF    16.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
224E:  BSF    F96.0
2250:  BTFSS  F84.0
2252:  BRA    227E
....................          delay_ms(20); 
2254:  MOVLW  14
2256:  MOVWF  xC6
2258:  CALL   06E2
....................          if(DOWN){ 
225C:  BSF    F96.0
225E:  BTFSS  F84.0
2260:  BRA    227C
....................             if(Flanco2 == 0){ 
2262:  BTFSC  16.5
2264:  BRA    227C
....................                Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30);Cambio=ON; 
2266:  INCF   1E,F
2268:  INCF   1C,F
226A:  MOVLW  01
226C:  SUBWF  1C,W
226E:  MOVWF  1D
2270:  BSF    16.5
2272:  MOVLW  1E
2274:  MOVWF  xC6
2276:  CALL   06E2
227A:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
227C:  BRA    2280
....................          Flanco2 = 0; 
227E:  BCF    16.5
....................       } 
....................     
....................          
....................       if(Flecha2>nMenuH){ 
2280:  MOVF   1E,W
2282:  SUBWF  20,W
2284:  BC    2296
....................          paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4; 
2286:  INCF   31,F
2288:  MOVFF  1E,20
228C:  MOVLW  02
228E:  SUBWF  20,W
2290:  MOVWF  1F
2292:  MOVLW  04
2294:  MOVWF  1C
....................       } 
....................          
....................       if(Flecha2<nMenuL){ 
2296:  MOVF   1F,W
2298:  SUBWF  1E,W
229A:  BC    22AC
....................          paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2; 
229C:  DECF   31,F
229E:  MOVFF  1E,1F
22A2:  MOVLW  02
22A4:  ADDWF  1F,W
22A6:  MOVWF  20
22A8:  MOVLW  02
22AA:  MOVWF  1C
....................       } 
....................          
....................       if(Flecha2>n_opcionH){ 
22AC:  MOVF   1E,W
22AE:  SUBWF  19,W
22B0:  BC    22C4
....................          Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2; 
22B2:  MOVFF  1A,1E
22B6:  MOVLW  02
22B8:  MOVWF  1C
22BA:  CLRF   31
22BC:  MOVFF  1E,1F
22C0:  ADDWF  1F,W
22C2:  MOVWF  20
....................       } 
....................          
....................       if(Flecha2<n_opcionL){ 
22C4:  MOVF   1A,W
22C6:  SUBWF  1E,W
22C8:  BC    22E0
....................          Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2; 
22CA:  MOVFF  19,1E
22CE:  MOVLW  04
22D0:  MOVWF  1C
22D2:  SUBWF  19,W
22D4:  MOVWF  31
22D6:  MOVFF  1E,20
22DA:  MOVLW  02
22DC:  SUBWF  20,W
22DE:  MOVWF  1F
....................       } 
....................          
....................       if(paso<0) 
22E0:  BTFSC  31.7
22E2:  BRA    22E6
22E4:  BRA    22E8
....................          paso=0; 
22E6:  CLRF   31
....................           
....................       if(RIGHT){// Si oprime derecha 
22E8:  BSF    F96.1
22EA:  BTFSS  F84.1
22EC:  BRA    2334
....................          delay_ms(20); 
22EE:  MOVLW  14
22F0:  MOVWF  xC6
22F2:  CALL   06E2
....................          if(RIGHT){ 
22F6:  BSF    F96.1
22F8:  BTFSS  F84.1
22FA:  BRA    2330
....................             if(Flanco1 == 0){ 
22FC:  BTFSC  16.4
22FE:  BRA    2330
....................                Flanco1 = 1;Menu=Flecha2;Flecha=3;delay_ms(300);printf(lcd_putc,"\f"); 
2300:  BSF    16.4
2302:  MOVFF  1E,18
2306:  MOVLW  03
2308:  MOVWF  1C
230A:  MOVLW  02
230C:  MOVWF  xAF
230E:  MOVLW  96
2310:  MOVWF  xC6
2312:  CALL   06E2
2316:  DECFSZ xAF,F
2318:  BRA    230E
231A:  MOVLW  0C
231C:  MOVWF  xC0
231E:  CALL   08B4
....................                if(Menu==6){ 
2322:  MOVF   18,W
2324:  SUBLW  06
2326:  BNZ   2330
....................                   clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
2328:  CLRF   35
232A:  CLRF   36
232C:  CLRF   37
232E:  CLRF   38
....................                } 
....................             } 
....................          } 
....................          Cambio=ON; 
2330:  BSF    17.5
....................       }else{ 
2332:  BRA    2336
....................         Flanco1 = 0; 
2334:  BCF    16.4
....................       } 
....................              
....................       if(IZQU){ 
2336:  BSF    F96.2
2338:  BTFSS  F84.2
233A:  BRA    2368
....................          delay_ms(20); 
233C:  MOVLW  14
233E:  MOVWF  xC6
2340:  CALL   06E2
....................          if(IZQU){ 
2344:  BSF    F96.2
2346:  BTFSS  F84.2
2348:  BRA    2368
....................             delay_ms(500);Menu=50;printf(lcd_putc,"\f");Cambio=ON; 
234A:  MOVLW  02
234C:  MOVWF  xAF
234E:  MOVLW  FA
2350:  MOVWF  xC6
2352:  CALL   06E2
2356:  DECFSZ xAF,F
2358:  BRA    234E
235A:  MOVLW  32
235C:  MOVWF  18
235E:  MOVLW  0C
2360:  MOVWF  xC0
2362:  CALL   08B4
2366:  BSF    17.5
....................          } 
....................       } 
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de tiempo de trabajo de Luz UV    
2368:  MOVF   18,W
236A:  SUBLW  02
236C:  BTFSS  FD8.2
236E:  BRA    25C4
....................    EliminaRuido(); 
2370:  CALL   0004
....................    //if(Cambio){ 
....................       lcd_gotoxy(1,1); 
2374:  MOVLW  01
2376:  MOVWF  xC1
2378:  MOVWF  xC2
237A:  CALL   0852
....................       printf(lcd_putc,"    Temporizador     "); 
237E:  MOVLW  DE
2380:  MOVWF  FF6
2382:  MOVLW  02
2384:  MOVWF  FF7
2386:  CALL   0912
....................       lcd_gotoxy(1,2); 
238A:  MOVLW  01
238C:  MOVWF  xC1
238E:  MOVLW  02
2390:  MOVWF  xC2
2392:  CALL   0852
....................       printf(lcd_putc,"       Luz UV        "); 
2396:  MOVLW  F4
2398:  MOVWF  FF6
239A:  MOVLW  02
239C:  MOVWF  FF7
239E:  CALL   0912
....................       lcd_gotoxy(6,3); 
23A2:  MOVLW  06
23A4:  MOVWF  xC1
23A6:  MOVLW  03
23A8:  MOVWF  xC2
23AA:  CALL   0852
....................       printf(lcd_putc,"%03u:%02u (M:S)  ",tempo_minutos_pro,tempo_segundos_pro);  
23AE:  MOVFF  29,AF
23B2:  MOVLW  03
23B4:  MOVWF  xB0
23B6:  CALL   0C04
23BA:  MOVLW  3A
23BC:  MOVWF  xC0
23BE:  CALL   08B4
23C2:  MOVFF  2A,AF
23C6:  MOVLW  01
23C8:  MOVWF  xB0
23CA:  CALL   0C04
23CE:  MOVLW  13
23D0:  MOVWF  FF6
23D2:  MOVLW  03
23D4:  MOVWF  FF7
23D6:  MOVLW  08
23D8:  MOVWF  xB3
23DA:  CALL   0A58
....................        
....................       lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
23DE:  MOVLW  06
23E0:  ADDWF  2E,W
23E2:  MOVWF  xAF
23E4:  MOVWF  xC1
23E6:  MOVLW  04
23E8:  MOVWF  xC2
23EA:  CALL   0852
....................       lcd_putc(t[2]); 
23EE:  MOVFF  34,C0
23F2:  CALL   08B4
....................        
....................       Cambio=OFF; 
23F6:  BCF    17.5
.................... //   } 
....................     
....................    if(UP) 
23F8:  BSF    F92.5
23FA:  BTFSS  F80.5
23FC:  BRA    244A
....................    { 
....................       delay_ms(20); 
23FE:  MOVLW  14
2400:  MOVWF  xC6
2402:  CALL   06E2
....................       if(UP){ 
2406:  BSF    F92.5
2408:  BTFSS  F80.5
240A:  BRA    244A
....................          if(unidad2==1) 
240C:  DECFSZ 2E,W
240E:  BRA    242A
....................          { 
....................             if(tempo_minutos_pro<240) 
2410:  MOVF   29,W
2412:  SUBLW  EF
2414:  BNC   242A
....................             { 
....................                tempo_minutos_pro+=5;delay_ms(300); 
2416:  MOVLW  05
2418:  ADDWF  29,F
241A:  MOVLW  02
241C:  MOVWF  xAF
241E:  MOVLW  96
2420:  MOVWF  xC6
2422:  CALL   06E2
2426:  DECFSZ xAF,F
2428:  BRA    241E
....................             } 
....................          } 
....................           
....................          if(unidad2==4) 
242A:  MOVF   2E,W
242C:  SUBLW  04
242E:  BNZ   2448
....................          { 
....................             if(tempo_segundos_pro<59) 
2430:  MOVF   2A,W
2432:  SUBLW  3A
2434:  BNC   2448
....................             { 
....................                tempo_segundos_pro++;delay_ms(300); 
2436:  INCF   2A,F
2438:  MOVLW  02
243A:  MOVWF  xAF
243C:  MOVLW  96
243E:  MOVWF  xC6
2440:  CALL   06E2
2444:  DECFSZ xAF,F
2446:  BRA    243C
....................             } 
....................          }      
....................       Cambio=ON; 
2448:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(DOWN) 
244A:  BSF    F96.0
244C:  BTFSS  F84.0
244E:  BRA    2498
....................    { 
....................       delay_ms(20); 
2450:  MOVLW  14
2452:  MOVWF  xC6
2454:  CALL   06E2
....................       if(DOWN){ 
2458:  BSF    F96.0
245A:  BTFSS  F84.0
245C:  BRA    2498
....................          if(unidad2==1) 
245E:  DECFSZ 2E,W
2460:  BRA    247A
....................          { 
....................             if(tempo_minutos_pro>0) 
2462:  MOVF   29,F
2464:  BZ    247A
....................             { 
....................                tempo_minutos_pro-=5;delay_ms(300); 
2466:  MOVLW  05
2468:  SUBWF  29,F
246A:  MOVLW  02
246C:  MOVWF  xAF
246E:  MOVLW  96
2470:  MOVWF  xC6
2472:  CALL   06E2
2476:  DECFSZ xAF,F
2478:  BRA    246E
....................             }  
....................          } 
....................           
....................          if(unidad2==4) 
247A:  MOVF   2E,W
247C:  SUBLW  04
247E:  BNZ   2496
....................          { 
....................             if(tempo_segundos_pro>0) 
2480:  MOVF   2A,F
2482:  BZ    2496
....................             { 
....................                tempo_segundos_pro--;delay_ms(300); 
2484:  DECF   2A,F
2486:  MOVLW  02
2488:  MOVWF  xAF
248A:  MOVLW  96
248C:  MOVWF  xC6
248E:  CALL   06E2
2492:  DECFSZ xAF,F
2494:  BRA    248A
....................             }    
....................          } 
....................       Cambio=ON; 
2496:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(RIGHT) 
2498:  BSF    F96.1
249A:  BTFSS  F84.1
249C:  BRA    24DA
....................    { 
....................       delay_ms(20); 
249E:  MOVLW  14
24A0:  MOVWF  xC6
24A2:  CALL   06E2
....................       if(RIGHT){ 
24A6:  BSF    F96.1
24A8:  BTFSS  F84.1
24AA:  BRA    24DA
....................          if(unidad2==1) 
24AC:  DECFSZ 2E,W
24AE:  BRA    24B6
....................          { 
....................             unidad2=4; 
24B0:  MOVLW  04
24B2:  MOVWF  2E
....................          } 
....................          else 
24B4:  BRA    24C0
....................          { 
....................             if(unidad2==4) 
24B6:  MOVF   2E,W
24B8:  SUBLW  04
24BA:  BNZ   24C0
....................             { 
....................                unidad2=1; 
24BC:  MOVLW  01
24BE:  MOVWF  2E
....................             } 
....................          } 
....................       delay_ms(500); 
24C0:  MOVLW  02
24C2:  MOVWF  xAF
24C4:  MOVLW  FA
24C6:  MOVWF  xC6
24C8:  CALL   06E2
24CC:  DECFSZ xAF,F
24CE:  BRA    24C4
....................       printf(lcd_putc,"\f"); 
24D0:  MOVLW  0C
24D2:  MOVWF  xC0
24D4:  CALL   08B4
....................       Cambio=ON; 
24D8:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(IZQU) 
24DA:  BSF    F96.2
24DC:  BTFSS  F84.2
24DE:  BRA    25C4
....................    { 
....................       if(IZQU){ 
24E0:  BSF    F96.2
24E2:  BTFSS  F84.2
24E4:  BRA    25C4
....................          delay_ms(200); 
24E6:  MOVLW  C8
24E8:  MOVWF  xC6
24EA:  CALL   06E2
....................          printf(lcd_putc,"\f"); 
24EE:  MOVLW  0C
24F0:  MOVWF  xC0
24F2:  CALL   08B4
....................          lcd_gotoxy(1,2); 
24F6:  MOVLW  01
24F8:  MOVWF  xC1
24FA:  MOVLW  02
24FC:  MOVWF  xC2
24FE:  CALL   0852
....................          printf(lcd_putc,"Tiempo Almacenado"); 
2502:  MOVLW  1C
2504:  MOVWF  FF6
2506:  MOVLW  03
2508:  MOVWF  FF7
250A:  CALL   0912
....................          lcd_gotoxy(1,3); 
250E:  MOVLW  01
2510:  MOVWF  xC1
2512:  MOVLW  03
2514:  MOVWF  xC2
2516:  CALL   0852
....................          printf(lcd_putc,"  Correctamente  "); 
251A:  MOVLW  2E
251C:  MOVWF  FF6
251E:  MOVLW  03
2520:  MOVWF  FF7
2522:  CALL   0912
....................          write_eeprom(20,tempo_minutos_pro); 
2526:  MOVLW  14
2528:  MOVWF  FA9
252A:  MOVFF  29,FA8
252E:  BCF    FA6.6
2530:  BCF    FA6.7
2532:  BSF    FA6.2
2534:  MOVF   FF2,W
2536:  MOVWF  00
2538:  BCF    FF2.7
253A:  MOVLB  F
253C:  MOVLW  55
253E:  MOVWF  FA7
2540:  MOVLW  AA
2542:  MOVWF  FA7
2544:  BSF    FA6.1
2546:  BTFSC  FA6.1
2548:  BRA    2546
254A:  BCF    FA6.2
254C:  MOVF   00,W
254E:  IORWF  FF2,F
....................          delay_ms(20); 
2550:  MOVLW  14
2552:  MOVLB  0
2554:  MOVWF  xC6
2556:  CALL   06E2
....................          write_eeprom(30,tempo_segundos_pro); 
255A:  MOVLW  1E
255C:  MOVWF  FA9
255E:  MOVFF  2A,FA8
2562:  BCF    FA6.6
2564:  BCF    FA6.7
2566:  BSF    FA6.2
2568:  MOVF   FF2,W
256A:  MOVWF  00
256C:  BCF    FF2.7
256E:  MOVLB  F
2570:  MOVLW  55
2572:  MOVWF  FA7
2574:  MOVLW  AA
2576:  MOVWF  FA7
2578:  BSF    FA6.1
257A:  BTFSC  FA6.1
257C:  BRA    257A
257E:  BCF    FA6.2
2580:  MOVF   00,W
2582:  IORWF  FF2,F
....................          delay_ms(20); 
2584:  MOVLW  14
2586:  MOVLB  0
2588:  MOVWF  xC6
258A:  CALL   06E2
....................          tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
258E:  MOVFF  29,27
2592:  MOVFF  2A,28
....................          delay_ms(700); 
2596:  MOVLW  04
2598:  MOVWF  xAF
259A:  MOVLW  AF
259C:  MOVWF  xC6
259E:  CALL   06E2
25A2:  DECFSZ xAF,F
25A4:  BRA    259A
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
25A6:  MOVLW  1E
25A8:  MOVWF  xC6
25AA:  CALL   06E2
25AE:  MOVLW  01
25B0:  MOVWF  18
25B2:  CLRF   31
25B4:  MOVLW  02
25B6:  MOVWF  1C
25B8:  MOVWF  1E
25BA:  MOVLW  0C
25BC:  MOVWF  xC0
25BE:  CALL   08B4
....................          Cambio=ON; 
25C2:  BSF    17.5
....................       } 
....................    }   
....................   } 
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................  
.................... //----------------Menu3--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu para Cambio de Contraseña 
25C4:  MOVF   18,W
25C6:  SUBLW  03
25C8:  BTFSS  FD8.2
25CA:  BRA    2916
....................       EliminaRuido(); 
25CC:  CALL   0004
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
25D0:  MOVLW  01
25D2:  MOVWF  xC1
25D4:  MOVWF  xC2
25D6:  CALL   0852
....................          printf(lcd_putc,"     Ingrese        "); 
25DA:  MOVLW  40
25DC:  MOVWF  FF6
25DE:  MOVLW  03
25E0:  MOVWF  FF7
25E2:  CALL   0912
....................          lcd_gotoxy(1,2); 
25E6:  MOVLW  01
25E8:  MOVWF  xC1
25EA:  MOVLW  02
25EC:  MOVWF  xC2
25EE:  CALL   0852
....................          printf(lcd_putc,"    Contraseña      "); 
25F2:  MOVLW  56
25F4:  MOVWF  FF6
25F6:  MOVLW  03
25F8:  MOVWF  FF7
25FA:  CALL   0912
....................          lcd_gotoxy(1,3); 
25FE:  MOVLW  01
2600:  MOVWF  xC1
2602:  MOVLW  03
2604:  MOVWF  xC2
2606:  CALL   0852
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
260A:  MOVLW  6C
260C:  MOVWF  FF6
260E:  MOVLW  03
2610:  MOVWF  FF7
2612:  MOVLW  0A
2614:  MOVWF  xB3
2616:  CALL   0A58
261A:  MOVFF  35,AF
261E:  MOVLW  1F
2620:  MOVWF  xB0
2622:  CALL   0A9E
2626:  MOVFF  36,AF
262A:  MOVLW  1F
262C:  MOVWF  xB0
262E:  CALL   0A9E
2632:  MOVFF  37,AF
2636:  MOVLW  1F
2638:  MOVWF  xB0
263A:  CALL   0A9E
263E:  MOVFF  38,AF
2642:  MOVLW  1F
2644:  MOVWF  xB0
2646:  CALL   0A9E
264A:  MOVLW  20
264C:  MOVWF  xC0
264E:  CALL   08B4
2652:  MOVLW  20
2654:  MOVWF  xC0
2656:  CALL   08B4
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
265A:  MOVFF  1B,C1
265E:  MOVLW  04
2660:  MOVWF  xC2
2662:  CALL   0852
....................          lcd_putc(t[2]); 
2666:  MOVFF  34,C0
266A:  CALL   08B4
....................           
....................          if(unidad>11&&unidad<14){ 
266E:  MOVF   1B,W
2670:  SUBLW  0B
2672:  BC    2692
2674:  MOVF   1B,W
2676:  SUBLW  0D
2678:  BNC   2692
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
267A:  MOVLW  01
267C:  SUBWF  1B,W
267E:  MOVWF  xAF
2680:  MOVWF  xC1
2682:  MOVLW  04
2684:  MOVWF  xC2
2686:  CALL   0852
....................             lcd_putc(t[1]); 
268A:  MOVFF  33,C0
268E:  CALL   08B4
....................          } 
....................           
....................          Cambio=OFF; 
2692:  BCF    17.5
....................       //} 
....................        
....................       if(UP){//Si oprime hacia arriba 
2694:  BSF    F92.5
2696:  BTFSS  F80.5
2698:  BRA    26CC
....................          delay_ms(20); 
269A:  MOVLW  14
269C:  MOVWF  xC6
269E:  CALL   06E2
....................          if(UP){ 
26A2:  BSF    F92.5
26A4:  BTFSS  F80.5
26A6:  BRA    26CA
....................             if(Flanco == 0) { 
26A8:  BTFSC  16.3
26AA:  BRA    26CA
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
26AC:  MOVLW  0B
26AE:  SUBWF  1B,W
26B0:  CLRF   03
26B2:  ADDLW  35
26B4:  MOVWF  FE9
26B6:  MOVLW  00
26B8:  ADDWFC 03,W
26BA:  MOVWF  FEA
26BC:  INCF   FEF,F
26BE:  BSF    16.3
26C0:  MOVLW  1E
26C2:  MOVWF  xC6
26C4:  CALL   06E2
26C8:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
26CA:  BRA    26CE
....................          Flanco = 0; 
26CC:  BCF    16.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
26CE:  BSF    F96.0
26D0:  BTFSS  F84.0
26D2:  BRA    2706
....................          delay_ms(20); 
26D4:  MOVLW  14
26D6:  MOVWF  xC6
26D8:  CALL   06E2
....................          if(DOWN){ 
26DC:  BSF    F96.0
26DE:  BTFSS  F84.0
26E0:  BRA    2704
....................             if(Flanco2 == 0) { 
26E2:  BTFSC  16.5
26E4:  BRA    2704
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
26E6:  MOVLW  0B
26E8:  SUBWF  1B,W
26EA:  CLRF   03
26EC:  ADDLW  35
26EE:  MOVWF  FE9
26F0:  MOVLW  00
26F2:  ADDWFC 03,W
26F4:  MOVWF  FEA
26F6:  DECF   FEF,F
26F8:  BSF    16.5
26FA:  MOVLW  1E
26FC:  MOVWF  xC6
26FE:  CALL   06E2
2702:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2704:  BRA    2708
....................          Flanco2 = 0; 
2706:  BCF    16.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
2708:  BSF    F96.1
270A:  BTFSS  F84.1
270C:  BRA    2738
....................          delay_ms(20); 
270E:  MOVLW  14
2710:  MOVWF  xC6
2712:  CALL   06E2
....................          if(RIGHT){ 
2716:  BSF    F96.1
2718:  BTFSS  F84.1
271A:  BRA    2736
....................             if(Flanco1 == 0) { 
271C:  BTFSC  16.4
271E:  BRA    2736
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2720:  BSF    16.4
2722:  INCF   1B,F
2724:  MOVLW  1E
2726:  MOVWF  xC6
2728:  CALL   06E2
272C:  MOVLW  0C
272E:  MOVWF  xC0
2730:  CALL   08B4
2734:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2736:  BRA    273A
....................          Flanco1 = 0; 
2738:  BCF    16.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
273A:  BSF    F96.2
273C:  BTFSS  F84.2
273E:  BRA    276A
....................          delay_ms(150); 
2740:  MOVLW  96
2742:  MOVWF  xC6
2744:  CALL   06E2
....................          if(IZQU){ 
2748:  BSF    F96.2
274A:  BTFSS  F84.2
274C:  BRA    2768
....................             if(Flanco3 == 0){ 
274E:  BTFSC  16.6
2750:  BRA    2768
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2752:  BSF    16.6
2754:  DECF   1B,F
2756:  MOVLW  1E
2758:  MOVWF  xC6
275A:  CALL   06E2
275E:  MOVLW  0C
2760:  MOVWF  xC0
2762:  CALL   08B4
2766:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2768:  BRA    276C
....................         Flanco3 = 0; 
276A:  BCF    16.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
276C:  MOVLW  0B
276E:  SUBWF  1B,W
2770:  CLRF   03
2772:  ADDLW  35
2774:  MOVWF  FE9
2776:  MOVLW  00
2778:  ADDWFC 03,W
277A:  MOVWF  FEA
277C:  BTFSC  FEF.7
277E:  BRA    2782
2780:  BRA    2796
....................          clave[unidad-11]=9; 
2782:  MOVLW  0B
2784:  SUBWF  1B,W
2786:  CLRF   03
2788:  ADDLW  35
278A:  MOVWF  FE9
278C:  MOVLW  00
278E:  ADDWFC 03,W
2790:  MOVWF  FEA
2792:  MOVLW  09
2794:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
2796:  MOVLW  0B
2798:  SUBWF  1B,W
279A:  CLRF   03
279C:  ADDLW  35
279E:  MOVWF  FE9
27A0:  MOVLW  00
27A2:  ADDWFC 03,W
27A4:  MOVWF  FEA
27A6:  BTFSC  FEF.7
27A8:  BRA    27C2
27AA:  MOVF   FEF,W
27AC:  SUBLW  09
27AE:  BC    27C2
....................          clave[unidad-11]=0; 
27B0:  MOVLW  0B
27B2:  SUBWF  1B,W
27B4:  CLRF   03
27B6:  ADDLW  35
27B8:  MOVWF  FE9
27BA:  MOVLW  00
27BC:  ADDWFC 03,W
27BE:  MOVWF  FEA
27C0:  CLRF   FEF
....................         
....................       if(unidad<11){             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
27C2:  MOVF   1B,W
27C4:  SUBLW  0A
27C6:  BNC   27E8
....................          unidad=11; 
27C8:  MOVLW  0B
27CA:  MOVWF  1B
....................          Menu=1; 
27CC:  MOVLW  01
27CE:  MOVWF  18
....................          paso=0; 
27D0:  CLRF   31
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
27D2:  CLRF   35
27D4:  CLRF   36
27D6:  CLRF   37
27D8:  CLRF   38
27DA:  BSF    17.5
....................          unidad=11;printf(lcd_putc,"\f"); 
27DC:  MOVLW  0B
27DE:  MOVWF  1B
27E0:  MOVLW  0C
27E2:  MOVWF  xC0
27E4:  CALL   08B4
....................       } 
....................         
....................       if(unidad>14){// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
27E8:  MOVF   1B,W
27EA:  SUBLW  0E
27EC:  BTFSC  FD8.0
27EE:  BRA    2916
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]){ 
27F0:  MOVF   39,W
27F2:  SUBWF  35,W
27F4:  BNZ   2892
27F6:  MOVF   3A,W
27F8:  SUBWF  36,W
27FA:  BNZ   2892
27FC:  MOVF   3B,W
27FE:  SUBWF  37,W
2800:  BNZ   2892
2802:  MOVF   3C,W
2804:  SUBWF  38,W
2806:  BNZ   2892
....................             lcd_gotoxy(1,1); 
2808:  MOVLW  01
280A:  MOVWF  xC1
280C:  MOVWF  xC2
280E:  CALL   0852
....................             printf(lcd_putc,"                    "); 
2812:  MOVLW  82
2814:  MOVWF  FF6
2816:  MOVLW  03
2818:  MOVWF  FF7
281A:  CALL   0912
....................             lcd_gotoxy(1,2); 
281E:  MOVLW  01
2820:  MOVWF  xC1
2822:  MOVLW  02
2824:  MOVWF  xC2
2826:  CALL   0852
....................             printf(lcd_putc,"     Contraseña     "); 
282A:  MOVLW  98
282C:  MOVWF  FF6
282E:  MOVLW  03
2830:  MOVWF  FF7
2832:  CALL   0912
....................             lcd_gotoxy(1,3); 
2836:  MOVLW  01
2838:  MOVWF  xC1
283A:  MOVLW  03
283C:  MOVWF  xC2
283E:  CALL   0852
....................             printf(lcd_putc,"      Correcta      "); 
2842:  MOVLW  AE
2844:  MOVWF  FF6
2846:  MOVLW  03
2848:  MOVWF  FF7
284A:  CALL   0912
....................             lcd_gotoxy(1,4); 
284E:  MOVLW  01
2850:  MOVWF  xC1
2852:  MOVLW  04
2854:  MOVWF  xC2
2856:  CALL   0852
....................             printf(lcd_putc,"                    "); 
285A:  MOVLW  C4
285C:  MOVWF  FF6
285E:  MOVLW  03
2860:  MOVWF  FF7
2862:  CALL   0912
....................             delay_ms(500);Menu=61;unidad=11;printf(lcd_putc,"\f"); 
2866:  MOVLW  02
2868:  MOVWF  xAF
286A:  MOVLW  FA
286C:  MOVWF  xC6
286E:  CALL   06E2
2872:  DECFSZ xAF,F
2874:  BRA    286A
2876:  MOVLW  3D
2878:  MOVWF  18
287A:  MOVLW  0B
287C:  MOVWF  1B
287E:  MOVLW  0C
2880:  MOVWF  xC0
2882:  CALL   08B4
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
2886:  CLRF   35
2888:  CLRF   36
288A:  CLRF   37
288C:  CLRF   38
288E:  BSF    17.5
....................          }else{ 
2890:  BRA    2916
....................             lcd_gotoxy(1,1); 
2892:  MOVLW  01
2894:  MOVWF  xC1
2896:  MOVWF  xC2
2898:  CALL   0852
....................             printf(lcd_putc,"                    "); 
289C:  MOVLW  DA
289E:  MOVWF  FF6
28A0:  MOVLW  03
28A2:  MOVWF  FF7
28A4:  CALL   0912
....................             lcd_gotoxy(1,2); 
28A8:  MOVLW  01
28AA:  MOVWF  xC1
28AC:  MOVLW  02
28AE:  MOVWF  xC2
28B0:  CALL   0852
....................             printf(lcd_putc,"     Contraseña     "); 
28B4:  MOVLW  F0
28B6:  MOVWF  FF6
28B8:  MOVLW  03
28BA:  MOVWF  FF7
28BC:  CALL   0912
....................             lcd_gotoxy(1,3); 
28C0:  MOVLW  01
28C2:  MOVWF  xC1
28C4:  MOVLW  03
28C6:  MOVWF  xC2
28C8:  CALL   0852
....................             printf(lcd_putc,"     Incorrecta     "); 
28CC:  MOVLW  06
28CE:  MOVWF  FF6
28D0:  MOVLW  04
28D2:  MOVWF  FF7
28D4:  CALL   0912
....................             lcd_gotoxy(1,4); 
28D8:  MOVLW  01
28DA:  MOVWF  xC1
28DC:  MOVLW  04
28DE:  MOVWF  xC2
28E0:  CALL   0852
....................             printf(lcd_putc,"                    "); 
28E4:  MOVLW  1C
28E6:  MOVWF  FF6
28E8:  MOVLW  04
28EA:  MOVWF  FF7
28EC:  CALL   0912
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
28F0:  MOVLW  02
28F2:  MOVWF  xAF
28F4:  MOVLW  FA
28F6:  MOVWF  xC6
28F8:  CALL   06E2
28FC:  DECFSZ xAF,F
28FE:  BRA    28F4
2900:  MOVLW  0B
2902:  MOVWF  1B
2904:  MOVLW  0C
2906:  MOVWF  xC0
2908:  CALL   08B4
290C:  BSF    17.5
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
290E:  CLRF   35
2910:  CLRF   36
2912:  CLRF   37
2914:  CLRF   38
....................          } 
....................       } 
....................    }       
.................... //----------------Fin-Menu3--------------------------------------------------------------- 
....................  
.................... //----------------Menu6.1--------------------------------------------------------------- 
....................    if(Menu == 61){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
2916:  MOVF   18,W
2918:  SUBLW  3D
291A:  BTFSS  FD8.2
291C:  BRA    2CA6
....................       EliminaRuido(); 
291E:  CALL   0004
.................... //      if(Cambio){ 
....................          lcd_gotoxy(1,1); 
2922:  MOVLW  01
2924:  MOVWF  xC1
2926:  MOVWF  xC2
2928:  CALL   0852
....................          printf(lcd_putc,"     Ingrese        "); 
292C:  MOVLW  32
292E:  MOVWF  FF6
2930:  MOVLW  04
2932:  MOVWF  FF7
2934:  CALL   0912
....................          lcd_gotoxy(1,2); 
2938:  MOVLW  01
293A:  MOVWF  xC1
293C:  MOVLW  02
293E:  MOVWF  xC2
2940:  CALL   0852
....................          printf(lcd_putc,"    Contraseña      "); 
2944:  MOVLW  48
2946:  MOVWF  FF6
2948:  MOVLW  04
294A:  MOVWF  FF7
294C:  CALL   0912
....................          lcd_gotoxy(1,3); 
2950:  MOVLW  01
2952:  MOVWF  xC1
2954:  MOVLW  03
2956:  MOVWF  xC2
2958:  CALL   0852
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
295C:  MOVLW  5E
295E:  MOVWF  FF6
2960:  MOVLW  04
2962:  MOVWF  FF7
2964:  MOVLW  0A
2966:  MOVWF  xB3
2968:  CALL   0A58
296C:  MOVFF  35,AF
2970:  MOVLW  1F
2972:  MOVWF  xB0
2974:  CALL   0A9E
2978:  MOVFF  36,AF
297C:  MOVLW  1F
297E:  MOVWF  xB0
2980:  CALL   0A9E
2984:  MOVFF  37,AF
2988:  MOVLW  1F
298A:  MOVWF  xB0
298C:  CALL   0A9E
2990:  MOVFF  38,AF
2994:  MOVLW  1F
2996:  MOVWF  xB0
2998:  CALL   0A9E
299C:  MOVLW  20
299E:  MOVWF  xC0
29A0:  CALL   08B4
29A4:  MOVLW  20
29A6:  MOVWF  xC0
29A8:  CALL   08B4
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
29AC:  MOVFF  1B,C1
29B0:  MOVLW  04
29B2:  MOVWF  xC2
29B4:  CALL   0852
....................          lcd_putc(t[2]); 
29B8:  MOVFF  34,C0
29BC:  CALL   08B4
....................           
....................          if(unidad>11&&unidad<14){ 
29C0:  MOVF   1B,W
29C2:  SUBLW  0B
29C4:  BC    29E4
29C6:  MOVF   1B,W
29C8:  SUBLW  0D
29CA:  BNC   29E4
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
29CC:  MOVLW  01
29CE:  SUBWF  1B,W
29D0:  MOVWF  xAF
29D2:  MOVWF  xC1
29D4:  MOVLW  04
29D6:  MOVWF  xC2
29D8:  CALL   0852
....................             lcd_putc(t[1]); 
29DC:  MOVFF  33,C0
29E0:  CALL   08B4
....................          } 
....................           
....................          Cambio=OFF; 
29E4:  BCF    17.5
.................... //      } 
....................        
....................       if(UP){//Si oprime hacia arriba 
29E6:  BSF    F92.5
29E8:  BTFSS  F80.5
29EA:  BRA    2A1E
....................          delay_ms(20); 
29EC:  MOVLW  14
29EE:  MOVWF  xC6
29F0:  CALL   06E2
....................          if(UP){ 
29F4:  BSF    F92.5
29F6:  BTFSS  F80.5
29F8:  BRA    2A1C
....................             if(Flanco == 0) { 
29FA:  BTFSC  16.3
29FC:  BRA    2A1C
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
29FE:  MOVLW  0B
2A00:  SUBWF  1B,W
2A02:  CLRF   03
2A04:  ADDLW  35
2A06:  MOVWF  FE9
2A08:  MOVLW  00
2A0A:  ADDWFC 03,W
2A0C:  MOVWF  FEA
2A0E:  INCF   FEF,F
2A10:  BSF    16.3
2A12:  MOVLW  1E
2A14:  MOVWF  xC6
2A16:  CALL   06E2
2A1A:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2A1C:  BRA    2A20
....................          Flanco = 0; 
2A1E:  BCF    16.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
2A20:  BSF    F96.0
2A22:  BTFSS  F84.0
2A24:  BRA    2A58
....................          delay_ms(20); 
2A26:  MOVLW  14
2A28:  MOVWF  xC6
2A2A:  CALL   06E2
....................          if(DOWN){ 
2A2E:  BSF    F96.0
2A30:  BTFSS  F84.0
2A32:  BRA    2A56
....................             if(Flanco2 == 0) { 
2A34:  BTFSC  16.5
2A36:  BRA    2A56
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
2A38:  MOVLW  0B
2A3A:  SUBWF  1B,W
2A3C:  CLRF   03
2A3E:  ADDLW  35
2A40:  MOVWF  FE9
2A42:  MOVLW  00
2A44:  ADDWFC 03,W
2A46:  MOVWF  FEA
2A48:  DECF   FEF,F
2A4A:  BSF    16.5
2A4C:  MOVLW  1E
2A4E:  MOVWF  xC6
2A50:  CALL   06E2
2A54:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2A56:  BRA    2A5A
....................          Flanco2 = 0; 
2A58:  BCF    16.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
2A5A:  BSF    F96.1
2A5C:  BTFSS  F84.1
2A5E:  BRA    2A82
....................          if(RIGHT){ 
2A60:  BSF    F96.1
2A62:  BTFSS  F84.1
2A64:  BRA    2A80
....................             if(Flanco1 == 0) { 
2A66:  BTFSC  16.4
2A68:  BRA    2A80
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2A6A:  BSF    16.4
2A6C:  INCF   1B,F
2A6E:  MOVLW  1E
2A70:  MOVWF  xC6
2A72:  CALL   06E2
2A76:  MOVLW  0C
2A78:  MOVWF  xC0
2A7A:  CALL   08B4
2A7E:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2A80:  BRA    2A84
....................          Flanco1 = 0; 
2A82:  BCF    16.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
2A84:  BSF    F96.2
2A86:  BTFSS  F84.2
2A88:  BRA    2AB4
....................          delay_ms(150); 
2A8A:  MOVLW  96
2A8C:  MOVWF  xC6
2A8E:  CALL   06E2
....................          if(IZQU){ 
2A92:  BSF    F96.2
2A94:  BTFSS  F84.2
2A96:  BRA    2AB2
....................             if(Flanco3 == 0){ 
2A98:  BTFSC  16.6
2A9A:  BRA    2AB2
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2A9C:  BSF    16.6
2A9E:  DECF   1B,F
2AA0:  MOVLW  1E
2AA2:  MOVWF  xC6
2AA4:  CALL   06E2
2AA8:  MOVLW  0C
2AAA:  MOVWF  xC0
2AAC:  CALL   08B4
2AB0:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2AB2:  BRA    2AB6
....................         Flanco3 = 0; 
2AB4:  BCF    16.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
2AB6:  MOVLW  0B
2AB8:  SUBWF  1B,W
2ABA:  CLRF   03
2ABC:  ADDLW  35
2ABE:  MOVWF  FE9
2AC0:  MOVLW  00
2AC2:  ADDWFC 03,W
2AC4:  MOVWF  FEA
2AC6:  BTFSC  FEF.7
2AC8:  BRA    2ACC
2ACA:  BRA    2AE0
....................          clave[unidad-11]=9; 
2ACC:  MOVLW  0B
2ACE:  SUBWF  1B,W
2AD0:  CLRF   03
2AD2:  ADDLW  35
2AD4:  MOVWF  FE9
2AD6:  MOVLW  00
2AD8:  ADDWFC 03,W
2ADA:  MOVWF  FEA
2ADC:  MOVLW  09
2ADE:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
2AE0:  MOVLW  0B
2AE2:  SUBWF  1B,W
2AE4:  CLRF   03
2AE6:  ADDLW  35
2AE8:  MOVWF  FE9
2AEA:  MOVLW  00
2AEC:  ADDWFC 03,W
2AEE:  MOVWF  FEA
2AF0:  BTFSC  FEF.7
2AF2:  BRA    2B0C
2AF4:  MOVF   FEF,W
2AF6:  SUBLW  09
2AF8:  BC    2B0C
....................          clave[unidad-11]=0; 
2AFA:  MOVLW  0B
2AFC:  SUBWF  1B,W
2AFE:  CLRF   03
2B00:  ADDLW  35
2B02:  MOVWF  FE9
2B04:  MOVLW  00
2B06:  ADDWFC 03,W
2B08:  MOVWF  FEA
2B0A:  CLRF   FEF
....................         
....................       if(unidad<11){             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
2B0C:  MOVF   1B,W
2B0E:  SUBLW  0A
2B10:  BNC   2B30
....................          unidad=11; 
2B12:  MOVLW  0B
2B14:  MOVWF  1B
....................          Menu=1; 
2B16:  MOVLW  01
2B18:  MOVWF  18
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
2B1A:  CLRF   35
2B1C:  CLRF   36
2B1E:  CLRF   37
2B20:  CLRF   38
2B22:  BSF    17.5
....................          unidad=11;printf(lcd_putc,"\f"); 
2B24:  MOVLW  0B
2B26:  MOVWF  1B
2B28:  MOVLW  0C
2B2A:  MOVWF  xC0
2B2C:  CALL   08B4
....................       } 
....................         
....................       if(unidad>14){// Si ya ingreso la nueva contraseña.      
2B30:  MOVF   1B,W
2B32:  SUBLW  0E
2B34:  BTFSC  FD8.0
2B36:  BRA    2CA6
....................          lcd_gotoxy(1,1); 
2B38:  MOVLW  01
2B3A:  MOVWF  xC1
2B3C:  MOVWF  xC2
2B3E:  CALL   0852
....................          printf(lcd_putc,"                    "); 
2B42:  MOVLW  74
2B44:  MOVWF  FF6
2B46:  MOVLW  04
2B48:  MOVWF  FF7
2B4A:  CALL   0912
....................          lcd_gotoxy(1,2); 
2B4E:  MOVLW  01
2B50:  MOVWF  xC1
2B52:  MOVLW  02
2B54:  MOVWF  xC2
2B56:  CALL   0852
....................          printf(lcd_putc,"     Contraseña     "); 
2B5A:  MOVLW  8A
2B5C:  MOVWF  FF6
2B5E:  MOVLW  04
2B60:  MOVWF  FF7
2B62:  CALL   0912
....................          lcd_gotoxy(1,3); 
2B66:  MOVLW  01
2B68:  MOVWF  xC1
2B6A:  MOVLW  03
2B6C:  MOVWF  xC2
2B6E:  CALL   0852
....................          printf(lcd_putc,"     Almacenada     "); 
2B72:  MOVLW  A0
2B74:  MOVWF  FF6
2B76:  MOVLW  04
2B78:  MOVWF  FF7
2B7A:  CALL   0912
....................          lcd_gotoxy(1,4); 
2B7E:  MOVLW  01
2B80:  MOVWF  xC1
2B82:  MOVLW  04
2B84:  MOVWF  xC2
2B86:  CALL   0852
....................          printf(lcd_putc,"                    "); 
2B8A:  MOVLW  B6
2B8C:  MOVWF  FF6
2B8E:  MOVLW  04
2B90:  MOVWF  FF7
2B92:  CALL   0912
....................          write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
2B96:  CLRF   FA9
2B98:  MOVFF  35,FA8
2B9C:  BCF    FA6.6
2B9E:  BCF    FA6.7
2BA0:  BSF    FA6.2
2BA2:  MOVF   FF2,W
2BA4:  MOVWF  00
2BA6:  BCF    FF2.7
2BA8:  MOVLB  F
2BAA:  MOVLW  55
2BAC:  MOVWF  FA7
2BAE:  MOVLW  AA
2BB0:  MOVWF  FA7
2BB2:  BSF    FA6.1
2BB4:  BTFSC  FA6.1
2BB6:  BRA    2BB4
2BB8:  BCF    FA6.2
2BBA:  MOVF   00,W
2BBC:  IORWF  FF2,F
2BBE:  MOVLW  14
2BC0:  MOVLB  0
2BC2:  MOVWF  xC6
2BC4:  CALL   06E2
2BC8:  MOVLW  01
2BCA:  MOVWF  FA9
2BCC:  MOVFF  36,FA8
2BD0:  BCF    FA6.6
2BD2:  BCF    FA6.7
2BD4:  BSF    FA6.2
2BD6:  MOVF   FF2,W
2BD8:  MOVWF  00
2BDA:  BCF    FF2.7
2BDC:  MOVLB  F
2BDE:  MOVLW  55
2BE0:  MOVWF  FA7
2BE2:  MOVLW  AA
2BE4:  MOVWF  FA7
2BE6:  BSF    FA6.1
2BE8:  BTFSC  FA6.1
2BEA:  BRA    2BE8
2BEC:  BCF    FA6.2
2BEE:  MOVF   00,W
2BF0:  IORWF  FF2,F
2BF2:  MOVLW  14
2BF4:  MOVLB  0
2BF6:  MOVWF  xC6
2BF8:  CALL   06E2
....................          write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
2BFC:  MOVLW  02
2BFE:  MOVWF  FA9
2C00:  MOVFF  37,FA8
2C04:  BCF    FA6.6
2C06:  BCF    FA6.7
2C08:  BSF    FA6.2
2C0A:  MOVF   FF2,W
2C0C:  MOVWF  00
2C0E:  BCF    FF2.7
2C10:  MOVLB  F
2C12:  MOVLW  55
2C14:  MOVWF  FA7
2C16:  MOVLW  AA
2C18:  MOVWF  FA7
2C1A:  BSF    FA6.1
2C1C:  BTFSC  FA6.1
2C1E:  BRA    2C1C
2C20:  BCF    FA6.2
2C22:  MOVF   00,W
2C24:  IORWF  FF2,F
2C26:  MOVLW  14
2C28:  MOVLB  0
2C2A:  MOVWF  xC6
2C2C:  CALL   06E2
2C30:  MOVLW  03
2C32:  MOVWF  FA9
2C34:  MOVFF  38,FA8
2C38:  BCF    FA6.6
2C3A:  BCF    FA6.7
2C3C:  BSF    FA6.2
2C3E:  MOVF   FF2,W
2C40:  MOVWF  00
2C42:  BCF    FF2.7
2C44:  MOVLB  F
2C46:  MOVLW  55
2C48:  MOVWF  FA7
2C4A:  MOVLW  AA
2C4C:  MOVWF  FA7
2C4E:  BSF    FA6.1
2C50:  BTFSC  FA6.1
2C52:  BRA    2C50
2C54:  BCF    FA6.2
2C56:  MOVF   00,W
2C58:  IORWF  FF2,F
2C5A:  MOVLW  14
2C5C:  MOVLB  0
2C5E:  MOVWF  xC6
2C60:  CALL   06E2
....................          delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
2C64:  MOVLW  02
2C66:  MOVWF  xAF
2C68:  MOVLW  FA
2C6A:  MOVWF  xC6
2C6C:  CALL   06E2
2C70:  DECFSZ xAF,F
2C72:  BRA    2C68
2C74:  MOVLW  01
2C76:  MOVWF  18
2C78:  CLRF   31
2C7A:  MOVLW  02
2C7C:  MOVWF  1C
2C7E:  MOVWF  1E
....................          contrasena[0]=clave[0];contrasena[1]=clave[1];contrasena[2]=clave[2];contrasena[3]=clave[3]; 
2C80:  MOVFF  35,39
2C84:  MOVFF  36,3A
2C88:  MOVFF  37,3B
2C8C:  MOVFF  38,3C
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
2C90:  CLRF   35
2C92:  CLRF   36
2C94:  CLRF   37
2C96:  CLRF   38
2C98:  BSF    17.5
....................          unidad=11;printf(lcd_putc,"\f");          
2C9A:  MOVLW  0B
2C9C:  MOVWF  1B
2C9E:  MOVLW  0C
2CA0:  MOVWF  xC0
2CA2:  CALL   08B4
....................       } 
....................    }       
.................... //----------------Fin-Menu6.1--------------------------------------------------------------- 
....................     
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu de tiempo de trabajo de Luz UV 
2CA6:  MOVF   18,W
2CA8:  SUBLW  04
2CAA:  BTFSS  FD8.2
2CAC:  BRA    2E8E
....................    EliminaRuido(); 
2CAE:  CALL   0004
.................... //   if(Cambio){ 
....................       lcd_gotoxy(1,1); 
2CB2:  MOVLW  01
2CB4:  MOVWF  xC1
2CB6:  MOVWF  xC2
2CB8:  CALL   0852
....................       printf(lcd_putc,"  Duracion Actual   "); 
2CBC:  MOVLW  CC
2CBE:  MOVWF  FF6
2CC0:  MOVLW  04
2CC2:  MOVWF  FF7
2CC4:  CALL   0912
....................       lcd_gotoxy(1,2); 
2CC8:  MOVLW  01
2CCA:  MOVWF  xC1
2CCC:  MOVLW  02
2CCE:  MOVWF  xC2
2CD0:  CALL   0852
....................       printf(lcd_putc,"   Tiempo= %05Lu   ",horas); 
2CD4:  MOVLW  E2
2CD6:  MOVWF  FF6
2CD8:  MOVLW  04
2CDA:  MOVWF  FF7
2CDC:  MOVLW  0B
2CDE:  MOVWF  xB3
2CE0:  CALL   0A58
2CE4:  MOVLW  08
2CE6:  MOVWF  FE9
2CE8:  MOVFF  41,B0
2CEC:  MOVFF  40,AF
2CF0:  GOTO   0C6A
2CF4:  MOVLW  20
2CF6:  MOVWF  xC0
2CF8:  CALL   08B4
2CFC:  MOVLW  20
2CFE:  MOVWF  xC0
2D00:  CALL   08B4
2D04:  MOVLW  20
2D06:  MOVWF  xC0
2D08:  CALL   08B4
....................       lcd_gotoxy(1,4); 
2D0C:  MOVLW  01
2D0E:  MOVWF  xC1
2D10:  MOVLW  04
2D12:  MOVWF  xC2
2D14:  CALL   0852
....................       printf(lcd_putc," RESET= Oprima ^ y > "); 
2D18:  MOVLW  F6
2D1A:  MOVWF  FF6
2D1C:  MOVLW  04
2D1E:  MOVWF  FF7
2D20:  CALL   0912
....................        
....................       Cambio=OFF; 
2D24:  BCF    17.5
.................... //   } 
....................     
....................       if(UP && RIGHT){//Si oprime hacia arriba 
2D26:  BSF    F92.5
2D28:  BTFSS  F80.5
2D2A:  BRA    2E4A
2D2C:  BSF    F96.1
2D2E:  BTFSS  F84.1
2D30:  BRA    2E4A
....................          delay_ms(20); 
2D32:  MOVLW  14
2D34:  MOVWF  xC6
2D36:  CALL   06E2
....................          if(UP && RIGHT){ 
2D3A:  BSF    F92.5
2D3C:  BTFSS  F80.5
2D3E:  BRA    2E4A
2D40:  BSF    F96.1
2D42:  BTFSS  F84.1
2D44:  BRA    2E4A
....................             delay_ms(200); 
2D46:  MOVLW  C8
2D48:  MOVWF  xC6
2D4A:  CALL   06E2
....................             printf(lcd_putc,"\f"); 
2D4E:  MOVLW  0C
2D50:  MOVWF  xC0
2D52:  CALL   08B4
....................             lcd_gotoxy(1,2); 
2D56:  MOVLW  01
2D58:  MOVWF  xC1
2D5A:  MOVLW  02
2D5C:  MOVWF  xC2
2D5E:  CALL   0852
....................             printf(lcd_putc," Reset de tiempo "); 
2D62:  MOVLW  0C
2D64:  MOVWF  FF6
2D66:  MOVLW  05
2D68:  MOVWF  FF7
2D6A:  CALL   0912
....................             lcd_gotoxy(1,3); 
2D6E:  MOVLW  01
2D70:  MOVWF  xC1
2D72:  MOVLW  03
2D74:  MOVWF  xC2
2D76:  CALL   0852
....................             printf(lcd_putc,"     Exitoso     "); 
2D7A:  MOVLW  1E
2D7C:  MOVWF  FF6
2D7E:  MOVLW  05
2D80:  MOVWF  FF7
2D82:  CALL   0912
....................             write_eeprom(50,0); 
2D86:  MOVLW  32
2D88:  MOVWF  FA9
2D8A:  CLRF   FA8
2D8C:  BCF    FA6.6
2D8E:  BCF    FA6.7
2D90:  BSF    FA6.2
2D92:  MOVF   FF2,W
2D94:  MOVWF  00
2D96:  BCF    FF2.7
2D98:  MOVLB  F
2D9A:  MOVLW  55
2D9C:  MOVWF  FA7
2D9E:  MOVLW  AA
2DA0:  MOVWF  FA7
2DA2:  BSF    FA6.1
2DA4:  BTFSC  FA6.1
2DA6:  BRA    2DA4
2DA8:  BCF    FA6.2
2DAA:  MOVF   00,W
2DAC:  IORWF  FF2,F
....................             delay_ms(20); 
2DAE:  MOVLW  14
2DB0:  MOVLB  0
2DB2:  MOVWF  xC6
2DB4:  CALL   06E2
....................             write_eeprom(51,0); 
2DB8:  MOVLW  33
2DBA:  MOVWF  FA9
2DBC:  CLRF   FA8
2DBE:  BCF    FA6.6
2DC0:  BCF    FA6.7
2DC2:  BSF    FA6.2
2DC4:  MOVF   FF2,W
2DC6:  MOVWF  00
2DC8:  BCF    FF2.7
2DCA:  MOVLB  F
2DCC:  MOVLW  55
2DCE:  MOVWF  FA7
2DD0:  MOVLW  AA
2DD2:  MOVWF  FA7
2DD4:  BSF    FA6.1
2DD6:  BTFSC  FA6.1
2DD8:  BRA    2DD6
2DDA:  BCF    FA6.2
2DDC:  MOVF   00,W
2DDE:  IORWF  FF2,F
....................             delay_ms(20); 
2DE0:  MOVLW  14
2DE2:  MOVLB  0
2DE4:  MOVWF  xC6
2DE6:  CALL   06E2
....................             write_eeprom(52,0); 
2DEA:  MOVLW  34
2DEC:  MOVWF  FA9
2DEE:  CLRF   FA8
2DF0:  BCF    FA6.6
2DF2:  BCF    FA6.7
2DF4:  BSF    FA6.2
2DF6:  MOVF   FF2,W
2DF8:  MOVWF  00
2DFA:  BCF    FF2.7
2DFC:  MOVLB  F
2DFE:  MOVLW  55
2E00:  MOVWF  FA7
2E02:  MOVLW  AA
2E04:  MOVWF  FA7
2E06:  BSF    FA6.1
2E08:  BTFSC  FA6.1
2E0A:  BRA    2E08
2E0C:  BCF    FA6.2
2E0E:  MOVF   00,W
2E10:  IORWF  FF2,F
....................             delay_ms(700); 
2E12:  MOVLW  04
2E14:  MOVLB  0
2E16:  MOVWF  xAF
2E18:  MOVLW  AF
2E1A:  MOVWF  xC6
2E1C:  CALL   06E2
2E20:  DECFSZ xAF,F
2E22:  BRA    2E18
....................             segundos=0;minutos=0;horas=0; 
2E24:  CLRF   21
2E26:  CLRF   22
2E28:  CLRF   41
2E2A:  CLRF   40
....................             delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2E2C:  MOVLW  1E
2E2E:  MOVWF  xC6
2E30:  CALL   06E2
2E34:  MOVLW  01
2E36:  MOVWF  18
2E38:  CLRF   31
2E3A:  MOVLW  02
2E3C:  MOVWF  1C
2E3E:  MOVWF  1E
2E40:  MOVLW  0C
2E42:  MOVWF  xC0
2E44:  CALL   08B4
....................             Cambio=ON; 
2E48:  BSF    17.5
....................          } 
....................       } 
....................              
....................       if(IZQU){// Si oprime Izquierda 
2E4A:  BSF    F96.2
2E4C:  BTFSS  F84.2
2E4E:  BRA    2E8C
....................          delay_ms(20); 
2E50:  MOVLW  14
2E52:  MOVWF  xC6
2E54:  CALL   06E2
....................          if(IZQU){ 
2E58:  BSF    F96.2
2E5A:  BTFSS  F84.2
2E5C:  BRA    2E8A
....................             if(Flanco3 == 0){ 
2E5E:  BTFSC  16.6
2E60:  BRA    2E8A
....................                Flanco3 = 1;delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f");Cambio=ON; 
2E62:  BSF    16.6
2E64:  MOVLW  02
2E66:  MOVWF  xAF
2E68:  MOVLW  FA
2E6A:  MOVWF  xC6
2E6C:  CALL   06E2
2E70:  DECFSZ xAF,F
2E72:  BRA    2E68
2E74:  MOVLW  01
2E76:  MOVWF  18
2E78:  CLRF   31
2E7A:  MOVLW  02
2E7C:  MOVWF  1C
2E7E:  MOVWF  1E
2E80:  MOVLW  0C
2E82:  MOVWF  xC0
2E84:  CALL   08B4
2E88:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2E8A:  BRA    2E8E
....................          Flanco3 = 0; 
2E8C:  BCF    16.6
....................       } 
....................    } 
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5){ // Menu de Punto Cero 
2E8E:  MOVF   18,W
2E90:  SUBLW  05
2E92:  BTFSS  FD8.2
2E94:  BRA    30EA
....................       EliminaRuido(); 
2E96:  CALL   0004
.................... //      if(Cambio){ 
....................          lcd_gotoxy(1,1); 
2E9A:  MOVLW  01
2E9C:  MOVWF  xC1
2E9E:  MOVWF  xC2
2EA0:  CALL   0852
....................          printf(lcd_putc,"  Zero Point Config "); 
2EA4:  MOVLW  30
2EA6:  MOVWF  FF6
2EA8:  MOVLW  05
2EAA:  MOVWF  FF7
2EAC:  CALL   0912
....................          lcd_gotoxy(1,2); 
2EB0:  MOVLW  01
2EB2:  MOVWF  xC1
2EB4:  MOVLW  02
2EB6:  MOVWF  xC2
2EB8:  CALL   0852
....................          printf(lcd_putc,"Presion= %3.2f inH2O ",(Leer_Sensor_Presion(5)*4.02)); 
2EBC:  MOVLW  05
2EBE:  MOVWF  xAF
2EC0:  CALL   10E2
2EC4:  MOVFF  00,AF
2EC8:  MOVFF  01,B0
2ECC:  MOVFF  02,B1
2ED0:  MOVFF  03,B2
2ED4:  MOVFF  03,C6
2ED8:  MOVFF  02,C5
2EDC:  MOVFF  01,C4
2EE0:  MOVFF  00,C3
2EE4:  MOVLW  D7
2EE6:  MOVWF  xCA
2EE8:  MOVLW  A3
2EEA:  MOVWF  xC9
2EEC:  CLRF   xC8
2EEE:  MOVLW  81
2EF0:  MOVWF  xC7
2EF2:  CALL   127A
2EF6:  MOVFF  00,AF
2EFA:  MOVFF  01,B0
2EFE:  MOVFF  02,B1
2F02:  MOVFF  03,B2
2F06:  MOVLW  46
2F08:  MOVWF  FF6
2F0A:  MOVLW  05
2F0C:  MOVWF  FF7
2F0E:  MOVLW  09
2F10:  MOVWF  xB3
2F12:  CALL   0A58
2F16:  MOVLW  02
2F18:  MOVWF  FE9
2F1A:  MOVFF  B2,B6
2F1E:  MOVFF  B1,B5
2F22:  MOVFF  B0,B4
2F26:  MOVFF  AF,B3
2F2A:  MOVWF  xB7
2F2C:  CALL   1426
2F30:  MOVLW  54
2F32:  MOVWF  FF6
2F34:  MOVLW  05
2F36:  MOVWF  FF7
2F38:  MOVLW  07
2F3A:  MOVWF  xB3
2F3C:  CALL   0A58
....................          lcd_gotoxy(1,3); 
2F40:  MOVLW  01
2F42:  MOVWF  xC1
2F44:  MOVLW  03
2F46:  MOVWF  xC2
2F48:  CALL   0852
....................          printf(lcd_putc,"    ADC=%2.0f",sensores(0)); 
2F4C:  CLRF   xB4
2F4E:  CALL   0800
2F52:  MOVFF  00,AF
2F56:  MOVFF  01,B0
2F5A:  MOVFF  02,B1
2F5E:  MOVFF  03,B2
2F62:  MOVLW  5C
2F64:  MOVWF  FF6
2F66:  MOVLW  05
2F68:  MOVWF  FF7
2F6A:  MOVLW  08
2F6C:  MOVWF  xB3
2F6E:  CALL   0A58
2F72:  MOVLW  01
2F74:  MOVWF  FE9
2F76:  MOVFF  B2,B6
2F7A:  MOVFF  B1,B5
2F7E:  MOVFF  B0,B4
2F82:  MOVFF  AF,B3
2F86:  CLRF   xB7
2F88:  CALL   1426
....................          lcd_gotoxy(1,4); 
2F8C:  MOVLW  01
2F8E:  MOVWF  xC1
2F90:  MOVLW  04
2F92:  MOVWF  xC2
2F94:  CALL   0852
....................          printf(lcd_putc,"    ZF=%2.0f",G); 
2F98:  MOVLW  6A
2F9A:  MOVWF  FF6
2F9C:  MOVLW  05
2F9E:  MOVWF  FF7
2FA0:  MOVLW  07
2FA2:  MOVWF  xB3
2FA4:  CALL   0A58
2FA8:  MOVLW  01
2FAA:  MOVWF  FE9
2FAC:  MOVFF  A9,B6
2FB0:  MOVFF  A8,B5
2FB4:  MOVFF  A7,B4
2FB8:  MOVFF  A6,B3
2FBC:  CLRF   xB7
2FBE:  CALL   1426
....................           
....................          Cambio=OFF; 
2FC2:  BCF    17.5
.................... //      } 
....................      
....................       if(RIGHT){// Si oprime derecha 
2FC4:  BSF    F96.1
2FC6:  BTFSS  F84.1
2FC8:  BRA    30AA
....................          delay_ms(20); 
2FCA:  MOVLW  14
2FCC:  MOVWF  xC6
2FCE:  CALL   06E2
....................          if(RIGHT){ 
2FD2:  BSF    F96.1
2FD4:  BTFSS  F84.1
2FD6:  BRA    30A8
....................             if(Flanco1 == 0){ 
2FD8:  BTFSC  16.4
2FDA:  BRA    30A8
....................                /*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
2FDC:  MOVLW  01
2FDE:  MOVWF  18
2FE0:  CLRF   31
2FE2:  MOVLW  02
2FE4:  MOVWF  1C
2FE6:  MOVWF  1E
2FE8:  MOVLW  0B
2FEA:  MOVWF  1B
2FEC:  MOVLW  02
2FEE:  MOVWF  xAF
2FF0:  MOVLW  FA
2FF2:  MOVWF  xC6
2FF4:  CALL   06E2
2FF8:  DECFSZ xAF,F
2FFA:  BRA    2FF0
2FFC:  MOVLW  0C
2FFE:  MOVWF  xC0
3000:  CALL   08B4
....................                G=sensores(0); 
3004:  CLRF   xB4
3006:  CALL   0800
300A:  MOVFF  03,A9
300E:  MOVFF  02,A8
3012:  MOVFF  01,A7
3016:  MOVFF  00,A6
....................                G16=(int16)G; 
301A:  MOVFF  A9,C6
301E:  MOVFF  A8,C5
3022:  MOVFF  A7,C4
3026:  MOVFF  A6,C3
302A:  CALL   15AC
302E:  MOVFF  02,43
3032:  MOVFF  01,42
....................                G_l=G16; G_h=(G16>>8); 
3036:  MOVFF  42,25
303A:  MOVFF  43,26
....................                 
....................                write_eeprom(60,G_l); 
303E:  MOVLW  3C
3040:  MOVWF  FA9
3042:  MOVFF  25,FA8
3046:  BCF    FA6.6
3048:  BCF    FA6.7
304A:  BSF    FA6.2
304C:  MOVF   FF2,W
304E:  MOVWF  00
3050:  BCF    FF2.7
3052:  MOVLB  F
3054:  MOVLW  55
3056:  MOVWF  FA7
3058:  MOVLW  AA
305A:  MOVWF  FA7
305C:  BSF    FA6.1
305E:  BTFSC  FA6.1
3060:  BRA    305E
3062:  BCF    FA6.2
3064:  MOVF   00,W
3066:  IORWF  FF2,F
....................                delay_ms(20); 
3068:  MOVLW  14
306A:  MOVLB  0
306C:  MOVWF  xC6
306E:  CALL   06E2
....................                write_eeprom(61,G_h);//Guardar valor de Setpoint en eeprom 
3072:  MOVLW  3D
3074:  MOVWF  FA9
3076:  MOVFF  26,FA8
307A:  BCF    FA6.6
307C:  BCF    FA6.7
307E:  BSF    FA6.2
3080:  MOVF   FF2,W
3082:  MOVWF  00
3084:  BCF    FF2.7
3086:  MOVLB  F
3088:  MOVLW  55
308A:  MOVWF  FA7
308C:  MOVLW  AA
308E:  MOVWF  FA7
3090:  BSF    FA6.1
3092:  BTFSC  FA6.1
3094:  BRA    3092
3096:  BCF    FA6.2
3098:  MOVF   00,W
309A:  IORWF  FF2,F
....................                delay_ms(20); 
309C:  MOVLW  14
309E:  MOVLB  0
30A0:  MOVWF  xC6
30A2:  CALL   06E2
....................                Cambio=ON; 
30A6:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
30A8:  BRA    30AC
....................          Flanco1 = 0; 
30AA:  BCF    16.4
....................       } 
....................              
....................       if(IZQU){// Si oprime Izquierda 
30AC:  BSF    F96.2
30AE:  BTFSS  F84.2
30B0:  BRA    30E8
....................          delay_ms(20); 
30B2:  MOVLW  14
30B4:  MOVWF  xC6
30B6:  CALL   06E2
....................          if(IZQU){ 
30BA:  BSF    F96.2
30BC:  BTFSS  F84.2
30BE:  BRA    30E6
....................             if(Flanco3 == 0){ 
30C0:  BTFSC  16.6
30C2:  BRA    30E6
....................                /*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f"); 
30C4:  MOVLW  01
30C6:  MOVWF  18
30C8:  CLRF   31
30CA:  MOVLW  02
30CC:  MOVWF  1C
30CE:  MOVWF  1E
30D0:  MOVLW  0B
30D2:  MOVWF  1B
30D4:  MOVLW  1E
30D6:  MOVWF  xC6
30D8:  CALL   06E2
30DC:  MOVLW  0C
30DE:  MOVWF  xC0
30E0:  CALL   08B4
....................                Cambio=ON; 
30E4:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
30E6:  BRA    30EA
....................          Flanco3 = 0; 
30E8:  BCF    16.6
....................       } 
....................    } 
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6){ // Menu de seleccion de estado de Alarma 
30EA:  MOVF   18,W
30EC:  SUBLW  06
30EE:  BTFSS  FD8.2
30F0:  BRA    3218
....................    estadoalarma=!estadoalarma;Flanco1 = 1;Menu=1; paso=0; 
30F2:  BTG    17.4
30F4:  BSF    16.4
30F6:  MOVLW  01
30F8:  MOVWF  18
30FA:  CLRF   31
....................                        
....................             if(estadoalarma==1) 
30FC:  BTFSS  17.4
30FE:  BRA    3160
....................             {estadoalarma=1; 
3100:  BSF    17.4
....................                lcd_gotoxy(1,1); 
3102:  MOVLW  01
3104:  MOVWF  xC1
3106:  MOVWF  xC2
3108:  CALL   0852
....................                printf(lcd_putc,"                    "); 
310C:  MOVLW  78
310E:  MOVWF  FF6
3110:  MOVLW  05
3112:  MOVWF  FF7
3114:  CALL   0912
....................                lcd_gotoxy(1,2); 
3118:  MOVLW  01
311A:  MOVWF  xC1
311C:  MOVLW  02
311E:  MOVWF  xC2
3120:  CALL   0852
....................                printf(lcd_putc,"        Activo      "); 
3124:  MOVLW  8E
3126:  MOVWF  FF6
3128:  MOVLW  05
312A:  MOVWF  FF7
312C:  CALL   0912
....................                lcd_gotoxy(1,3); 
3130:  MOVLW  01
3132:  MOVWF  xC1
3134:  MOVLW  03
3136:  MOVWF  xC2
3138:  CALL   0852
....................                printf(lcd_putc,"        Alarma      "); 
313C:  MOVLW  A4
313E:  MOVWF  FF6
3140:  MOVLW  05
3142:  MOVWF  FF7
3144:  CALL   0912
....................                lcd_gotoxy(1,4); 
3148:  MOVLW  01
314A:  MOVWF  xC1
314C:  MOVLW  04
314E:  MOVWF  xC2
3150:  CALL   0852
....................                printf(lcd_putc,"                    ");} 
3154:  MOVLW  BA
3156:  MOVWF  FF6
3158:  MOVLW  05
315A:  MOVWF  FF7
315C:  CALL   0912
....................                 
....................             if(estadoalarma==0) 
3160:  BTFSC  17.4
3162:  BRA    31C4
....................             {estadoalarma=0; 
3164:  BCF    17.4
....................                lcd_gotoxy(1,1); 
3166:  MOVLW  01
3168:  MOVWF  xC1
316A:  MOVWF  xC2
316C:  CALL   0852
....................                printf(lcd_putc,"                    "); 
3170:  MOVLW  D0
3172:  MOVWF  FF6
3174:  MOVLW  05
3176:  MOVWF  FF7
3178:  CALL   0912
....................                lcd_gotoxy(1,2); 
317C:  MOVLW  01
317E:  MOVWF  xC1
3180:  MOVLW  02
3182:  MOVWF  xC2
3184:  CALL   0852
....................                printf(lcd_putc,"      Desactivo     "); 
3188:  MOVLW  E6
318A:  MOVWF  FF6
318C:  MOVLW  05
318E:  MOVWF  FF7
3190:  CALL   0912
....................                lcd_gotoxy(1,3); 
3194:  MOVLW  01
3196:  MOVWF  xC1
3198:  MOVLW  03
319A:  MOVWF  xC2
319C:  CALL   0852
....................                printf(lcd_putc,"       Alarma       "); 
31A0:  MOVLW  FC
31A2:  MOVWF  FF6
31A4:  MOVLW  05
31A6:  MOVWF  FF7
31A8:  CALL   0912
....................                lcd_gotoxy(1,4); 
31AC:  MOVLW  01
31AE:  MOVWF  xC1
31B0:  MOVLW  04
31B2:  MOVWF  xC2
31B4:  CALL   0852
....................                printf(lcd_putc,"                    ");} 
31B8:  MOVLW  12
31BA:  MOVWF  FF6
31BC:  MOVLW  06
31BE:  MOVWF  FF7
31C0:  CALL   0912
....................               
....................             write_eeprom(5,estadoalarma);delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
31C4:  MOVLW  00
31C6:  BTFSC  17.4
31C8:  MOVLW  01
31CA:  MOVWF  xAF
31CC:  MOVLW  05
31CE:  MOVWF  FA9
31D0:  MOVFF  AF,FA8
31D4:  BCF    FA6.6
31D6:  BCF    FA6.7
31D8:  BSF    FA6.2
31DA:  MOVF   FF2,W
31DC:  MOVWF  00
31DE:  BCF    FF2.7
31E0:  MOVLB  F
31E2:  MOVLW  55
31E4:  MOVWF  FA7
31E6:  MOVLW  AA
31E8:  MOVWF  FA7
31EA:  BSF    FA6.1
31EC:  BTFSC  FA6.1
31EE:  BRA    31EC
31F0:  BCF    FA6.2
31F2:  MOVF   00,W
31F4:  IORWF  FF2,F
31F6:  MOVLW  04
31F8:  MOVLB  0
31FA:  MOVWF  xAF
31FC:  MOVLW  FA
31FE:  MOVWF  xC6
3200:  CALL   06E2
3204:  DECFSZ xAF,F
3206:  BRA    31FC
3208:  MOVLW  02
320A:  MOVWF  1C
320C:  MOVWF  1E
320E:  MOVLW  0C
3210:  MOVWF  xC0
3212:  CALL   08B4
....................             Cambio=ON; 
3216:  BSF    17.5
....................    }       
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu100--------------------------------------------------------------- 
....................    if(Menu == 50){ // Menu de seleccion de Estado de Luz UV    
3218:  MOVF   18,W
321A:  SUBLW  32
321C:  BTFSS  FD8.2
321E:  BRA    3850
....................    if(Lectura==1) 
3220:  BTFSS  17.0
3222:  BRA    3446
....................    { 
....................       Lectura=0; 
3224:  BCF    17.0
....................       CaidaPresion=Leer_Sensor_Presion(5); 
3226:  MOVLW  05
3228:  MOVWF  xAF
322A:  CALL   10E2
322E:  MOVFF  03,A5
3232:  MOVFF  02,A4
3236:  MOVFF  01,A3
323A:  MOVFF  00,A2
....................       lcd_gotoxy(1,1); 
323E:  MOVLW  01
3240:  MOVWF  xC1
3242:  MOVWF  xC2
3244:  CALL   0852
....................       printf(lcd_putc,"JPCR DP:%3.2f inH2O ",(CaidaPresion*4.02));       
3248:  MOVFF  A5,C6
324C:  MOVFF  A4,C5
3250:  MOVFF  A3,C4
3254:  MOVFF  A2,C3
3258:  MOVLW  D7
325A:  MOVWF  xCA
325C:  MOVLW  A3
325E:  MOVWF  xC9
3260:  CLRF   xC8
3262:  MOVLW  81
3264:  MOVWF  xC7
3266:  CALL   127A
326A:  MOVFF  00,AF
326E:  MOVFF  01,B0
3272:  MOVFF  02,B1
3276:  MOVFF  03,B2
327A:  MOVLW  28
327C:  MOVWF  FF6
327E:  MOVLW  06
3280:  MOVWF  FF7
3282:  MOVLW  08
3284:  MOVWF  xB3
3286:  CALL   0A58
328A:  MOVLW  02
328C:  MOVWF  FE9
328E:  MOVFF  B2,B6
3292:  MOVFF  B1,B5
3296:  MOVFF  B0,B4
329A:  MOVFF  AF,B3
329E:  MOVWF  xB7
32A0:  CALL   1426
32A4:  MOVLW  35
32A6:  MOVWF  FF6
32A8:  MOVLW  06
32AA:  MOVWF  FF7
32AC:  MOVLW  07
32AE:  MOVWF  xB3
32B0:  CALL   0A58
....................       Saturacion=(CaidaPresion/0.37)*11; 
32B4:  MOVFF  A5,C6
32B8:  MOVFF  A4,C5
32BC:  MOVFF  A3,C4
32C0:  MOVFF  A2,C3
32C4:  MOVLW  A4
32C6:  MOVWF  xCA
32C8:  MOVLW  70
32CA:  MOVWF  xC9
32CC:  MOVLW  3D
32CE:  MOVWF  xC8
32D0:  MOVLW  7D
32D2:  MOVWF  xC7
32D4:  CALL   0D1E
32D8:  MOVFF  00,AF
32DC:  MOVFF  01,B0
32E0:  MOVFF  02,B1
32E4:  MOVFF  03,B2
32E8:  MOVFF  03,C6
32EC:  MOVFF  02,C5
32F0:  MOVFF  01,C4
32F4:  MOVFF  00,C3
32F8:  CLRF   xCA
32FA:  CLRF   xC9
32FC:  MOVLW  30
32FE:  MOVWF  xC8
3300:  MOVLW  82
3302:  MOVWF  xC7
3304:  CALL   127A
3308:  MOVFF  03,A1
330C:  MOVFF  02,A0
3310:  MOVFF  01,9F
3314:  MOVFF  00,9E
....................        
....................       if(Saturacion>11) 
3318:  CLRF   xC6
331A:  CLRF   xC5
331C:  MOVLW  30
331E:  MOVWF  xC4
3320:  MOVLW  82
3322:  MOVWF  xC3
3324:  MOVFF  A1,CA
3328:  MOVFF  A0,C9
332C:  MOVFF  9F,C8
3330:  MOVFF  9E,C7
3334:  CALL   0932
3338:  BNC   3346
....................       { 
....................          Saturacion=11; 
333A:  CLRF   xA1
333C:  CLRF   xA0
333E:  MOVLW  30
3340:  MOVWF  x9F
3342:  MOVLW  82
3344:  MOVWF  x9E
....................       } 
....................        
....................       for(i=0;i<floor(Saturacion);i++) 
3346:  CLRF   2D
3348:  MOVFF  A1,B2
334C:  MOVFF  A0,B1
3350:  MOVFF  9F,B0
3354:  MOVFF  9E,AF
3358:  CALL   191E
335C:  MOVFF  00,AF
3360:  MOVFF  01,B0
3364:  MOVFF  02,B1
3368:  MOVFF  03,B2
336C:  CLRF   xC8
336E:  MOVFF  2D,C7
3372:  CALL   07CA
3376:  MOVFF  03,C6
337A:  MOVFF  02,C5
337E:  MOVFF  01,C4
3382:  MOVFF  00,C3
3386:  MOVFF  B2,CA
338A:  MOVFF  B1,C9
338E:  MOVFF  B0,C8
3392:  MOVFF  AF,C7
3396:  CALL   0932
339A:  BNC   33B8
....................       { 
....................          lcd_gotoxy(i+8,2); 
339C:  MOVLW  08
339E:  ADDWF  2D,W
33A0:  MOVWF  xAF
33A2:  MOVWF  xC1
33A4:  MOVLW  02
33A6:  MOVWF  xC2
33A8:  CALL   0852
....................          printf(lcd_putc,"Ñ"); 
33AC:  MOVLW  D1
33AE:  MOVWF  xC0
33B0:  CALL   08B4
....................       } 
33B4:  INCF   2D,F
33B6:  BRA    3348
....................        
....................       for(i=floor(Saturacion);i<11;i++) 
33B8:  MOVFF  A1,B2
33BC:  MOVFF  A0,B1
33C0:  MOVFF  9F,B0
33C4:  MOVFF  9E,AF
33C8:  CALL   191E
33CC:  MOVFF  03,C6
33D0:  MOVFF  02,C5
33D4:  MOVFF  01,C4
33D8:  MOVFF  00,C3
33DC:  CALL   15AC
33E0:  MOVFF  01,2D
33E4:  MOVF   2D,W
33E6:  SUBLW  0A
33E8:  BNC   3406
....................       { 
....................          lcd_gotoxy(i+8,2); 
33EA:  MOVLW  08
33EC:  ADDWF  2D,W
33EE:  MOVWF  xAF
33F0:  MOVWF  xC1
33F2:  MOVLW  02
33F4:  MOVWF  xC2
33F6:  CALL   0852
....................          printf(lcd_putc," "); 
33FA:  MOVLW  20
33FC:  MOVWF  xC0
33FE:  CALL   08B4
....................       } 
3402:  INCF   2D,F
3404:  BRA    33E4
....................        
....................       lcd_gotoxy(9,3); 
3406:  MOVLW  09
3408:  MOVWF  xC1
340A:  MOVLW  03
340C:  MOVWF  xC2
340E:  CALL   0852
....................       printf(lcd_putc,"Tempo:%03u:%02u",tempo_minutos,tempo_segundos); 
3412:  MOVLW  3E
3414:  MOVWF  FF6
3416:  MOVLW  06
3418:  MOVWF  FF7
341A:  MOVLW  06
341C:  MOVWF  xB3
341E:  CALL   0A58
3422:  MOVFF  27,AF
3426:  MOVLW  03
3428:  MOVWF  xB0
342A:  CALL   0C04
342E:  MOVLW  3A
3430:  MOVWF  xC0
3432:  CALL   08B4
3436:  MOVFF  28,AF
343A:  MOVLW  01
343C:  MOVWF  xB0
343E:  CALL   0C04
....................       EliminaRuido(); 
3442:  CALL   0004
....................    } 
....................      
....................    if(tiempo_cumplido==1) 
3446:  BTFSS  16.7
3448:  BRA    34E2
....................    { 
....................       if(estadoalarma==1) 
344A:  BTFSS  17.4
344C:  BRA    34D8
....................       { 
....................          printf(lcd_putc,"\f"); 
344E:  MOVLW  0C
3450:  MOVWF  xC0
3452:  CALL   08B4
....................          lcd_gotoxy(1,2); 
3456:  MOVLW  01
3458:  MOVWF  xC1
345A:  MOVLW  02
345C:  MOVWF  xC2
345E:  CALL   0852
....................          printf(lcd_putc,"  Temporizador  de  "); 
3462:  MOVLW  4E
3464:  MOVWF  FF6
3466:  MOVLW  06
3468:  MOVWF  FF7
346A:  CALL   0912
....................          lcd_gotoxy(1,3); 
346E:  MOVLW  01
3470:  MOVWF  xC1
3472:  MOVLW  03
3474:  MOVWF  xC2
3476:  CALL   0852
....................          printf(lcd_putc," Luz UV  Finalizado "); 
347A:  MOVLW  64
347C:  MOVWF  FF6
347E:  MOVLW  06
3480:  MOVWF  FF7
3482:  CALL   0912
....................          lcd_gotoxy(1,4); 
3486:  MOVLW  01
3488:  MOVWF  xC1
348A:  MOVLW  04
348C:  MOVWF  xC2
348E:  CALL   0852
....................          printf(lcd_putc,"                    "); 
3492:  MOVLW  7A
3494:  MOVWF  FF6
3496:  MOVLW  06
3498:  MOVWF  FF7
349A:  CALL   0912
....................          lcd_gotoxy(1,1); 
349E:  MOVLW  01
34A0:  MOVWF  xC1
34A2:  MOVWF  xC2
34A4:  CALL   0852
....................          printf(lcd_putc,"                    "); 
34A8:  MOVLW  90
34AA:  MOVWF  FF6
34AC:  MOVLW  06
34AE:  MOVWF  FF7
34B0:  CALL   0912
....................          for(i=0;i<5;i++) 
34B4:  CLRF   2D
34B6:  MOVF   2D,W
34B8:  SUBLW  04
34BA:  BNC   34D8
....................          { 
....................             Buzzer_on; 
34BC:  BSF    F8C.0
34BE:  BCF    F95.0
....................             delay_ms(200); 
34C0:  MOVLW  C8
34C2:  MOVWF  xC6
34C4:  CALL   06E2
....................             Buzzer_off; 
34C8:  BCF    F8C.0
34CA:  BCF    F95.0
....................             delay_ms(200); 
34CC:  MOVLW  C8
34CE:  MOVWF  xC6
34D0:  CALL   06E2
....................          } 
34D4:  INCF   2D,F
34D6:  BRA    34B6
....................       } 
....................       tiempo_cumplido=0; 
34D8:  BCF    16.7
....................       printf(lcd_putc,"\f"); 
34DA:  MOVLW  0C
34DC:  MOVWF  xC0
34DE:  CALL   08B4
....................    } 
....................     
....................    if(CaidaPresion>=0.37) 
34E2:  MOVLW  A4
34E4:  MOVWF  xC6
34E6:  MOVLW  70
34E8:  MOVWF  xC5
34EA:  MOVLW  3D
34EC:  MOVWF  xC4
34EE:  MOVLW  7D
34F0:  MOVWF  xC3
34F2:  MOVFF  A5,CA
34F6:  MOVFF  A4,C9
34FA:  MOVFF  A3,C8
34FE:  MOVFF  A2,C7
3502:  CALL   0932
3506:  BC    350A
3508:  BNZ   3510
....................    {  
....................       ActivaBuzzer=1; 
350A:  MOVLW  01
350C:  MOVWF  3D
....................    } 
....................    else 
350E:  BRA    3516
....................    { 
....................       ActivaBuzzer=0; 
3510:  CLRF   3D
....................       Buzzer_off; 
3512:  BCF    F8C.0
3514:  BCF    F95.0
....................    } 
....................        
....................    //if(Cambio){ 
....................       lcd_gotoxy(1,2); 
3516:  MOVLW  01
3518:  MOVWF  xC1
351A:  MOVLW  02
351C:  MOVWF  xC2
351E:  CALL   0852
....................       printf(lcd_putc,"Filtro:"); 
3522:  MOVLW  A6
3524:  MOVWF  FF6
3526:  MOVLW  06
3528:  MOVWF  FF7
352A:  CALL   0912
....................        
....................       if(estadomv==1) 
352E:  BTFSS  16.2
3530:  BRA    354C
....................       { 
....................          lcd_gotoxy(1,4); 
3532:  MOVLW  01
3534:  MOVWF  xC1
3536:  MOVLW  04
3538:  MOVWF  xC2
353A:  CALL   0852
....................          printf(lcd_putc,"Motor:ON ");       
353E:  MOVLW  AE
3540:  MOVWF  FF6
3542:  MOVLW  06
3544:  MOVWF  FF7
3546:  CALL   0912
....................       } 
....................       else 
354A:  BRA    3564
....................       { 
....................          lcd_gotoxy(1,4); 
354C:  MOVLW  01
354E:  MOVWF  xC1
3550:  MOVLW  04
3552:  MOVWF  xC2
3554:  CALL   0852
....................          printf(lcd_putc,"Motor:OFF"); 
3558:  MOVLW  B8
355A:  MOVWF  FF6
355C:  MOVLW  06
355E:  MOVWF  FF7
3560:  CALL   0912
....................       } 
....................        
....................       if(estadouv==1) 
3564:  BTFSS  16.0
3566:  BRA    3582
....................       { 
....................          lcd_gotoxy(13,4); 
3568:  MOVLW  0D
356A:  MOVWF  xC1
356C:  MOVLW  04
356E:  MOVWF  xC2
3570:  CALL   0852
....................          printf(lcd_putc,"UV:ON "); 
3574:  MOVLW  C2
3576:  MOVWF  FF6
3578:  MOVLW  06
357A:  MOVWF  FF7
357C:  CALL   0912
....................       } 
....................       else 
3580:  BRA    359A
....................       {          
....................          lcd_gotoxy(13,4); 
3582:  MOVLW  0D
3584:  MOVWF  xC1
3586:  MOVLW  04
3588:  MOVWF  xC2
358A:  CALL   0852
....................          printf(lcd_putc,"UV:OFF"); 
358E:  MOVLW  CA
3590:  MOVWF  FF6
3592:  MOVLW  06
3594:  MOVWF  FF7
3596:  CALL   0912
....................       } 
....................        
....................       if(estadofl==1) 
359A:  BTFSS  16.1
359C:  BRA    35B8
....................       { 
....................          lcd_gotoxy(1,3); 
359E:  MOVLW  01
35A0:  MOVWF  xC1
35A2:  MOVLW  03
35A4:  MOVWF  xC2
35A6:  CALL   0852
....................          printf(lcd_putc,"Luz:ON "); 
35AA:  MOVLW  D2
35AC:  MOVWF  FF6
35AE:  MOVLW  06
35B0:  MOVWF  FF7
35B2:  CALL   0912
....................       } 
....................       else 
35B6:  BRA    35D0
....................       { 
....................          lcd_gotoxy(1,3); 
35B8:  MOVLW  01
35BA:  MOVWF  xC1
35BC:  MOVLW  03
35BE:  MOVWF  xC2
35C0:  CALL   0852
....................          printf(lcd_putc,"Luz:OFF"); 
35C4:  MOVLW  DA
35C6:  MOVWF  FF6
35C8:  MOVLW  06
35CA:  MOVWF  FF7
35CC:  CALL   0912
....................       }  
....................       Cambio=OFF; 
35D0:  BCF    17.5
....................    //} 
....................     
....................    if(estadomv==1){  
35D2:  BTFSS  16.2
35D4:  BRA    35F8
....................       velocidades(1); 
35D6:  MOVLW  01
35D8:  MOVWF  xAF
35DA:  CALL   1934
....................       if(flagmv==0){ 
35DE:  BTFSC  17.6
35E0:  BRA    35F6
....................          lcd_init();delay_ms(200);lcd_init();flagmv=1;Cambio=ON; 
35E2:  CALL   0774
35E6:  MOVLW  C8
35E8:  MOVWF  xC6
35EA:  CALL   06E2
35EE:  CALL   0774
35F2:  BSF    17.6
35F4:  BSF    17.5
....................       } 
....................    }else{ 
35F6:  BRA    3616
....................       velocidades(0);     
35F8:  CLRF   xAF
35FA:  CALL   1934
....................       if(flagmv==1){ 
35FE:  BTFSS  17.6
3600:  BRA    3616
....................          lcd_init();delay_ms(200);lcd_init();flagmv=0;Cambio=ON; 
3602:  CALL   0774
3606:  MOVLW  C8
3608:  MOVWF  xC6
360A:  CALL   06E2
360E:  CALL   0774
3612:  BCF    17.6
3614:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(estadouv==1) 
3616:  BTFSS  16.0
3618:  BRA    364C
....................    { 
....................       estadomv=0; 
361A:  BCF    16.2
....................       velocidades(0); 
361C:  CLRF   xAF
361E:  CALL   1934
....................       estadofl=0; 
3622:  BCF    16.1
....................       Luz_Blanca_off; 
3624:  BCF    F8C.2
3626:  BCF    F95.2
....................       Luz_UV_on; 
3628:  BSF    F8C.1
362A:  BCF    F95.1
....................       tiempo_cumplido=0; 
362C:  BCF    16.7
....................       if(flaguv==0) 
362E:  BTFSC  17.1
3630:  BRA    364A
....................       { 
....................          lcd_init();delay_ms(200);lcd_init();flaguv=1;guardaruv=1;Cambio=ON; 
3632:  CALL   0774
3636:  MOVLW  C8
3638:  MOVWF  xC6
363A:  CALL   06E2
363E:  CALL   0774
3642:  BSF    17.1
3644:  MOVLW  01
3646:  MOVWF  30
3648:  BSF    17.5
....................       } 
....................    } 
....................    else 
364A:  BRA    366E
....................    { 
....................       estadouv=0; 
364C:  BCF    16.0
....................       Luz_UV_off; 
364E:  BCF    F8C.1
3650:  BCF    F95.1
....................       if(flaguv==1) 
3652:  BTFSS  17.1
3654:  BRA    366E
....................       { 
....................          lcd_init();delay_ms(200);lcd_init();flaguv=0;guardaruv=1;Cambio=ON; 
3656:  CALL   0774
365A:  MOVLW  C8
365C:  MOVWF  xC6
365E:  CALL   06E2
3662:  CALL   0774
3666:  BCF    17.1
3668:  MOVLW  01
366A:  MOVWF  30
366C:  BSF    17.5
....................       } 
....................    } 
....................        
....................    if(estadofl==1) 
366E:  BTFSS  16.1
3670:  BRA    3690
....................    { 
....................       Luz_Blanca_on; 
3672:  BSF    F8C.2
3674:  BCF    F95.2
....................       if(flagfl==0) 
3676:  BTFSC  17.2
3678:  BRA    368E
....................       { 
....................          lcd_init();delay_ms(200);lcd_init();flagfl=1;Cambio=ON; 
367A:  CALL   0774
367E:  MOVLW  C8
3680:  MOVWF  xC6
3682:  CALL   06E2
3686:  CALL   0774
368A:  BSF    17.2
368C:  BSF    17.5
....................       } 
....................    } 
....................    else 
368E:  BRA    36AC
....................    { 
....................       Luz_Blanca_off; 
3690:  BCF    F8C.2
3692:  BCF    F95.2
....................       if(flagfl==1) 
3694:  BTFSS  17.2
3696:  BRA    36AC
....................       { 
....................          lcd_init();delay_ms(200);lcd_init();flagfl=0;Cambio=ON; 
3698:  CALL   0774
369C:  MOVLW  C8
369E:  MOVWF  xC6
36A0:  CALL   06E2
36A4:  CALL   0774
36A8:  BCF    17.2
36AA:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(DOWN)//Si oprime hacia arriba 
36AC:  BSF    F96.0
36AE:  BTFSS  F84.0
36B0:  BRA    36DC
....................    { 
....................       delay_ms(20); 
36B2:  MOVLW  14
36B4:  MOVWF  xC6
36B6:  CALL   06E2
....................       if(DOWN){ 
36BA:  BSF    F96.0
36BC:  BTFSS  F84.0
36BE:  BRA    36DA
....................          if(Flanco == 0) 
36C0:  BTFSC  16.3
36C2:  BRA    36DA
....................          { 
....................             estadofl=!estadofl;Flanco = 1;delay_ms(300);Cambio=ON; 
36C4:  BTG    16.1
36C6:  BSF    16.3
36C8:  MOVLW  02
36CA:  MOVWF  xAF
36CC:  MOVLW  96
36CE:  MOVWF  xC6
36D0:  CALL   06E2
36D4:  DECFSZ xAF,F
36D6:  BRA    36CC
36D8:  BSF    17.5
....................          } 
....................       } 
....................    } 
....................    else 
36DA:  BRA    36DE
....................    { 
....................       Flanco = 0; 
36DC:  BCF    16.3
....................    } 
....................     
....................    if(RIGHT)//Si oprime hacia abajo 
36DE:  BSF    F96.1
36E0:  BTFSS  F84.1
36E2:  BRA    370E
....................    { 
....................       delay_ms(20); 
36E4:  MOVLW  14
36E6:  MOVWF  xC6
36E8:  CALL   06E2
....................       if(RIGHT){ 
36EC:  BSF    F96.1
36EE:  BTFSS  F84.1
36F0:  BRA    370C
....................          if(Flanco1 == 0) 
36F2:  BTFSC  16.4
36F4:  BRA    370C
....................          { 
....................             estadomv=!estadomv;Flanco1 = 1;delay_ms(300);Cambio=ON; 
36F6:  BTG    16.2
36F8:  BSF    16.4
36FA:  MOVLW  02
36FC:  MOVWF  xAF
36FE:  MOVLW  96
3700:  MOVWF  xC6
3702:  CALL   06E2
3706:  DECFSZ xAF,F
3708:  BRA    36FE
370A:  BSF    17.5
....................          } 
....................       } 
....................    } 
....................    else 
370C:  BRA    3710
....................    { 
....................       Flanco1 = 0; 
370E:  BCF    16.4
....................    } 
....................     
....................    if(IZQU)//Si oprime hacia izquierda 
3710:  BSF    F96.2
3712:  BTFSS  F84.2
3714:  BRA    3730
....................    { 
....................       delay_ms(20); 
3716:  MOVLW  14
3718:  MOVWF  xC6
371A:  CALL   06E2
....................       if(IZQU){ 
371E:  BSF    F96.2
3720:  BTFSS  F84.2
3722:  BRA    3730
....................          delay_ms(150);  
3724:  MOVLW  96
3726:  MOVWF  xC6
3728:  CALL   06E2
....................          estadouv=!estadouv; 
372C:  BTG    16.0
....................          Cambio=ON; 
372E:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(UP)//Si oprime hacia izquierda 
3730:  BSF    F92.5
3732:  BTFSS  F80.5
3734:  BRA    3772
....................    { 
....................       delay_ms(20); 
3736:  MOVLW  14
3738:  MOVWF  xC6
373A:  CALL   06E2
....................       if(UP){ 
373E:  BSF    F92.5
3740:  BTFSS  F80.5
3742:  BRA    3772
....................          delay_ms(200); 
3744:  MOVLW  C8
3746:  MOVWF  xC6
3748:  CALL   06E2
....................          printf(lcd_putc,"\f"); 
374C:  MOVLW  0C
374E:  MOVWF  xC0
3750:  CALL   08B4
....................          delay_ms(300); 
3754:  MOVLW  02
3756:  MOVWF  xAF
3758:  MOVLW  96
375A:  MOVWF  xC6
375C:  CALL   06E2
3760:  DECFSZ xAF,F
3762:  BRA    3758
....................          Menu=1;  
3764:  MOVLW  01
3766:  MOVWF  18
....................          paso=0; 
3768:  CLRF   31
....................          Flecha=2; 
376A:  MOVLW  02
376C:  MOVWF  1C
....................          Flecha2=2; 
376E:  MOVWF  1E
....................          Cambio=ON; 
3770:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(guardaruv==1) 
3772:  DECFSZ 30,W
3774:  BRA    3838
....................    { 
....................       write_eeprom(50,segundos);write_eeprom(51,minutos); 
3776:  MOVLW  32
3778:  MOVWF  FA9
377A:  MOVFF  21,FA8
377E:  BCF    FA6.6
3780:  BCF    FA6.7
3782:  BSF    FA6.2
3784:  MOVF   FF2,W
3786:  MOVWF  00
3788:  BCF    FF2.7
378A:  MOVLB  F
378C:  MOVLW  55
378E:  MOVWF  FA7
3790:  MOVLW  AA
3792:  MOVWF  FA7
3794:  BSF    FA6.1
3796:  BTFSC  FA6.1
3798:  BRA    3796
379A:  BCF    FA6.2
379C:  MOVF   00,W
379E:  IORWF  FF2,F
37A0:  MOVLW  33
37A2:  MOVWF  FA9
37A4:  MOVFF  22,FA8
37A8:  BCF    FA6.6
37AA:  BCF    FA6.7
37AC:  BSF    FA6.2
37AE:  MOVF   FF2,W
37B0:  MOVWF  00
37B2:  BCF    FF2.7
37B4:  MOVLW  55
37B6:  MOVWF  FA7
37B8:  MOVLW  AA
37BA:  MOVWF  FA7
37BC:  BSF    FA6.1
37BE:  BTFSC  FA6.1
37C0:  BRA    37BE
37C2:  BCF    FA6.2
37C4:  MOVF   00,W
37C6:  IORWF  FF2,F
....................       horasL=make8(horas,0); 
37C8:  MOVFF  40,23
....................       horasH=make8(horas,1); 
37CC:  MOVFF  41,24
....................       write_eeprom(52,horasL); 
37D0:  MOVLW  34
37D2:  MOVWF  FA9
37D4:  MOVFF  23,FA8
37D8:  BCF    FA6.6
37DA:  BCF    FA6.7
37DC:  BSF    FA6.2
37DE:  MOVFF  FF2,00
37E2:  BCF    FF2.7
37E4:  MOVLW  55
37E6:  MOVWF  FA7
37E8:  MOVLW  AA
37EA:  MOVWF  FA7
37EC:  BSF    FA6.1
37EE:  BTFSC  FA6.1
37F0:  BRA    37EE
37F2:  BCF    FA6.2
37F4:  MOVF   00,W
37F6:  IORWF  FF2,F
....................       delay_ms(20); 
37F8:  MOVLW  14
37FA:  MOVLB  0
37FC:  MOVWF  xC6
37FE:  CALL   06E2
....................       write_eeprom(53,horasH); 
3802:  MOVLW  35
3804:  MOVWF  FA9
3806:  MOVFF  24,FA8
380A:  BCF    FA6.6
380C:  BCF    FA6.7
380E:  BSF    FA6.2
3810:  MOVF   FF2,W
3812:  MOVWF  00
3814:  BCF    FF2.7
3816:  MOVLB  F
3818:  MOVLW  55
381A:  MOVWF  FA7
381C:  MOVLW  AA
381E:  MOVWF  FA7
3820:  BSF    FA6.1
3822:  BTFSC  FA6.1
3824:  BRA    3822
3826:  BCF    FA6.2
3828:  MOVF   00,W
382A:  IORWF  FF2,F
....................       delay_ms(20); 
382C:  MOVLW  14
382E:  MOVLB  0
3830:  MOVWF  xC6
3832:  CALL   06E2
....................       guardaruv=0; 
3836:  CLRF   30
....................    } 
....................     
....................    if(segundos>=60) 
3838:  MOVF   21,W
383A:  SUBLW  3B
383C:  BC    3842
....................    { 
....................       segundos=0;minutos++; 
383E:  CLRF   21
3840:  INCF   22,F
....................    } 
....................    if(minutos==60) 
3842:  MOVF   22,W
3844:  SUBLW  3C
3846:  BNZ   3850
....................    { 
....................       minutos=0;horas++; 
3848:  CLRF   22
384A:  INCF   40,F
384C:  BTFSC  FD8.2
384E:  INCF   41,F
....................    }   
....................      
....................    } 
.................... //----------------Fin-Menu100--------------------------------------------------------------   
....................    if(tiemporeset>=60) 
3850:  MOVF   2F,W
3852:  SUBLW  3B
3854:  BC    386A
....................    { 
....................       lcd_init();delay_ms(200);lcd_init(); 
3856:  CALL   0774
385A:  MOVLW  C8
385C:  MOVWF  xC6
385E:  CALL   06E2
3862:  CALL   0774
....................       tiemporeset=0; 
3866:  CLRF   2F
....................       Cambio=ON; 
3868:  BSF    17.5
....................    }    
....................    } 
386A:  GOTO   1D3A
.................... } 
....................  
386E:  SLEEP 

Configuration Fuses:
   Word  1: CE20   IESO FCMEN HSPLL PLL1 CPUDIV1 USBDIV
   Word  2: 1E1F   BROWNOUT NOWDT BORV20 NOPUT WDT32768 NOVREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
