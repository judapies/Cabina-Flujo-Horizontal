CCS PCH C Compiler, Version 4.104, 5967               01-ago.-18 14:26

               Filename: H:\JP\JP\Laboratorio\Cabina de Flujo Laminar Horizontal\2018\CFLH 120 Blamis Medidor de Flujo #004587820\Firmware CFLH_MF\CabinaCFLH.lst

               ROM used: 20380 bytes (62%)
                         Largest free fragment is 12384
               RAM used: 281 (14%) at main() level
                         318 (16%) worst case
               Stack:    7 worst case (6 in main + 1 for interrupts)

*
0000:  GOTO   1F78
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   00B4
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina de PCR. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz UV, Luz Blanca, Motor Ventilador y Cambio de Contraseña. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... #fuses XTPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,NOVREGEN,NOMCLR,NOPUT// PLL1 para 4 MHz 
.................... //#fuses XT,NOWDT,NOPROTECT,NOLVP,NODEBUG,VREGEN,NOMCLR// PLL1 para 4 MHz 
.................... #use delay(clock=48000000) 
*
080C:  MOVLW  01
080E:  MOVWF  FEA
0810:  MOVLW  2C
0812:  MOVWF  FE9
0814:  MOVF   FEF,W
0816:  BZ    0834
0818:  MOVLW  0F
081A:  MOVWF  01
081C:  CLRF   00
081E:  DECFSZ 00,F
0820:  BRA    081E
0822:  DECFSZ 01,F
0824:  BRA    081C
0826:  MOVLW  8F
0828:  MOVWF  00
082A:  DECFSZ 00,F
082C:  BRA    082A
082E:  NOP   
0830:  DECFSZ FEF,F
0832:  BRA    0818
0834:  RETLW  00
.................... //#use delay(clock=4000000) 
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN unused;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN enable;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTB")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_b(LCD_READ); 
....................       lcd.rw = 1; 
....................       delay_cycles(30); 
....................       lcd.enable = 1; 
....................       delay_cycles(30); 
....................       high = lcd.data; 
....................       lcd.enable = 0; 
....................       delay_cycles(30); 
....................       lcd.enable = 1; 
....................       delay_us(30); 
....................       low = lcd.data; 
....................       lcd.enable = 0; 
....................       set_tris_b(LCD_WRITE); 
....................       return( (high<<4) | low); 
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
0836:  MOVLB  1
0838:  SWAPF  x2D,W
083A:  ANDLW  F0
083C:  MOVWF  00
083E:  MOVLW  0F
0840:  ANDWF  F81,W
0842:  IORWF  00,W
0844:  MOVWF  F81
....................       delay_cycles(30); 
0846:  MOVLW  09
0848:  MOVWF  00
084A:  DECFSZ 00,F
084C:  BRA    084A
084E:  BRA    0850
....................       lcd.enable = 1; 
0850:  BSF    F81.3
....................       delay_us(55); 
0852:  MOVLW  DB
0854:  MOVWF  00
0856:  DECFSZ 00,F
0858:  BRA    0856
085A:  BRA    085C
....................       lcd.enable = 0; 
085C:  BCF    F81.3
.................... } 
085E:  MOVLB  0
0860:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
0862:  BCF    F81.1
....................       //while ( bit_test(lcd_read_byte(),7) ) ; 
....................       delay_ms(1); 
0864:  MOVLW  01
0866:  MOVLB  1
0868:  MOVWF  x2C
086A:  MOVLB  0
086C:  RCALL  080C
....................       lcd.rs = address; 
086E:  MOVLB  1
0870:  BTFSS  x2A.0
0872:  BCF    F81.1
0874:  BTFSC  x2A.0
0876:  BSF    F81.1
....................       delay_cycles(30); 
0878:  MOVLW  09
087A:  MOVWF  00
087C:  DECFSZ 00,F
087E:  BRA    087C
0880:  BRA    0882
....................       lcd.rw = 0; 
0882:  BCF    F81.2
....................       delay_cycles(30); 
0884:  MOVLW  09
0886:  MOVWF  00
0888:  DECFSZ 00,F
088A:  BRA    0888
088C:  BRA    088E
....................       lcd.enable = 0; 
088E:  BCF    F81.3
....................       lcd_send_nibble(n >> 4); 
0890:  SWAPF  x2B,W
0892:  MOVWF  x2C
0894:  MOVLW  0F
0896:  ANDWF  x2C,F
0898:  MOVFF  12C,12D
089C:  MOVLB  0
089E:  RCALL  0836
....................       lcd_send_nibble(n & 0xf); 
08A0:  MOVLB  1
08A2:  MOVF   x2B,W
08A4:  ANDLW  0F
08A6:  MOVWF  x2C
08A8:  MOVWF  x2D
08AA:  MOVLB  0
08AC:  RCALL  0836
.................... } 
08AE:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_b(LCD_WRITE); 
08B0:  MOVLW  00
08B2:  MOVWF  F93
....................     lcd.rs = 0; 
08B4:  BCF    F81.1
....................     lcd.rw = 0; 
08B6:  BCF    F81.2
....................     lcd.enable = 0; 
08B8:  BCF    F81.3
....................     delay_ms(15); 
08BA:  MOVLW  0F
08BC:  MOVLB  1
08BE:  MOVWF  x2C
08C0:  MOVLB  0
08C2:  RCALL  080C
....................     for(i=1;i<=3;++i) { 
08C4:  MOVLW  01
08C6:  MOVLB  1
08C8:  MOVWF  x15
08CA:  MOVF   x15,W
08CC:  SUBLW  03
08CE:  BNC   08E8
....................        lcd_send_nibble(3); 
08D0:  MOVLW  03
08D2:  MOVWF  x2D
08D4:  MOVLB  0
08D6:  RCALL  0836
....................        delay_ms(5); 
08D8:  MOVLW  05
08DA:  MOVLB  1
08DC:  MOVWF  x2C
08DE:  MOVLB  0
08E0:  RCALL  080C
....................     } 
08E2:  MOVLB  1
08E4:  INCF   x15,F
08E6:  BRA    08CA
....................     lcd_send_nibble(2); 
08E8:  MOVLW  02
08EA:  MOVWF  x2D
08EC:  MOVLB  0
08EE:  RCALL  0836
....................     for(i=0;i<=3;++i) 
08F0:  MOVLB  1
08F2:  CLRF   x15
08F4:  MOVF   x15,W
08F6:  SUBLW  03
08F8:  BNC   0920
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
08FA:  CLRF   03
08FC:  MOVF   x15,W
08FE:  MOVFF  FF2,116
0902:  BCF    FF2.7
0904:  MOVLB  0
0906:  CALL   0096
090A:  MOVLB  1
090C:  BTFSC  x16.7
090E:  BSF    FF2.7
0910:  MOVWF  x16
0912:  CLRF   x2A
0914:  MOVWF  x2B
0916:  MOVLB  0
0918:  RCALL  0862
091A:  MOVLB  1
091C:  INCF   x15,F
091E:  BRA    08F4
.................... } 
0920:  MOVLB  0
0922:  RETLW  00
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
*
09AE:  MOVLW  01
09B0:  MOVLB  1
09B2:  SUBWF  x28,W
09B4:  ADDLW  FC
09B6:  BC    09E2
09B8:  ADDLW  04
09BA:  MOVLB  0
09BC:  GOTO   09F4
....................      case 1 : address=0x80;break; 
09C0:  MOVLW  80
09C2:  MOVLB  1
09C4:  MOVWF  x29
09C6:  BRA    09E2
....................      case 2 : address=0xc0;break; 
09C8:  MOVLW  C0
09CA:  MOVLB  1
09CC:  MOVWF  x29
09CE:  BRA    09E2
....................      case 3 : address=0x94;break; 
09D0:  MOVLW  94
09D2:  MOVLB  1
09D4:  MOVWF  x29
09D6:  BRA    09E2
....................      case 4 : address=0xd4;break; 
09D8:  MOVLW  D4
09DA:  MOVLB  1
09DC:  MOVWF  x29
09DE:  BRA    09E2
09E0:  MOVLB  1
....................    } 
....................    address+=x-1; 
09E2:  MOVLW  01
09E4:  SUBWF  x27,W
09E6:  ADDWF  x29,F
....................    lcd_send_byte(0,address); 
09E8:  CLRF   x2A
09EA:  MOVFF  129,12B
09EE:  MOVLB  0
09F0:  RCALL  0862
.................... } 
09F2:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
....................    if(c=='ñ') 
*
0A20:  MOVLB  1
0A22:  MOVF   x26,W
0A24:  SUBLW  F1
0A26:  BNZ   0A2C
....................    { 
....................       c=238; 
0A28:  MOVLW  EE
0A2A:  MOVWF  x26
....................    } 
....................    if(c=='Ñ') 
0A2C:  MOVF   x26,W
0A2E:  SUBLW  D1
0A30:  BNZ   0A36
....................    { 
....................       c=255; 
0A32:  MOVLW  FF
0A34:  MOVWF  x26
....................    } 
....................     
....................    switch (c) { 
0A36:  MOVF   x26,W
0A38:  XORLW  0C
0A3A:  MOVLB  0
0A3C:  BZ    0A48
0A3E:  XORLW  06
0A40:  BZ    0A64
0A42:  XORLW  02
0A44:  BZ    0A76
0A46:  BRA    0A84
....................      case '\f'   : lcd_send_byte(0,1); 
0A48:  MOVLB  1
0A4A:  CLRF   x2A
0A4C:  MOVLW  01
0A4E:  MOVWF  x2B
0A50:  MOVLB  0
0A52:  RCALL  0862
....................                    lcdline=1; 
0A54:  MOVLW  01
0A56:  MOVWF  16
....................                    delay_ms(2); 
0A58:  MOVLW  02
0A5A:  MOVLB  1
0A5C:  MOVWF  x2C
0A5E:  MOVLB  0
0A60:  RCALL  080C
....................                                            break; 
0A62:  BRA    0A94
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
0A64:  INCF   16,F
0A66:  MOVLW  01
0A68:  MOVLB  1
0A6A:  MOVWF  x27
0A6C:  MOVFF  16,128
0A70:  MOVLB  0
0A72:  RCALL  09AE
0A74:  BRA    0A94
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
0A76:  MOVLB  1
0A78:  CLRF   x2A
0A7A:  MOVLW  10
0A7C:  MOVWF  x2B
0A7E:  MOVLB  0
0A80:  RCALL  0862
0A82:  BRA    0A94
....................      default     : lcd_send_byte(1,c);     break; 
0A84:  MOVLW  01
0A86:  MOVLB  1
0A88:  MOVWF  x2A
0A8A:  MOVFF  126,12B
0A8E:  MOVLB  0
0A90:  RCALL  0862
0A92:  BRA    0A94
....................    } 
.................... } 
0A94:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... #include <MATH.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
*
1BBE:  MOVLB  1
1BC0:  BCF    x28.0
....................    y = x; 
1BC2:  MOVFF  11C,121
1BC6:  MOVFF  11B,120
1BCA:  MOVFF  11A,11F
1BCE:  MOVFF  119,11E
....................  
....................    if (x < 0) 
1BD2:  MOVFF  11C,12C
1BD6:  MOVFF  11B,12B
1BDA:  MOVFF  11A,12A
1BDE:  MOVFF  119,129
1BE2:  CLRF   x30
1BE4:  CLRF   x2F
1BE6:  CLRF   x2E
1BE8:  CLRF   x2D
1BEA:  MOVLB  0
1BEC:  CALL   1212
1BF0:  BNC   1BFC
....................    { 
....................       s = 1; 
1BF2:  MOVLB  1
1BF4:  BSF    x28.0
....................       y = -y; 
1BF6:  MOVF   x1F,W
1BF8:  XORLW  80
1BFA:  MOVWF  x1F
....................    } 
....................  
....................    if (y <= 32768.0) 
1BFC:  MOVFF  121,12C
1C00:  MOVFF  120,12B
1C04:  MOVFF  11F,12A
1C08:  MOVFF  11E,129
1C0C:  MOVLB  1
1C0E:  CLRF   x30
1C10:  CLRF   x2F
1C12:  CLRF   x2E
1C14:  MOVLW  8E
1C16:  MOVWF  x2D
1C18:  MOVLB  0
1C1A:  CALL   1212
1C1E:  BC    1C22
1C20:  BNZ   1C52
....................   res = (float32)(unsigned int16)y; 
1C22:  MOVFF  121,12C
1C26:  MOVFF  120,12B
1C2A:  MOVFF  11F,12A
1C2E:  MOVFF  11E,129
1C32:  RCALL  17A6
1C34:  MOVFF  02,12E
1C38:  MOVFF  01,12D
1C3C:  CALL   0924
1C40:  MOVFF  03,125
1C44:  MOVFF  02,124
1C48:  MOVFF  01,123
1C4C:  MOVFF  00,122
....................  
....................  else if (y < 10000000.0) 
1C50:  BRA    1DF4
1C52:  MOVFF  121,12C
1C56:  MOVFF  120,12B
1C5A:  MOVFF  11F,12A
1C5E:  MOVFF  11E,129
1C62:  MOVLW  80
1C64:  MOVLB  1
1C66:  MOVWF  x30
1C68:  MOVLW  96
1C6A:  MOVWF  x2F
1C6C:  MOVLW  18
1C6E:  MOVWF  x2E
1C70:  MOVLW  96
1C72:  MOVWF  x2D
1C74:  MOVLB  0
1C76:  CALL   1212
1C7A:  BTFSS  FD8.0
1C7C:  BRA    1DE4
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
1C7E:  MOVFF  121,12C
1C82:  MOVFF  120,12B
1C86:  MOVFF  11F,12A
1C8A:  MOVFF  11E,129
1C8E:  MOVLB  1
1C90:  CLRF   x30
1C92:  CLRF   x2F
1C94:  CLRF   x2E
1C96:  MOVLW  8E
1C98:  MOVWF  x2D
1C9A:  MOVLB  0
1C9C:  CALL   0AB6
1CA0:  MOVFF  03,12C
1CA4:  MOVFF  02,12B
1CA8:  MOVFF  01,12A
1CAC:  MOVFF  00,129
1CB0:  RCALL  17A6
1CB2:  MOVFF  02,127
1CB6:  MOVFF  01,126
....................       y = 32768.0*(y/32768.0 - (float32)l); 
1CBA:  MOVFF  121,12C
1CBE:  MOVFF  120,12B
1CC2:  MOVFF  11F,12A
1CC6:  MOVFF  11E,129
1CCA:  MOVLB  1
1CCC:  CLRF   x30
1CCE:  CLRF   x2F
1CD0:  CLRF   x2E
1CD2:  MOVLW  8E
1CD4:  MOVWF  x2D
1CD6:  MOVLB  0
1CD8:  CALL   0AB6
1CDC:  MOVFF  00,129
1CE0:  MOVFF  01,12A
1CE4:  MOVFF  02,12B
1CE8:  MOVFF  03,12C
1CEC:  MOVFF  127,12E
1CF0:  MOVFF  126,12D
1CF4:  CALL   0924
1CF8:  BSF    FD8.1
1CFA:  MOVFF  12C,130
1CFE:  MOVFF  12B,12F
1D02:  MOVFF  12A,12E
1D06:  MOVFF  129,12D
1D0A:  MOVFF  03,134
1D0E:  MOVFF  02,133
1D12:  MOVFF  01,132
1D16:  MOVFF  00,131
1D1A:  CALL   0C14
1D1E:  MOVLB  1
1D20:  CLRF   x2C
1D22:  CLRF   x2B
1D24:  CLRF   x2A
1D26:  MOVLW  8E
1D28:  MOVWF  x29
1D2A:  MOVFF  03,130
1D2E:  MOVFF  02,12F
1D32:  MOVFF  01,12E
1D36:  MOVFF  00,12D
1D3A:  MOVLB  0
1D3C:  CALL   143A
1D40:  MOVFF  03,121
1D44:  MOVFF  02,120
1D48:  MOVFF  01,11F
1D4C:  MOVFF  00,11E
....................   res = 32768.0*(float32)l; 
1D50:  MOVFF  127,12E
1D54:  MOVFF  126,12D
1D58:  CALL   0924
1D5C:  MOVLB  1
1D5E:  CLRF   x2C
1D60:  CLRF   x2B
1D62:  CLRF   x2A
1D64:  MOVLW  8E
1D66:  MOVWF  x29
1D68:  MOVFF  03,130
1D6C:  MOVFF  02,12F
1D70:  MOVFF  01,12E
1D74:  MOVFF  00,12D
1D78:  MOVLB  0
1D7A:  CALL   143A
1D7E:  MOVFF  03,125
1D82:  MOVFF  02,124
1D86:  MOVFF  01,123
1D8A:  MOVFF  00,122
....................   res += (float32)(unsigned int16)y; 
1D8E:  MOVFF  121,12C
1D92:  MOVFF  120,12B
1D96:  MOVFF  11F,12A
1D9A:  MOVFF  11E,129
1D9E:  RCALL  17A6
1DA0:  MOVFF  02,12E
1DA4:  MOVFF  01,12D
1DA8:  CALL   0924
1DAC:  BCF    FD8.1
1DAE:  MOVFF  125,130
1DB2:  MOVFF  124,12F
1DB6:  MOVFF  123,12E
1DBA:  MOVFF  122,12D
1DBE:  MOVFF  03,134
1DC2:  MOVFF  02,133
1DC6:  MOVFF  01,132
1DCA:  MOVFF  00,131
1DCE:  CALL   0C14
1DD2:  MOVFF  03,125
1DD6:  MOVFF  02,124
1DDA:  MOVFF  01,123
1DDE:  MOVFF  00,122
....................  } 
....................  
....................  else 
1DE2:  BRA    1DF4
....................   res = y; 
1DE4:  MOVFF  121,125
1DE8:  MOVFF  120,124
1DEC:  MOVFF  11F,123
1DF0:  MOVFF  11E,122
....................  
....................  y = y - (float32)(unsigned int16)y; 
1DF4:  MOVFF  121,12C
1DF8:  MOVFF  120,12B
1DFC:  MOVFF  11F,12A
1E00:  MOVFF  11E,129
1E04:  RCALL  17A6
1E06:  MOVFF  02,12E
1E0A:  MOVFF  01,12D
1E0E:  CALL   0924
1E12:  BSF    FD8.1
1E14:  MOVFF  121,130
1E18:  MOVFF  120,12F
1E1C:  MOVFF  11F,12E
1E20:  MOVFF  11E,12D
1E24:  MOVFF  03,134
1E28:  MOVFF  02,133
1E2C:  MOVFF  01,132
1E30:  MOVFF  00,131
1E34:  CALL   0C14
1E38:  MOVFF  03,121
1E3C:  MOVFF  02,120
1E40:  MOVFF  01,11F
1E44:  MOVFF  00,11E
....................  
....................  if (s) 
1E48:  MOVLB  1
1E4A:  BTFSS  x28.0
1E4C:  BRA    1E54
....................   res = -res; 
1E4E:  MOVF   x23,W
1E50:  XORLW  80
1E52:  MOVWF  x23
....................  
....................  if (y != 0) 
1E54:  MOVFF  121,12C
1E58:  MOVFF  120,12B
1E5C:  MOVFF  11F,12A
1E60:  MOVFF  11E,129
1E64:  CLRF   x30
1E66:  CLRF   x2F
1E68:  CLRF   x2E
1E6A:  CLRF   x2D
1E6C:  MOVLB  0
1E6E:  CALL   1212
1E72:  BZ    1EEC
....................  { 
....................   if (s == 1 && n == 0) 
1E74:  MOVLB  1
1E76:  BTFSS  x28.0
1E78:  BRA    1EB2
1E7A:  MOVF   x1D,F
1E7C:  BNZ   1EB2
....................    res -= 1.0; 
1E7E:  BSF    FD8.1
1E80:  MOVFF  125,130
1E84:  MOVFF  124,12F
1E88:  MOVFF  123,12E
1E8C:  MOVFF  122,12D
1E90:  CLRF   x34
1E92:  CLRF   x33
1E94:  CLRF   x32
1E96:  MOVLW  7F
1E98:  MOVWF  x31
1E9A:  MOVLB  0
1E9C:  CALL   0C14
1EA0:  MOVFF  03,125
1EA4:  MOVFF  02,124
1EA8:  MOVFF  01,123
1EAC:  MOVFF  00,122
1EB0:  MOVLB  1
....................  
....................   if (s == 0 && n == 1) 
1EB2:  BTFSC  x28.0
1EB4:  BRA    1EEE
1EB6:  DECFSZ x1D,W
1EB8:  BRA    1EEE
....................    res += 1.0; 
1EBA:  BCF    FD8.1
1EBC:  MOVFF  125,130
1EC0:  MOVFF  124,12F
1EC4:  MOVFF  123,12E
1EC8:  MOVFF  122,12D
1ECC:  CLRF   x34
1ECE:  CLRF   x33
1ED0:  CLRF   x32
1ED2:  MOVLW  7F
1ED4:  MOVWF  x31
1ED6:  MOVLB  0
1ED8:  CALL   0C14
1EDC:  MOVFF  03,125
1EE0:  MOVFF  02,124
1EE4:  MOVFF  01,123
1EE8:  MOVFF  00,122
1EEC:  MOVLB  1
....................  } 
....................  if (x == 0) 
1EEE:  MOVFF  11C,12C
1EF2:  MOVFF  11B,12B
1EF6:  MOVFF  11A,12A
1EFA:  MOVFF  119,129
1EFE:  CLRF   x30
1F00:  CLRF   x2F
1F02:  CLRF   x2E
1F04:  CLRF   x2D
1F06:  MOVLB  0
1F08:  CALL   1212
1F0C:  BNZ   1F1A
....................     res = 0; 
1F0E:  MOVLB  1
1F10:  CLRF   x25
1F12:  CLRF   x24
1F14:  CLRF   x23
1F16:  CLRF   x22
1F18:  MOVLB  0
....................  
....................  return (res); 
1F1A:  MOVFF  122,00
1F1E:  MOVFF  123,01
1F22:  MOVFF  124,02
1F26:  MOVFF  125,03
.................... } 
1F2A:  GOTO   1F46 (RETURN)
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
1F2E:  MOVFF  118,11C
1F32:  MOVFF  117,11B
1F36:  MOVFF  116,11A
1F3A:  MOVFF  115,119
1F3E:  MOVLB  1
1F40:  CLRF   x1D
1F42:  MOVLB  0
1F44:  BRA    1BBE
.................... } 
1F46:  RETLW  00
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   UP            input(PIN_A5) 
.................... #define   DOWN          input(PIN_E0) 
.................... #define   RIGHT         input(PIN_E1) 
.................... #define   IZQU          input(PIN_E2) 
.................... #define   VIDRIO        !input(PIN_A2) 
....................  
.................... // Definición de otros puertos 
.................... #define   Luz_UV_on         output_bit(PIN_D1,1) 
.................... #define   Luz_UV_off        output_bit(PIN_D1,0) 
.................... #define   Luz_Blanca_on     output_bit(PIN_D2,1) 
.................... #define   Luz_Blanca_off    output_bit(PIN_D2,0) 
.................... #define   Motor_L1_on       output_bit(PIN_D3,1) 
.................... #define   Motor_L1_off      output_bit(PIN_D3,0) 
.................... ////////////////////// 
.................... #define   Motor_L2_on       output_bit(PIN_C6,1) 
.................... #define   Motor_L2_off      output_bit(PIN_C6,0) 
.................... ///////////////////// 
.................... #define   Buzzer_on         output_bit(PIN_D0,1) 
.................... #define   Buzzer_off        output_bit(PIN_D0,0) 
....................  
.................... short estadouv=0,estadofl=0,estadomv=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,tiempo_cumplido=0,Lectura=0,flaguv=0,flagfl=0,estadobuzzer=0,estadoalarma=0; 
.................... short flagmv=0; 
.................... int8 Menu=0, n_opcionH=8,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,segundos=0,minutos=0,horasL=0,horasH=0,G_l=0,G_h=0; 
.................... int8 tempo_minutos=0,tempo_segundos=0,tempo_minutos_pro=0,tempo_segundos_pro=0,r=0,q=0,i=0,unidad2=1,tiemporeset=0,guardaruv=0; 
.................... signed int8   paso=0; 
.................... char t[3]={'>',' ','^'};  
.................... char letra; 
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 ActivaBuzzer=0; 
.................... int16 tiempos,horas=0,G16=0; 
.................... float PromPresion[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float V1=0.0,Presion=0.0,Saturacion=0.0,CaidaPresion=0.0; 
.................... float G=2; 
.................... short Pulso=0; 
.................... ////////// 
.................... unsigned int16 Inflow_adc=1,Temporal1=0; 
....................  
.................... float Diferencia=0.0; 
.................... float Velocidad=0.0,x_uno=0.0,x_cuadrado=0.0,x_cubo=0.0,Ajuste1=0.0; 
.................... float Temporal=0.0,Temporal2=0.0; 
.................... float a=0.0000001418633343546420,b=-0.00009476749001431169,c= 0.040182822903506,d= -5.354852229527197;//Sensor 2 Posible bueno 
.................... float promedio[8]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float Flujo=0.0,zero_fabrica=203.0,zero_actual=0.0; 
....................  
.................... int Vmotor=1; 
.................... int Flancomotor=0; 
.................... float VelocidadAire=0; 
....................  
.................... int8 negativo=10,l=0,h=0,Entero=0,Decimal1=0; 
.................... /////////////////////////////////////////////////// 
....................  
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................  
....................    set_timer1(5536);  // 5 ms 
*
00B4:  MOVLW  15
00B6:  MOVWF  FCF
00B8:  MOVLW  A0
00BA:  MOVWF  FCE
....................    //set_timer1(60536);  // 5 ms 
....................    tiempos++; 
00BC:  INCF   40,F
00BE:  BTFSC  FD8.2
00C0:  INCF   41,F
....................    if(tiempos>=200)   // Ha transcurrido una decima de segundo (PIC18F4550 con XT = 16MHZ) 
00C2:  MOVF   41,F
00C4:  BNZ   00CC
00C6:  MOVF   40,W
00C8:  SUBLW  C7
00CA:  BC    011A
....................    {tiempos=0;tiemporeset++;Lectura=1; 
00CC:  CLRF   41
00CE:  CLRF   40
00D0:  INCF   30,F
00D2:  BSF    18.0
....................     
....................    if(ActivaBuzzer==1) 
00D4:  DECFSZ 3F,W
00D6:  BRA    00EC
....................    { 
....................       if(estadobuzzer==0) 
00D8:  BTFSC  18.3
00DA:  BRA    00E2
....................       { 
....................          Buzzer_off; 
00DC:  BCF    F8C.0
00DE:  BCF    F95.0
....................       } 
....................       else 
00E0:  BRA    00EA
....................       { 
....................          if(estadoalarma==1) 
00E2:  BTFSS  18.4
00E4:  BRA    00EA
....................             Buzzer_on; 
00E6:  BSF    F8C.0
00E8:  BCF    F95.0
....................       } 
....................       estadobuzzer=!estadobuzzer; 
00EA:  BTG    18.3
....................    } 
....................    //----------------------------- Tiempo Total-----------------------------// 
....................    if(estadouv==1) 
00EC:  BTFSS  17.0
00EE:  BRA    011A
....................    { 
....................       segundos++; 
00F0:  INCF   22,F
....................       if(tiempo_cumplido==0) 
00F2:  BTFSC  17.7
00F4:  BRA    011A
....................       { 
....................          if(tempo_segundos>0) 
00F6:  MOVF   29,F
00F8:  BZ    00FE
....................          { 
....................             tempo_segundos--; 
00FA:  DECF   29,F
....................          } 
....................          else 
00FC:  BRA    011A
....................          { 
....................             if(tempo_minutos>0) 
00FE:  MOVF   28,F
0100:  BZ    010A
....................             { 
....................                tempo_minutos--; 
0102:  DECF   28,F
....................                tempo_segundos=59; 
0104:  MOVLW  3B
0106:  MOVWF  29
....................             } 
....................             else 
0108:  BRA    011A
....................             { 
....................                tiempo_cumplido=1; 
010A:  BSF    17.7
....................                estadouv=0;Luz_UV_off; 
010C:  BCF    17.0
010E:  BCF    F8C.1
0110:  BCF    F95.1
....................                tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
0112:  MOVFF  2A,28
0116:  MOVFF  2B,29
....................             } 
....................          } 
....................       } 
....................    } 
....................          
....................    } 
.................... } 
....................  
011A:  BCF    F9E.0
011C:  GOTO   0054
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {   
....................    if(x==1) 
*
0FE2:  MOVLB  1
0FE4:  DECFSZ x16,W
0FE6:  BRA    1000
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Temporizador UV    ");} 
0FE8:  MOVLW  02
0FEA:  MOVWF  x27
0FEC:  MOVFF  117,128
0FF0:  MOVLB  0
0FF2:  RCALL  09AE
0FF4:  MOVLW  20
0FF6:  MOVWF  FF6
0FF8:  MOVLW  01
0FFA:  MOVWF  FF7
0FFC:  RCALL  0A96
0FFE:  MOVLB  1
....................    if(x==2) 
1000:  MOVF   x16,W
1002:  SUBLW  02
1004:  BNZ   101E
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
1006:  MOVLW  02
1008:  MOVWF  x27
100A:  MOVFF  117,128
100E:  MOVLB  0
1010:  RCALL  09AE
1012:  MOVLW  34
1014:  MOVWF  FF6
1016:  MOVLW  01
1018:  MOVWF  FF7
101A:  RCALL  0A96
101C:  MOVLB  1
....................    if(x==3) 
101E:  MOVF   x16,W
1020:  SUBLW  03
1022:  BNZ   103C
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo Trabajo UV  ");} 
1024:  MOVLW  02
1026:  MOVWF  x27
1028:  MOVFF  117,128
102C:  MOVLB  0
102E:  RCALL  09AE
1030:  MOVLW  48
1032:  MOVWF  FF6
1034:  MOVLW  01
1036:  MOVWF  FF7
1038:  RCALL  0A96
103A:  MOVLB  1
....................    if(x==4) 
103C:  MOVF   x16,W
103E:  SUBLW  04
1040:  BNZ   105A
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Sensor Presion     ");} 
1042:  MOVLW  02
1044:  MOVWF  x27
1046:  MOVFF  117,128
104A:  MOVLB  0
104C:  RCALL  09AE
104E:  MOVLW  5C
1050:  MOVWF  FF6
1052:  MOVLW  01
1054:  MOVWF  FF7
1056:  RCALL  0A96
1058:  MOVLB  1
....................    if(x==5) 
105A:  MOVF   x16,W
105C:  SUBLW  05
105E:  BNZ   1098
....................    {if(estadoalarma==0) 
1060:  BTFSC  18.4
1062:  BRA    107C
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma          OFF");} 
1064:  MOVLW  02
1066:  MOVWF  x27
1068:  MOVFF  117,128
106C:  MOVLB  0
106E:  RCALL  09AE
1070:  MOVLW  70
1072:  MOVWF  FF6
1074:  MOVLW  01
1076:  MOVWF  FF7
1078:  RCALL  0A96
107A:  MOVLB  1
....................    if(estadoalarma==1) 
107C:  BTFSS  18.4
107E:  BRA    1098
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma           ON");} 
1080:  MOVLW  02
1082:  MOVWF  x27
1084:  MOVFF  117,128
1088:  MOVLB  0
108A:  RCALL  09AE
108C:  MOVLW  84
108E:  MOVWF  FF6
1090:  MOVLW  01
1092:  MOVWF  FF7
1094:  RCALL  0A96
1096:  MOVLB  1
....................    }    
....................    if(x==6) 
1098:  MOVF   x16,W
109A:  SUBLW  06
109C:  BNZ   10B6
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Sensor Flujo       ");} 
109E:  MOVLW  02
10A0:  MOVWF  x27
10A2:  MOVFF  117,128
10A6:  MOVLB  0
10A8:  RCALL  09AE
10AA:  MOVLW  98
10AC:  MOVWF  FF6
10AE:  MOVLW  01
10B0:  MOVWF  FF7
10B2:  RCALL  0A96
10B4:  MOVLB  1
....................    if(x==7) 
10B6:  MOVF   x16,W
10B8:  SUBLW  07
10BA:  BNZ   10D4
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Velocidad          ");} 
10BC:  MOVLW  02
10BE:  MOVWF  x27
10C0:  MOVFF  117,128
10C4:  MOVLB  0
10C6:  RCALL  09AE
10C8:  MOVLW  AC
10CA:  MOVWF  FF6
10CC:  MOVLW  01
10CE:  MOVWF  FF7
10D0:  RCALL  0A96
10D2:  MOVLB  1
....................     
.................... } 
10D4:  MOVLB  0
10D6:  RETLW  00
....................  
.................... void velocidades(int8 x)// Funcion para imprimir mensajes de Menu Principal. 
.................... {    
....................       if(x==0){ 
*
1F48:  MOVLB  1
1F4A:  MOVF   x15,F
1F4C:  BNZ   1F58
....................          Motor_L1_off; 
1F4E:  BCF    F8C.3
1F50:  BCF    F95.3
....................          Motor_L2_off; 
1F52:  BCF    F8B.6
1F54:  BCF    F94.6
....................       }else{ 
1F56:  BRA    1F74
....................          if(x==1){ 
1F58:  DECFSZ x15,W
1F5A:  BRA    1F66
....................             Motor_L1_on; 
1F5C:  BSF    F8C.3
1F5E:  BCF    F95.3
....................             Motor_L2_off; 
1F60:  BCF    F8B.6
1F62:  BCF    F94.6
....................          }else{ 
1F64:  BRA    1F74
....................             if(x==2){ 
1F66:  MOVF   x15,W
1F68:  SUBLW  02
1F6A:  BNZ   1F74
....................                Motor_L1_off; 
1F6C:  BCF    F8C.3
1F6E:  BCF    F95.3
....................                Motor_L2_on; 
1F70:  BSF    F8B.6
1F72:  BCF    F94.6
....................             } 
....................          } 
....................       }    
.................... } 
1F74:  MOVLB  0
1F76:  RETLW  00
....................  
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
095A:  MOVLB  1
095C:  RLCF   x1A,W
095E:  MOVWF  00
0960:  RLCF   00,F
0962:  MOVLW  FC
0964:  ANDWF  00,F
0966:  MOVFF  00,01
096A:  MOVF   FC2,W
096C:  ANDLW  C3
096E:  IORWF  00,W
0970:  MOVWF  FC2
0972:  MOVLW  0A
0974:  MOVWF  x2C
0976:  MOVLB  0
0978:  RCALL  080C
097A:  BSF    FC2.1
097C:  BTFSC  FC2.1
097E:  BRA    097C
0980:  MOVFF  FC4,12E
0984:  MOVFF  FC3,12D
0988:  MOVLB  0
098A:  RCALL  0924
098C:  MOVFF  03,11E
0990:  MOVFF  02,11D
0994:  MOVFF  01,11C
0998:  MOVFF  00,11B
099C:  MOVFF  11B,00
09A0:  MOVFF  11C,01
09A4:  MOVFF  11D,02
09A8:  MOVFF  11E,03
.................... } 
09AC:  RETLW  00
....................  
.................... float Leer_Sensor_Presion(int media){ 
*
128C:  MOVLB  1
128E:  CLRF   x19
1290:  CLRF   x18
1292:  CLRF   x17
1294:  CLRF   x16
....................    float promediopresion=0.0; 
....................     
....................    V1=sensores(0);  
1296:  CLRF   x1A
1298:  MOVLB  0
129A:  CALL   095A
129E:  MOVFF  03,99
12A2:  MOVFF  02,98
12A6:  MOVFF  01,97
12AA:  MOVFF  00,96
....................    //V1 = (x_uno*5.0)/1023.0;   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
....................    Presion=(V1/G)-1.0;// Presion=(Voltaje/Ganancia)-1 
12AE:  MOVFF  99,12C
12B2:  MOVFF  98,12B
12B6:  MOVFF  97,12A
12BA:  MOVFF  96,129
12BE:  MOVFF  A9,130
12C2:  MOVFF  A8,12F
12C6:  MOVFF  A7,12E
12CA:  MOVFF  A6,12D
12CE:  CALL   0AB6
12D2:  MOVFF  00,11A
12D6:  MOVFF  01,11B
12DA:  MOVFF  02,11C
12DE:  MOVFF  03,11D
12E2:  BSF    FD8.1
12E4:  MOVFF  03,130
12E8:  MOVFF  02,12F
12EC:  MOVFF  01,12E
12F0:  MOVFF  00,12D
12F4:  MOVLB  1
12F6:  CLRF   x34
12F8:  CLRF   x33
12FA:  CLRF   x32
12FC:  MOVLW  7F
12FE:  MOVWF  x31
1300:  MOVLB  0
1302:  RCALL  0C14
1304:  MOVFF  03,9D
1308:  MOVFF  02,9C
130C:  MOVFF  01,9B
1310:  MOVFF  00,9A
....................     
....................    if(Presion<0.0) 
1314:  MOVFF  9D,12C
1318:  MOVFF  9C,12B
131C:  MOVFF  9B,12A
1320:  MOVFF  9A,129
1324:  MOVLB  1
1326:  CLRF   x30
1328:  CLRF   x2F
132A:  CLRF   x2E
132C:  CLRF   x2D
132E:  MOVLB  0
1330:  RCALL  1212
1332:  BNC   133C
....................    { 
....................       Presion=0.0; 
1334:  CLRF   x9D
1336:  CLRF   x9C
1338:  CLRF   x9B
133A:  CLRF   x9A
....................    } 
....................  
....................    if(r>media-1) 
133C:  MOVLW  01
133E:  MOVLB  1
1340:  SUBWF  x15,W
1342:  SUBWF  2C,W
1344:  BZ    134A
1346:  BNC   134A
....................    {r=0;} 
1348:  CLRF   2C
....................    PromPresion[r]=Presion;r++; 
134A:  MOVF   2C,W
134C:  MULLW  04
134E:  MOVF   FF3,W
1350:  CLRF   03
1352:  ADDLW  46
1354:  MOVWF  FE9
1356:  MOVLW  00
1358:  ADDWFC 03,W
135A:  MOVWF  FEA
135C:  MOVFF  9A,FEF
1360:  MOVFF  9B,FEC
1364:  MOVFF  9C,FEC
1368:  MOVFF  9D,FEC
136C:  INCF   2C,F
....................           
....................    for(q=0;q<=(media-1);q++) 
136E:  CLRF   2D
1370:  MOVLW  01
1372:  SUBWF  x15,W
1374:  SUBWF  2D,W
1376:  BZ    137A
1378:  BC    13E8
....................    { 
....................       promediopresion+=PromPresion[q]; 
137A:  MOVF   2D,W
137C:  MULLW  04
137E:  MOVF   FF3,W
1380:  CLRF   03
1382:  ADDLW  46
1384:  MOVWF  FE9
1386:  MOVLW  00
1388:  ADDWFC 03,W
138A:  MOVWF  FEA
138C:  MOVFF  FEF,00
1390:  MOVFF  FEC,01
1394:  MOVFF  FEC,02
1398:  MOVFF  FEC,03
139C:  MOVFF  FEA,11B
13A0:  MOVFF  FE9,11A
13A4:  BCF    FD8.1
13A6:  MOVFF  119,130
13AA:  MOVFF  118,12F
13AE:  MOVFF  117,12E
13B2:  MOVFF  116,12D
13B6:  MOVFF  03,134
13BA:  MOVFF  02,133
13BE:  MOVFF  01,132
13C2:  MOVFF  00,131
13C6:  MOVLB  0
13C8:  RCALL  0C14
13CA:  MOVFF  11B,FEA
13CE:  MOVFF  11A,FE9
13D2:  MOVFF  03,119
13D6:  MOVFF  02,118
13DA:  MOVFF  01,117
13DE:  MOVFF  00,116
....................    }  
13E2:  INCF   2D,F
13E4:  MOVLB  1
13E6:  BRA    1370
....................    promediopresion=promediopresion/media;    
13E8:  CLRF   x2E
13EA:  MOVFF  115,12D
13EE:  MOVLB  0
13F0:  CALL   0924
13F4:  MOVFF  119,12C
13F8:  MOVFF  118,12B
13FC:  MOVFF  117,12A
1400:  MOVFF  116,129
1404:  MOVFF  03,130
1408:  MOVFF  02,12F
140C:  MOVFF  01,12E
1410:  MOVFF  00,12D
1414:  CALL   0AB6
1418:  MOVFF  03,119
141C:  MOVFF  02,118
1420:  MOVFF  01,117
1424:  MOVFF  00,116
....................     
....................    return promediopresion; 
1428:  MOVFF  116,00
142C:  MOVFF  117,01
1430:  MOVFF  118,02
1434:  MOVFF  119,03
.................... } 
1438:  RETLW  00
....................  
.................... /////////// sensor de flujo ////////////////// 
.................... Float LeerFlujo(int media) 
.................... { 
....................     InFlow_adc=sensores(1); 
*
17E2:  MOVLW  01
17E4:  MOVLB  1
17E6:  MOVWF  x1A
17E8:  MOVLB  0
17EA:  CALL   095A
17EE:  MOVFF  03,12C
17F2:  MOVFF  02,12B
17F6:  MOVFF  01,12A
17FA:  MOVFF  00,129
17FE:  RCALL  17A6
1800:  MOVFF  02,AB
1804:  MOVFF  01,AA
....................        
....................     if(negativo==10) 
1808:  MOVLB  1
180A:  MOVF   x10,W
180C:  SUBLW  0A
180E:  BNZ   1856
....................     { 
....................       x_uno=Inflow_adc+Diferencia; 
1810:  MOVFF  AB,12E
1814:  MOVFF  AA,12D
1818:  MOVLB  0
181A:  CALL   0924
181E:  BCF    FD8.1
1820:  MOVFF  03,130
1824:  MOVFF  02,12F
1828:  MOVFF  01,12E
182C:  MOVFF  00,12D
1830:  MOVFF  B1,134
1834:  MOVFF  B0,133
1838:  MOVFF  AF,132
183C:  MOVFF  AE,131
1840:  CALL   0C14
1844:  MOVFF  03,B9
1848:  MOVFF  02,B8
184C:  MOVFF  01,B7
1850:  MOVFF  00,B6
1854:  MOVLB  1
....................     } 
....................     if(negativo==20) 
1856:  MOVF   x10,W
1858:  SUBLW  14
185A:  BNZ   18A0
....................     { 
....................       x_uno=Inflow_adc-Diferencia; 
185C:  MOVFF  AB,12E
1860:  MOVFF  AA,12D
1864:  MOVLB  0
1866:  CALL   0924
186A:  BSF    FD8.1
186C:  MOVFF  03,130
1870:  MOVFF  02,12F
1874:  MOVFF  01,12E
1878:  MOVFF  00,12D
187C:  MOVFF  B1,134
1880:  MOVFF  B0,133
1884:  MOVFF  AF,132
1888:  MOVFF  AE,131
188C:  CALL   0C14
1890:  MOVFF  03,B9
1894:  MOVFF  02,B8
1898:  MOVFF  01,B7
189C:  MOVFF  00,B6
....................     } 
....................     x_cuadrado=x_uno*x_uno; 
18A0:  MOVFF  B9,12C
18A4:  MOVFF  B8,12B
18A8:  MOVFF  B7,12A
18AC:  MOVFF  B6,129
18B0:  MOVFF  B9,130
18B4:  MOVFF  B8,12F
18B8:  MOVFF  B7,12E
18BC:  MOVFF  B6,12D
18C0:  MOVLB  0
18C2:  RCALL  143A
18C4:  MOVFF  03,BD
18C8:  MOVFF  02,BC
18CC:  MOVFF  01,BB
18D0:  MOVFF  00,BA
....................     x_cubo=x_uno*x_cuadrado; 
18D4:  MOVFF  B9,12C
18D8:  MOVFF  B8,12B
18DC:  MOVFF  B7,12A
18E0:  MOVFF  B6,129
18E4:  MOVFF  BD,130
18E8:  MOVFF  BC,12F
18EC:  MOVFF  BB,12E
18F0:  MOVFF  BA,12D
18F4:  RCALL  143A
18F6:  MOVFF  03,C1
18FA:  MOVFF  02,C0
18FE:  MOVFF  01,BF
1902:  MOVFF  00,BE
....................     Velocidad=(x_cubo*a)+(x_cuadrado*b)+(x_uno*c)+d;  
1906:  MOVFF  C1,12C
190A:  MOVFF  C0,12B
190E:  MOVFF  BF,12A
1912:  MOVFF  BE,129
1916:  MOVFF  D1,130
191A:  MOVFF  D0,12F
191E:  MOVFF  CF,12E
1922:  MOVFF  CE,12D
1926:  RCALL  143A
1928:  MOVFF  00,116
192C:  MOVFF  01,117
1930:  MOVFF  02,118
1934:  MOVFF  03,119
1938:  MOVFF  BD,12C
193C:  MOVFF  BC,12B
1940:  MOVFF  BB,12A
1944:  MOVFF  BA,129
1948:  MOVFF  D5,130
194C:  MOVFF  D4,12F
1950:  MOVFF  D3,12E
1954:  MOVFF  D2,12D
1958:  RCALL  143A
195A:  BCF    FD8.1
195C:  MOVFF  119,130
1960:  MOVFF  118,12F
1964:  MOVFF  117,12E
1968:  MOVFF  116,12D
196C:  MOVFF  03,134
1970:  MOVFF  02,133
1974:  MOVFF  01,132
1978:  MOVFF  00,131
197C:  CALL   0C14
1980:  MOVFF  00,116
1984:  MOVFF  01,117
1988:  MOVFF  02,118
198C:  MOVFF  03,119
1990:  MOVFF  B9,12C
1994:  MOVFF  B8,12B
1998:  MOVFF  B7,12A
199C:  MOVFF  B6,129
19A0:  MOVFF  D9,130
19A4:  MOVFF  D8,12F
19A8:  MOVFF  D7,12E
19AC:  MOVFF  D6,12D
19B0:  RCALL  143A
19B2:  BCF    FD8.1
19B4:  MOVFF  119,130
19B8:  MOVFF  118,12F
19BC:  MOVFF  117,12E
19C0:  MOVFF  116,12D
19C4:  MOVFF  03,134
19C8:  MOVFF  02,133
19CC:  MOVFF  01,132
19D0:  MOVFF  00,131
19D4:  CALL   0C14
19D8:  MOVFF  00,116
19DC:  MOVFF  01,117
19E0:  MOVFF  02,118
19E4:  MOVFF  03,119
19E8:  BCF    FD8.1
19EA:  MOVFF  03,130
19EE:  MOVFF  02,12F
19F2:  MOVFF  01,12E
19F6:  MOVFF  00,12D
19FA:  MOVFF  DD,134
19FE:  MOVFF  DC,133
1A02:  MOVFF  DB,132
1A06:  MOVFF  DA,131
1A0A:  CALL   0C14
1A0E:  MOVFF  03,B5
1A12:  MOVFF  02,B4
1A16:  MOVFF  01,B3
1A1A:  MOVFF  00,B2
....................     //Velocidad=Velocidad*correccion;//Ajuste de Temperatura 
....................     Velocidad=Velocidad-0.08; 
1A1E:  BSF    FD8.1
1A20:  MOVFF  B5,130
1A24:  MOVFF  B4,12F
1A28:  MOVFF  B3,12E
1A2C:  MOVFF  B2,12D
1A30:  MOVLW  0A
1A32:  MOVLB  1
1A34:  MOVWF  x34
1A36:  MOVLW  D7
1A38:  MOVWF  x33
1A3A:  MOVLW  23
1A3C:  MOVWF  x32
1A3E:  MOVLW  7B
1A40:  MOVWF  x31
1A42:  MOVLB  0
1A44:  CALL   0C14
1A48:  MOVFF  03,B5
1A4C:  MOVFF  02,B4
1A50:  MOVFF  01,B3
1A54:  MOVFF  00,B2
....................     if(Velocidad<0.0) 
1A58:  MOVFF  B5,12C
1A5C:  MOVFF  B4,12B
1A60:  MOVFF  B3,12A
1A64:  MOVFF  B2,129
1A68:  MOVLB  1
1A6A:  CLRF   x30
1A6C:  CLRF   x2F
1A6E:  CLRF   x2E
1A70:  CLRF   x2D
1A72:  MOVLB  0
1A74:  CALL   1212
1A78:  BNC   1A82
....................      {Velocidad=0.0;} 
1A7A:  CLRF   xB5
1A7C:  CLRF   xB4
1A7E:  CLRF   xB3
1A80:  CLRF   xB2
....................       
....................      if(l>=media) 
1A82:  MOVLB  1
1A84:  MOVF   x15,W
1A86:  SUBWF  x11,W
1A88:  BNC   1A8C
....................        {l=0;} 
1A8A:  CLRF   x11
....................       
....................      promedio[l]=Velocidad;l++; 
1A8C:  MOVF   x11,W
1A8E:  MULLW  04
1A90:  MOVF   FF3,W
1A92:  CLRF   03
1A94:  ADDLW  DE
1A96:  MOVWF  FE9
1A98:  MOVLW  00
1A9A:  ADDWFC 03,W
1A9C:  MOVWF  FEA
1A9E:  MOVFF  B2,FEF
1AA2:  MOVFF  B3,FEC
1AA6:  MOVFF  B4,FEC
1AAA:  MOVFF  B5,FEC
1AAE:  INCF   x11,F
....................      Flujo=0; 
1AB0:  CLRF   x01
1AB2:  CLRF   x00
1AB4:  MOVLB  0
1AB6:  CLRF   xFF
1AB8:  CLRF   xFE
....................         for(h=0;h<=(media-1);h++) 
1ABA:  MOVLB  1
1ABC:  CLRF   x12
1ABE:  MOVLW  01
1AC0:  SUBWF  x15,W
1AC2:  SUBWF  x12,W
1AC4:  BZ    1AC8
1AC6:  BC    1B38
....................         { 
....................            Flujo+=promedio[h]; 
1AC8:  MOVF   x12,W
1ACA:  MULLW  04
1ACC:  MOVF   FF3,W
1ACE:  CLRF   03
1AD0:  ADDLW  DE
1AD2:  MOVWF  FE9
1AD4:  MOVLW  00
1AD6:  ADDWFC 03,W
1AD8:  MOVWF  FEA
1ADA:  MOVFF  FEF,00
1ADE:  MOVFF  FEC,01
1AE2:  MOVFF  FEC,02
1AE6:  MOVFF  FEC,03
1AEA:  MOVFF  FEA,117
1AEE:  MOVFF  FE9,116
1AF2:  BCF    FD8.1
1AF4:  MOVFF  101,130
1AF8:  MOVFF  100,12F
1AFC:  MOVFF  FF,12E
1B00:  MOVFF  FE,12D
1B04:  MOVFF  03,134
1B08:  MOVFF  02,133
1B0C:  MOVFF  01,132
1B10:  MOVFF  00,131
1B14:  MOVLB  0
1B16:  CALL   0C14
1B1A:  MOVFF  117,FEA
1B1E:  MOVFF  116,FE9
1B22:  MOVFF  03,101
1B26:  MOVFF  02,100
1B2A:  MOVFF  01,FF
1B2E:  MOVFF  00,FE
....................         }  
1B32:  MOVLB  1
1B34:  INCF   x12,F
1B36:  BRA    1ABE
....................            Flujo=(Flujo/media)*Ajuste1;  
1B38:  CLRF   x2E
1B3A:  MOVFF  115,12D
1B3E:  MOVLB  0
1B40:  CALL   0924
1B44:  MOVFF  101,12C
1B48:  MOVFF  100,12B
1B4C:  MOVFF  FF,12A
1B50:  MOVFF  FE,129
1B54:  MOVFF  03,130
1B58:  MOVFF  02,12F
1B5C:  MOVFF  01,12E
1B60:  MOVFF  00,12D
1B64:  CALL   0AB6
1B68:  MOVFF  00,116
1B6C:  MOVFF  01,117
1B70:  MOVFF  02,118
1B74:  MOVFF  03,119
1B78:  MOVFF  03,12C
1B7C:  MOVFF  02,12B
1B80:  MOVFF  01,12A
1B84:  MOVFF  00,129
1B88:  MOVFF  C5,130
1B8C:  MOVFF  C4,12F
1B90:  MOVFF  C3,12E
1B94:  MOVFF  C2,12D
1B98:  RCALL  143A
1B9A:  MOVFF  03,101
1B9E:  MOVFF  02,100
1BA2:  MOVFF  01,FF
1BA6:  MOVFF  00,FE
....................            return Flujo; 
1BAA:  MOVFF  FE,00
1BAE:  MOVFF  FF,01
1BB2:  MOVFF  100,02
1BB6:  MOVFF  101,03
.................... } 
1BBA:  GOTO   481C (RETURN)
.................... ////////////// fin sensor flujo ////////// 
....................  
.................... void Limita(void){ 
....................     
....................    if(Contrasena[0]>9) 
*
0E8C:  MOVF   3B,W
0E8E:  SUBLW  09
0E90:  BC    0E94
....................       Contrasena[0]=0; 
0E92:  CLRF   3B
....................    if(Contrasena[1]>9) 
0E94:  MOVF   3C,W
0E96:  SUBLW  09
0E98:  BC    0E9C
....................       Contrasena[1]=0; 
0E9A:  CLRF   3C
....................    if(Contrasena[2]>9) 
0E9C:  MOVF   3D,W
0E9E:  SUBLW  09
0EA0:  BC    0EA4
....................       Contrasena[2]=0; 
0EA2:  CLRF   3D
....................    if(Contrasena[3]>9) 
0EA4:  MOVF   3E,W
0EA6:  SUBLW  09
0EA8:  BC    0EAC
....................       Contrasena[3]=0; 
0EAA:  CLRF   3E
....................    /*if(tempo_minutos>60) 
....................       tempo_minutos=0; 
....................    if(tempo_segundos) 
....................       tempo_segundos=0; 
....................    if(segundos>60) 
....................       segundos=0; 
....................    if(minutos>60) 
....................       minutos=0;*/  
.................... } 
0EAC:  GOTO   26E2 (RETURN)
....................  
.................... void main () 
.................... { 
*
1F78:  CLRF   FF8
1F7A:  BCF    FD0.7
1F7C:  BSF    07.7
1F7E:  CLRF   FEA
1F80:  CLRF   FE9
1F82:  BCF    17.0
1F84:  BCF    17.1
1F86:  BCF    17.2
1F88:  BCF    17.3
1F8A:  BCF    17.4
1F8C:  BCF    17.5
1F8E:  BCF    17.6
1F90:  BCF    17.7
1F92:  BCF    18.0
1F94:  BCF    18.1
1F96:  BCF    18.2
1F98:  BCF    18.3
1F9A:  BCF    18.4
1F9C:  BCF    18.5
1F9E:  CLRF   19
1FA0:  MOVLW  08
1FA2:  MOVWF  1A
1FA4:  MOVLW  02
1FA6:  MOVWF  1B
1FA8:  MOVLW  0B
1FAA:  MOVWF  1C
1FAC:  MOVLW  02
1FAE:  MOVWF  1D
1FB0:  MOVLW  03
1FB2:  MOVWF  1E
1FB4:  MOVLW  02
1FB6:  MOVWF  1F
1FB8:  MOVWF  20
1FBA:  MOVLW  04
1FBC:  MOVWF  21
1FBE:  CLRF   22
1FC0:  CLRF   23
1FC2:  CLRF   24
1FC4:  CLRF   25
1FC6:  CLRF   26
1FC8:  CLRF   27
1FCA:  CLRF   28
1FCC:  CLRF   29
1FCE:  CLRF   2A
1FD0:  CLRF   2B
1FD2:  CLRF   2C
1FD4:  CLRF   2D
1FD6:  CLRF   2E
1FD8:  MOVLW  01
1FDA:  MOVWF  2F
1FDC:  CLRF   30
1FDE:  CLRF   31
1FE0:  CLRF   32
1FE2:  CLRF   3F
1FE4:  CLRF   43
1FE6:  CLRF   42
1FE8:  CLRF   45
1FEA:  CLRF   44
1FEC:  CLRF   x99
1FEE:  CLRF   x98
1FF0:  CLRF   x97
1FF2:  CLRF   x96
1FF4:  CLRF   x9D
1FF6:  CLRF   x9C
1FF8:  CLRF   x9B
1FFA:  CLRF   x9A
1FFC:  CLRF   xA1
1FFE:  CLRF   xA0
2000:  CLRF   x9F
2002:  CLRF   x9E
2004:  CLRF   xA5
2006:  CLRF   xA4
2008:  CLRF   xA3
200A:  CLRF   xA2
200C:  CLRF   xA9
200E:  CLRF   xA8
2010:  CLRF   xA7
2012:  MOVLW  80
2014:  MOVWF  xA6
2016:  BCF    18.6
2018:  CLRF   xAB
201A:  MOVLW  01
201C:  MOVWF  xAA
201E:  CLRF   xAD
2020:  CLRF   xAC
2022:  CLRF   xB1
2024:  CLRF   xB0
2026:  CLRF   xAF
2028:  CLRF   xAE
202A:  CLRF   xB5
202C:  CLRF   xB4
202E:  CLRF   xB3
2030:  CLRF   xB2
2032:  CLRF   xB9
2034:  CLRF   xB8
2036:  CLRF   xB7
2038:  CLRF   xB6
203A:  CLRF   xBD
203C:  CLRF   xBC
203E:  CLRF   xBB
2040:  CLRF   xBA
2042:  CLRF   xC1
2044:  CLRF   xC0
2046:  CLRF   xBF
2048:  CLRF   xBE
204A:  CLRF   xC5
204C:  CLRF   xC4
204E:  CLRF   xC3
2050:  CLRF   xC2
2052:  CLRF   xC9
2054:  CLRF   xC8
2056:  CLRF   xC7
2058:  CLRF   xC6
205A:  CLRF   xCD
205C:  CLRF   xCC
205E:  CLRF   xCB
2060:  CLRF   xCA
2062:  MOVLW  19
2064:  MOVWF  xD1
2066:  MOVLW  53
2068:  MOVWF  xD0
206A:  MOVLW  18
206C:  MOVWF  xCF
206E:  MOVLW  68
2070:  MOVWF  xCE
2072:  MOVLW  E9
2074:  MOVWF  xD5
2076:  MOVLW  BD
2078:  MOVWF  xD4
207A:  MOVLW  C6
207C:  MOVWF  xD3
207E:  MOVLW  71
2080:  MOVWF  xD2
2082:  MOVLW  BE
2084:  MOVWF  xD9
2086:  MOVLW  96
2088:  MOVWF  xD8
208A:  MOVLW  24
208C:  MOVWF  xD7
208E:  MOVLW  7A
2090:  MOVWF  xD6
2092:  MOVLW  F3
2094:  MOVWF  xDD
2096:  MOVLW  5A
2098:  MOVWF  xDC
209A:  MOVLW  AB
209C:  MOVWF  xDB
209E:  MOVLW  81
20A0:  MOVWF  xDA
20A2:  MOVLB  1
20A4:  CLRF   x01
20A6:  CLRF   x00
20A8:  MOVLB  0
20AA:  CLRF   xFF
20AC:  CLRF   xFE
20AE:  MOVLB  1
20B0:  CLRF   x05
20B2:  CLRF   x04
20B4:  MOVLW  4B
20B6:  MOVWF  x03
20B8:  MOVLW  86
20BA:  MOVWF  x02
20BC:  CLRF   x09
20BE:  CLRF   x08
20C0:  CLRF   x07
20C2:  CLRF   x06
20C4:  MOVLW  01
20C6:  MOVWF  x0A
20C8:  CLRF   x0B
20CA:  CLRF   x0F
20CC:  CLRF   x0E
20CE:  CLRF   x0D
20D0:  CLRF   x0C
20D2:  MOVLW  0A
20D4:  MOVWF  x10
20D6:  CLRF   x11
20D8:  CLRF   x12
20DA:  CLRF   x13
20DC:  CLRF   x14
20DE:  MOVF   FC1,W
20E0:  ANDLW  C0
20E2:  IORLW  0F
20E4:  MOVWF  FC1
20E6:  MOVLW  07
20E8:  MOVWF  FB4
20EA:  MOVLW  3E
20EC:  MOVWF  33
20EE:  MOVLW  20
20F0:  MOVWF  34
20F2:  MOVLW  5E
20F4:  MOVWF  35
20F6:  CLRF   37
20F8:  CLRF   38
20FA:  CLRF   39
20FC:  CLRF   3A
20FE:  CLRF   3B
2100:  CLRF   3C
2102:  CLRF   3D
2104:  CLRF   3E
2106:  CLRF   46
2108:  CLRF   47
210A:  CLRF   48
210C:  CLRF   49
210E:  CLRF   4A
2110:  CLRF   4B
2112:  CLRF   4C
2114:  CLRF   4D
2116:  CLRF   4E
2118:  CLRF   4F
211A:  CLRF   50
211C:  CLRF   51
211E:  CLRF   52
2120:  CLRF   53
2122:  CLRF   54
2124:  CLRF   55
2126:  CLRF   56
2128:  CLRF   57
212A:  CLRF   58
212C:  CLRF   59
212E:  CLRF   5A
2130:  CLRF   5B
2132:  CLRF   5C
2134:  CLRF   5D
2136:  CLRF   5E
2138:  CLRF   5F
213A:  MOVLB  0
213C:  CLRF   x60
213E:  CLRF   x61
2140:  CLRF   x62
2142:  CLRF   x63
2144:  CLRF   x64
2146:  CLRF   x65
2148:  CLRF   x66
214A:  CLRF   x67
214C:  CLRF   x68
214E:  CLRF   x69
2150:  CLRF   x6A
2152:  CLRF   x6B
2154:  CLRF   x6C
2156:  CLRF   x6D
2158:  CLRF   x6E
215A:  CLRF   x6F
215C:  CLRF   x70
215E:  CLRF   x71
2160:  CLRF   x72
2162:  CLRF   x73
2164:  CLRF   x74
2166:  CLRF   x75
2168:  CLRF   x76
216A:  CLRF   x77
216C:  CLRF   x78
216E:  CLRF   x79
2170:  CLRF   x7A
2172:  CLRF   x7B
2174:  CLRF   x7C
2176:  CLRF   x7D
2178:  CLRF   x7E
217A:  CLRF   x7F
217C:  CLRF   x80
217E:  CLRF   x81
2180:  CLRF   x82
2182:  CLRF   x83
2184:  CLRF   x84
2186:  CLRF   x85
2188:  CLRF   x86
218A:  CLRF   x87
218C:  CLRF   x88
218E:  CLRF   x89
2190:  CLRF   x8A
2192:  CLRF   x8B
2194:  CLRF   x8C
2196:  CLRF   x8D
2198:  CLRF   x8E
219A:  CLRF   x8F
219C:  CLRF   x90
219E:  CLRF   x91
21A0:  CLRF   x92
21A2:  CLRF   x93
21A4:  CLRF   x94
21A6:  CLRF   x95
21A8:  CLRF   xDE
21AA:  CLRF   xDF
21AC:  CLRF   xE0
21AE:  CLRF   xE1
21B0:  CLRF   xE2
21B2:  CLRF   xE3
21B4:  CLRF   xE4
21B6:  CLRF   xE5
21B8:  CLRF   xE6
21BA:  CLRF   xE7
21BC:  CLRF   xE8
21BE:  CLRF   xE9
21C0:  CLRF   xEA
21C2:  CLRF   xEB
21C4:  CLRF   xEC
21C6:  CLRF   xED
21C8:  CLRF   xEE
21CA:  CLRF   xEF
21CC:  CLRF   xF0
21CE:  CLRF   xF1
21D0:  CLRF   xF2
21D2:  CLRF   xF3
21D4:  CLRF   xF4
21D6:  CLRF   xF5
21D8:  CLRF   xF6
21DA:  CLRF   xF7
21DC:  CLRF   xF8
21DE:  CLRF   xF9
21E0:  CLRF   xFA
21E2:  CLRF   xFB
21E4:  CLRF   xFC
21E6:  CLRF   xFD
....................    lcd_init(); 
21E8:  CALL   08B0
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
21EC:  MOVLW  85
21EE:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
21F0:  BSF    F9D.0
....................    setup_adc_ports(AN0_TO_AN1 ); 
21F2:  MOVF   FC1,W
21F4:  ANDLW  C0
21F6:  IORLW  0D
21F8:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
21FA:  BCF    FC0.0
21FC:  BSF    FC0.1
21FE:  BCF    FC0.2
2200:  BSF    FC0.7
2202:  BSF    FC2.0
....................    enable_interrupts(global); 
2204:  MOVLW  C0
2206:  IORWF  FF2,F
....................    sensores(0); 
2208:  MOVLB  1
220A:  CLRF   x1A
220C:  MOVLB  0
220E:  CALL   095A
....................    lcd_gotoxy(1,1); 
2212:  MOVLW  01
2214:  MOVLB  1
2216:  MOVWF  x27
2218:  MOVWF  x28
221A:  MOVLB  0
221C:  CALL   09AE
....................    printf(lcd_putc," CABINA  DE   FLUJO "); 
2220:  MOVLW  C0
2222:  MOVWF  FF6
2224:  MOVLW  01
2226:  MOVWF  FF7
2228:  CALL   0A96
....................    lcd_gotoxy(1,2); 
222C:  MOVLW  01
222E:  MOVLB  1
2230:  MOVWF  x27
2232:  MOVLW  02
2234:  MOVWF  x28
2236:  MOVLB  0
2238:  CALL   09AE
....................    printf(lcd_putc," LAMINAR HORIZONTAL "); 
223C:  MOVLW  D6
223E:  MOVWF  FF6
2240:  MOVLW  01
2242:  MOVWF  FF7
2244:  CALL   0A96
....................    lcd_gotoxy(1,3); 
2248:  MOVLW  01
224A:  MOVLB  1
224C:  MOVWF  x27
224E:  MOVLW  03
2250:  MOVWF  x28
2252:  MOVLB  0
2254:  CALL   09AE
....................    printf(lcd_putc,"    JP INGLOBAL     "); 
2258:  MOVLW  EC
225A:  MOVWF  FF6
225C:  MOVLW  01
225E:  MOVWF  FF7
2260:  CALL   0A96
....................    lcd_gotoxy(1,4); 
2264:  MOVLW  01
2266:  MOVLB  1
2268:  MOVWF  x27
226A:  MOVLW  04
226C:  MOVWF  x28
226E:  MOVLB  0
2270:  CALL   09AE
....................    printf(lcd_putc,"   REF:  JPCFLH120  "); 
2274:  MOVLW  02
2276:  MOVWF  FF6
2278:  MOVLW  02
227A:  MOVWF  FF7
227C:  CALL   0A96
....................    delay_ms(2000); 
2280:  MOVLW  08
2282:  MOVLB  1
2284:  MOVWF  x15
2286:  MOVLW  FA
2288:  MOVWF  x2C
228A:  MOVLB  0
228C:  CALL   080C
2290:  MOVLB  1
2292:  DECFSZ x15,F
2294:  BRA    2286
....................    printf(lcd_putc,"\f");    
2296:  MOVLW  0C
2298:  MOVWF  x26
229A:  MOVLB  0
229C:  CALL   0A20
....................     
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0); 
22A0:  MOVFF  FF2,115
22A4:  BCF    FF2.7
22A6:  CLRF   FA9
22A8:  BCF    FA6.6
22AA:  BCF    FA6.7
22AC:  BSF    FA6.0
22AE:  MOVF   FA8,W
22B0:  MOVLB  1
22B2:  BTFSC  x15.7
22B4:  BSF    FF2.7
22B6:  MOVWF  3B
....................    delay_ms(20); 
22B8:  MOVLW  14
22BA:  MOVWF  x2C
22BC:  MOVLB  0
22BE:  CALL   080C
....................    contrasena[1]=read_eeprom(1); 
22C2:  MOVFF  FF2,115
22C6:  BCF    FF2.7
22C8:  MOVLW  01
22CA:  MOVWF  FA9
22CC:  BCF    FA6.6
22CE:  BCF    FA6.7
22D0:  BSF    FA6.0
22D2:  MOVF   FA8,W
22D4:  MOVLB  1
22D6:  BTFSC  x15.7
22D8:  BSF    FF2.7
22DA:  MOVWF  3C
....................    delay_ms(20); 
22DC:  MOVLW  14
22DE:  MOVWF  x2C
22E0:  MOVLB  0
22E2:  CALL   080C
....................    contrasena[2]=read_eeprom(2); 
22E6:  MOVFF  FF2,115
22EA:  BCF    FF2.7
22EC:  MOVLW  02
22EE:  MOVWF  FA9
22F0:  BCF    FA6.6
22F2:  BCF    FA6.7
22F4:  BSF    FA6.0
22F6:  MOVF   FA8,W
22F8:  MOVLB  1
22FA:  BTFSC  x15.7
22FC:  BSF    FF2.7
22FE:  MOVWF  3D
....................    delay_ms(20); 
2300:  MOVLW  14
2302:  MOVWF  x2C
2304:  MOVLB  0
2306:  CALL   080C
....................    contrasena[3]=read_eeprom(3); 
230A:  MOVFF  FF2,115
230E:  BCF    FF2.7
2310:  MOVLW  03
2312:  MOVWF  FA9
2314:  BCF    FA6.6
2316:  BCF    FA6.7
2318:  BSF    FA6.0
231A:  MOVF   FA8,W
231C:  MOVLB  1
231E:  BTFSC  x15.7
2320:  BSF    FF2.7
2322:  MOVWF  3E
....................    delay_ms(20); 
2324:  MOVLW  14
2326:  MOVWF  x2C
2328:  MOVLB  0
232A:  CALL   080C
....................    estadoalarma=read_eeprom(5); 
232E:  MOVFF  FF2,115
2332:  BCF    FF2.7
2334:  MOVLW  05
2336:  MOVWF  FA9
2338:  BCF    FA6.6
233A:  BCF    FA6.7
233C:  BSF    FA6.0
233E:  MOVF   FA8,W
2340:  MOVLB  1
2342:  BTFSC  x15.7
2344:  BSF    FF2.7
2346:  MOVWF  01
2348:  BCF    18.4
234A:  BTFSC  01.0
234C:  BSF    18.4
....................    delay_ms(20); 
234E:  MOVLW  14
2350:  MOVWF  x2C
2352:  MOVLB  0
2354:  CALL   080C
....................    tempo_minutos=read_eeprom(20); 
2358:  MOVFF  FF2,115
235C:  BCF    FF2.7
235E:  MOVLW  14
2360:  MOVWF  FA9
2362:  BCF    FA6.6
2364:  BCF    FA6.7
2366:  BSF    FA6.0
2368:  MOVF   FA8,W
236A:  MOVLB  1
236C:  BTFSC  x15.7
236E:  BSF    FF2.7
2370:  MOVWF  28
....................    delay_ms(20); 
2372:  MOVLW  14
2374:  MOVWF  x2C
2376:  MOVLB  0
2378:  CALL   080C
....................    tempo_segundos=read_eeprom(30); 
237C:  MOVFF  FF2,115
2380:  BCF    FF2.7
2382:  MOVLW  1E
2384:  MOVWF  FA9
2386:  BCF    FA6.6
2388:  BCF    FA6.7
238A:  BSF    FA6.0
238C:  MOVF   FA8,W
238E:  MOVLB  1
2390:  BTFSC  x15.7
2392:  BSF    FF2.7
2394:  MOVWF  29
....................    delay_ms(20); 
2396:  MOVLW  14
2398:  MOVWF  x2C
239A:  MOVLB  0
239C:  CALL   080C
....................    segundos=read_eeprom(50); 
23A0:  MOVFF  FF2,115
23A4:  BCF    FF2.7
23A6:  MOVLW  32
23A8:  MOVWF  FA9
23AA:  BCF    FA6.6
23AC:  BCF    FA6.7
23AE:  BSF    FA6.0
23B0:  MOVF   FA8,W
23B2:  MOVLB  1
23B4:  BTFSC  x15.7
23B6:  BSF    FF2.7
23B8:  MOVWF  22
....................    delay_ms(20); 
23BA:  MOVLW  14
23BC:  MOVWF  x2C
23BE:  MOVLB  0
23C0:  CALL   080C
....................    minutos=read_eeprom(51); 
23C4:  MOVFF  FF2,115
23C8:  BCF    FF2.7
23CA:  MOVLW  33
23CC:  MOVWF  FA9
23CE:  BCF    FA6.6
23D0:  BCF    FA6.7
23D2:  BSF    FA6.0
23D4:  MOVF   FA8,W
23D6:  MOVLB  1
23D8:  BTFSC  x15.7
23DA:  BSF    FF2.7
23DC:  MOVWF  23
....................    delay_ms(20); 
23DE:  MOVLW  14
23E0:  MOVWF  x2C
23E2:  MOVLB  0
23E4:  CALL   080C
....................    horasL=read_eeprom(52); 
23E8:  MOVFF  FF2,115
23EC:  BCF    FF2.7
23EE:  MOVLW  34
23F0:  MOVWF  FA9
23F2:  BCF    FA6.6
23F4:  BCF    FA6.7
23F6:  BSF    FA6.0
23F8:  MOVF   FA8,W
23FA:  MOVLB  1
23FC:  BTFSC  x15.7
23FE:  BSF    FF2.7
2400:  MOVWF  24
....................    delay_ms(20); 
2402:  MOVLW  14
2404:  MOVWF  x2C
2406:  MOVLB  0
2408:  CALL   080C
....................    horasH=read_eeprom(53); 
240C:  MOVFF  FF2,115
2410:  BCF    FF2.7
2412:  MOVLW  35
2414:  MOVWF  FA9
2416:  BCF    FA6.6
2418:  BCF    FA6.7
241A:  BSF    FA6.0
241C:  MOVF   FA8,W
241E:  MOVLB  1
2420:  BTFSC  x15.7
2422:  BSF    FF2.7
2424:  MOVWF  25
....................    delay_ms(20); 
2426:  MOVLW  14
2428:  MOVWF  x2C
242A:  MOVLB  0
242C:  CALL   080C
....................     
....................    G_l=read_eeprom(60); 
2430:  MOVFF  FF2,115
2434:  BCF    FF2.7
2436:  MOVLW  3C
2438:  MOVWF  FA9
243A:  BCF    FA6.6
243C:  BCF    FA6.7
243E:  BSF    FA6.0
2440:  MOVF   FA8,W
2442:  MOVLB  1
2444:  BTFSC  x15.7
2446:  BSF    FF2.7
2448:  MOVWF  26
....................    delay_ms(20); 
244A:  MOVLW  14
244C:  MOVWF  x2C
244E:  MOVLB  0
2450:  CALL   080C
....................    G_h=read_eeprom(61); 
2454:  MOVFF  FF2,115
2458:  BCF    FF2.7
245A:  MOVLW  3D
245C:  MOVWF  FA9
245E:  BCF    FA6.6
2460:  BCF    FA6.7
2462:  BSF    FA6.0
2464:  MOVF   FA8,W
2466:  MOVLB  1
2468:  BTFSC  x15.7
246A:  BSF    FF2.7
246C:  MOVWF  27
....................    delay_ms(20); 
246E:  MOVLW  14
2470:  MOVWF  x2C
2472:  MOVLB  0
2474:  CALL   080C
....................    G16=make16(G_h,G_l); 
2478:  MOVFF  27,45
247C:  MOVFF  26,44
....................    G=G16; 
2480:  MOVFF  45,12E
2484:  MOVFF  44,12D
2488:  CALL   0924
248C:  MOVFF  03,A9
2490:  MOVFF  02,A8
2494:  MOVFF  01,A7
2498:  MOVFF  00,A6
....................  
.................... //// 
....................    Vmotor=read_eeprom(70); 
249C:  MOVFF  FF2,115
24A0:  BCF    FF2.7
24A2:  MOVLW  46
24A4:  MOVWF  FA9
24A6:  BCF    FA6.6
24A8:  BCF    FA6.7
24AA:  BSF    FA6.0
24AC:  MOVF   FA8,W
24AE:  MOVLB  1
24B0:  BTFSC  x15.7
24B2:  BSF    FF2.7
24B4:  MOVWF  x0A
....................    delay_ms(20); 
24B6:  MOVLW  14
24B8:  MOVWF  x2C
24BA:  MOVLB  0
24BC:  CALL   080C
....................     
....................    delay_ms(10); 
24C0:  MOVLW  0A
24C2:  MOVLB  1
24C4:  MOVWF  x2C
24C6:  MOVLB  0
24C8:  CALL   080C
....................    Entero=read_eeprom(25);//Decimal1=read_eeprom(26); 
24CC:  MOVFF  FF2,115
24D0:  BCF    FF2.7
24D2:  MOVLW  19
24D4:  MOVWF  FA9
24D6:  BCF    FA6.6
24D8:  BCF    FA6.7
24DA:  BSF    FA6.0
24DC:  MOVF   FA8,W
24DE:  MOVLB  1
24E0:  BTFSC  x15.7
24E2:  BSF    FF2.7
24E4:  MOVWF  x13
....................    delay_ms(10); 
24E6:  MOVLW  0A
24E8:  MOVWF  x2C
24EA:  MOVLB  0
24EC:  CALL   080C
....................    Temporal=read_eeprom(26); 
24F0:  MOVFF  FF2,115
24F4:  BCF    FF2.7
24F6:  MOVLW  1A
24F8:  MOVWF  FA9
24FA:  BCF    FA6.6
24FC:  BCF    FA6.7
24FE:  BSF    FA6.0
2500:  MOVF   FA8,W
2502:  MOVLB  1
2504:  BTFSC  x15.7
2506:  BSF    FF2.7
2508:  CLRF   x2E
250A:  MOVWF  x2D
250C:  MOVLB  0
250E:  CALL   0924
2512:  MOVFF  03,C9
2516:  MOVFF  02,C8
251A:  MOVFF  01,C7
251E:  MOVFF  00,C6
....................    delay_ms(10); 
2522:  MOVLW  0A
2524:  MOVLB  1
2526:  MOVWF  x2C
2528:  MOVLB  0
252A:  CALL   080C
....................    Temporal=Temporal/100.0; 
252E:  MOVFF  C9,12C
2532:  MOVFF  C8,12B
2536:  MOVFF  C7,12A
253A:  MOVFF  C6,129
253E:  MOVLB  1
2540:  CLRF   x30
2542:  CLRF   x2F
2544:  MOVLW  48
2546:  MOVWF  x2E
2548:  MOVLW  85
254A:  MOVWF  x2D
254C:  MOVLB  0
254E:  CALL   0AB6
2552:  MOVFF  03,C9
2556:  MOVFF  02,C8
255A:  MOVFF  01,C7
255E:  MOVFF  00,C6
....................    Ajuste1=Entero+Temporal; 
2562:  MOVLB  1
2564:  CLRF   x2E
2566:  MOVFF  113,12D
256A:  MOVLB  0
256C:  CALL   0924
2570:  BCF    FD8.1
2572:  MOVFF  03,130
2576:  MOVFF  02,12F
257A:  MOVFF  01,12E
257E:  MOVFF  00,12D
2582:  MOVFF  C9,134
2586:  MOVFF  C8,133
258A:  MOVFF  C7,132
258E:  MOVFF  C6,131
2592:  CALL   0C14
2596:  MOVFF  03,C5
259A:  MOVFF  02,C4
259E:  MOVFF  01,C3
25A2:  MOVFF  00,C2
....................      
....................    Entero=read_eeprom(29);//Decimal1=read_eeprom(26); 
25A6:  MOVFF  FF2,115
25AA:  BCF    FF2.7
25AC:  MOVLW  1D
25AE:  MOVWF  FA9
25B0:  BCF    FA6.6
25B2:  BCF    FA6.7
25B4:  BSF    FA6.0
25B6:  MOVF   FA8,W
25B8:  MOVLB  1
25BA:  BTFSC  x15.7
25BC:  BSF    FF2.7
25BE:  MOVWF  x13
....................    delay_ms(10); 
25C0:  MOVLW  0A
25C2:  MOVWF  x2C
25C4:  MOVLB  0
25C6:  CALL   080C
....................    Temporal=read_eeprom(85); 
25CA:  MOVFF  FF2,115
25CE:  BCF    FF2.7
25D0:  MOVLW  55
25D2:  MOVWF  FA9
25D4:  BCF    FA6.6
25D6:  BCF    FA6.7
25D8:  BSF    FA6.0
25DA:  MOVF   FA8,W
25DC:  MOVLB  1
25DE:  BTFSC  x15.7
25E0:  BSF    FF2.7
25E2:  CLRF   x2E
25E4:  MOVWF  x2D
25E6:  MOVLB  0
25E8:  CALL   0924
25EC:  MOVFF  03,C9
25F0:  MOVFF  02,C8
25F4:  MOVFF  01,C7
25F8:  MOVFF  00,C6
....................    delay_ms(10); 
25FC:  MOVLW  0A
25FE:  MOVLB  1
2600:  MOVWF  x2C
2602:  MOVLB  0
2604:  CALL   080C
....................    Temporal=Temporal/100.0; 
2608:  MOVFF  C9,12C
260C:  MOVFF  C8,12B
2610:  MOVFF  C7,12A
2614:  MOVFF  C6,129
2618:  MOVLB  1
261A:  CLRF   x30
261C:  CLRF   x2F
261E:  MOVLW  48
2620:  MOVWF  x2E
2622:  MOVLW  85
2624:  MOVWF  x2D
2626:  MOVLB  0
2628:  CALL   0AB6
262C:  MOVFF  03,C9
2630:  MOVFF  02,C8
2634:  MOVFF  01,C7
2638:  MOVFF  00,C6
....................    zero_actual=Entero; 
263C:  MOVLB  1
263E:  CLRF   x2E
2640:  MOVFF  113,12D
2644:  MOVLB  0
2646:  CALL   0924
264A:  MOVFF  03,109
264E:  MOVFF  02,108
2652:  MOVFF  01,107
2656:  MOVFF  00,106
....................     
....................    Diferencia=make16(read_eeprom(83),read_eeprom(82)); 
265A:  MOVFF  FF2,115
265E:  BCF    FF2.7
2660:  MOVLW  53
2662:  MOVWF  FA9
2664:  BCF    FA6.6
2666:  BCF    FA6.7
2668:  BSF    FA6.0
266A:  MOVF   FA8,W
266C:  MOVLB  1
266E:  BTFSC  x15.7
2670:  BSF    FF2.7
2672:  MOVWF  x16
2674:  MOVFF  FF2,117
2678:  BCF    FF2.7
267A:  MOVLW  52
267C:  MOVWF  FA9
267E:  BCF    FA6.6
2680:  BCF    FA6.7
2682:  BSF    FA6.0
2684:  MOVF   FA8,W
2686:  BTFSC  x17.7
2688:  BSF    FF2.7
268A:  MOVWF  x18
268C:  MOVFF  116,03
2690:  MOVF   x18,W
2692:  MOVWF  x2D
2694:  MOVFF  03,12E
2698:  MOVLB  0
269A:  CALL   0924
269E:  MOVFF  03,B1
26A2:  MOVFF  02,B0
26A6:  MOVFF  01,AF
26AA:  MOVFF  00,AE
....................    delay_ms(10); 
26AE:  MOVLW  0A
26B0:  MOVLB  1
26B2:  MOVWF  x2C
26B4:  MOVLB  0
26B6:  CALL   080C
....................    negativo=read_eeprom(80); 
26BA:  MOVFF  FF2,115
26BE:  BCF    FF2.7
26C0:  MOVLW  50
26C2:  MOVWF  FA9
26C4:  BCF    FA6.6
26C6:  BCF    FA6.7
26C8:  BSF    FA6.0
26CA:  MOVF   FA8,W
26CC:  MOVLB  1
26CE:  BTFSC  x15.7
26D0:  BSF    FF2.7
26D2:  MOVWF  x10
....................    delay_ms(10); 
26D4:  MOVLW  0A
26D6:  MOVWF  x2C
26D8:  MOVLB  0
26DA:  CALL   080C
....................   
.................... ///// 
....................  
....................    Limita(); 
26DE:  GOTO   0E8C
....................    horas=make16(horasH,horasL); 
26E2:  MOVFF  25,43
26E6:  MOVFF  24,42
....................    tempo_minutos_pro=tempo_minutos;tempo_segundos_pro=tempo_segundos; 
26EA:  MOVFF  28,2A
26EE:  MOVFF  29,2B
....................    //segundos=read_eeprom(50);minutos=read_eeprom(51);horas=read_eeprom(52); 
....................    Pulso=1; 
26F2:  BSF    18.6
....................    while(true){ 
....................  
.................... //------------Menu0------------------------------------------------------------------    
....................    while(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
26F4:  MOVF   19,F
26F6:  BTFSS  FD8.2
26F8:  BRA    2B9A
....................     
....................    if(Pulso){ 
26FA:  BTFSS  18.6
26FC:  BRA    2A38
....................       Pulso=0; 
26FE:  BCF    18.6
....................       lcd_gotoxy(1,1); 
2700:  MOVLW  01
2702:  MOVLB  1
2704:  MOVWF  x27
2706:  MOVWF  x28
2708:  MOVLB  0
270A:  CALL   09AE
....................       printf(lcd_putc,"     Ingrese        "); 
270E:  MOVLW  18
2710:  MOVWF  FF6
2712:  MOVLW  02
2714:  MOVWF  FF7
2716:  CALL   0A96
....................       lcd_gotoxy(1,2); 
271A:  MOVLW  01
271C:  MOVLB  1
271E:  MOVWF  x27
2720:  MOVLW  02
2722:  MOVWF  x28
2724:  MOVLB  0
2726:  CALL   09AE
....................       printf(lcd_putc,"    Contraseña      "); 
272A:  MOVLW  2E
272C:  MOVWF  FF6
272E:  MOVLW  02
2730:  MOVWF  FF7
2732:  CALL   0A96
....................       lcd_gotoxy(1,3); 
2736:  MOVLW  01
2738:  MOVLB  1
273A:  MOVWF  x27
273C:  MOVLW  03
273E:  MOVWF  x28
2740:  MOVLB  0
2742:  CALL   09AE
....................       printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]);  
2746:  MOVLW  44
2748:  MOVWF  FF6
274A:  MOVLW  02
274C:  MOVWF  FF7
274E:  MOVLW  0A
2750:  MOVLB  1
2752:  MOVWF  x19
2754:  MOVLB  0
2756:  CALL   0EB0
275A:  MOVFF  37,115
275E:  MOVLW  1F
2760:  MOVLB  1
2762:  MOVWF  x16
2764:  MOVLB  0
2766:  CALL   0F04
276A:  MOVFF  38,115
276E:  MOVLW  1F
2770:  MOVLB  1
2772:  MOVWF  x16
2774:  MOVLB  0
2776:  CALL   0F04
277A:  MOVFF  39,115
277E:  MOVLW  1F
2780:  MOVLB  1
2782:  MOVWF  x16
2784:  MOVLB  0
2786:  CALL   0F04
278A:  MOVFF  3A,115
278E:  MOVLW  1F
2790:  MOVLB  1
2792:  MOVWF  x16
2794:  MOVLB  0
2796:  CALL   0F04
279A:  MOVLW  20
279C:  MOVLB  1
279E:  MOVWF  x26
27A0:  MOVLB  0
27A2:  CALL   0A20
27A6:  MOVLW  20
27A8:  MOVLB  1
27AA:  MOVWF  x26
27AC:  MOVLB  0
27AE:  CALL   0A20
....................       lcd_gotoxy(unidad,4);// Para mostrar cursor. 
27B2:  MOVFF  1C,127
27B6:  MOVLW  04
27B8:  MOVLB  1
27BA:  MOVWF  x28
27BC:  MOVLB  0
27BE:  CALL   09AE
....................       lcd_putc(t[2]); 
27C2:  MOVFF  35,126
27C6:  CALL   0A20
....................       if(unidad>14)             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
27CA:  MOVF   1C,W
27CC:  SUBLW  0E
27CE:  BTFSC  FD8.0
27D0:  BRA    2A10
....................        { 
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2) // Si Ingresa clave para reset general del sistema. 
27D2:  MOVF   37,W
27D4:  SUBLW  03
27D6:  BNZ   28BA
27D8:  MOVF   38,W
27DA:  SUBLW  08
27DC:  BNZ   28BA
27DE:  MOVF   39,W
27E0:  SUBLW  09
27E2:  BNZ   28BA
27E4:  MOVF   3A,W
27E6:  SUBLW  02
27E8:  BNZ   28BA
....................             {write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
27EA:  CLRF   FA9
27EC:  CLRF   FA8
27EE:  BCF    FA6.6
27F0:  BCF    FA6.7
27F2:  BSF    FA6.2
27F4:  MOVF   FF2,W
27F6:  MOVWF  00
27F8:  BCF    FF2.7
27FA:  MOVLB  F
27FC:  MOVLW  55
27FE:  MOVWF  FA7
2800:  MOVLW  AA
2802:  MOVWF  FA7
2804:  BSF    FA6.1
2806:  BTFSC  FA6.1
2808:  BRA    2806
280A:  BCF    FA6.2
280C:  MOVF   00,W
280E:  IORWF  FF2,F
2810:  MOVLW  14
2812:  MOVLB  1
2814:  MOVWF  x2C
2816:  MOVLB  0
2818:  CALL   080C
281C:  MOVLW  01
281E:  MOVWF  FA9
2820:  CLRF   FA8
2822:  BCF    FA6.6
2824:  BCF    FA6.7
2826:  BSF    FA6.2
2828:  MOVF   FF2,W
282A:  MOVWF  00
282C:  BCF    FF2.7
282E:  MOVLB  F
2830:  MOVLW  55
2832:  MOVWF  FA7
2834:  MOVLW  AA
2836:  MOVWF  FA7
2838:  BSF    FA6.1
283A:  BTFSC  FA6.1
283C:  BRA    283A
283E:  BCF    FA6.2
2840:  MOVF   00,W
2842:  IORWF  FF2,F
2844:  MOVLW  14
2846:  MOVLB  1
2848:  MOVWF  x2C
284A:  MOVLB  0
284C:  CALL   080C
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
2850:  MOVLW  02
2852:  MOVWF  FA9
2854:  CLRF   FA8
2856:  BCF    FA6.6
2858:  BCF    FA6.7
285A:  BSF    FA6.2
285C:  MOVF   FF2,W
285E:  MOVWF  00
2860:  BCF    FF2.7
2862:  MOVLB  F
2864:  MOVLW  55
2866:  MOVWF  FA7
2868:  MOVLW  AA
286A:  MOVWF  FA7
286C:  BSF    FA6.1
286E:  BTFSC  FA6.1
2870:  BRA    286E
2872:  BCF    FA6.2
2874:  MOVF   00,W
2876:  IORWF  FF2,F
2878:  MOVLW  14
287A:  MOVLB  1
287C:  MOVWF  x2C
287E:  MOVLB  0
2880:  CALL   080C
2884:  MOVLW  03
2886:  MOVWF  FA9
2888:  CLRF   FA8
288A:  BCF    FA6.6
288C:  BCF    FA6.7
288E:  BSF    FA6.2
2890:  MOVF   FF2,W
2892:  MOVWF  00
2894:  BCF    FF2.7
2896:  MOVLB  F
2898:  MOVLW  55
289A:  MOVWF  FA7
289C:  MOVLW  AA
289E:  MOVWF  FA7
28A0:  BSF    FA6.1
28A2:  BTFSC  FA6.1
28A4:  BRA    28A2
28A6:  BCF    FA6.2
28A8:  MOVF   00,W
28AA:  IORWF  FF2,F
28AC:  MOVLW  14
28AE:  MOVLB  1
28B0:  MOVWF  x2C
28B2:  MOVLB  0
28B4:  CALL   080C
....................              reset_cpu();} 
28B8:  RESET
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) // Si las claves coinciden pasa a Menu Principal. 
28BA:  MOVF   3B,W
28BC:  SUBWF  37,W
28BE:  BNZ   2974
28C0:  MOVF   3C,W
28C2:  SUBWF  38,W
28C4:  BNZ   2974
28C6:  MOVF   3D,W
28C8:  SUBWF  39,W
28CA:  BNZ   2974
28CC:  MOVF   3E,W
28CE:  SUBWF  3A,W
28D0:  BNZ   2974
....................             {lcd_gotoxy(1,1); 
28D2:  MOVLW  01
28D4:  MOVLB  1
28D6:  MOVWF  x27
28D8:  MOVWF  x28
28DA:  MOVLB  0
28DC:  CALL   09AE
....................             printf(lcd_putc,"                   "); 
28E0:  MOVLW  5A
28E2:  MOVWF  FF6
28E4:  MOVLW  02
28E6:  MOVWF  FF7
28E8:  CALL   0A96
....................             lcd_gotoxy(1,2); 
28EC:  MOVLW  01
28EE:  MOVLB  1
28F0:  MOVWF  x27
28F2:  MOVLW  02
28F4:  MOVWF  x28
28F6:  MOVLB  0
28F8:  CALL   09AE
....................             printf(lcd_putc,"     Contraseña    "); 
28FC:  MOVLW  6E
28FE:  MOVWF  FF6
2900:  MOVLW  02
2902:  MOVWF  FF7
2904:  CALL   0A96
....................             lcd_gotoxy(1,3); 
2908:  MOVLW  01
290A:  MOVLB  1
290C:  MOVWF  x27
290E:  MOVLW  03
2910:  MOVWF  x28
2912:  MOVLB  0
2914:  CALL   09AE
....................             printf(lcd_putc,"      Correcta     "); 
2918:  MOVLW  82
291A:  MOVWF  FF6
291C:  MOVLW  02
291E:  MOVWF  FF7
2920:  CALL   0A96
....................             lcd_gotoxy(1,4); 
2924:  MOVLW  01
2926:  MOVLB  1
2928:  MOVWF  x27
292A:  MOVLW  04
292C:  MOVWF  x28
292E:  MOVLB  0
2930:  CALL   09AE
....................             printf(lcd_putc,"                   "); 
2934:  MOVLW  96
2936:  MOVWF  FF6
2938:  MOVLW  02
293A:  MOVWF  FF7
293C:  CALL   0A96
....................             delay_ms(1000);Menu=50;unidad=11;printf(lcd_putc,"\f");Pulso=1; 
2940:  MOVLW  04
2942:  MOVLB  1
2944:  MOVWF  x15
2946:  MOVLW  FA
2948:  MOVWF  x2C
294A:  MOVLB  0
294C:  CALL   080C
2950:  MOVLB  1
2952:  DECFSZ x15,F
2954:  BRA    2946
2956:  MOVLW  32
2958:  MOVWF  19
295A:  MOVLW  0B
295C:  MOVWF  1C
295E:  MOVLW  0C
2960:  MOVWF  x26
2962:  MOVLB  0
2964:  CALL   0A20
2968:  BSF    18.6
....................             clave[0]=0; 
296A:  CLRF   37
....................             clave[1]=0; 
296C:  CLRF   38
....................             clave[2]=0; 
296E:  CLRF   39
....................             clave[3]=0; 
2970:  CLRF   3A
....................             } 
....................          else                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
2972:  BRA    2A10
....................          {lcd_gotoxy(1,1); 
2974:  MOVLW  01
2976:  MOVLB  1
2978:  MOVWF  x27
297A:  MOVWF  x28
297C:  MOVLB  0
297E:  CALL   09AE
....................             printf(lcd_putc,"                   "); 
2982:  MOVLW  AA
2984:  MOVWF  FF6
2986:  MOVLW  02
2988:  MOVWF  FF7
298A:  CALL   0A96
....................             lcd_gotoxy(1,2); 
298E:  MOVLW  01
2990:  MOVLB  1
2992:  MOVWF  x27
2994:  MOVLW  02
2996:  MOVWF  x28
2998:  MOVLB  0
299A:  CALL   09AE
....................             printf(lcd_putc,"     Contraseña    "); 
299E:  MOVLW  BE
29A0:  MOVWF  FF6
29A2:  MOVLW  02
29A4:  MOVWF  FF7
29A6:  CALL   0A96
....................             lcd_gotoxy(1,3); 
29AA:  MOVLW  01
29AC:  MOVLB  1
29AE:  MOVWF  x27
29B0:  MOVLW  03
29B2:  MOVWF  x28
29B4:  MOVLB  0
29B6:  CALL   09AE
....................             printf(lcd_putc,"     Incorrecta    "); 
29BA:  MOVLW  D2
29BC:  MOVWF  FF6
29BE:  MOVLW  02
29C0:  MOVWF  FF7
29C2:  CALL   0A96
....................             lcd_gotoxy(1,4); 
29C6:  MOVLW  01
29C8:  MOVLB  1
29CA:  MOVWF  x27
29CC:  MOVLW  04
29CE:  MOVWF  x28
29D0:  MOVLB  0
29D2:  CALL   09AE
....................             printf(lcd_putc,"                   "); 
29D6:  MOVLW  E6
29D8:  MOVWF  FF6
29DA:  MOVLW  02
29DC:  MOVWF  FF7
29DE:  CALL   0A96
....................             delay_ms(1000);unidad=11;printf(lcd_putc,"\f");Pulso=1; 
29E2:  MOVLW  04
29E4:  MOVLB  1
29E6:  MOVWF  x15
29E8:  MOVLW  FA
29EA:  MOVWF  x2C
29EC:  MOVLB  0
29EE:  CALL   080C
29F2:  MOVLB  1
29F4:  DECFSZ x15,F
29F6:  BRA    29E8
29F8:  MOVLW  0B
29FA:  MOVWF  1C
29FC:  MOVLW  0C
29FE:  MOVWF  x26
2A00:  MOVLB  0
2A02:  CALL   0A20
2A06:  BSF    18.6
....................             clave[0]=0; 
2A08:  CLRF   37
....................             clave[1]=0; 
2A0A:  CLRF   38
....................             clave[2]=0; 
2A0C:  CLRF   39
....................             clave[3]=0; 
2A0E:  CLRF   3A
....................             } 
....................        } 
....................     
....................        if(unidad>11&&unidad<14){ 
2A10:  MOVF   1C,W
2A12:  SUBLW  0B
2A14:  BC    2A38
2A16:  MOVF   1C,W
2A18:  SUBLW  0D
2A1A:  BNC   2A38
....................          lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2A1C:  MOVLW  01
2A1E:  SUBWF  1C,W
2A20:  MOVLB  1
2A22:  MOVWF  x15
2A24:  MOVWF  x27
2A26:  MOVLW  04
2A28:  MOVWF  x28
2A2A:  MOVLB  0
2A2C:  CALL   09AE
....................          lcd_putc(t[1]); 
2A30:  MOVFF  34,126
2A34:  CALL   0A20
....................        } 
....................    }    
....................        
....................    if(UP){//Si oprime hacia arriba 
2A38:  BSF    F92.5
2A3A:  BTFSS  F80.5
2A3C:  BRA    2A78
....................       delay_ms(20); 
2A3E:  MOVLW  14
2A40:  MOVLB  1
2A42:  MOVWF  x2C
2A44:  MOVLB  0
2A46:  CALL   080C
....................       if(UP){ 
2A4A:  BSF    F92.5
2A4C:  BTFSS  F80.5
2A4E:  BRA    2A76
....................          if(Flanco == 0){ 
2A50:  BTFSC  17.3
2A52:  BRA    2A76
....................             clave[unidad-11]++;Flanco = 1;delay_ms(30);Pulso=1; 
2A54:  MOVLW  0B
2A56:  SUBWF  1C,W
2A58:  CLRF   03
2A5A:  ADDLW  37
2A5C:  MOVWF  FE9
2A5E:  MOVLW  00
2A60:  ADDWFC 03,W
2A62:  MOVWF  FEA
2A64:  INCF   FEF,F
2A66:  BSF    17.3
2A68:  MOVLW  1E
2A6A:  MOVLB  1
2A6C:  MOVWF  x2C
2A6E:  MOVLB  0
2A70:  CALL   080C
2A74:  BSF    18.6
....................          } 
....................       } 
....................    }else{ 
2A76:  BRA    2A7A
....................       Flanco = 0; 
2A78:  BCF    17.3
....................    } 
....................                      
....................    if(DOWN){//Si oprime hacia abajo 
2A7A:  BSF    F96.0
2A7C:  BTFSS  F84.0
2A7E:  BRA    2ABA
....................       delay_ms(20); 
2A80:  MOVLW  14
2A82:  MOVLB  1
2A84:  MOVWF  x2C
2A86:  MOVLB  0
2A88:  CALL   080C
....................       if(DOWN){ 
2A8C:  BSF    F96.0
2A8E:  BTFSS  F84.0
2A90:  BRA    2AB8
....................          if(Flanco2 == 0){ 
2A92:  BTFSC  17.5
2A94:  BRA    2AB8
....................             clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Pulso=1; 
2A96:  MOVLW  0B
2A98:  SUBWF  1C,W
2A9A:  CLRF   03
2A9C:  ADDLW  37
2A9E:  MOVWF  FE9
2AA0:  MOVLW  00
2AA2:  ADDWFC 03,W
2AA4:  MOVWF  FEA
2AA6:  DECF   FEF,F
2AA8:  BSF    17.5
2AAA:  MOVLW  1E
2AAC:  MOVLB  1
2AAE:  MOVWF  x2C
2AB0:  MOVLB  0
2AB2:  CALL   080C
2AB6:  BSF    18.6
....................          } 
....................       } 
....................    }else{ 
2AB8:  BRA    2ABC
....................       Flanco2 = 0; 
2ABA:  BCF    17.5
....................    } 
....................     
....................    if(RIGHT){// Si Oprime Derecha 
2ABC:  BSF    F96.1
2ABE:  BTFSS  F84.1
2AC0:  BRA    2AF8
....................       delay_ms(20); 
2AC2:  MOVLW  14
2AC4:  MOVLB  1
2AC6:  MOVWF  x2C
2AC8:  MOVLB  0
2ACA:  CALL   080C
....................       if(RIGHT){ 
2ACE:  BSF    F96.1
2AD0:  BTFSS  F84.1
2AD2:  BRA    2AF6
....................          if(Flanco1 == 0) { 
2AD4:  BTFSC  17.4
2AD6:  BRA    2AF6
....................             Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Pulso=1; 
2AD8:  BSF    17.4
2ADA:  INCF   1C,F
2ADC:  MOVLW  1E
2ADE:  MOVLB  1
2AE0:  MOVWF  x2C
2AE2:  MOVLB  0
2AE4:  CALL   080C
2AE8:  MOVLW  0C
2AEA:  MOVLB  1
2AEC:  MOVWF  x26
2AEE:  MOVLB  0
2AF0:  CALL   0A20
2AF4:  BSF    18.6
....................          } 
....................       } 
....................    }else{ 
2AF6:  BRA    2AFA
....................       Flanco1 = 0; 
2AF8:  BCF    17.4
....................    } 
....................              
....................    if(IZQU){// Si Oprime izquierda 
2AFA:  BSF    F96.2
2AFC:  BTFSS  F84.2
2AFE:  BRA    2B36
....................       delay_ms(150); 
2B00:  MOVLW  96
2B02:  MOVLB  1
2B04:  MOVWF  x2C
2B06:  MOVLB  0
2B08:  CALL   080C
....................       if(IZQU){ 
2B0C:  BSF    F96.2
2B0E:  BTFSS  F84.2
2B10:  BRA    2B34
....................          if(Flanco3 == 0){ 
2B12:  BTFSC  17.6
2B14:  BRA    2B34
....................             Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Pulso=1; 
2B16:  BSF    17.6
2B18:  DECF   1C,F
2B1A:  MOVLW  1E
2B1C:  MOVLB  1
2B1E:  MOVWF  x2C
2B20:  MOVLB  0
2B22:  CALL   080C
2B26:  MOVLW  0C
2B28:  MOVLB  1
2B2A:  MOVWF  x26
2B2C:  MOVLB  0
2B2E:  CALL   0A20
2B32:  BSF    18.6
....................          } 
....................       } 
....................    }else{ 
2B34:  BRA    2B38
....................       Flanco3 = 0; 
2B36:  BCF    17.6
....................    } 
....................              
....................    if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
2B38:  MOVLW  0B
2B3A:  SUBWF  1C,W
2B3C:  CLRF   03
2B3E:  ADDLW  37
2B40:  MOVWF  FE9
2B42:  MOVLW  00
2B44:  ADDWFC 03,W
2B46:  MOVWF  FEA
2B48:  BTFSC  FEF.7
2B4A:  BRA    2B4E
2B4C:  BRA    2B62
....................       clave[unidad-11]=9; 
2B4E:  MOVLW  0B
2B50:  SUBWF  1C,W
2B52:  CLRF   03
2B54:  ADDLW  37
2B56:  MOVWF  FE9
2B58:  MOVLW  00
2B5A:  ADDWFC 03,W
2B5C:  MOVWF  FEA
2B5E:  MOVLW  09
2B60:  MOVWF  FEF
....................    if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
2B62:  MOVLW  0B
2B64:  SUBWF  1C,W
2B66:  CLRF   03
2B68:  ADDLW  37
2B6A:  MOVWF  FE9
2B6C:  MOVLW  00
2B6E:  ADDWFC 03,W
2B70:  MOVWF  FEA
2B72:  BTFSC  FEF.7
2B74:  BRA    2B8E
2B76:  MOVF   FEF,W
2B78:  SUBLW  09
2B7A:  BC    2B8E
....................       clave[unidad-11]=0; 
2B7C:  MOVLW  0B
2B7E:  SUBWF  1C,W
2B80:  CLRF   03
2B82:  ADDLW  37
2B84:  MOVWF  FE9
2B86:  MOVLW  00
2B88:  ADDWFC 03,W
2B8A:  MOVWF  FEA
2B8C:  CLRF   FEF
....................    if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
2B8E:  MOVF   1C,W
2B90:  SUBLW  0A
2B92:  BNC   2B98
....................       unidad=11; 
2B94:  MOVLW  0B
2B96:  MOVWF  1C
....................  
....................    } 
2B98:  BRA    26F4
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    while(Menu == 1){ // Menu de seleccion de lo que desea encender 
2B9A:  DECFSZ 19,W
2B9C:  BRA    2E2A
....................     
....................       if(Flecha2>nMenuH){ 
2B9E:  MOVF   1F,W
2BA0:  SUBWF  21,W
2BA2:  BC    2BB4
....................          paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4; 
2BA4:  INCF   32,F
2BA6:  MOVFF  1F,21
2BAA:  MOVLW  02
2BAC:  SUBWF  21,W
2BAE:  MOVWF  20
2BB0:  MOVLW  04
2BB2:  MOVWF  1D
....................       } 
....................          
....................       if(Flecha2<nMenuL){ 
2BB4:  MOVF   20,W
2BB6:  SUBWF  1F,W
2BB8:  BC    2BCA
....................          paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2; 
2BBA:  DECF   32,F
2BBC:  MOVFF  1F,20
2BC0:  MOVLW  02
2BC2:  ADDWF  20,W
2BC4:  MOVWF  21
2BC6:  MOVLW  02
2BC8:  MOVWF  1D
....................       } 
....................          
....................       if(Flecha2>n_opcionH){ 
2BCA:  MOVF   1F,W
2BCC:  SUBWF  1A,W
2BCE:  BC    2BE2
....................          Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2; 
2BD0:  MOVFF  1B,1F
2BD4:  MOVLW  02
2BD6:  MOVWF  1D
2BD8:  CLRF   32
2BDA:  MOVFF  1F,20
2BDE:  ADDWF  20,W
2BE0:  MOVWF  21
....................       } 
....................          
....................       if(Flecha2<n_opcionL){ 
2BE2:  MOVF   1B,W
2BE4:  SUBWF  1F,W
2BE6:  BC    2BFE
....................          Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2; 
2BE8:  MOVFF  1A,1F
2BEC:  MOVLW  04
2BEE:  MOVWF  1D
2BF0:  SUBWF  1A,W
2BF2:  MOVWF  32
2BF4:  MOVFF  1F,21
2BF8:  MOVLW  02
2BFA:  SUBWF  21,W
2BFC:  MOVWF  20
....................       } 
....................          
....................       if(paso<0) 
2BFE:  BTFSC  32.7
2C00:  BRA    2C04
2C02:  BRA    2C06
....................          paso=0; 
2C04:  CLRF   32
....................        
....................       if(Pulso){ 
2C06:  BTFSS  18.6
2C08:  BRA    2D1C
....................           lcd_gotoxy(1,1); 
2C0A:  MOVLW  01
2C0C:  MOVLB  1
2C0E:  MOVWF  x27
2C10:  MOVWF  x28
2C12:  MOVLB  0
2C14:  CALL   09AE
....................           printf(lcd_putc,"---MENU PRINCIPAL---"); 
2C18:  MOVLW  FA
2C1A:  MOVWF  FF6
2C1C:  MOVLW  02
2C1E:  MOVWF  FF7
2C20:  CALL   0A96
....................           mensajes(1+paso,2); 
2C24:  MOVLW  01
2C26:  ADDWF  32,W
2C28:  MOVLB  1
2C2A:  MOVWF  x15
2C2C:  MOVWF  x16
2C2E:  MOVLW  02
2C30:  MOVWF  x17
2C32:  MOVLB  0
2C34:  CALL   0FE2
....................           mensajes(2+paso,3); 
2C38:  MOVLW  02
2C3A:  ADDWF  32,W
2C3C:  MOVLB  1
2C3E:  MOVWF  x15
2C40:  MOVWF  x16
2C42:  MOVLW  03
2C44:  MOVWF  x17
2C46:  MOVLB  0
2C48:  CALL   0FE2
....................           mensajes(3+paso,4); 
2C4C:  MOVLW  03
2C4E:  ADDWF  32,W
2C50:  MOVLB  1
2C52:  MOVWF  x15
2C54:  MOVWF  x16
2C56:  MOVLW  04
2C58:  MOVWF  x17
2C5A:  MOVLB  0
2C5C:  CALL   0FE2
....................     
....................           lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
2C60:  MOVLW  01
2C62:  MOVLB  1
2C64:  MOVWF  x27
2C66:  MOVFF  1D,128
2C6A:  MOVLB  0
2C6C:  CALL   09AE
....................           lcd_putc(t[0]); 
2C70:  MOVFF  33,126
2C74:  CALL   0A20
....................  
....................          if(Flecha==2){ 
2C78:  MOVF   1D,W
2C7A:  SUBLW  02
2C7C:  BNZ   2CAE
....................              lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
2C7E:  MOVLW  01
2C80:  MOVLB  1
2C82:  MOVWF  x27
2C84:  MOVLW  04
2C86:  MOVWF  x28
2C88:  MOVLB  0
2C8A:  CALL   09AE
....................              lcd_putc(t[1]); 
2C8E:  MOVFF  34,126
2C92:  CALL   0A20
....................              lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
2C96:  MOVLW  01
2C98:  MOVLB  1
2C9A:  MOVWF  x27
2C9C:  MOVLW  03
2C9E:  MOVWF  x28
2CA0:  MOVLB  0
2CA2:  CALL   09AE
....................              lcd_putc(t[1]); 
2CA6:  MOVFF  34,126
2CAA:  CALL   0A20
....................          } 
....................             
....................          if(Flecha==4){ 
2CAE:  MOVF   1D,W
2CB0:  SUBLW  04
2CB2:  BNZ   2CE4
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
2CB4:  MOVLW  01
2CB6:  MOVLB  1
2CB8:  MOVWF  x27
2CBA:  MOVLW  02
2CBC:  MOVWF  x28
2CBE:  MOVLB  0
2CC0:  CALL   09AE
....................             lcd_putc(t[1]); 
2CC4:  MOVFF  34,126
2CC8:  CALL   0A20
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
2CCC:  MOVLW  01
2CCE:  MOVLB  1
2CD0:  MOVWF  x27
2CD2:  MOVLW  03
2CD4:  MOVWF  x28
2CD6:  MOVLB  0
2CD8:  CALL   09AE
....................             lcd_putc(t[1]); 
2CDC:  MOVFF  34,126
2CE0:  CALL   0A20
....................          } 
....................             
....................          if(Flecha==3){ 
2CE4:  MOVF   1D,W
2CE6:  SUBLW  03
2CE8:  BNZ   2D1A
....................             lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
2CEA:  MOVLW  01
2CEC:  MOVLB  1
2CEE:  MOVWF  x27
2CF0:  MOVLW  04
2CF2:  MOVWF  x28
2CF4:  MOVLB  0
2CF6:  CALL   09AE
....................             lcd_putc(t[1]); 
2CFA:  MOVFF  34,126
2CFE:  CALL   0A20
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
2D02:  MOVLW  01
2D04:  MOVLB  1
2D06:  MOVWF  x27
2D08:  MOVLW  02
2D0A:  MOVWF  x28
2D0C:  MOVLB  0
2D0E:  CALL   09AE
....................             lcd_putc(t[1]); 
2D12:  MOVFF  34,126
2D16:  CALL   0A20
....................          } 
....................          Pulso=0; 
2D1A:  BCF    18.6
....................       } 
....................            
....................       if(UP){//Si oprime hacia arriba       
2D1C:  BSF    F92.5
2D1E:  BTFSS  F80.5
2D20:  BRA    2D54
....................          delay_ms(20); 
2D22:  MOVLW  14
2D24:  MOVLB  1
2D26:  MOVWF  x2C
2D28:  MOVLB  0
2D2A:  CALL   080C
....................          if(UP){ 
2D2E:  BSF    F92.5
2D30:  BTFSS  F80.5
2D32:  BRA    2D52
....................             if(Flanco == 0){ 
2D34:  BTFSC  17.3
2D36:  BRA    2D52
....................                Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30);Pulso=1; 
2D38:  DECF   1F,F
2D3A:  DECF   1D,F
2D3C:  MOVLW  01
2D3E:  ADDWF  1D,W
2D40:  MOVWF  1E
2D42:  BSF    17.3
2D44:  MOVLW  1E
2D46:  MOVLB  1
2D48:  MOVWF  x2C
2D4A:  MOVLB  0
2D4C:  CALL   080C
2D50:  BSF    18.6
....................             } 
....................          } 
....................       }else{ 
2D52:  BRA    2D56
....................          Flanco = 0; 
2D54:  BCF    17.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
2D56:  BSF    F96.0
2D58:  BTFSS  F84.0
2D5A:  BRA    2D8E
....................          delay_ms(20); 
2D5C:  MOVLW  14
2D5E:  MOVLB  1
2D60:  MOVWF  x2C
2D62:  MOVLB  0
2D64:  CALL   080C
....................          if(DOWN){ 
2D68:  BSF    F96.0
2D6A:  BTFSS  F84.0
2D6C:  BRA    2D8C
....................             if(Flanco2 == 0){ 
2D6E:  BTFSC  17.5
2D70:  BRA    2D8C
....................                Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30);Pulso=1; 
2D72:  INCF   1F,F
2D74:  INCF   1D,F
2D76:  MOVLW  01
2D78:  SUBWF  1D,W
2D7A:  MOVWF  1E
2D7C:  BSF    17.5
2D7E:  MOVLW  1E
2D80:  MOVLB  1
2D82:  MOVWF  x2C
2D84:  MOVLB  0
2D86:  CALL   080C
2D8A:  BSF    18.6
....................             } 
....................          } 
....................       }else{ 
2D8C:  BRA    2D90
....................          Flanco2 = 0; 
2D8E:  BCF    17.5
....................       } 
....................        
....................       if(RIGHT){// Si oprime derecha 
2D90:  BSF    F96.1
2D92:  BTFSS  F84.1
2D94:  BRA    2DE8
....................          delay_ms(20); 
2D96:  MOVLW  14
2D98:  MOVLB  1
2D9A:  MOVWF  x2C
2D9C:  MOVLB  0
2D9E:  CALL   080C
....................          if(RIGHT){ 
2DA2:  BSF    F96.1
2DA4:  BTFSS  F84.1
2DA6:  BRA    2DE6
....................             if(Flanco1 == 0){ 
2DA8:  BTFSC  17.4
2DAA:  BRA    2DE6
....................                Flanco1= 1;Menu=Flecha2;Flecha=3;delay_ms(300);printf(lcd_putc,"\f");Pulso=1; 
2DAC:  BSF    17.4
2DAE:  MOVFF  1F,19
2DB2:  MOVLW  03
2DB4:  MOVWF  1D
2DB6:  MOVLW  02
2DB8:  MOVLB  1
2DBA:  MOVWF  x15
2DBC:  MOVLW  96
2DBE:  MOVWF  x2C
2DC0:  MOVLB  0
2DC2:  CALL   080C
2DC6:  MOVLB  1
2DC8:  DECFSZ x15,F
2DCA:  BRA    2DBC
2DCC:  MOVLW  0C
2DCE:  MOVWF  x26
2DD0:  MOVLB  0
2DD2:  CALL   0A20
2DD6:  BSF    18.6
....................                if(Menu==6){ 
2DD8:  MOVF   19,W
2DDA:  SUBLW  06
2DDC:  BNZ   2DE6
....................                   clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
2DDE:  CLRF   37
2DE0:  CLRF   38
2DE2:  CLRF   39
2DE4:  CLRF   3A
....................                } 
....................             } 
....................          } 
....................        }else{ 
2DE6:  BRA    2DEA
....................          Flanco1 = 0; 
2DE8:  BCF    17.4
....................        } 
....................              
....................        if(IZQU){ 
2DEA:  BSF    F96.2
2DEC:  BTFSS  F84.2
2DEE:  BRA    2E28
....................          delay_ms(20); 
2DF0:  MOVLW  14
2DF2:  MOVLB  1
2DF4:  MOVWF  x2C
2DF6:  MOVLB  0
2DF8:  CALL   080C
....................          if(IZQU){ 
2DFC:  BSF    F96.2
2DFE:  BTFSS  F84.2
2E00:  BRA    2E28
....................             delay_ms(500);Menu=50;printf(lcd_putc,"\f");Pulso=1; 
2E02:  MOVLW  02
2E04:  MOVLB  1
2E06:  MOVWF  x15
2E08:  MOVLW  FA
2E0A:  MOVWF  x2C
2E0C:  MOVLB  0
2E0E:  CALL   080C
2E12:  MOVLB  1
2E14:  DECFSZ x15,F
2E16:  BRA    2E08
2E18:  MOVLW  32
2E1A:  MOVWF  19
2E1C:  MOVLW  0C
2E1E:  MOVWF  x26
2E20:  MOVLB  0
2E22:  CALL   0A20
2E26:  BSF    18.6
....................          } 
....................        }    
....................    } 
2E28:  BRA    2B9A
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    while(Menu == 2){ // Menu de tiempo de trabajo de Luz UV    
2E2A:  MOVF   19,W
2E2C:  SUBLW  02
2E2E:  BTFSS  FD8.2
2E30:  BRA    30FC
....................     
....................    if(Pulso){ 
2E32:  BTFSS  18.6
2E34:  BRA    2EDA
....................       lcd_gotoxy(1,1); 
2E36:  MOVLW  01
2E38:  MOVLB  1
2E3A:  MOVWF  x27
2E3C:  MOVWF  x28
2E3E:  MOVLB  0
2E40:  CALL   09AE
....................       printf(lcd_putc,"    Temporizador     "); 
2E44:  MOVLW  10
2E46:  MOVWF  FF6
2E48:  MOVLW  03
2E4A:  MOVWF  FF7
2E4C:  CALL   0A96
....................       lcd_gotoxy(1,2); 
2E50:  MOVLW  01
2E52:  MOVLB  1
2E54:  MOVWF  x27
2E56:  MOVLW  02
2E58:  MOVWF  x28
2E5A:  MOVLB  0
2E5C:  CALL   09AE
....................       printf(lcd_putc,"       Luz UV        "); 
2E60:  MOVLW  26
2E62:  MOVWF  FF6
2E64:  MOVLW  03
2E66:  MOVWF  FF7
2E68:  CALL   0A96
....................       lcd_gotoxy(6,3); 
2E6C:  MOVLW  06
2E6E:  MOVLB  1
2E70:  MOVWF  x27
2E72:  MOVLW  03
2E74:  MOVWF  x28
2E76:  MOVLB  0
2E78:  CALL   09AE
....................       printf(lcd_putc,"%03u:%02u (M:S)  ",tempo_minutos_pro,tempo_segundos_pro);  
2E7C:  MOVFF  2A,115
2E80:  MOVLW  03
2E82:  MOVLB  1
2E84:  MOVWF  x16
2E86:  MOVLB  0
2E88:  CALL   10D8
2E8C:  MOVLW  3A
2E8E:  MOVLB  1
2E90:  MOVWF  x26
2E92:  MOVLB  0
2E94:  CALL   0A20
2E98:  MOVFF  2B,115
2E9C:  MOVLW  01
2E9E:  MOVLB  1
2EA0:  MOVWF  x16
2EA2:  MOVLB  0
2EA4:  CALL   10D8
2EA8:  MOVLW  45
2EAA:  MOVWF  FF6
2EAC:  MOVLW  03
2EAE:  MOVWF  FF7
2EB0:  MOVLW  08
2EB2:  MOVLB  1
2EB4:  MOVWF  x19
2EB6:  MOVLB  0
2EB8:  CALL   0EB0
....................        
....................       lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
2EBC:  MOVLW  06
2EBE:  ADDWF  2F,W
2EC0:  MOVLB  1
2EC2:  MOVWF  x15
2EC4:  MOVWF  x27
2EC6:  MOVLW  04
2EC8:  MOVWF  x28
2ECA:  MOVLB  0
2ECC:  CALL   09AE
....................       lcd_putc(t[2]); 
2ED0:  MOVFF  35,126
2ED4:  CALL   0A20
....................       Pulso=0; 
2ED8:  BCF    18.6
....................    } 
....................     
....................    if(UP){ 
2EDA:  BSF    F92.5
2EDC:  BTFSS  F80.5
2EDE:  BRA    2F40
....................       delay_ms(20); 
2EE0:  MOVLW  14
2EE2:  MOVLB  1
2EE4:  MOVWF  x2C
2EE6:  MOVLB  0
2EE8:  CALL   080C
....................       if(UP){ 
2EEC:  BSF    F92.5
2EEE:  BTFSS  F80.5
2EF0:  BRA    2F40
....................          if(unidad2==1){ 
2EF2:  DECFSZ 2F,W
2EF4:  BRA    2F18
....................             if(tempo_minutos_pro<240){ 
2EF6:  MOVF   2A,W
2EF8:  SUBLW  EF
2EFA:  BNC   2F18
....................                tempo_minutos_pro+=5;delay_ms(300); 
2EFC:  MOVLW  05
2EFE:  ADDWF  2A,F
2F00:  MOVLW  02
2F02:  MOVLB  1
2F04:  MOVWF  x15
2F06:  MOVLW  96
2F08:  MOVWF  x2C
2F0A:  MOVLB  0
2F0C:  CALL   080C
2F10:  MOVLB  1
2F12:  DECFSZ x15,F
2F14:  BRA    2F06
2F16:  MOVLB  0
....................             } 
....................          } 
....................        
....................          if(unidad2==4){ 
2F18:  MOVF   2F,W
2F1A:  SUBLW  04
2F1C:  BNZ   2F3E
....................             if(tempo_segundos_pro<59){ 
2F1E:  MOVF   2B,W
2F20:  SUBLW  3A
2F22:  BNC   2F3E
....................                tempo_segundos_pro++;delay_ms(300); 
2F24:  INCF   2B,F
2F26:  MOVLW  02
2F28:  MOVLB  1
2F2A:  MOVWF  x15
2F2C:  MOVLW  96
2F2E:  MOVWF  x2C
2F30:  MOVLB  0
2F32:  CALL   080C
2F36:  MOVLB  1
2F38:  DECFSZ x15,F
2F3A:  BRA    2F2C
2F3C:  MOVLB  0
....................             } 
....................          } 
....................          Pulso=1; 
2F3E:  BSF    18.6
....................       } 
....................    } 
....................     
....................    if(DOWN){ 
2F40:  BSF    F96.0
2F42:  BTFSS  F84.0
2F44:  BRA    2FA2
....................       delay_ms(20); 
2F46:  MOVLW  14
2F48:  MOVLB  1
2F4A:  MOVWF  x2C
2F4C:  MOVLB  0
2F4E:  CALL   080C
....................       if(DOWN){ 
2F52:  BSF    F96.0
2F54:  BTFSS  F84.0
2F56:  BRA    2FA2
....................          if(unidad2==1){ 
2F58:  DECFSZ 2F,W
2F5A:  BRA    2F7C
....................             if(tempo_minutos_pro>0){ 
2F5C:  MOVF   2A,F
2F5E:  BZ    2F7C
....................                tempo_minutos_pro-=5;delay_ms(300); 
2F60:  MOVLW  05
2F62:  SUBWF  2A,F
2F64:  MOVLW  02
2F66:  MOVLB  1
2F68:  MOVWF  x15
2F6A:  MOVLW  96
2F6C:  MOVWF  x2C
2F6E:  MOVLB  0
2F70:  CALL   080C
2F74:  MOVLB  1
2F76:  DECFSZ x15,F
2F78:  BRA    2F6A
2F7A:  MOVLB  0
....................             }    
....................          } 
....................           
....................          if(unidad2==4){ 
2F7C:  MOVF   2F,W
2F7E:  SUBLW  04
2F80:  BNZ   2FA0
....................             if(tempo_segundos_pro>0){ 
2F82:  MOVF   2B,F
2F84:  BZ    2FA0
....................                tempo_segundos_pro--;delay_ms(300); 
2F86:  DECF   2B,F
2F88:  MOVLW  02
2F8A:  MOVLB  1
2F8C:  MOVWF  x15
2F8E:  MOVLW  96
2F90:  MOVWF  x2C
2F92:  MOVLB  0
2F94:  CALL   080C
2F98:  MOVLB  1
2F9A:  DECFSZ x15,F
2F9C:  BRA    2F8E
2F9E:  MOVLB  0
....................             }    
....................          } 
....................          Pulso=1; 
2FA0:  BSF    18.6
....................       } 
....................    } 
....................     
....................    if(RIGHT){ 
2FA2:  BSF    F96.1
2FA4:  BTFSS  F84.1
2FA6:  BRA    2FF0
....................       delay_ms(20); 
2FA8:  MOVLW  14
2FAA:  MOVLB  1
2FAC:  MOVWF  x2C
2FAE:  MOVLB  0
2FB0:  CALL   080C
....................       if(RIGHT){ 
2FB4:  BSF    F96.1
2FB6:  BTFSS  F84.1
2FB8:  BRA    2FF0
....................          if(unidad2==1){ 
2FBA:  DECFSZ 2F,W
2FBC:  BRA    2FC4
....................             unidad2=4; 
2FBE:  MOVLW  04
2FC0:  MOVWF  2F
....................          } 
....................          else{ 
2FC2:  BRA    2FCE
....................             if(unidad2==4){ 
2FC4:  MOVF   2F,W
2FC6:  SUBLW  04
2FC8:  BNZ   2FCE
....................                unidad2=1; 
2FCA:  MOVLW  01
2FCC:  MOVWF  2F
....................             } 
....................          } 
....................          delay_ms(500); 
2FCE:  MOVLW  02
2FD0:  MOVLB  1
2FD2:  MOVWF  x15
2FD4:  MOVLW  FA
2FD6:  MOVWF  x2C
2FD8:  MOVLB  0
2FDA:  CALL   080C
2FDE:  MOVLB  1
2FE0:  DECFSZ x15,F
2FE2:  BRA    2FD4
....................          printf(lcd_putc,"\f"); 
2FE4:  MOVLW  0C
2FE6:  MOVWF  x26
2FE8:  MOVLB  0
2FEA:  CALL   0A20
....................          Pulso=1; 
2FEE:  BSF    18.6
....................       } 
....................    } 
....................     
....................    if(IZQU){ 
2FF0:  BSF    F96.2
2FF2:  BTFSS  F84.2
2FF4:  BRA    30FA
....................       delay_ms(20); 
2FF6:  MOVLW  14
2FF8:  MOVLB  1
2FFA:  MOVWF  x2C
2FFC:  MOVLB  0
2FFE:  CALL   080C
....................       if(IZQU){ 
3002:  BSF    F96.2
3004:  BTFSS  F84.2
3006:  BRA    30FA
....................          delay_ms(200); 
3008:  MOVLW  C8
300A:  MOVLB  1
300C:  MOVWF  x2C
300E:  MOVLB  0
3010:  CALL   080C
....................          printf(lcd_putc,"\f"); 
3014:  MOVLW  0C
3016:  MOVLB  1
3018:  MOVWF  x26
301A:  MOVLB  0
301C:  CALL   0A20
....................          lcd_gotoxy(1,2); 
3020:  MOVLW  01
3022:  MOVLB  1
3024:  MOVWF  x27
3026:  MOVLW  02
3028:  MOVWF  x28
302A:  MOVLB  0
302C:  CALL   09AE
....................          printf(lcd_putc,"Tiempo Almacenado"); 
3030:  MOVLW  4E
3032:  MOVWF  FF6
3034:  MOVLW  03
3036:  MOVWF  FF7
3038:  CALL   0A96
....................          lcd_gotoxy(1,3); 
303C:  MOVLW  01
303E:  MOVLB  1
3040:  MOVWF  x27
3042:  MOVLW  03
3044:  MOVWF  x28
3046:  MOVLB  0
3048:  CALL   09AE
....................          printf(lcd_putc,"  Correctamente  "); 
304C:  MOVLW  60
304E:  MOVWF  FF6
3050:  MOVLW  03
3052:  MOVWF  FF7
3054:  CALL   0A96
....................          write_eeprom(20,tempo_minutos_pro); 
3058:  MOVLW  14
305A:  MOVWF  FA9
305C:  MOVFF  2A,FA8
3060:  BCF    FA6.6
3062:  BCF    FA6.7
3064:  BSF    FA6.2
3066:  MOVF   FF2,W
3068:  MOVWF  00
306A:  BCF    FF2.7
306C:  MOVLB  F
306E:  MOVLW  55
3070:  MOVWF  FA7
3072:  MOVLW  AA
3074:  MOVWF  FA7
3076:  BSF    FA6.1
3078:  BTFSC  FA6.1
307A:  BRA    3078
307C:  BCF    FA6.2
307E:  MOVF   00,W
3080:  IORWF  FF2,F
....................          delay_ms(30); 
3082:  MOVLW  1E
3084:  MOVLB  1
3086:  MOVWF  x2C
3088:  MOVLB  0
308A:  CALL   080C
....................          write_eeprom(30,tempo_segundos_pro); 
308E:  MOVLW  1E
3090:  MOVWF  FA9
3092:  MOVFF  2B,FA8
3096:  BCF    FA6.6
3098:  BCF    FA6.7
309A:  BSF    FA6.2
309C:  MOVF   FF2,W
309E:  MOVWF  00
30A0:  BCF    FF2.7
30A2:  MOVLB  F
30A4:  MOVLW  55
30A6:  MOVWF  FA7
30A8:  MOVLW  AA
30AA:  MOVWF  FA7
30AC:  BSF    FA6.1
30AE:  BTFSC  FA6.1
30B0:  BRA    30AE
30B2:  BCF    FA6.2
30B4:  MOVF   00,W
30B6:  IORWF  FF2,F
....................          tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
30B8:  MOVFF  2A,28
30BC:  MOVFF  2B,29
....................          delay_ms(700); 
30C0:  MOVLW  04
30C2:  MOVLB  1
30C4:  MOVWF  x15
30C6:  MOVLW  AF
30C8:  MOVWF  x2C
30CA:  MOVLB  0
30CC:  CALL   080C
30D0:  MOVLB  1
30D2:  DECFSZ x15,F
30D4:  BRA    30C6
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f");Pulso=1; 
30D6:  MOVLW  1E
30D8:  MOVWF  x2C
30DA:  MOVLB  0
30DC:  CALL   080C
30E0:  MOVLW  01
30E2:  MOVWF  19
30E4:  CLRF   32
30E6:  MOVLW  02
30E8:  MOVWF  1D
30EA:  MOVWF  1F
30EC:  MOVLW  0C
30EE:  MOVLB  1
30F0:  MOVWF  x26
30F2:  MOVLB  0
30F4:  CALL   0A20
30F8:  BSF    18.6
....................       }   
....................    } 
....................   } 
30FA:  BRA    2E2A
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................  
.................... //----------------Menu3--------------------------------------------------------------- 
....................    while(Menu == 3){ // Menu para Cambio de Contraseña 
30FC:  MOVF   19,W
30FE:  SUBLW  03
3100:  BTFSS  FD8.2
3102:  BRA    34D8
....................     
....................    if(Pulso){ 
3104:  BTFSS  18.6
3106:  BRA    33D6
....................       Pulso=0; 
3108:  BCF    18.6
....................        
....................       if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
310A:  MOVLW  0B
310C:  SUBWF  1C,W
310E:  CLRF   03
3110:  ADDLW  37
3112:  MOVWF  FE9
3114:  MOVLW  00
3116:  ADDWFC 03,W
3118:  MOVWF  FEA
311A:  BTFSC  FEF.7
311C:  BRA    3120
311E:  BRA    3134
....................       {clave[unidad-11]=9;} 
3120:  MOVLW  0B
3122:  SUBWF  1C,W
3124:  CLRF   03
3126:  ADDLW  37
3128:  MOVWF  FE9
312A:  MOVLW  00
312C:  ADDWFC 03,W
312E:  MOVWF  FEA
3130:  MOVLW  09
3132:  MOVWF  FEF
....................       if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
3134:  MOVLW  0B
3136:  SUBWF  1C,W
3138:  CLRF   03
313A:  ADDLW  37
313C:  MOVWF  FE9
313E:  MOVLW  00
3140:  ADDWFC 03,W
3142:  MOVWF  FEA
3144:  BTFSC  FEF.7
3146:  BRA    3160
3148:  MOVF   FEF,W
314A:  SUBLW  09
314C:  BC    3160
....................       {clave[unidad-11]=0;} 
314E:  MOVLW  0B
3150:  SUBWF  1C,W
3152:  CLRF   03
3154:  ADDLW  37
3156:  MOVWF  FE9
3158:  MOVLW  00
315A:  ADDWFC 03,W
315C:  MOVWF  FEA
315E:  CLRF   FEF
....................         
....................       lcd_gotoxy(1,1); 
3160:  MOVLW  01
3162:  MOVLB  1
3164:  MOVWF  x27
3166:  MOVWF  x28
3168:  MOVLB  0
316A:  CALL   09AE
....................       printf(lcd_putc,"      Ingrese       "); 
316E:  MOVLW  72
3170:  MOVWF  FF6
3172:  MOVLW  03
3174:  MOVWF  FF7
3176:  CALL   0A96
....................       lcd_gotoxy(1,2); 
317A:  MOVLW  01
317C:  MOVLB  1
317E:  MOVWF  x27
3180:  MOVLW  02
3182:  MOVWF  x28
3184:  MOVLB  0
3186:  CALL   09AE
....................       printf(lcd_putc," Contraseña Actual  "); 
318A:  MOVLW  88
318C:  MOVWF  FF6
318E:  MOVLW  03
3190:  MOVWF  FF7
3192:  CALL   0A96
....................       lcd_gotoxy(1,3); 
3196:  MOVLW  01
3198:  MOVLB  1
319A:  MOVWF  x27
319C:  MOVLW  03
319E:  MOVWF  x28
31A0:  MOVLB  0
31A2:  CALL   09AE
....................       printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
31A6:  MOVLW  9E
31A8:  MOVWF  FF6
31AA:  MOVLW  03
31AC:  MOVWF  FF7
31AE:  MOVLW  0A
31B0:  MOVLB  1
31B2:  MOVWF  x19
31B4:  MOVLB  0
31B6:  CALL   0EB0
31BA:  MOVFF  37,115
31BE:  MOVLW  1F
31C0:  MOVLB  1
31C2:  MOVWF  x16
31C4:  MOVLB  0
31C6:  CALL   0F04
31CA:  MOVFF  38,115
31CE:  MOVLW  1F
31D0:  MOVLB  1
31D2:  MOVWF  x16
31D4:  MOVLB  0
31D6:  CALL   0F04
31DA:  MOVFF  39,115
31DE:  MOVLW  1F
31E0:  MOVLB  1
31E2:  MOVWF  x16
31E4:  MOVLB  0
31E6:  CALL   0F04
31EA:  MOVFF  3A,115
31EE:  MOVLW  1F
31F0:  MOVLB  1
31F2:  MOVWF  x16
31F4:  MOVLB  0
31F6:  CALL   0F04
31FA:  MOVLW  20
31FC:  MOVLB  1
31FE:  MOVWF  x26
3200:  MOVLB  0
3202:  CALL   0A20
3206:  MOVLW  20
3208:  MOVLB  1
320A:  MOVWF  x26
320C:  MOVLB  0
320E:  CALL   0A20
....................        
....................        if(unidad<11) 
3212:  MOVF   1C,W
3214:  SUBLW  0A
3216:  BNC   3240
....................        {Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);Pulso=1;} 
3218:  MOVLW  01
321A:  MOVWF  19
321C:  CLRF   32
321E:  MOVLW  02
3220:  MOVWF  1D
3222:  MOVWF  1F
3224:  MOVLW  0B
3226:  MOVWF  1C
3228:  MOVLW  02
322A:  MOVLB  1
322C:  MOVWF  x15
322E:  MOVLW  FA
3230:  MOVWF  x2C
3232:  MOVLB  0
3234:  CALL   080C
3238:  MOVLB  1
323A:  DECFSZ x15,F
323C:  BRA    322E
323E:  BSF    18.6
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
3240:  MOVFF  1C,127
3244:  MOVLW  04
3246:  MOVLB  1
3248:  MOVWF  x28
324A:  MOVLB  0
324C:  CALL   09AE
....................        lcd_putc(t[2]); 
3250:  MOVFF  35,126
3254:  CALL   0A20
....................        if(unidad>14)// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
3258:  MOVF   1C,W
325A:  SUBLW  0E
325C:  BTFSC  FD8.0
325E:  BRA    33AE
....................        { 
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) 
3260:  MOVF   3B,W
3262:  SUBWF  37,W
3264:  BNZ   331A
3266:  MOVF   3C,W
3268:  SUBWF  38,W
326A:  BNZ   331A
326C:  MOVF   3D,W
326E:  SUBWF  39,W
3270:  BNZ   331A
3272:  MOVF   3E,W
3274:  SUBWF  3A,W
3276:  BNZ   331A
....................             {lcd_gotoxy(1,1); 
3278:  MOVLW  01
327A:  MOVLB  1
327C:  MOVWF  x27
327E:  MOVWF  x28
3280:  MOVLB  0
3282:  CALL   09AE
....................             printf(lcd_putc,"                    "); 
3286:  MOVLW  B4
3288:  MOVWF  FF6
328A:  MOVLW  03
328C:  MOVWF  FF7
328E:  CALL   0A96
....................             lcd_gotoxy(1,2); 
3292:  MOVLW  01
3294:  MOVLB  1
3296:  MOVWF  x27
3298:  MOVLW  02
329A:  MOVWF  x28
329C:  MOVLB  0
329E:  CALL   09AE
....................             printf(lcd_putc,"     Contraseña     "); 
32A2:  MOVLW  CA
32A4:  MOVWF  FF6
32A6:  MOVLW  03
32A8:  MOVWF  FF7
32AA:  CALL   0A96
....................             lcd_gotoxy(1,3); 
32AE:  MOVLW  01
32B0:  MOVLB  1
32B2:  MOVWF  x27
32B4:  MOVLW  03
32B6:  MOVWF  x28
32B8:  MOVLB  0
32BA:  CALL   09AE
....................             printf(lcd_putc,"      Correcta      "); 
32BE:  MOVLW  E0
32C0:  MOVWF  FF6
32C2:  MOVLW  03
32C4:  MOVWF  FF7
32C6:  CALL   0A96
....................             lcd_gotoxy(1,4); 
32CA:  MOVLW  01
32CC:  MOVLB  1
32CE:  MOVWF  x27
32D0:  MOVLW  04
32D2:  MOVWF  x28
32D4:  MOVLB  0
32D6:  CALL   09AE
....................             printf(lcd_putc,"                    "); 
32DA:  MOVLW  F6
32DC:  MOVWF  FF6
32DE:  MOVLW  03
32E0:  MOVWF  FF7
32E2:  CALL   0A96
....................             delay_ms(500);Menu=61;unidad=11;printf(lcd_putc,"\f");Pulso=1; 
32E6:  MOVLW  02
32E8:  MOVLB  1
32EA:  MOVWF  x15
32EC:  MOVLW  FA
32EE:  MOVWF  x2C
32F0:  MOVLB  0
32F2:  CALL   080C
32F6:  MOVLB  1
32F8:  DECFSZ x15,F
32FA:  BRA    32EC
32FC:  MOVLW  3D
32FE:  MOVWF  19
3300:  MOVLW  0B
3302:  MOVWF  1C
3304:  MOVLW  0C
3306:  MOVWF  x26
3308:  MOVLB  0
330A:  CALL   0A20
330E:  BSF    18.6
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;} 
3310:  CLRF   37
3312:  CLRF   38
3314:  CLRF   39
3316:  CLRF   3A
....................          else 
3318:  BRA    33AC
....................          {lcd_gotoxy(1,1); 
331A:  MOVLW  01
331C:  MOVLB  1
331E:  MOVWF  x27
3320:  MOVWF  x28
3322:  MOVLB  0
3324:  CALL   09AE
....................             printf(lcd_putc,"                    "); 
3328:  MOVLW  0C
332A:  MOVWF  FF6
332C:  MOVLW  04
332E:  MOVWF  FF7
3330:  CALL   0A96
....................             lcd_gotoxy(1,2); 
3334:  MOVLW  01
3336:  MOVLB  1
3338:  MOVWF  x27
333A:  MOVLW  02
333C:  MOVWF  x28
333E:  MOVLB  0
3340:  CALL   09AE
....................             printf(lcd_putc,"     Contraseña     "); 
3344:  MOVLW  22
3346:  MOVWF  FF6
3348:  MOVLW  04
334A:  MOVWF  FF7
334C:  CALL   0A96
....................             lcd_gotoxy(1,3); 
3350:  MOVLW  01
3352:  MOVLB  1
3354:  MOVWF  x27
3356:  MOVLW  03
3358:  MOVWF  x28
335A:  MOVLB  0
335C:  CALL   09AE
....................             printf(lcd_putc,"     Incorrecta     "); 
3360:  MOVLW  38
3362:  MOVWF  FF6
3364:  MOVLW  04
3366:  MOVWF  FF7
3368:  CALL   0A96
....................             lcd_gotoxy(1,4); 
336C:  MOVLW  01
336E:  MOVLB  1
3370:  MOVWF  x27
3372:  MOVLW  04
3374:  MOVWF  x28
3376:  MOVLB  0
3378:  CALL   09AE
....................             printf(lcd_putc,"                    "); 
337C:  MOVLW  4E
337E:  MOVWF  FF6
3380:  MOVLW  04
3382:  MOVWF  FF7
3384:  CALL   0A96
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");}Pulso=1; 
3388:  MOVLW  02
338A:  MOVLB  1
338C:  MOVWF  x15
338E:  MOVLW  FA
3390:  MOVWF  x2C
3392:  MOVLB  0
3394:  CALL   080C
3398:  MOVLB  1
339A:  DECFSZ x15,F
339C:  BRA    338E
339E:  MOVLW  0B
33A0:  MOVWF  1C
33A2:  MOVLW  0C
33A4:  MOVWF  x26
33A6:  MOVLB  0
33A8:  CALL   0A20
33AC:  BSF    18.6
....................        } 
....................                 
....................           if(unidad>11&&unidad<14) 
33AE:  MOVF   1C,W
33B0:  SUBLW  0B
33B2:  BC    33D6
33B4:  MOVF   1C,W
33B6:  SUBLW  0D
33B8:  BNC   33D6
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
33BA:  MOVLW  01
33BC:  SUBWF  1C,W
33BE:  MOVLB  1
33C0:  MOVWF  x15
33C2:  MOVWF  x27
33C4:  MOVLW  04
33C6:  MOVWF  x28
33C8:  MOVLB  0
33CA:  CALL   09AE
....................             lcd_putc(t[1]); 
33CE:  MOVFF  34,126
33D2:  CALL   0A20
....................           } 
....................    }    
....................        
....................    if(UP){//Si oprime hacia arriba 
33D6:  BSF    F92.5
33D8:  BTFSS  F80.5
33DA:  BRA    3416
....................       delay_ms(20); 
33DC:  MOVLW  14
33DE:  MOVLB  1
33E0:  MOVWF  x2C
33E2:  MOVLB  0
33E4:  CALL   080C
....................       if(UP){ 
33E8:  BSF    F92.5
33EA:  BTFSS  F80.5
33EC:  BRA    3414
....................          if(Flanco == 0) { 
33EE:  BTFSC  17.3
33F0:  BRA    3414
....................             clave[unidad-11]++;Flanco = 1;delay_ms(30);Pulso=1; 
33F2:  MOVLW  0B
33F4:  SUBWF  1C,W
33F6:  CLRF   03
33F8:  ADDLW  37
33FA:  MOVWF  FE9
33FC:  MOVLW  00
33FE:  ADDWFC 03,W
3400:  MOVWF  FEA
3402:  INCF   FEF,F
3404:  BSF    17.3
3406:  MOVLW  1E
3408:  MOVLB  1
340A:  MOVWF  x2C
340C:  MOVLB  0
340E:  CALL   080C
3412:  BSF    18.6
....................          } 
....................       } 
....................    }else{ 
3414:  BRA    3418
....................       Flanco = 0; 
3416:  BCF    17.3
....................    } 
....................              
....................    if(DOWN){//Si oprime hacia abajo 
3418:  BSF    F96.0
341A:  BTFSS  F84.0
341C:  BRA    3458
....................       delay_ms(20); 
341E:  MOVLW  14
3420:  MOVLB  1
3422:  MOVWF  x2C
3424:  MOVLB  0
3426:  CALL   080C
....................       if(DOWN){ 
342A:  BSF    F96.0
342C:  BTFSS  F84.0
342E:  BRA    3456
....................          if(Flanco2 == 0) { 
3430:  BTFSC  17.5
3432:  BRA    3456
....................             clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Pulso=1; 
3434:  MOVLW  0B
3436:  SUBWF  1C,W
3438:  CLRF   03
343A:  ADDLW  37
343C:  MOVWF  FE9
343E:  MOVLW  00
3440:  ADDWFC 03,W
3442:  MOVWF  FEA
3444:  DECF   FEF,F
3446:  BSF    17.5
3448:  MOVLW  1E
344A:  MOVLB  1
344C:  MOVWF  x2C
344E:  MOVLB  0
3450:  CALL   080C
3454:  BSF    18.6
....................          } 
....................       } 
....................    }else{ 
3456:  BRA    345A
....................       Flanco2 = 0; 
3458:  BCF    17.5
....................    } 
....................     
....................    if(RIGHT){// Si oprime derecha 
345A:  BSF    F96.1
345C:  BTFSS  F84.1
345E:  BRA    3496
....................       delay_ms(20); 
3460:  MOVLW  14
3462:  MOVLB  1
3464:  MOVWF  x2C
3466:  MOVLB  0
3468:  CALL   080C
....................       if(RIGHT){ 
346C:  BSF    F96.1
346E:  BTFSS  F84.1
3470:  BRA    3494
....................          if(Flanco1 == 0) { 
3472:  BTFSC  17.4
3474:  BRA    3494
....................             Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Pulso=1; 
3476:  BSF    17.4
3478:  INCF   1C,F
347A:  MOVLW  1E
347C:  MOVLB  1
347E:  MOVWF  x2C
3480:  MOVLB  0
3482:  CALL   080C
3486:  MOVLW  0C
3488:  MOVLB  1
348A:  MOVWF  x26
348C:  MOVLB  0
348E:  CALL   0A20
3492:  BSF    18.6
....................          } 
....................       } 
....................    }else{ 
3494:  BRA    3498
....................       Flanco1 = 0; 
3496:  BCF    17.4
....................    } 
....................              
....................    if(IZQU){// Si oprime Izquierda 
3498:  BSF    F96.2
349A:  BTFSS  F84.2
349C:  BRA    34D4
....................       delay_ms(20); 
349E:  MOVLW  14
34A0:  MOVLB  1
34A2:  MOVWF  x2C
34A4:  MOVLB  0
34A6:  CALL   080C
....................       if(IZQU){ 
34AA:  BSF    F96.2
34AC:  BTFSS  F84.2
34AE:  BRA    34D2
....................          if(Flanco3 == 0) { 
34B0:  BTFSC  17.6
34B2:  BRA    34D2
....................             Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Pulso=1; 
34B4:  BSF    17.6
34B6:  DECF   1C,F
34B8:  MOVLW  1E
34BA:  MOVLB  1
34BC:  MOVWF  x2C
34BE:  MOVLB  0
34C0:  CALL   080C
34C4:  MOVLW  0C
34C6:  MOVLB  1
34C8:  MOVWF  x26
34CA:  MOVLB  0
34CC:  CALL   0A20
34D0:  BSF    18.6
....................          } 
....................       } 
....................    }else{ 
34D2:  BRA    34D6
....................       Flanco3 = 0; 
34D4:  BCF    17.6
....................    } 
....................    }       
34D6:  BRA    30FC
.................... //----------------Fin-Menu3--------------------------------------------------------------- 
....................  
.................... //----------------Menu6.1--------------------------------------------------------------- 
....................    while(Menu == 61){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
34D8:  MOVF   19,W
34DA:  SUBLW  3D
34DC:  BTFSS  FD8.2
34DE:  BRA    38CE
....................     
....................    if(Pulso){ 
34E0:  BTFSS  18.6
34E2:  BRA    37CC
....................       Pulso=0;       
34E4:  BCF    18.6
....................        
....................       if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
34E6:  MOVLW  0B
34E8:  SUBWF  1C,W
34EA:  CLRF   03
34EC:  ADDLW  37
34EE:  MOVWF  FE9
34F0:  MOVLW  00
34F2:  ADDWFC 03,W
34F4:  MOVWF  FEA
34F6:  BTFSC  FEF.7
34F8:  BRA    34FC
34FA:  BRA    3510
....................        {clave[unidad-11]=9;} 
34FC:  MOVLW  0B
34FE:  SUBWF  1C,W
3500:  CLRF   03
3502:  ADDLW  37
3504:  MOVWF  FE9
3506:  MOVLW  00
3508:  ADDWFC 03,W
350A:  MOVWF  FEA
350C:  MOVLW  09
350E:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
3510:  MOVLW  0B
3512:  SUBWF  1C,W
3514:  CLRF   03
3516:  ADDLW  37
3518:  MOVWF  FE9
351A:  MOVLW  00
351C:  ADDWFC 03,W
351E:  MOVWF  FEA
3520:  BTFSC  FEF.7
3522:  BRA    353C
3524:  MOVF   FEF,W
3526:  SUBLW  09
3528:  BC    353C
....................        {clave[unidad-11]=0;} 
352A:  MOVLW  0B
352C:  SUBWF  1C,W
352E:  CLRF   03
3530:  ADDLW  37
3532:  MOVWF  FE9
3534:  MOVLW  00
3536:  ADDWFC 03,W
3538:  MOVWF  FEA
353A:  CLRF   FEF
....................        
....................       lcd_gotoxy(1,1); 
353C:  MOVLW  01
353E:  MOVLB  1
3540:  MOVWF  x27
3542:  MOVWF  x28
3544:  MOVLB  0
3546:  CALL   09AE
....................       printf(lcd_putc,"     Ingrese        "); 
354A:  MOVLW  64
354C:  MOVWF  FF6
354E:  MOVLW  04
3550:  MOVWF  FF7
3552:  CALL   0A96
....................       lcd_gotoxy(1,2); 
3556:  MOVLW  01
3558:  MOVLB  1
355A:  MOVWF  x27
355C:  MOVLW  02
355E:  MOVWF  x28
3560:  MOVLB  0
3562:  CALL   09AE
....................       printf(lcd_putc,"  Contraseña Nueva  "); 
3566:  MOVLW  7A
3568:  MOVWF  FF6
356A:  MOVLW  04
356C:  MOVWF  FF7
356E:  CALL   0A96
....................       lcd_gotoxy(1,3); 
3572:  MOVLW  01
3574:  MOVLB  1
3576:  MOVWF  x27
3578:  MOVLW  03
357A:  MOVWF  x28
357C:  MOVLB  0
357E:  CALL   09AE
....................       printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
3582:  MOVLW  90
3584:  MOVWF  FF6
3586:  MOVLW  04
3588:  MOVWF  FF7
358A:  MOVLW  0A
358C:  MOVLB  1
358E:  MOVWF  x19
3590:  MOVLB  0
3592:  CALL   0EB0
3596:  MOVFF  37,115
359A:  MOVLW  1F
359C:  MOVLB  1
359E:  MOVWF  x16
35A0:  MOVLB  0
35A2:  CALL   0F04
35A6:  MOVFF  38,115
35AA:  MOVLW  1F
35AC:  MOVLB  1
35AE:  MOVWF  x16
35B0:  MOVLB  0
35B2:  CALL   0F04
35B6:  MOVFF  39,115
35BA:  MOVLW  1F
35BC:  MOVLB  1
35BE:  MOVWF  x16
35C0:  MOVLB  0
35C2:  CALL   0F04
35C6:  MOVFF  3A,115
35CA:  MOVLW  1F
35CC:  MOVLB  1
35CE:  MOVWF  x16
35D0:  MOVLB  0
35D2:  CALL   0F04
35D6:  MOVLW  20
35D8:  MOVLB  1
35DA:  MOVWF  x26
35DC:  MOVLB  0
35DE:  CALL   0A20
35E2:  MOVLW  20
35E4:  MOVLB  1
35E6:  MOVWF  x26
35E8:  MOVLB  0
35EA:  CALL   0A20
....................        
....................        if(unidad<11) 
35EE:  MOVF   1C,W
35F0:  SUBLW  0A
35F2:  BNC   35FE
....................        {Menu=1;unidad=11;Pulso=1;} 
35F4:  MOVLW  01
35F6:  MOVWF  19
35F8:  MOVLW  0B
35FA:  MOVWF  1C
35FC:  BSF    18.6
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
35FE:  MOVFF  1C,127
3602:  MOVLW  04
3604:  MOVLB  1
3606:  MOVWF  x28
3608:  MOVLB  0
360A:  CALL   09AE
....................        lcd_putc(t[2]); 
360E:  MOVFF  35,126
3612:  CALL   0A20
....................        if(unidad>14)// Si ya ingreso la nueva contraseña. 
3616:  MOVF   1C,W
3618:  SUBLW  0E
361A:  BTFSC  FD8.0
361C:  BRA    37A4
....................        { 
....................             lcd_gotoxy(1,1); 
361E:  MOVLW  01
3620:  MOVLB  1
3622:  MOVWF  x27
3624:  MOVWF  x28
3626:  MOVLB  0
3628:  CALL   09AE
....................             printf(lcd_putc,"                    "); 
362C:  MOVLW  A6
362E:  MOVWF  FF6
3630:  MOVLW  04
3632:  MOVWF  FF7
3634:  CALL   0A96
....................             lcd_gotoxy(1,2); 
3638:  MOVLW  01
363A:  MOVLB  1
363C:  MOVWF  x27
363E:  MOVLW  02
3640:  MOVWF  x28
3642:  MOVLB  0
3644:  CALL   09AE
....................             printf(lcd_putc,"     Contraseña     "); 
3648:  MOVLW  BC
364A:  MOVWF  FF6
364C:  MOVLW  04
364E:  MOVWF  FF7
3650:  CALL   0A96
....................             lcd_gotoxy(1,3); 
3654:  MOVLW  01
3656:  MOVLB  1
3658:  MOVWF  x27
365A:  MOVLW  03
365C:  MOVWF  x28
365E:  MOVLB  0
3660:  CALL   09AE
....................             printf(lcd_putc,"     Almacenada     "); 
3664:  MOVLW  D2
3666:  MOVWF  FF6
3668:  MOVLW  04
366A:  MOVWF  FF7
366C:  CALL   0A96
....................             lcd_gotoxy(1,4); 
3670:  MOVLW  01
3672:  MOVLB  1
3674:  MOVWF  x27
3676:  MOVLW  04
3678:  MOVWF  x28
367A:  MOVLB  0
367C:  CALL   09AE
....................             printf(lcd_putc,"                    "); 
3680:  MOVLW  E8
3682:  MOVWF  FF6
3684:  MOVLW  04
3686:  MOVWF  FF7
3688:  CALL   0A96
....................             write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
368C:  CLRF   FA9
368E:  MOVFF  37,FA8
3692:  BCF    FA6.6
3694:  BCF    FA6.7
3696:  BSF    FA6.2
3698:  MOVF   FF2,W
369A:  MOVWF  00
369C:  BCF    FF2.7
369E:  MOVLB  F
36A0:  MOVLW  55
36A2:  MOVWF  FA7
36A4:  MOVLW  AA
36A6:  MOVWF  FA7
36A8:  BSF    FA6.1
36AA:  BTFSC  FA6.1
36AC:  BRA    36AA
36AE:  BCF    FA6.2
36B0:  MOVF   00,W
36B2:  IORWF  FF2,F
36B4:  MOVLW  14
36B6:  MOVLB  1
36B8:  MOVWF  x2C
36BA:  MOVLB  0
36BC:  CALL   080C
36C0:  MOVLW  01
36C2:  MOVWF  FA9
36C4:  MOVFF  38,FA8
36C8:  BCF    FA6.6
36CA:  BCF    FA6.7
36CC:  BSF    FA6.2
36CE:  MOVF   FF2,W
36D0:  MOVWF  00
36D2:  BCF    FF2.7
36D4:  MOVLB  F
36D6:  MOVLW  55
36D8:  MOVWF  FA7
36DA:  MOVLW  AA
36DC:  MOVWF  FA7
36DE:  BSF    FA6.1
36E0:  BTFSC  FA6.1
36E2:  BRA    36E0
36E4:  BCF    FA6.2
36E6:  MOVF   00,W
36E8:  IORWF  FF2,F
36EA:  MOVLW  14
36EC:  MOVLB  1
36EE:  MOVWF  x2C
36F0:  MOVLB  0
36F2:  CALL   080C
....................             write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
36F6:  MOVLW  02
36F8:  MOVWF  FA9
36FA:  MOVFF  39,FA8
36FE:  BCF    FA6.6
3700:  BCF    FA6.7
3702:  BSF    FA6.2
3704:  MOVF   FF2,W
3706:  MOVWF  00
3708:  BCF    FF2.7
370A:  MOVLB  F
370C:  MOVLW  55
370E:  MOVWF  FA7
3710:  MOVLW  AA
3712:  MOVWF  FA7
3714:  BSF    FA6.1
3716:  BTFSC  FA6.1
3718:  BRA    3716
371A:  BCF    FA6.2
371C:  MOVF   00,W
371E:  IORWF  FF2,F
3720:  MOVLW  14
3722:  MOVLB  1
3724:  MOVWF  x2C
3726:  MOVLB  0
3728:  CALL   080C
372C:  MOVLW  03
372E:  MOVWF  FA9
3730:  MOVFF  3A,FA8
3734:  BCF    FA6.6
3736:  BCF    FA6.7
3738:  BSF    FA6.2
373A:  MOVF   FF2,W
373C:  MOVWF  00
373E:  BCF    FF2.7
3740:  MOVLB  F
3742:  MOVLW  55
3744:  MOVWF  FA7
3746:  MOVLW  AA
3748:  MOVWF  FA7
374A:  BSF    FA6.1
374C:  BTFSC  FA6.1
374E:  BRA    374C
3750:  BCF    FA6.2
3752:  MOVF   00,W
3754:  IORWF  FF2,F
3756:  MOVLW  14
3758:  MOVLB  1
375A:  MOVWF  x2C
375C:  MOVLB  0
375E:  CALL   080C
....................             delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2;Pulso=1;unidad=11; 
3762:  MOVLW  02
3764:  MOVLB  1
3766:  MOVWF  x15
3768:  MOVLW  FA
376A:  MOVWF  x2C
376C:  MOVLB  0
376E:  CALL   080C
3772:  MOVLB  1
3774:  DECFSZ x15,F
3776:  BRA    3768
3778:  MOVLW  01
377A:  MOVWF  19
377C:  CLRF   32
377E:  MOVLW  02
3780:  MOVWF  1D
3782:  MOVWF  1F
3784:  BSF    18.6
3786:  MOVLW  0B
3788:  MOVWF  1C
....................             contrasena[0]=clave[0]; 
378A:  MOVFF  37,3B
....................             contrasena[1]=clave[1]; 
378E:  MOVFF  38,3C
....................             contrasena[2]=clave[2]; 
3792:  MOVFF  39,3D
....................             contrasena[3]=clave[3]; 
3796:  MOVFF  3A,3E
....................             clave[0]=0; 
379A:  CLRF   37
....................             clave[1]=0; 
379C:  CLRF   38
....................             clave[2]=0; 
379E:  CLRF   39
....................             clave[3]=0; 
37A0:  CLRF   3A
37A2:  MOVLB  0
....................        } 
....................        
....................        if(unidad>11&&unidad<14){ 
37A4:  MOVF   1C,W
37A6:  SUBLW  0B
37A8:  BC    37CC
37AA:  MOVF   1C,W
37AC:  SUBLW  0D
37AE:  BNC   37CC
....................          lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
37B0:  MOVLW  01
37B2:  SUBWF  1C,W
37B4:  MOVLB  1
37B6:  MOVWF  x15
37B8:  MOVWF  x27
37BA:  MOVLW  04
37BC:  MOVWF  x28
37BE:  MOVLB  0
37C0:  CALL   09AE
....................          lcd_putc(t[1]); 
37C4:  MOVFF  34,126
37C8:  CALL   0A20
....................        } 
....................    } 
....................        
....................    if(UP){//Si oprime hacia arriba 
37CC:  BSF    F92.5
37CE:  BTFSS  F80.5
37D0:  BRA    380C
....................       delay_ms(20); 
37D2:  MOVLW  14
37D4:  MOVLB  1
37D6:  MOVWF  x2C
37D8:  MOVLB  0
37DA:  CALL   080C
....................       if(UP){ 
37DE:  BSF    F92.5
37E0:  BTFSS  F80.5
37E2:  BRA    380A
....................          if(Flanco == 0){ 
37E4:  BTFSC  17.3
37E6:  BRA    380A
....................             clave[unidad-11]++;Flanco = 1;delay_ms(30);Pulso=1; 
37E8:  MOVLW  0B
37EA:  SUBWF  1C,W
37EC:  CLRF   03
37EE:  ADDLW  37
37F0:  MOVWF  FE9
37F2:  MOVLW  00
37F4:  ADDWFC 03,W
37F6:  MOVWF  FEA
37F8:  INCF   FEF,F
37FA:  BSF    17.3
37FC:  MOVLW  1E
37FE:  MOVLB  1
3800:  MOVWF  x2C
3802:  MOVLB  0
3804:  CALL   080C
3808:  BSF    18.6
....................          } 
....................       } 
....................    }else{ 
380A:  BRA    380E
....................       Flanco = 0; 
380C:  BCF    17.3
....................    } 
....................              
....................    if(DOWN){//Si oprime hacia abajo 
380E:  BSF    F96.0
3810:  BTFSS  F84.0
3812:  BRA    384E
....................       delay_ms(20); 
3814:  MOVLW  14
3816:  MOVLB  1
3818:  MOVWF  x2C
381A:  MOVLB  0
381C:  CALL   080C
....................       if(DOWN){ 
3820:  BSF    F96.0
3822:  BTFSS  F84.0
3824:  BRA    384C
....................          if(Flanco2 == 0){ 
3826:  BTFSC  17.5
3828:  BRA    384C
....................             clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Pulso=1; 
382A:  MOVLW  0B
382C:  SUBWF  1C,W
382E:  CLRF   03
3830:  ADDLW  37
3832:  MOVWF  FE9
3834:  MOVLW  00
3836:  ADDWFC 03,W
3838:  MOVWF  FEA
383A:  DECF   FEF,F
383C:  BSF    17.5
383E:  MOVLW  1E
3840:  MOVLB  1
3842:  MOVWF  x2C
3844:  MOVLB  0
3846:  CALL   080C
384A:  BSF    18.6
....................          } 
....................       } 
....................    }else{ 
384C:  BRA    3850
....................       Flanco2 = 0; 
384E:  BCF    17.5
....................    } 
....................     
....................    if(RIGHT){// Si oprime Derecha 
3850:  BSF    F96.1
3852:  BTFSS  F84.1
3854:  BRA    388C
....................       delay_ms(20); 
3856:  MOVLW  14
3858:  MOVLB  1
385A:  MOVWF  x2C
385C:  MOVLB  0
385E:  CALL   080C
....................       if(RIGHT){ 
3862:  BSF    F96.1
3864:  BTFSS  F84.1
3866:  BRA    388A
....................          if(Flanco1 == 0) { 
3868:  BTFSC  17.4
386A:  BRA    388A
....................             Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Pulso=1; 
386C:  BSF    17.4
386E:  INCF   1C,F
3870:  MOVLW  1E
3872:  MOVLB  1
3874:  MOVWF  x2C
3876:  MOVLB  0
3878:  CALL   080C
387C:  MOVLW  0C
387E:  MOVLB  1
3880:  MOVWF  x26
3882:  MOVLB  0
3884:  CALL   0A20
3888:  BSF    18.6
....................          } 
....................       } 
....................    }else{ 
388A:  BRA    388E
....................       Flanco1 = 0; 
388C:  BCF    17.4
....................    } 
....................              
....................    if(IZQU){// Si oprime Izquierda 
388E:  BSF    F96.2
3890:  BTFSS  F84.2
3892:  BRA    38CA
....................       delay_ms(20); 
3894:  MOVLW  14
3896:  MOVLB  1
3898:  MOVWF  x2C
389A:  MOVLB  0
389C:  CALL   080C
....................       if(IZQU){ 
38A0:  BSF    F96.2
38A2:  BTFSS  F84.2
38A4:  BRA    38C8
....................          if(Flanco3 == 0) { 
38A6:  BTFSC  17.6
38A8:  BRA    38C8
....................             Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Pulso=1; 
38AA:  BSF    17.6
38AC:  DECF   1C,F
38AE:  MOVLW  1E
38B0:  MOVLB  1
38B2:  MOVWF  x2C
38B4:  MOVLB  0
38B6:  CALL   080C
38BA:  MOVLW  0C
38BC:  MOVLB  1
38BE:  MOVWF  x26
38C0:  MOVLB  0
38C2:  CALL   0A20
38C6:  BSF    18.6
....................          } 
....................       } 
....................    }else{ 
38C8:  BRA    38CC
....................       Flanco3 = 0; 
38CA:  BCF    17.6
....................    } 
....................    }       
38CC:  BRA    34D8
.................... //----------------Fin-Menu6.1--------------------------------------------------------------- 
....................     
.................... //----------------Menu4--------------------------------------------------------------- 
....................    while(Menu == 4){ // Menu de tiempo de trabajo de Luz UV 
38CE:  MOVF   19,W
38D0:  SUBLW  04
38D2:  BTFSS  FD8.2
38D4:  BRA    3B2A
....................     
....................    if(Pulso){ 
38D6:  BTFSS  18.6
38D8:  BRA    396A
....................       lcd_gotoxy(1,1); 
38DA:  MOVLW  01
38DC:  MOVLB  1
38DE:  MOVWF  x27
38E0:  MOVWF  x28
38E2:  MOVLB  0
38E4:  CALL   09AE
....................       printf(lcd_putc,"  Duracion Actual   "); 
38E8:  MOVLW  FE
38EA:  MOVWF  FF6
38EC:  MOVLW  04
38EE:  MOVWF  FF7
38F0:  CALL   0A96
....................       lcd_gotoxy(1,2); 
38F4:  MOVLW  01
38F6:  MOVLB  1
38F8:  MOVWF  x27
38FA:  MOVLW  02
38FC:  MOVWF  x28
38FE:  MOVLB  0
3900:  CALL   09AE
....................       printf(lcd_putc,"   Tiempo= %05Lu   ",horas); 
3904:  MOVLW  14
3906:  MOVWF  FF6
3908:  MOVLW  05
390A:  MOVWF  FF7
390C:  MOVLW  0B
390E:  MOVLB  1
3910:  MOVWF  x19
3912:  MOVLB  0
3914:  CALL   0EB0
3918:  MOVLW  08
391A:  MOVWF  FE9
391C:  MOVFF  43,116
3920:  MOVFF  42,115
3924:  GOTO   1154
3928:  MOVLW  20
392A:  MOVLB  1
392C:  MOVWF  x26
392E:  MOVLB  0
3930:  CALL   0A20
3934:  MOVLW  20
3936:  MOVLB  1
3938:  MOVWF  x26
393A:  MOVLB  0
393C:  CALL   0A20
3940:  MOVLW  20
3942:  MOVLB  1
3944:  MOVWF  x26
3946:  MOVLB  0
3948:  CALL   0A20
....................       lcd_gotoxy(1,4); 
394C:  MOVLW  01
394E:  MOVLB  1
3950:  MOVWF  x27
3952:  MOVLW  04
3954:  MOVWF  x28
3956:  MOVLB  0
3958:  CALL   09AE
....................       printf(lcd_putc," RESET= Oprima ^ y > "); 
395C:  MOVLW  28
395E:  MOVWF  FF6
3960:  MOVLW  05
3962:  MOVWF  FF7
3964:  CALL   0A96
....................       Pulso=0; 
3968:  BCF    18.6
....................    } 
....................     
....................       if(UP && RIGHT){//Si oprime hacia arriba 
396A:  BSF    F92.5
396C:  BTFSS  F80.5
396E:  BRA    3AD8
3970:  BSF    F96.1
3972:  BTFSS  F84.1
3974:  BRA    3AD8
....................          delay_ms(200); 
3976:  MOVLW  C8
3978:  MOVLB  1
397A:  MOVWF  x2C
397C:  MOVLB  0
397E:  CALL   080C
....................          if(UP && RIGHT){ 
3982:  BSF    F92.5
3984:  BTFSS  F80.5
3986:  BRA    3AD8
3988:  BSF    F96.1
398A:  BTFSS  F84.1
398C:  BRA    3AD8
....................             printf(lcd_putc,"\f"); 
398E:  MOVLW  0C
3990:  MOVLB  1
3992:  MOVWF  x26
3994:  MOVLB  0
3996:  CALL   0A20
....................             lcd_gotoxy(1,2); 
399A:  MOVLW  01
399C:  MOVLB  1
399E:  MOVWF  x27
39A0:  MOVLW  02
39A2:  MOVWF  x28
39A4:  MOVLB  0
39A6:  CALL   09AE
....................             printf(lcd_putc," Reset de tiempo "); 
39AA:  MOVLW  3E
39AC:  MOVWF  FF6
39AE:  MOVLW  05
39B0:  MOVWF  FF7
39B2:  CALL   0A96
....................             lcd_gotoxy(1,3); 
39B6:  MOVLW  01
39B8:  MOVLB  1
39BA:  MOVWF  x27
39BC:  MOVLW  03
39BE:  MOVWF  x28
39C0:  MOVLB  0
39C2:  CALL   09AE
....................             printf(lcd_putc,"     Exitoso     "); 
39C6:  MOVLW  50
39C8:  MOVWF  FF6
39CA:  MOVLW  05
39CC:  MOVWF  FF7
39CE:  CALL   0A96
....................             write_eeprom(50,0); 
39D2:  MOVLW  32
39D4:  MOVWF  FA9
39D6:  CLRF   FA8
39D8:  BCF    FA6.6
39DA:  BCF    FA6.7
39DC:  BSF    FA6.2
39DE:  MOVF   FF2,W
39E0:  MOVWF  00
39E2:  BCF    FF2.7
39E4:  MOVLB  F
39E6:  MOVLW  55
39E8:  MOVWF  FA7
39EA:  MOVLW  AA
39EC:  MOVWF  FA7
39EE:  BSF    FA6.1
39F0:  BTFSC  FA6.1
39F2:  BRA    39F0
39F4:  BCF    FA6.2
39F6:  MOVF   00,W
39F8:  IORWF  FF2,F
....................             delay_ms(20); 
39FA:  MOVLW  14
39FC:  MOVLB  1
39FE:  MOVWF  x2C
3A00:  MOVLB  0
3A02:  CALL   080C
....................             write_eeprom(51,0); 
3A06:  MOVLW  33
3A08:  MOVWF  FA9
3A0A:  CLRF   FA8
3A0C:  BCF    FA6.6
3A0E:  BCF    FA6.7
3A10:  BSF    FA6.2
3A12:  MOVF   FF2,W
3A14:  MOVWF  00
3A16:  BCF    FF2.7
3A18:  MOVLB  F
3A1A:  MOVLW  55
3A1C:  MOVWF  FA7
3A1E:  MOVLW  AA
3A20:  MOVWF  FA7
3A22:  BSF    FA6.1
3A24:  BTFSC  FA6.1
3A26:  BRA    3A24
3A28:  BCF    FA6.2
3A2A:  MOVF   00,W
3A2C:  IORWF  FF2,F
....................             delay_ms(20); 
3A2E:  MOVLW  14
3A30:  MOVLB  1
3A32:  MOVWF  x2C
3A34:  MOVLB  0
3A36:  CALL   080C
....................             write_eeprom(52,0); 
3A3A:  MOVLW  34
3A3C:  MOVWF  FA9
3A3E:  CLRF   FA8
3A40:  BCF    FA6.6
3A42:  BCF    FA6.7
3A44:  BSF    FA6.2
3A46:  MOVF   FF2,W
3A48:  MOVWF  00
3A4A:  BCF    FF2.7
3A4C:  MOVLB  F
3A4E:  MOVLW  55
3A50:  MOVWF  FA7
3A52:  MOVLW  AA
3A54:  MOVWF  FA7
3A56:  BSF    FA6.1
3A58:  BTFSC  FA6.1
3A5A:  BRA    3A58
3A5C:  BCF    FA6.2
3A5E:  MOVF   00,W
3A60:  IORWF  FF2,F
....................             delay_ms(20); 
3A62:  MOVLW  14
3A64:  MOVLB  1
3A66:  MOVWF  x2C
3A68:  MOVLB  0
3A6A:  CALL   080C
....................             write_eeprom(53,0); 
3A6E:  MOVLW  35
3A70:  MOVWF  FA9
3A72:  CLRF   FA8
3A74:  BCF    FA6.6
3A76:  BCF    FA6.7
3A78:  BSF    FA6.2
3A7A:  MOVF   FF2,W
3A7C:  MOVWF  00
3A7E:  BCF    FF2.7
3A80:  MOVLB  F
3A82:  MOVLW  55
3A84:  MOVWF  FA7
3A86:  MOVLW  AA
3A88:  MOVWF  FA7
3A8A:  BSF    FA6.1
3A8C:  BTFSC  FA6.1
3A8E:  BRA    3A8C
3A90:  BCF    FA6.2
3A92:  MOVF   00,W
3A94:  IORWF  FF2,F
....................             delay_ms(700); 
3A96:  MOVLW  04
3A98:  MOVLB  1
3A9A:  MOVWF  x15
3A9C:  MOVLW  AF
3A9E:  MOVWF  x2C
3AA0:  MOVLB  0
3AA2:  CALL   080C
3AA6:  MOVLB  1
3AA8:  DECFSZ x15,F
3AAA:  BRA    3A9C
....................             segundos=0;minutos=0;horas=0; 
3AAC:  CLRF   22
3AAE:  CLRF   23
3AB0:  CLRF   43
3AB2:  CLRF   42
....................             delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
3AB4:  MOVLW  1E
3AB6:  MOVWF  x2C
3AB8:  MOVLB  0
3ABA:  CALL   080C
3ABE:  MOVLW  01
3AC0:  MOVWF  19
3AC2:  CLRF   32
3AC4:  MOVLW  02
3AC6:  MOVWF  1D
3AC8:  MOVWF  1F
3ACA:  MOVLW  0C
3ACC:  MOVLB  1
3ACE:  MOVWF  x26
3AD0:  MOVLB  0
3AD2:  CALL   0A20
....................             Pulso=1; 
3AD6:  BSF    18.6
....................          } 
....................       } 
....................              
....................       if(IZQU){// Si oprime Izquierda 
3AD8:  BSF    F96.2
3ADA:  BTFSS  F84.2
3ADC:  BRA    3B26
....................          delay_ms(20); 
3ADE:  MOVLW  14
3AE0:  MOVLB  1
3AE2:  MOVWF  x2C
3AE4:  MOVLB  0
3AE6:  CALL   080C
....................          if(IZQU){ 
3AEA:  BSF    F96.2
3AEC:  BTFSS  F84.2
3AEE:  BRA    3B24
....................             if(Flanco3 == 0){ 
3AF0:  BTFSC  17.6
3AF2:  BRA    3B24
....................                Flanco3 = 1;delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f");Pulso=1; 
3AF4:  BSF    17.6
3AF6:  MOVLW  02
3AF8:  MOVLB  1
3AFA:  MOVWF  x15
3AFC:  MOVLW  FA
3AFE:  MOVWF  x2C
3B00:  MOVLB  0
3B02:  CALL   080C
3B06:  MOVLB  1
3B08:  DECFSZ x15,F
3B0A:  BRA    3AFC
3B0C:  MOVLW  01
3B0E:  MOVWF  19
3B10:  CLRF   32
3B12:  MOVLW  02
3B14:  MOVWF  1D
3B16:  MOVWF  1F
3B18:  MOVLW  0C
3B1A:  MOVWF  x26
3B1C:  MOVLB  0
3B1E:  CALL   0A20
3B22:  BSF    18.6
....................             } 
....................          } 
....................       }else{ 
3B24:  BRA    3B28
....................          Flanco3 = 0; 
3B26:  BCF    17.6
....................       } 
....................    } 
3B28:  BRA    38CE
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu5--------------------------------------------------------------- 
....................   while(Menu == 5){ // Menu de Punto Cero 
3B2A:  MOVF   19,W
3B2C:  SUBLW  05
3B2E:  BTFSS  FD8.2
3B30:  BRA    3DDE
....................        
....................       if(Pulso){ 
3B32:  BTFSS  18.6
3B34:  BRA    3C98
....................          lcd_gotoxy(1,1); 
3B36:  MOVLW  01
3B38:  MOVLB  1
3B3A:  MOVWF  x27
3B3C:  MOVWF  x28
3B3E:  MOVLB  0
3B40:  CALL   09AE
....................          printf(lcd_putc," Punto Cero Presion "); 
3B44:  MOVLW  62
3B46:  MOVWF  FF6
3B48:  MOVLW  05
3B4A:  MOVWF  FF7
3B4C:  CALL   0A96
....................          lcd_gotoxy(1,2); 
3B50:  MOVLW  01
3B52:  MOVLB  1
3B54:  MOVWF  x27
3B56:  MOVLW  02
3B58:  MOVWF  x28
3B5A:  MOVLB  0
3B5C:  CALL   09AE
....................          printf(lcd_putc,"Presion= %3.2f inH2O ",(Leer_Sensor_Presion(5)*4.02)); 
3B60:  MOVLW  05
3B62:  MOVLB  1
3B64:  MOVWF  x15
3B66:  MOVLB  0
3B68:  CALL   128C
3B6C:  MOVFF  00,115
3B70:  MOVFF  01,116
3B74:  MOVFF  02,117
3B78:  MOVFF  03,118
3B7C:  MOVFF  03,12C
3B80:  MOVFF  02,12B
3B84:  MOVFF  01,12A
3B88:  MOVFF  00,129
3B8C:  MOVLW  D7
3B8E:  MOVLB  1
3B90:  MOVWF  x30
3B92:  MOVLW  A3
3B94:  MOVWF  x2F
3B96:  CLRF   x2E
3B98:  MOVLW  81
3B9A:  MOVWF  x2D
3B9C:  MOVLB  0
3B9E:  CALL   143A
3BA2:  MOVFF  00,115
3BA6:  MOVFF  01,116
3BAA:  MOVFF  02,117
3BAE:  MOVFF  03,118
3BB2:  MOVLW  78
3BB4:  MOVWF  FF6
3BB6:  MOVLW  05
3BB8:  MOVWF  FF7
3BBA:  MOVLW  09
3BBC:  MOVLB  1
3BBE:  MOVWF  x19
3BC0:  MOVLB  0
3BC2:  CALL   0EB0
3BC6:  MOVLW  02
3BC8:  MOVWF  FE9
3BCA:  MOVFF  118,11C
3BCE:  MOVFF  117,11B
3BD2:  MOVFF  116,11A
3BD6:  MOVFF  115,119
3BDA:  MOVLB  1
3BDC:  MOVWF  x1D
3BDE:  MOVLB  0
3BE0:  CALL   15F4
3BE4:  MOVLW  86
3BE6:  MOVWF  FF6
3BE8:  MOVLW  05
3BEA:  MOVWF  FF7
3BEC:  MOVLW  07
3BEE:  MOVLB  1
3BF0:  MOVWF  x19
3BF2:  MOVLB  0
3BF4:  CALL   0EB0
....................          lcd_gotoxy(1,3); 
3BF8:  MOVLW  01
3BFA:  MOVLB  1
3BFC:  MOVWF  x27
3BFE:  MOVLW  03
3C00:  MOVWF  x28
3C02:  MOVLB  0
3C04:  CALL   09AE
....................          printf(lcd_putc,"    ADC=%2.0f",sensores(0)); 
3C08:  MOVLB  1
3C0A:  CLRF   x1A
3C0C:  MOVLB  0
3C0E:  CALL   095A
3C12:  MOVFF  00,115
3C16:  MOVFF  01,116
3C1A:  MOVFF  02,117
3C1E:  MOVFF  03,118
3C22:  MOVLW  8E
3C24:  MOVWF  FF6
3C26:  MOVLW  05
3C28:  MOVWF  FF7
3C2A:  MOVLW  08
3C2C:  MOVLB  1
3C2E:  MOVWF  x19
3C30:  MOVLB  0
3C32:  CALL   0EB0
3C36:  MOVLW  01
3C38:  MOVWF  FE9
3C3A:  MOVFF  118,11C
3C3E:  MOVFF  117,11B
3C42:  MOVFF  116,11A
3C46:  MOVFF  115,119
3C4A:  MOVLB  1
3C4C:  CLRF   x1D
3C4E:  MOVLB  0
3C50:  CALL   15F4
....................          lcd_gotoxy(1,4); 
3C54:  MOVLW  01
3C56:  MOVLB  1
3C58:  MOVWF  x27
3C5A:  MOVLW  04
3C5C:  MOVWF  x28
3C5E:  MOVLB  0
3C60:  CALL   09AE
....................          printf(lcd_putc,"    ZF=%2.0f",G); 
3C64:  MOVLW  9C
3C66:  MOVWF  FF6
3C68:  MOVLW  05
3C6A:  MOVWF  FF7
3C6C:  MOVLW  07
3C6E:  MOVLB  1
3C70:  MOVWF  x19
3C72:  MOVLB  0
3C74:  CALL   0EB0
3C78:  MOVLW  01
3C7A:  MOVWF  FE9
3C7C:  MOVFF  A9,11C
3C80:  MOVFF  A8,11B
3C84:  MOVFF  A7,11A
3C88:  MOVFF  A6,119
3C8C:  MOVLB  1
3C8E:  CLRF   x1D
3C90:  MOVLB  0
3C92:  CALL   15F4
....................          Pulso=0; 
3C96:  BCF    18.6
....................       } 
....................      
....................       if(RIGHT){// Si oprime derecha 
3C98:  BSF    F96.1
3C9A:  BTFSS  F84.1
3C9C:  BRA    3D24
....................          delay_ms(20); 
3C9E:  MOVLW  14
3CA0:  MOVLB  1
3CA2:  MOVWF  x2C
3CA4:  MOVLB  0
3CA6:  CALL   080C
....................          if(RIGHT){ 
3CAA:  BSF    F96.1
3CAC:  BTFSS  F84.1
3CAE:  BRA    3D22
....................             if(Flanco1 == 0) { 
3CB0:  BTFSC  17.4
3CB2:  BRA    3D22
....................                Flanco1 = 1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
3CB4:  BSF    17.4
3CB6:  CLRF   32
3CB8:  MOVLW  02
3CBA:  MOVWF  1D
3CBC:  MOVWF  1F
3CBE:  MOVLW  0B
3CC0:  MOVWF  1C
3CC2:  MOVLW  02
3CC4:  MOVLB  1
3CC6:  MOVWF  x15
3CC8:  MOVLW  FA
3CCA:  MOVWF  x2C
3CCC:  MOVLB  0
3CCE:  CALL   080C
3CD2:  MOVLB  1
3CD4:  DECFSZ x15,F
3CD6:  BRA    3CC8
3CD8:  MOVLW  0C
3CDA:  MOVWF  x26
3CDC:  MOVLB  0
3CDE:  CALL   0A20
....................                G=sensores(0); 
3CE2:  MOVLB  1
3CE4:  CLRF   x1A
3CE6:  MOVLB  0
3CE8:  CALL   095A
3CEC:  MOVFF  03,A9
3CF0:  MOVFF  02,A8
3CF4:  MOVFF  01,A7
3CF8:  MOVFF  00,A6
....................                G16=(int16)G; 
3CFC:  MOVFF  A9,12C
3D00:  MOVFF  A8,12B
3D04:  MOVFF  A7,12A
3D08:  MOVFF  A6,129
3D0C:  CALL   17A6
3D10:  MOVFF  02,45
3D14:  MOVFF  01,44
....................                G_l=G16; G_h=(G16>>8); 
3D18:  MOVFF  44,26
3D1C:  MOVFF  45,27
....................                Pulso=1; 
3D20:  BSF    18.6
....................             } 
....................          } 
....................       }else{ 
3D22:  BRA    3D26
....................          Flanco1 = 0; 
3D24:  BCF    17.4
....................       } 
....................              
....................       if(IZQU){// Si oprime Izquierda 
3D26:  BSF    F96.2
3D28:  BTFSS  F84.2
3D2A:  BRA    3DDA
....................          delay_ms(20); 
3D2C:  MOVLW  14
3D2E:  MOVLB  1
3D30:  MOVWF  x2C
3D32:  MOVLB  0
3D34:  CALL   080C
....................          if(IZQU){ 
3D38:  BSF    F96.2
3D3A:  BTFSS  F84.2
3D3C:  BRA    3DD8
....................             if(Flanco3 == 0) { 
3D3E:  BTFSC  17.6
3D40:  BRA    3DD8
....................                /*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(100);printf(lcd_putc,"\f");Pulso=1; 
3D42:  MOVLW  01
3D44:  MOVWF  19
3D46:  CLRF   32
3D48:  MOVLW  02
3D4A:  MOVWF  1D
3D4C:  MOVWF  1F
3D4E:  MOVLW  0B
3D50:  MOVWF  1C
3D52:  MOVLW  64
3D54:  MOVLB  1
3D56:  MOVWF  x2C
3D58:  MOVLB  0
3D5A:  CALL   080C
3D5E:  MOVLW  0C
3D60:  MOVLB  1
3D62:  MOVWF  x26
3D64:  MOVLB  0
3D66:  CALL   0A20
3D6A:  BSF    18.6
....................                write_eeprom(60,G_l); 
3D6C:  MOVLW  3C
3D6E:  MOVWF  FA9
3D70:  MOVFF  26,FA8
3D74:  BCF    FA6.6
3D76:  BCF    FA6.7
3D78:  BSF    FA6.2
3D7A:  MOVF   FF2,W
3D7C:  MOVWF  00
3D7E:  BCF    FF2.7
3D80:  MOVLB  F
3D82:  MOVLW  55
3D84:  MOVWF  FA7
3D86:  MOVLW  AA
3D88:  MOVWF  FA7
3D8A:  BSF    FA6.1
3D8C:  BTFSC  FA6.1
3D8E:  BRA    3D8C
3D90:  BCF    FA6.2
3D92:  MOVF   00,W
3D94:  IORWF  FF2,F
....................                delay_ms(20); 
3D96:  MOVLW  14
3D98:  MOVLB  1
3D9A:  MOVWF  x2C
3D9C:  MOVLB  0
3D9E:  CALL   080C
....................                write_eeprom(61,G_h);//Guardar valor de Setpoint en eeprom 
3DA2:  MOVLW  3D
3DA4:  MOVWF  FA9
3DA6:  MOVFF  27,FA8
3DAA:  BCF    FA6.6
3DAC:  BCF    FA6.7
3DAE:  BSF    FA6.2
3DB0:  MOVF   FF2,W
3DB2:  MOVWF  00
3DB4:  BCF    FF2.7
3DB6:  MOVLB  F
3DB8:  MOVLW  55
3DBA:  MOVWF  FA7
3DBC:  MOVLW  AA
3DBE:  MOVWF  FA7
3DC0:  BSF    FA6.1
3DC2:  BTFSC  FA6.1
3DC4:  BRA    3DC2
3DC6:  BCF    FA6.2
3DC8:  MOVF   00,W
3DCA:  IORWF  FF2,F
....................                delay_ms(20); 
3DCC:  MOVLW  14
3DCE:  MOVLB  1
3DD0:  MOVWF  x2C
3DD2:  MOVLB  0
3DD4:  CALL   080C
....................             } 
....................          } 
....................       }else{ 
3DD8:  BRA    3DDC
....................          Flanco3 = 0; 
3DDA:  BCF    17.6
....................       } 
....................    } 
3DDC:  BRA    3B2A
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6){ // Menu de seleccion de estado de Alarma 
3DDE:  MOVF   19,W
3DE0:  SUBLW  06
3DE2:  BTFSS  FD8.2
3DE4:  BRA    3F36
....................    estadoalarma=!estadoalarma;Flanco1 = 1;Menu=1; paso=0; 
3DE6:  BTG    18.4
3DE8:  BSF    17.4
3DEA:  MOVLW  01
3DEC:  MOVWF  19
3DEE:  CLRF   32
....................                        
....................             if(estadoalarma==1) 
3DF0:  BTFSS  18.4
3DF2:  BRA    3E66
....................             {estadoalarma=1; 
3DF4:  BSF    18.4
....................                lcd_gotoxy(1,1); 
3DF6:  MOVLW  01
3DF8:  MOVLB  1
3DFA:  MOVWF  x27
3DFC:  MOVWF  x28
3DFE:  MOVLB  0
3E00:  CALL   09AE
....................                printf(lcd_putc,"                    "); 
3E04:  MOVLW  AA
3E06:  MOVWF  FF6
3E08:  MOVLW  05
3E0A:  MOVWF  FF7
3E0C:  CALL   0A96
....................                lcd_gotoxy(1,2); 
3E10:  MOVLW  01
3E12:  MOVLB  1
3E14:  MOVWF  x27
3E16:  MOVLW  02
3E18:  MOVWF  x28
3E1A:  MOVLB  0
3E1C:  CALL   09AE
....................                printf(lcd_putc,"        Activo      "); 
3E20:  MOVLW  C0
3E22:  MOVWF  FF6
3E24:  MOVLW  05
3E26:  MOVWF  FF7
3E28:  CALL   0A96
....................                lcd_gotoxy(1,3); 
3E2C:  MOVLW  01
3E2E:  MOVLB  1
3E30:  MOVWF  x27
3E32:  MOVLW  03
3E34:  MOVWF  x28
3E36:  MOVLB  0
3E38:  CALL   09AE
....................                printf(lcd_putc,"        Alarma      "); 
3E3C:  MOVLW  D6
3E3E:  MOVWF  FF6
3E40:  MOVLW  05
3E42:  MOVWF  FF7
3E44:  CALL   0A96
....................                lcd_gotoxy(1,4); 
3E48:  MOVLW  01
3E4A:  MOVLB  1
3E4C:  MOVWF  x27
3E4E:  MOVLW  04
3E50:  MOVWF  x28
3E52:  MOVLB  0
3E54:  CALL   09AE
....................                printf(lcd_putc,"                    "); 
3E58:  MOVLW  EC
3E5A:  MOVWF  FF6
3E5C:  MOVLW  05
3E5E:  MOVWF  FF7
3E60:  CALL   0A96
....................                Pulso=1; 
3E64:  BSF    18.6
....................             } 
....................                 
....................             if(estadoalarma==0) 
3E66:  BTFSC  18.4
3E68:  BRA    3EDC
....................             {estadoalarma=0; 
3E6A:  BCF    18.4
....................                lcd_gotoxy(1,1); 
3E6C:  MOVLW  01
3E6E:  MOVLB  1
3E70:  MOVWF  x27
3E72:  MOVWF  x28
3E74:  MOVLB  0
3E76:  CALL   09AE
....................                printf(lcd_putc,"                    "); 
3E7A:  MOVLW  02
3E7C:  MOVWF  FF6
3E7E:  MOVLW  06
3E80:  MOVWF  FF7
3E82:  CALL   0A96
....................                lcd_gotoxy(1,2); 
3E86:  MOVLW  01
3E88:  MOVLB  1
3E8A:  MOVWF  x27
3E8C:  MOVLW  02
3E8E:  MOVWF  x28
3E90:  MOVLB  0
3E92:  CALL   09AE
....................                printf(lcd_putc,"      Desactivo     "); 
3E96:  MOVLW  18
3E98:  MOVWF  FF6
3E9A:  MOVLW  06
3E9C:  MOVWF  FF7
3E9E:  CALL   0A96
....................                lcd_gotoxy(1,3); 
3EA2:  MOVLW  01
3EA4:  MOVLB  1
3EA6:  MOVWF  x27
3EA8:  MOVLW  03
3EAA:  MOVWF  x28
3EAC:  MOVLB  0
3EAE:  CALL   09AE
....................                printf(lcd_putc,"       Alarma       "); 
3EB2:  MOVLW  2E
3EB4:  MOVWF  FF6
3EB6:  MOVLW  06
3EB8:  MOVWF  FF7
3EBA:  CALL   0A96
....................                lcd_gotoxy(1,4); 
3EBE:  MOVLW  01
3EC0:  MOVLB  1
3EC2:  MOVWF  x27
3EC4:  MOVLW  04
3EC6:  MOVWF  x28
3EC8:  MOVLB  0
3ECA:  CALL   09AE
....................                printf(lcd_putc,"                    "); 
3ECE:  MOVLW  44
3ED0:  MOVWF  FF6
3ED2:  MOVLW  06
3ED4:  MOVWF  FF7
3ED6:  CALL   0A96
....................                Pulso=1; 
3EDA:  BSF    18.6
....................             } 
....................               
....................             write_eeprom(5,estadoalarma);delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
3EDC:  MOVLW  00
3EDE:  BTFSC  18.4
3EE0:  MOVLW  01
3EE2:  MOVLB  1
3EE4:  MOVWF  x15
3EE6:  MOVLW  05
3EE8:  MOVWF  FA9
3EEA:  MOVFF  115,FA8
3EEE:  BCF    FA6.6
3EF0:  BCF    FA6.7
3EF2:  BSF    FA6.2
3EF4:  MOVF   FF2,W
3EF6:  MOVWF  00
3EF8:  BCF    FF2.7
3EFA:  MOVLB  F
3EFC:  MOVLW  55
3EFE:  MOVWF  FA7
3F00:  MOVLW  AA
3F02:  MOVWF  FA7
3F04:  BSF    FA6.1
3F06:  BTFSC  FA6.1
3F08:  BRA    3F06
3F0A:  BCF    FA6.2
3F0C:  MOVF   00,W
3F0E:  IORWF  FF2,F
3F10:  MOVLW  04
3F12:  MOVLB  1
3F14:  MOVWF  x15
3F16:  MOVLW  FA
3F18:  MOVWF  x2C
3F1A:  MOVLB  0
3F1C:  CALL   080C
3F20:  MOVLB  1
3F22:  DECFSZ x15,F
3F24:  BRA    3F16
3F26:  MOVLW  02
3F28:  MOVWF  1D
3F2A:  MOVWF  1F
3F2C:  MOVLW  0C
3F2E:  MOVWF  x26
3F30:  MOVLB  0
3F32:  CALL   0A20
....................    }       
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
....................  
....................  
.................... //----------------Menu7--------------------------------------------------------------- 
....................    while(Menu == 7){ // Menu de Punto Cero flujo 
3F36:  MOVF   19,W
3F38:  SUBLW  07
3F3A:  BTFSS  FD8.2
3F3C:  BRA    45E6
....................        
....................       if(Pulso){ 
3F3E:  BTFSS  18.6
3F40:  BRA    4054
....................          lcd_gotoxy(1,1); 
3F42:  MOVLW  01
3F44:  MOVLB  1
3F46:  MOVWF  x27
3F48:  MOVWF  x28
3F4A:  MOVLB  0
3F4C:  CALL   09AE
....................          printf(lcd_putc,"  Punto cero Flujo "); 
3F50:  MOVLW  5A
3F52:  MOVWF  FF6
3F54:  MOVLW  06
3F56:  MOVWF  FF7
3F58:  CALL   0A96
....................          lcd_gotoxy(1,2); 
3F5C:  MOVLW  01
3F5E:  MOVLB  1
3F60:  MOVWF  x27
3F62:  MOVLW  02
3F64:  MOVWF  x28
3F66:  MOVLB  0
3F68:  CALL   09AE
....................          printf(lcd_putc,"Ajuste= %3.2f       ",Ajuste1); 
3F6C:  MOVLW  6E
3F6E:  MOVWF  FF6
3F70:  MOVLW  06
3F72:  MOVWF  FF7
3F74:  MOVLW  08
3F76:  MOVLB  1
3F78:  MOVWF  x19
3F7A:  MOVLB  0
3F7C:  CALL   0EB0
3F80:  MOVLW  02
3F82:  MOVWF  FE9
3F84:  MOVFF  C5,11C
3F88:  MOVFF  C4,11B
3F8C:  MOVFF  C3,11A
3F90:  MOVFF  C2,119
3F94:  MOVLB  1
3F96:  MOVWF  x1D
3F98:  MOVLB  0
3F9A:  CALL   15F4
3F9E:  MOVLW  7B
3FA0:  MOVWF  FF6
3FA2:  MOVLW  06
3FA4:  MOVWF  FF7
3FA6:  MOVLW  07
3FA8:  MOVLB  1
3FAA:  MOVWF  x19
3FAC:  MOVLB  0
3FAE:  CALL   0EB0
....................          lcd_gotoxy(1,3); 
3FB2:  MOVLW  01
3FB4:  MOVLB  1
3FB6:  MOVWF  x27
3FB8:  MOVLW  03
3FBA:  MOVWF  x28
3FBC:  MOVLB  0
3FBE:  CALL   09AE
....................          printf(lcd_putc,"    ADC=%2.0f",sensores(1)); 
3FC2:  MOVLW  01
3FC4:  MOVLB  1
3FC6:  MOVWF  x1A
3FC8:  MOVLB  0
3FCA:  CALL   095A
3FCE:  MOVFF  00,115
3FD2:  MOVFF  01,116
3FD6:  MOVFF  02,117
3FDA:  MOVFF  03,118
3FDE:  MOVLW  84
3FE0:  MOVWF  FF6
3FE2:  MOVLW  06
3FE4:  MOVWF  FF7
3FE6:  MOVLW  08
3FE8:  MOVLB  1
3FEA:  MOVWF  x19
3FEC:  MOVLB  0
3FEE:  CALL   0EB0
3FF2:  MOVLW  01
3FF4:  MOVWF  FE9
3FF6:  MOVFF  118,11C
3FFA:  MOVFF  117,11B
3FFE:  MOVFF  116,11A
4002:  MOVFF  115,119
4006:  MOVLB  1
4008:  CLRF   x1D
400A:  MOVLB  0
400C:  CALL   15F4
....................          lcd_gotoxy(1,4); 
4010:  MOVLW  01
4012:  MOVLB  1
4014:  MOVWF  x27
4016:  MOVLW  04
4018:  MOVWF  x28
401A:  MOVLB  0
401C:  CALL   09AE
....................          printf(lcd_putc,"    ZF=%2.0f",zero_actual); 
4020:  MOVLW  92
4022:  MOVWF  FF6
4024:  MOVLW  06
4026:  MOVWF  FF7
4028:  MOVLW  07
402A:  MOVLB  1
402C:  MOVWF  x19
402E:  MOVLB  0
4030:  CALL   0EB0
4034:  MOVLW  01
4036:  MOVWF  FE9
4038:  MOVFF  109,11C
403C:  MOVFF  108,11B
4040:  MOVFF  107,11A
4044:  MOVFF  106,119
4048:  MOVLB  1
404A:  CLRF   x1D
404C:  MOVLB  0
404E:  CALL   15F4
....................          Pulso=0; 
4052:  BCF    18.6
....................       } 
....................        
....................       if(Ajuste1>10.0) Ajuste1=0.0; 
4054:  MOVLB  1
4056:  CLRF   x2C
4058:  CLRF   x2B
405A:  MOVLW  20
405C:  MOVWF  x2A
405E:  MOVLW  82
4060:  MOVWF  x29
4062:  MOVFF  C5,130
4066:  MOVFF  C4,12F
406A:  MOVFF  C3,12E
406E:  MOVFF  C2,12D
4072:  MOVLB  0
4074:  CALL   1212
4078:  BNC   4082
407A:  CLRF   xC5
407C:  CLRF   xC4
407E:  CLRF   xC3
4080:  CLRF   xC2
....................        
....................             
....................       if(UP)//Si oprime hacia arriba 
4082:  BSF    F92.5
4084:  BTFSS  F80.5
4086:  BRA    40E2
....................       {   
....................          delay_ms(20); 
4088:  MOVLW  14
408A:  MOVLB  1
408C:  MOVWF  x2C
408E:  MOVLB  0
4090:  CALL   080C
....................          if(UP){ 
4094:  BSF    F92.5
4096:  BTFSS  F80.5
4098:  BRA    40E2
....................             delay_ms(30);Ajuste1+=0.01;Pulso=1; 
409A:  MOVLW  1E
409C:  MOVLB  1
409E:  MOVWF  x2C
40A0:  MOVLB  0
40A2:  CALL   080C
40A6:  BCF    FD8.1
40A8:  MOVFF  C5,130
40AC:  MOVFF  C4,12F
40B0:  MOVFF  C3,12E
40B4:  MOVFF  C2,12D
40B8:  MOVLW  0A
40BA:  MOVLB  1
40BC:  MOVWF  x34
40BE:  MOVLW  D7
40C0:  MOVWF  x33
40C2:  MOVLW  23
40C4:  MOVWF  x32
40C6:  MOVLW  78
40C8:  MOVWF  x31
40CA:  MOVLB  0
40CC:  CALL   0C14
40D0:  MOVFF  03,C5
40D4:  MOVFF  02,C4
40D8:  MOVFF  01,C3
40DC:  MOVFF  00,C2
40E0:  BSF    18.6
....................          } 
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
40E2:  BSF    F96.0
40E4:  BTFSS  F84.0
40E6:  BRA    4142
....................       {    
....................          delay_ms(20); 
40E8:  MOVLW  14
40EA:  MOVLB  1
40EC:  MOVWF  x2C
40EE:  MOVLB  0
40F0:  CALL   080C
....................          if(DOWN){ 
40F4:  BSF    F96.0
40F6:  BTFSS  F84.0
40F8:  BRA    4142
....................             delay_ms(30);Ajuste1-=0.01;Pulso=1;                
40FA:  MOVLW  1E
40FC:  MOVLB  1
40FE:  MOVWF  x2C
4100:  MOVLB  0
4102:  CALL   080C
4106:  BSF    FD8.1
4108:  MOVFF  C5,130
410C:  MOVFF  C4,12F
4110:  MOVFF  C3,12E
4114:  MOVFF  C2,12D
4118:  MOVLW  0A
411A:  MOVLB  1
411C:  MOVWF  x34
411E:  MOVLW  D7
4120:  MOVWF  x33
4122:  MOVLW  23
4124:  MOVWF  x32
4126:  MOVLW  78
4128:  MOVWF  x31
412A:  MOVLB  0
412C:  CALL   0C14
4130:  MOVFF  03,C5
4134:  MOVFF  02,C4
4138:  MOVFF  01,C3
413C:  MOVFF  00,C2
4140:  BSF    18.6
....................          } 
....................       } 
....................              
....................       if(RIGHT)//Si oprime SET 
4142:  BSF    F96.1
4144:  BTFSS  F84.1
4146:  BRA    4476
....................       {   
....................          delay_ms(20); 
4148:  MOVLW  14
414A:  MOVLB  1
414C:  MOVWF  x2C
414E:  MOVLB  0
4150:  CALL   080C
....................          if(RIGHT){ 
4154:  BSF    F96.1
4156:  BTFSS  F84.1
4158:  BRA    4476
....................             Pulso=1; 
415A:  BSF    18.6
....................             Inflow_adc=sensores(1); 
415C:  MOVLW  01
415E:  MOVLB  1
4160:  MOVWF  x1A
4162:  MOVLB  0
4164:  CALL   095A
4168:  MOVFF  03,12C
416C:  MOVFF  02,12B
4170:  MOVFF  01,12A
4174:  MOVFF  00,129
4178:  CALL   17A6
417C:  MOVFF  02,AB
4180:  MOVFF  01,AA
....................             zero_actual=Inflow_adc; 
4184:  MOVFF  AB,12E
4188:  MOVFF  AA,12D
418C:  CALL   0924
4190:  MOVFF  03,109
4194:  MOVFF  02,108
4198:  MOVFF  01,107
419C:  MOVFF  00,106
....................             Diferencia=zero_fabrica-Inflow_adc; 
41A0:  MOVFF  AB,12E
41A4:  MOVFF  AA,12D
41A8:  CALL   0924
41AC:  BSF    FD8.1
41AE:  MOVFF  105,130
41B2:  MOVFF  104,12F
41B6:  MOVFF  103,12E
41BA:  MOVFF  102,12D
41BE:  MOVFF  03,134
41C2:  MOVFF  02,133
41C6:  MOVFF  01,132
41CA:  MOVFF  00,131
41CE:  CALL   0C14
41D2:  MOVFF  03,B1
41D6:  MOVFF  02,B0
41DA:  MOVFF  01,AF
41DE:  MOVFF  00,AE
....................                 
....................             if(Diferencia>=0) 
41E2:  MOVLB  1
41E4:  CLRF   x2C
41E6:  CLRF   x2B
41E8:  CLRF   x2A
41EA:  CLRF   x29
41EC:  MOVFF  B1,130
41F0:  MOVFF  B0,12F
41F4:  MOVFF  AF,12E
41F8:  MOVFF  AE,12D
41FC:  MOVLB  0
41FE:  CALL   1212
4202:  BC    4206
4204:  BNZ   4242
....................             { 
....................                negativo=10;write_eeprom(80,negativo);delay_ms(20); 
4206:  MOVLW  0A
4208:  MOVLB  1
420A:  MOVWF  x10
420C:  MOVLW  50
420E:  MOVWF  FA9
4210:  MOVFF  110,FA8
4214:  BCF    FA6.6
4216:  BCF    FA6.7
4218:  BSF    FA6.2
421A:  MOVF   FF2,W
421C:  MOVWF  00
421E:  BCF    FF2.7
4220:  MOVLB  F
4222:  MOVLW  55
4224:  MOVWF  FA7
4226:  MOVLW  AA
4228:  MOVWF  FA7
422A:  BSF    FA6.1
422C:  BTFSC  FA6.1
422E:  BRA    422C
4230:  BCF    FA6.2
4232:  MOVF   00,W
4234:  IORWF  FF2,F
4236:  MOVLW  14
4238:  MOVLB  1
423A:  MOVWF  x2C
423C:  MOVLB  0
423E:  CALL   080C
....................             } 
....................             if(Diferencia<0) 
4242:  MOVFF  B1,12C
4246:  MOVFF  B0,12B
424A:  MOVFF  AF,12A
424E:  MOVFF  AE,129
4252:  MOVLB  1
4254:  CLRF   x30
4256:  CLRF   x2F
4258:  CLRF   x2E
425A:  CLRF   x2D
425C:  MOVLB  0
425E:  CALL   1212
4262:  BNC   42A0
....................             { 
....................                negativo=20;write_eeprom(80,negativo);delay_ms(20); 
4264:  MOVLW  14
4266:  MOVLB  1
4268:  MOVWF  x10
426A:  MOVLW  50
426C:  MOVWF  FA9
426E:  MOVFF  110,FA8
4272:  BCF    FA6.6
4274:  BCF    FA6.7
4276:  BSF    FA6.2
4278:  MOVF   FF2,W
427A:  MOVWF  00
427C:  BCF    FF2.7
427E:  MOVLB  F
4280:  MOVLW  55
4282:  MOVWF  FA7
4284:  MOVLW  AA
4286:  MOVWF  FA7
4288:  BSF    FA6.1
428A:  BTFSC  FA6.1
428C:  BRA    428A
428E:  BCF    FA6.2
4290:  MOVF   00,W
4292:  IORWF  FF2,F
4294:  MOVLW  14
4296:  MOVLB  1
4298:  MOVWF  x2C
429A:  MOVLB  0
429C:  CALL   080C
....................             } 
....................             Diferencia=abs(Diferencia); 
42A0:  MOVFF  AE,00
42A4:  MOVFF  AF,01
42A8:  MOVFF  B0,02
42AC:  MOVFF  B1,03
42B0:  BCF    01.7
42B2:  MOVFF  B1,B1
42B6:  MOVFF  B0,B0
42BA:  MOVFF  01,AF
42BE:  MOVFF  AE,AE
....................             Temporal1=(int16)Diferencia; 
42C2:  MOVFF  B1,12C
42C6:  MOVFF  B0,12B
42CA:  MOVFF  AF,12A
42CE:  MOVFF  AE,129
42D2:  CALL   17A6
42D6:  MOVFF  02,AD
42DA:  MOVFF  01,AC
....................             write_eeprom(82,make8(Temporal1,0)); 
42DE:  MOVFF  AC,115
42E2:  MOVLW  52
42E4:  MOVWF  FA9
42E6:  MOVFF  115,FA8
42EA:  BCF    FA6.6
42EC:  BCF    FA6.7
42EE:  BSF    FA6.2
42F0:  MOVF   FF2,W
42F2:  MOVWF  00
42F4:  BCF    FF2.7
42F6:  MOVLB  F
42F8:  MOVLW  55
42FA:  MOVWF  FA7
42FC:  MOVLW  AA
42FE:  MOVWF  FA7
4300:  BSF    FA6.1
4302:  BTFSC  FA6.1
4304:  BRA    4302
4306:  BCF    FA6.2
4308:  MOVF   00,W
430A:  IORWF  FF2,F
....................             delay_ms(20); 
430C:  MOVLW  14
430E:  MOVLB  1
4310:  MOVWF  x2C
4312:  MOVLB  0
4314:  CALL   080C
....................             write_eeprom(83,make8(Temporal1,1));//Guardar valor de Setpoint en eeprom 
4318:  MOVFF  AD,115
431C:  MOVLW  53
431E:  MOVWF  FA9
4320:  MOVFF  115,FA8
4324:  BCF    FA6.6
4326:  BCF    FA6.7
4328:  BSF    FA6.2
432A:  MOVF   FF2,W
432C:  MOVWF  00
432E:  BCF    FF2.7
4330:  MOVLB  F
4332:  MOVLW  55
4334:  MOVWF  FA7
4336:  MOVLW  AA
4338:  MOVWF  FA7
433A:  BSF    FA6.1
433C:  BTFSC  FA6.1
433E:  BRA    433C
4340:  BCF    FA6.2
4342:  MOVF   00,W
4344:  IORWF  FF2,F
....................             delay_ms(20); 
4346:  MOVLW  14
4348:  MOVLB  1
434A:  MOVWF  x2C
434C:  MOVLB  0
434E:  CALL   080C
....................             Temporal=zero_actual; 
4352:  MOVFF  109,C9
4356:  MOVFF  108,C8
435A:  MOVFF  107,C7
435E:  MOVFF  106,C6
....................             Entero=(int)zero_actual; 
4362:  MOVFF  109,12C
4366:  MOVFF  108,12B
436A:  MOVFF  107,12A
436E:  MOVFF  106,129
4372:  CALL   17A6
4376:  MOVFF  01,113
....................             Temporal=Temporal-Entero; 
437A:  MOVLB  1
437C:  CLRF   x2E
437E:  MOVFF  113,12D
4382:  MOVLB  0
4384:  CALL   0924
4388:  BSF    FD8.1
438A:  MOVFF  C9,130
438E:  MOVFF  C8,12F
4392:  MOVFF  C7,12E
4396:  MOVFF  C6,12D
439A:  MOVFF  03,134
439E:  MOVFF  02,133
43A2:  MOVFF  01,132
43A6:  MOVFF  00,131
43AA:  CALL   0C14
43AE:  MOVFF  03,C9
43B2:  MOVFF  02,C8
43B6:  MOVFF  01,C7
43BA:  MOVFF  00,C6
....................             Temporal2=Temporal*100.0; 
43BE:  MOVFF  C9,12C
43C2:  MOVFF  C8,12B
43C6:  MOVFF  C7,12A
43CA:  MOVFF  C6,129
43CE:  MOVLB  1
43D0:  CLRF   x30
43D2:  CLRF   x2F
43D4:  MOVLW  48
43D6:  MOVWF  x2E
43D8:  MOVLW  85
43DA:  MOVWF  x2D
43DC:  MOVLB  0
43DE:  CALL   143A
43E2:  MOVFF  03,CD
43E6:  MOVFF  02,CC
43EA:  MOVFF  01,CB
43EE:  MOVFF  00,CA
....................             Decimal1=(int8)Temporal2; 
43F2:  MOVFF  CD,12C
43F6:  MOVFF  CC,12B
43FA:  MOVFF  CB,12A
43FE:  MOVFF  CA,129
4402:  CALL   17A6
4406:  MOVFF  01,114
....................             write_eeprom(29,Entero); 
440A:  MOVLW  1D
440C:  MOVWF  FA9
440E:  MOVFF  113,FA8
4412:  BCF    FA6.6
4414:  BCF    FA6.7
4416:  BSF    FA6.2
4418:  MOVF   FF2,W
441A:  MOVWF  00
441C:  BCF    FF2.7
441E:  MOVLB  F
4420:  MOVLW  55
4422:  MOVWF  FA7
4424:  MOVLW  AA
4426:  MOVWF  FA7
4428:  BSF    FA6.1
442A:  BTFSC  FA6.1
442C:  BRA    442A
442E:  BCF    FA6.2
4430:  MOVF   00,W
4432:  IORWF  FF2,F
....................             delay_ms(20); 
4434:  MOVLW  14
4436:  MOVLB  1
4438:  MOVWF  x2C
443A:  MOVLB  0
443C:  CALL   080C
....................             write_eeprom(85,Decimal1); 
4440:  MOVLW  55
4442:  MOVWF  FA9
4444:  MOVFF  114,FA8
4448:  BCF    FA6.6
444A:  BCF    FA6.7
444C:  BSF    FA6.2
444E:  MOVF   FF2,W
4450:  MOVWF  00
4452:  BCF    FF2.7
4454:  MOVLB  F
4456:  MOVLW  55
4458:  MOVWF  FA7
445A:  MOVLW  AA
445C:  MOVWF  FA7
445E:  BSF    FA6.1
4460:  BTFSC  FA6.1
4462:  BRA    4460
4464:  BCF    FA6.2
4466:  MOVF   00,W
4468:  IORWF  FF2,F
....................             delay_ms(20); 
446A:  MOVLW  14
446C:  MOVLB  1
446E:  MOVWF  x2C
4470:  MOVLB  0
4472:  CALL   080C
....................          } 
....................       } 
....................           
....................              
....................       if(IZQU)//Si oprime boton de Toma. 
4476:  BSF    F96.2
4478:  BTFSS  F84.2
447A:  BRA    45E4
....................       { 
....................          delay_ms(20); 
447C:  MOVLW  14
447E:  MOVLB  1
4480:  MOVWF  x2C
4482:  MOVLB  0
4484:  CALL   080C
....................          if(IZQU){ 
4488:  BSF    F96.2
448A:  BTFSS  F84.2
448C:  BRA    45E4
....................             delay_ms(700); 
448E:  MOVLW  04
4490:  MOVLB  1
4492:  MOVWF  x15
4494:  MOVLW  AF
4496:  MOVWF  x2C
4498:  MOVLB  0
449A:  CALL   080C
449E:  MOVLB  1
44A0:  DECFSZ x15,F
44A2:  BRA    4494
....................             Temporal=Ajuste1; 
44A4:  MOVFF  C5,C9
44A8:  MOVFF  C4,C8
44AC:  MOVFF  C3,C7
44B0:  MOVFF  C2,C6
....................             Entero=(int)Ajuste1; 
44B4:  MOVFF  C5,12C
44B8:  MOVFF  C4,12B
44BC:  MOVFF  C3,12A
44C0:  MOVFF  C2,129
44C4:  MOVLB  0
44C6:  CALL   17A6
44CA:  MOVFF  01,113
....................             Temporal=Temporal-Entero; 
44CE:  MOVLB  1
44D0:  CLRF   x2E
44D2:  MOVFF  113,12D
44D6:  MOVLB  0
44D8:  CALL   0924
44DC:  BSF    FD8.1
44DE:  MOVFF  C9,130
44E2:  MOVFF  C8,12F
44E6:  MOVFF  C7,12E
44EA:  MOVFF  C6,12D
44EE:  MOVFF  03,134
44F2:  MOVFF  02,133
44F6:  MOVFF  01,132
44FA:  MOVFF  00,131
44FE:  CALL   0C14
4502:  MOVFF  03,C9
4506:  MOVFF  02,C8
450A:  MOVFF  01,C7
450E:  MOVFF  00,C6
....................             Temporal2=Temporal*100.0; 
4512:  MOVFF  C9,12C
4516:  MOVFF  C8,12B
451A:  MOVFF  C7,12A
451E:  MOVFF  C6,129
4522:  MOVLB  1
4524:  CLRF   x30
4526:  CLRF   x2F
4528:  MOVLW  48
452A:  MOVWF  x2E
452C:  MOVLW  85
452E:  MOVWF  x2D
4530:  MOVLB  0
4532:  CALL   143A
4536:  MOVFF  03,CD
453A:  MOVFF  02,CC
453E:  MOVFF  01,CB
4542:  MOVFF  00,CA
....................             Decimal1=(int8)Temporal2; 
4546:  MOVFF  CD,12C
454A:  MOVFF  CC,12B
454E:  MOVFF  CB,12A
4552:  MOVFF  CA,129
4556:  CALL   17A6
455A:  MOVFF  01,114
....................             write_eeprom(25,Entero); 
455E:  MOVLW  19
4560:  MOVWF  FA9
4562:  MOVFF  113,FA8
4566:  BCF    FA6.6
4568:  BCF    FA6.7
456A:  BSF    FA6.2
456C:  MOVF   FF2,W
456E:  MOVWF  00
4570:  BCF    FF2.7
4572:  MOVLB  F
4574:  MOVLW  55
4576:  MOVWF  FA7
4578:  MOVLW  AA
457A:  MOVWF  FA7
457C:  BSF    FA6.1
457E:  BTFSC  FA6.1
4580:  BRA    457E
4582:  BCF    FA6.2
4584:  MOVF   00,W
4586:  IORWF  FF2,F
....................             delay_ms(20); 
4588:  MOVLW  14
458A:  MOVLB  1
458C:  MOVWF  x2C
458E:  MOVLB  0
4590:  CALL   080C
....................             write_eeprom(26,Decimal1); 
4594:  MOVLW  1A
4596:  MOVWF  FA9
4598:  MOVFF  114,FA8
459C:  BCF    FA6.6
459E:  BCF    FA6.7
45A0:  BSF    FA6.2
45A2:  MOVF   FF2,W
45A4:  MOVWF  00
45A6:  BCF    FF2.7
45A8:  MOVLB  F
45AA:  MOVLW  55
45AC:  MOVWF  FA7
45AE:  MOVLW  AA
45B0:  MOVWF  FA7
45B2:  BSF    FA6.1
45B4:  BTFSC  FA6.1
45B6:  BRA    45B4
45B8:  BCF    FA6.2
45BA:  MOVF   00,W
45BC:  IORWF  FF2,F
....................             delay_ms(20); 
45BE:  MOVLW  14
45C0:  MOVLB  1
45C2:  MOVWF  x2C
45C4:  MOVLB  0
45C6:  CALL   080C
....................             Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
45CA:  MOVLW  01
45CC:  MOVWF  19
45CE:  CLRF   32
45D0:  MOVLW  02
45D2:  MOVWF  1D
45D4:  MOVWF  1F
45D6:  MOVLW  0C
45D8:  MOVLB  1
45DA:  MOVWF  x26
45DC:  MOVLB  0
45DE:  CALL   0A20
....................             Pulso=1; 
45E2:  BSF    18.6
....................          } 
....................       } 
.................... }     
45E4:  BRA    3F36
....................        
.................... //----------------Fin-Menu7--------------------------------------------------------------- 
....................  
.................... //----------------Menu8--------------------------------------------------------------- 
....................  while(Menu == 8){ //  Velocidades 
45E6:  MOVF   19,W
45E8:  SUBLW  08
45EA:  BTFSS  FD8.2
45EC:  BRA    47E4
....................          if(Pulso){ 
45EE:  BTFSS  18.6
45F0:  BRA    46A0
....................             if(Vmotor>2)Vmotor=2; 
45F2:  MOVLB  1
45F4:  MOVF   x0A,W
45F6:  SUBLW  02
45F8:  BC    45FE
45FA:  MOVLW  02
45FC:  MOVWF  x0A
....................             if(Vmotor<1)Vmotor=1; 
45FE:  MOVF   x0A,F
4600:  BNZ   4606
4602:  MOVLW  01
4604:  MOVWF  x0A
....................             lcd_gotoxy(1,1); 
4606:  MOVLW  01
4608:  MOVWF  x27
460A:  MOVWF  x28
460C:  MOVLB  0
460E:  CALL   09AE
....................             printf(lcd_putc,"     Seleccione     "); 
4612:  MOVLW  A0
4614:  MOVWF  FF6
4616:  MOVLW  06
4618:  MOVWF  FF7
461A:  CALL   0A96
....................             lcd_gotoxy(1,2); 
461E:  MOVLW  01
4620:  MOVLB  1
4622:  MOVWF  x27
4624:  MOVLW  02
4626:  MOVWF  x28
4628:  MOVLB  0
462A:  CALL   09AE
....................             printf(lcd_putc,"     Velocidad      "); 
462E:  MOVLW  B6
4630:  MOVWF  FF6
4632:  MOVLW  06
4634:  MOVWF  FF7
4636:  CALL   0A96
....................             lcd_gotoxy(1,3); 
463A:  MOVLW  01
463C:  MOVLB  1
463E:  MOVWF  x27
4640:  MOVLW  03
4642:  MOVWF  x28
4644:  MOVLB  0
4646:  CALL   09AE
....................             printf(lcd_putc,"         %d         "Vmotor); 
464A:  MOVLW  CC
464C:  MOVWF  FF6
464E:  MOVLW  06
4650:  MOVWF  FF7
4652:  MOVLW  09
4654:  MOVLB  1
4656:  MOVWF  x19
4658:  MOVLB  0
465A:  CALL   0EB0
465E:  MOVFF  10A,115
4662:  MOVLW  1F
4664:  MOVLB  1
4666:  MOVWF  x16
4668:  MOVLB  0
466A:  CALL   0F04
466E:  MOVLW  D7
4670:  MOVWF  FF6
4672:  MOVLW  06
4674:  MOVWF  FF7
4676:  MOVLW  09
4678:  MOVLB  1
467A:  MOVWF  x19
467C:  MOVLB  0
467E:  CALL   0EB0
....................             lcd_gotoxy(1,4); 
4682:  MOVLW  01
4684:  MOVLB  1
4686:  MOVWF  x27
4688:  MOVLW  04
468A:  MOVWF  x28
468C:  MOVLB  0
468E:  CALL   09AE
....................             printf(lcd_putc,"                    "); 
4692:  MOVLW  E2
4694:  MOVWF  FF6
4696:  MOVLW  06
4698:  MOVWF  FF7
469A:  CALL   0A96
....................             Pulso=0; 
469E:  BCF    18.6
....................          } 
....................       
....................          if (UP){ 
46A0:  BSF    F92.5
46A2:  BTFSS  F80.5
46A4:  BRA    46CC
....................             delay_ms(20); 
46A6:  MOVLW  14
46A8:  MOVLB  1
46AA:  MOVWF  x2C
46AC:  MOVLB  0
46AE:  CALL   080C
....................             if(UP){ 
46B2:  BSF    F92.5
46B4:  BTFSS  F80.5
46B6:  BRA    46CC
....................                delay_ms(200); 
46B8:  MOVLW  C8
46BA:  MOVLB  1
46BC:  MOVWF  x2C
46BE:  MOVLB  0
46C0:  CALL   080C
....................                Vmotor++; 
46C4:  MOVLB  1
46C6:  INCF   x0A,F
....................                Pulso=1; 
46C8:  BSF    18.6
46CA:  MOVLB  0
....................             } 
....................          } 
....................       
....................          if (DOWN){ 
46CC:  BSF    F96.0
46CE:  BTFSS  F84.0
46D0:  BRA    46F8
....................             delay_ms(20); 
46D2:  MOVLW  14
46D4:  MOVLB  1
46D6:  MOVWF  x2C
46D8:  MOVLB  0
46DA:  CALL   080C
....................             if(DOWN){ 
46DE:  BSF    F96.0
46E0:  BTFSS  F84.0
46E2:  BRA    46F8
....................                delay_ms(200); 
46E4:  MOVLW  C8
46E6:  MOVLB  1
46E8:  MOVWF  x2C
46EA:  MOVLB  0
46EC:  CALL   080C
....................                Vmotor--; 
46F0:  MOVLB  1
46F2:  DECF   x0A,F
....................                Pulso=1; 
46F4:  BSF    18.6
46F6:  MOVLB  0
....................             } 
....................          } 
....................        
....................          if(IZQU){ 
46F8:  BSF    F96.2
46FA:  BTFSS  F84.2
46FC:  BRA    47E2
....................             delay_ms(20); 
46FE:  MOVLW  14
4700:  MOVLB  1
4702:  MOVWF  x2C
4704:  MOVLB  0
4706:  CALL   080C
....................             if(IZQU){ 
470A:  BSF    F96.2
470C:  BTFSS  F84.2
470E:  BRA    47E2
....................                write_eeprom(70,Vmotor); 
4710:  MOVLW  46
4712:  MOVWF  FA9
4714:  MOVFF  10A,FA8
4718:  BCF    FA6.6
471A:  BCF    FA6.7
471C:  BSF    FA6.2
471E:  MOVF   FF2,W
4720:  MOVWF  00
4722:  BCF    FF2.7
4724:  MOVLB  F
4726:  MOVLW  55
4728:  MOVWF  FA7
472A:  MOVLW  AA
472C:  MOVWF  FA7
472E:  BSF    FA6.1
4730:  BTFSC  FA6.1
4732:  BRA    4730
4734:  BCF    FA6.2
4736:  MOVF   00,W
4738:  IORWF  FF2,F
....................                delay_ms(20); 
473A:  MOVLW  14
473C:  MOVLB  1
473E:  MOVWF  x2C
4740:  MOVLB  0
4742:  CALL   080C
....................                lcd_gotoxy(1,1); 
4746:  MOVLW  01
4748:  MOVLB  1
474A:  MOVWF  x27
474C:  MOVWF  x28
474E:  MOVLB  0
4750:  CALL   09AE
....................                printf(lcd_putc,"                    "); 
4754:  MOVLW  F8
4756:  MOVWF  FF6
4758:  MOVLW  06
475A:  MOVWF  FF7
475C:  CALL   0A96
....................                lcd_gotoxy(1,2); 
4760:  MOVLW  01
4762:  MOVLB  1
4764:  MOVWF  x27
4766:  MOVLW  02
4768:  MOVWF  x28
476A:  MOVLB  0
476C:  CALL   09AE
....................                printf(lcd_putc,"      Valor         "); 
4770:  MOVLW  0E
4772:  MOVWF  FF6
4774:  MOVLW  07
4776:  MOVWF  FF7
4778:  CALL   0A96
....................                lcd_gotoxy(1,3); 
477C:  MOVLW  01
477E:  MOVLB  1
4780:  MOVWF  x27
4782:  MOVLW  03
4784:  MOVWF  x28
4786:  MOVLB  0
4788:  CALL   09AE
....................                printf(lcd_putc,"    Almacenado      "); 
478C:  MOVLW  24
478E:  MOVWF  FF6
4790:  MOVLW  07
4792:  MOVWF  FF7
4794:  CALL   0A96
....................                lcd_gotoxy(1,4); 
4798:  MOVLW  01
479A:  MOVLB  1
479C:  MOVWF  x27
479E:  MOVLW  04
47A0:  MOVWF  x28
47A2:  MOVLB  0
47A4:  CALL   09AE
....................                printf(lcd_putc,"                    ");    
47A8:  MOVLW  3A
47AA:  MOVWF  FF6
47AC:  MOVLW  07
47AE:  MOVWF  FF7
47B0:  CALL   0A96
....................                delay_ms(1000); 
47B4:  MOVLW  04
47B6:  MOVLB  1
47B8:  MOVWF  x15
47BA:  MOVLW  FA
47BC:  MOVWF  x2C
47BE:  MOVLB  0
47C0:  CALL   080C
47C4:  MOVLB  1
47C6:  DECFSZ x15,F
47C8:  BRA    47BA
....................                Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
47CA:  MOVLW  01
47CC:  MOVWF  19
47CE:  CLRF   32
47D0:  MOVLW  02
47D2:  MOVWF  1D
47D4:  MOVWF  1F
47D6:  MOVLW  0C
47D8:  MOVWF  x26
47DA:  MOVLB  0
47DC:  CALL   0A20
....................                Pulso=1; 
47E0:  BSF    18.6
....................             } 
....................          } 
....................        
.................... }  
47E2:  BRA    45E6
.................... //----------------Fin-Menu7--------------------------------------------------------------- 
....................  
.................... //----------------Menu100--------------------------------------------------------------- 
....................    while(Menu == 50){ // Menu de seleccion de Estado de Luz UV 
47E4:  MOVF   19,W
47E6:  SUBLW  32
47E8:  BTFSS  FD8.2
47EA:  GOTO   4F9A
....................  
....................    if(Lectura==1) 
47EE:  BTFSS  18.0
47F0:  BRA    4AC2
....................    {   
....................       Lectura=0; 
47F2:  BCF    18.0
....................       CaidaPresion=Leer_Sensor_Presion(5); 
47F4:  MOVLW  05
47F6:  MOVLB  1
47F8:  MOVWF  x15
47FA:  MOVLB  0
47FC:  CALL   128C
4800:  MOVFF  03,A5
4804:  MOVFF  02,A4
4808:  MOVFF  01,A3
480C:  MOVFF  00,A2
....................       VelocidadAire=LeerFlujo(5); 
4810:  MOVLW  05
4812:  MOVLB  1
4814:  MOVWF  x15
4816:  MOVLB  0
4818:  GOTO   17E2
481C:  MOVFF  03,10F
4820:  MOVFF  02,10E
4824:  MOVFF  01,10D
4828:  MOVFF  00,10C
....................       Saturacion=(CaidaPresion/0.37)*11; 
482C:  MOVFF  A5,12C
4830:  MOVFF  A4,12B
4834:  MOVFF  A3,12A
4838:  MOVFF  A2,129
483C:  MOVLW  A4
483E:  MOVLB  1
4840:  MOVWF  x30
4842:  MOVLW  70
4844:  MOVWF  x2F
4846:  MOVLW  3D
4848:  MOVWF  x2E
484A:  MOVLW  7D
484C:  MOVWF  x2D
484E:  MOVLB  0
4850:  CALL   0AB6
4854:  MOVFF  00,115
4858:  MOVFF  01,116
485C:  MOVFF  02,117
4860:  MOVFF  03,118
4864:  MOVFF  03,12C
4868:  MOVFF  02,12B
486C:  MOVFF  01,12A
4870:  MOVFF  00,129
4874:  MOVLB  1
4876:  CLRF   x30
4878:  CLRF   x2F
487A:  MOVLW  30
487C:  MOVWF  x2E
487E:  MOVLW  82
4880:  MOVWF  x2D
4882:  MOVLB  0
4884:  CALL   143A
4888:  MOVFF  03,A1
488C:  MOVFF  02,A0
4890:  MOVFF  01,9F
4894:  MOVFF  00,9E
....................     
....................       if(Saturacion>11) 
4898:  MOVLB  1
489A:  CLRF   x2C
489C:  CLRF   x2B
489E:  MOVLW  30
48A0:  MOVWF  x2A
48A2:  MOVLW  82
48A4:  MOVWF  x29
48A6:  MOVFF  A1,130
48AA:  MOVFF  A0,12F
48AE:  MOVFF  9F,12E
48B2:  MOVFF  9E,12D
48B6:  MOVLB  0
48B8:  CALL   1212
48BC:  BNC   48CA
....................       { 
....................          Saturacion=11; 
48BE:  CLRF   xA1
48C0:  CLRF   xA0
48C2:  MOVLW  30
48C4:  MOVWF  x9F
48C6:  MOVLW  82
48C8:  MOVWF  x9E
....................       }    
....................        
....................       lcd_gotoxy(9,3); 
48CA:  MOVLW  09
48CC:  MOVLB  1
48CE:  MOVWF  x27
48D0:  MOVLW  03
48D2:  MOVWF  x28
48D4:  MOVLB  0
48D6:  CALL   09AE
....................       printf(lcd_putc,"Tempo:%03u:%02u",tempo_minutos,tempo_segundos); 
48DA:  MOVLW  50
48DC:  MOVWF  FF6
48DE:  MOVLW  07
48E0:  MOVWF  FF7
48E2:  MOVLW  06
48E4:  MOVLB  1
48E6:  MOVWF  x19
48E8:  MOVLB  0
48EA:  CALL   0EB0
48EE:  MOVFF  28,115
48F2:  MOVLW  03
48F4:  MOVLB  1
48F6:  MOVWF  x16
48F8:  MOVLB  0
48FA:  CALL   10D8
48FE:  MOVLW  3A
4900:  MOVLB  1
4902:  MOVWF  x26
4904:  MOVLB  0
4906:  CALL   0A20
490A:  MOVFF  29,115
490E:  MOVLW  01
4910:  MOVLB  1
4912:  MOVWF  x16
4914:  MOVLB  0
4916:  CALL   10D8
....................       lcd_gotoxy(1,1); 
491A:  MOVLW  01
491C:  MOVLB  1
491E:  MOVWF  x27
4920:  MOVWF  x28
4922:  MOVLB  0
4924:  CALL   09AE
....................       printf(lcd_putc,"P:%1.1finH2O F:%1.2fm/s",(CaidaPresion*4.02),VelocidadAire); 
4928:  MOVFF  A5,12C
492C:  MOVFF  A4,12B
4930:  MOVFF  A3,12A
4934:  MOVFF  A2,129
4938:  MOVLW  D7
493A:  MOVLB  1
493C:  MOVWF  x30
493E:  MOVLW  A3
4940:  MOVWF  x2F
4942:  CLRF   x2E
4944:  MOVLW  81
4946:  MOVWF  x2D
4948:  MOVLB  0
494A:  CALL   143A
494E:  MOVFF  00,115
4952:  MOVFF  01,116
4956:  MOVFF  02,117
495A:  MOVFF  03,118
495E:  MOVLW  50
4960:  MOVLB  1
4962:  MOVWF  x26
4964:  MOVLB  0
4966:  CALL   0A20
496A:  MOVLW  3A
496C:  MOVLB  1
496E:  MOVWF  x26
4970:  MOVLB  0
4972:  CALL   0A20
4976:  MOVLW  89
4978:  MOVWF  FE9
497A:  MOVFF  118,11C
497E:  MOVFF  117,11B
4982:  MOVFF  116,11A
4986:  MOVFF  115,119
498A:  MOVLW  01
498C:  MOVLB  1
498E:  MOVWF  x1D
4990:  MOVLB  0
4992:  CALL   15F4
4996:  MOVLW  67
4998:  MOVWF  FF6
499A:  MOVLW  07
499C:  MOVWF  FF7
499E:  MOVLW  08
49A0:  MOVLB  1
49A2:  MOVWF  x19
49A4:  MOVLB  0
49A6:  CALL   0EB0
49AA:  MOVLW  89
49AC:  MOVWF  FE9
49AE:  MOVFF  10F,11C
49B2:  MOVFF  10E,11B
49B6:  MOVFF  10D,11A
49BA:  MOVFF  10C,119
49BE:  MOVLW  02
49C0:  MOVLB  1
49C2:  MOVWF  x1D
49C4:  MOVLB  0
49C6:  CALL   15F4
49CA:  MOVLW  6D
49CC:  MOVLB  1
49CE:  MOVWF  x26
49D0:  MOVLB  0
49D2:  CALL   0A20
49D6:  MOVLW  2F
49D8:  MOVLB  1
49DA:  MOVWF  x26
49DC:  MOVLB  0
49DE:  CALL   0A20
49E2:  MOVLW  73
49E4:  MOVLB  1
49E6:  MOVWF  x26
49E8:  MOVLB  0
49EA:  CALL   0A20
....................     
....................       for(i=0;i<floor(Saturacion);i++) 
49EE:  CLRF   2E
49F0:  MOVFF  A1,118
49F4:  MOVFF  A0,117
49F8:  MOVFF  9F,116
49FC:  MOVFF  9E,115
4A00:  CALL   1F2E
4A04:  MOVFF  00,115
4A08:  MOVFF  01,116
4A0C:  MOVFF  02,117
4A10:  MOVFF  03,118
4A14:  MOVLB  1
4A16:  CLRF   x2E
4A18:  MOVFF  2E,12D
4A1C:  MOVLB  0
4A1E:  CALL   0924
4A22:  MOVFF  03,12C
4A26:  MOVFF  02,12B
4A2A:  MOVFF  01,12A
4A2E:  MOVFF  00,129
4A32:  MOVFF  118,130
4A36:  MOVFF  117,12F
4A3A:  MOVFF  116,12E
4A3E:  MOVFF  115,12D
4A42:  CALL   1212
4A46:  BNC   4A6C
....................       { 
....................          lcd_gotoxy(i+8,2); 
4A48:  MOVLW  08
4A4A:  ADDWF  2E,W
4A4C:  MOVLB  1
4A4E:  MOVWF  x15
4A50:  MOVWF  x27
4A52:  MOVLW  02
4A54:  MOVWF  x28
4A56:  MOVLB  0
4A58:  CALL   09AE
....................          printf(lcd_putc,"Ñ"); 
4A5C:  MOVLW  D1
4A5E:  MOVLB  1
4A60:  MOVWF  x26
4A62:  MOVLB  0
4A64:  CALL   0A20
....................       } 
4A68:  INCF   2E,F
4A6A:  BRA    49F0
....................        
....................       for(i=floor(Saturacion);i<11;i++) 
4A6C:  MOVFF  A1,118
4A70:  MOVFF  A0,117
4A74:  MOVFF  9F,116
4A78:  MOVFF  9E,115
4A7C:  CALL   1F2E
4A80:  MOVFF  03,12C
4A84:  MOVFF  02,12B
4A88:  MOVFF  01,12A
4A8C:  MOVFF  00,129
4A90:  CALL   17A6
4A94:  MOVFF  01,2E
4A98:  MOVF   2E,W
4A9A:  SUBLW  0A
4A9C:  BNC   4AC2
....................       { 
....................          lcd_gotoxy(i+8,2); 
4A9E:  MOVLW  08
4AA0:  ADDWF  2E,W
4AA2:  MOVLB  1
4AA4:  MOVWF  x15
4AA6:  MOVWF  x27
4AA8:  MOVLW  02
4AAA:  MOVWF  x28
4AAC:  MOVLB  0
4AAE:  CALL   09AE
....................          printf(lcd_putc," "); 
4AB2:  MOVLW  20
4AB4:  MOVLB  1
4AB6:  MOVWF  x26
4AB8:  MOVLB  0
4ABA:  CALL   0A20
....................       } 
4ABE:  INCF   2E,F
4AC0:  BRA    4A98
....................    } 
....................      
....................    if(tiempo_cumplido==1) 
4AC2:  BTFSS  17.7
4AC4:  BRA    4B80
....................    { 
....................       if(estadoalarma==1) 
4AC6:  BTFSS  18.4
4AC8:  BRA    4B70
....................       { 
....................          printf(lcd_putc,"\f"); 
4ACA:  MOVLW  0C
4ACC:  MOVLB  1
4ACE:  MOVWF  x26
4AD0:  MOVLB  0
4AD2:  CALL   0A20
....................          lcd_gotoxy(1,2); 
4AD6:  MOVLW  01
4AD8:  MOVLB  1
4ADA:  MOVWF  x27
4ADC:  MOVLW  02
4ADE:  MOVWF  x28
4AE0:  MOVLB  0
4AE2:  CALL   09AE
....................          printf(lcd_putc,"  Temporizador  de  "); 
4AE6:  MOVLW  78
4AE8:  MOVWF  FF6
4AEA:  MOVLW  07
4AEC:  MOVWF  FF7
4AEE:  CALL   0A96
....................          lcd_gotoxy(1,3); 
4AF2:  MOVLW  01
4AF4:  MOVLB  1
4AF6:  MOVWF  x27
4AF8:  MOVLW  03
4AFA:  MOVWF  x28
4AFC:  MOVLB  0
4AFE:  CALL   09AE
....................          printf(lcd_putc," Luz UV  Finalizado "); 
4B02:  MOVLW  8E
4B04:  MOVWF  FF6
4B06:  MOVLW  07
4B08:  MOVWF  FF7
4B0A:  CALL   0A96
....................          lcd_gotoxy(1,4); 
4B0E:  MOVLW  01
4B10:  MOVLB  1
4B12:  MOVWF  x27
4B14:  MOVLW  04
4B16:  MOVWF  x28
4B18:  MOVLB  0
4B1A:  CALL   09AE
....................          printf(lcd_putc,"                    "); 
4B1E:  MOVLW  A4
4B20:  MOVWF  FF6
4B22:  MOVLW  07
4B24:  MOVWF  FF7
4B26:  CALL   0A96
....................          lcd_gotoxy(1,1); 
4B2A:  MOVLW  01
4B2C:  MOVLB  1
4B2E:  MOVWF  x27
4B30:  MOVWF  x28
4B32:  MOVLB  0
4B34:  CALL   09AE
....................          printf(lcd_putc,"                    "); 
4B38:  MOVLW  BA
4B3A:  MOVWF  FF6
4B3C:  MOVLW  07
4B3E:  MOVWF  FF7
4B40:  CALL   0A96
....................          for(i=0;i<5;i++) 
4B44:  CLRF   2E
4B46:  MOVF   2E,W
4B48:  SUBLW  04
4B4A:  BNC   4B70
....................          { 
....................             Buzzer_on; 
4B4C:  BSF    F8C.0
4B4E:  BCF    F95.0
....................             delay_ms(200); 
4B50:  MOVLW  C8
4B52:  MOVLB  1
4B54:  MOVWF  x2C
4B56:  MOVLB  0
4B58:  CALL   080C
....................             Buzzer_off; 
4B5C:  BCF    F8C.0
4B5E:  BCF    F95.0
....................             delay_ms(200); 
4B60:  MOVLW  C8
4B62:  MOVLB  1
4B64:  MOVWF  x2C
4B66:  MOVLB  0
4B68:  CALL   080C
....................          } 
4B6C:  INCF   2E,F
4B6E:  BRA    4B46
....................       } 
....................       tiempo_cumplido=0; 
4B70:  BCF    17.7
....................       printf(lcd_putc,"\f"); 
4B72:  MOVLW  0C
4B74:  MOVLB  1
4B76:  MOVWF  x26
4B78:  MOVLB  0
4B7A:  CALL   0A20
....................       Pulso=1; 
4B7E:  BSF    18.6
....................    } 
....................     
....................    if(CaidaPresion>=0.37 || ((VelocidadAire<0.3 || VelocidadAire>0.55) && estadomv==1)) 
4B80:  MOVLW  A4
4B82:  MOVLB  1
4B84:  MOVWF  x2C
4B86:  MOVLW  70
4B88:  MOVWF  x2B
4B8A:  MOVLW  3D
4B8C:  MOVWF  x2A
4B8E:  MOVLW  7D
4B90:  MOVWF  x29
4B92:  MOVFF  A5,130
4B96:  MOVFF  A4,12F
4B9A:  MOVFF  A3,12E
4B9E:  MOVFF  A2,12D
4BA2:  MOVLB  0
4BA4:  CALL   1212
4BA8:  BC    4C04
4BAA:  BZ    4C04
4BAC:  MOVFF  10F,12C
4BB0:  MOVFF  10E,12B
4BB4:  MOVFF  10D,12A
4BB8:  MOVFF  10C,129
4BBC:  MOVLW  9A
4BBE:  MOVLB  1
4BC0:  MOVWF  x30
4BC2:  MOVLW  99
4BC4:  MOVWF  x2F
4BC6:  MOVLW  19
4BC8:  MOVWF  x2E
4BCA:  MOVLW  7D
4BCC:  MOVWF  x2D
4BCE:  MOVLB  0
4BD0:  CALL   1212
4BD4:  BC    4C00
4BD6:  MOVLW  CD
4BD8:  MOVLB  1
4BDA:  MOVWF  x2C
4BDC:  MOVLW  CC
4BDE:  MOVWF  x2B
4BE0:  MOVLW  0C
4BE2:  MOVWF  x2A
4BE4:  MOVLW  7E
4BE6:  MOVWF  x29
4BE8:  MOVFF  10F,130
4BEC:  MOVFF  10E,12F
4BF0:  MOVFF  10D,12E
4BF4:  MOVFF  10C,12D
4BF8:  MOVLB  0
4BFA:  CALL   1212
4BFE:  BNC   4C0A
4C00:  BTFSS  17.2
4C02:  BRA    4C0A
....................    {  
....................       ActivaBuzzer=1; 
4C04:  MOVLW  01
4C06:  MOVWF  3F
....................    } 
....................    else 
4C08:  BRA    4C10
....................    { 
....................       ActivaBuzzer=0; 
4C0A:  CLRF   3F
....................       Buzzer_off; 
4C0C:  BCF    F8C.0
4C0E:  BCF    F95.0
....................    } 
....................     
....................    if(Pulso){ 
4C10:  BTFSS  18.6
4C12:  BRA    4DD4
....................       Pulso=0; 
4C14:  BCF    18.6
....................       lcd_gotoxy(1,2); 
4C16:  MOVLW  01
4C18:  MOVLB  1
4C1A:  MOVWF  x27
4C1C:  MOVLW  02
4C1E:  MOVWF  x28
4C20:  MOVLB  0
4C22:  CALL   09AE
....................       printf(lcd_putc,"Filtro:"); 
4C26:  MOVLW  D0
4C28:  MOVWF  FF6
4C2A:  MOVLW  07
4C2C:  MOVWF  FF7
4C2E:  CALL   0A96
....................     
....................       if(estadomv==1) 
4C32:  BTFSS  17.2
4C34:  BRA    4C78
....................       { 
....................          lcd_gotoxy(1,4); 
4C36:  MOVLW  01
4C38:  MOVLB  1
4C3A:  MOVWF  x27
4C3C:  MOVLW  04
4C3E:  MOVWF  x28
4C40:  MOVLB  0
4C42:  CALL   09AE
....................          printf(lcd_putc,"Motor:ON ");       
4C46:  MOVLW  D8
4C48:  MOVWF  FF6
4C4A:  MOVLW  07
4C4C:  MOVWF  FF7
4C4E:  CALL   0A96
....................          velocidades(Vmotor); 
4C52:  MOVFF  10A,115
4C56:  CALL   1F48
....................          if(flagmv==0){ 
4C5A:  BTFSC  18.5
4C5C:  BRA    4C76
....................             lcd_init();delay_ms(200);lcd_init();flagmv=1;Pulso=1; 
4C5E:  CALL   08B0
4C62:  MOVLW  C8
4C64:  MOVLB  1
4C66:  MOVWF  x2C
4C68:  MOVLB  0
4C6A:  CALL   080C
4C6E:  CALL   08B0
4C72:  BSF    18.5
4C74:  BSF    18.6
....................          } 
....................       } 
....................       else 
4C76:  BRA    4CBA
....................       { 
....................          lcd_gotoxy(1,4); 
4C78:  MOVLW  01
4C7A:  MOVLB  1
4C7C:  MOVWF  x27
4C7E:  MOVLW  04
4C80:  MOVWF  x28
4C82:  MOVLB  0
4C84:  CALL   09AE
....................          printf(lcd_putc,"Motor:OFF"); 
4C88:  MOVLW  E2
4C8A:  MOVWF  FF6
4C8C:  MOVLW  07
4C8E:  MOVWF  FF7
4C90:  CALL   0A96
....................          velocidades(0);  
4C94:  MOVLB  1
4C96:  CLRF   x15
4C98:  MOVLB  0
4C9A:  CALL   1F48
....................          if(flagmv==1){ 
4C9E:  BTFSS  18.5
4CA0:  BRA    4CBA
....................             lcd_init();delay_ms(200);lcd_init();flagmv=0;Pulso=1; 
4CA2:  CALL   08B0
4CA6:  MOVLW  C8
4CA8:  MOVLB  1
4CAA:  MOVWF  x2C
4CAC:  MOVLB  0
4CAE:  CALL   080C
4CB2:  CALL   08B0
4CB6:  BCF    18.5
4CB8:  BSF    18.6
....................          } 
....................       } 
....................        
....................       if(estadouv==1) 
4CBA:  BTFSS  17.0
4CBC:  BRA    4D14
....................       { 
....................          lcd_gotoxy(13,4); 
4CBE:  MOVLW  0D
4CC0:  MOVLB  1
4CC2:  MOVWF  x27
4CC4:  MOVLW  04
4CC6:  MOVWF  x28
4CC8:  MOVLB  0
4CCA:  CALL   09AE
....................          printf(lcd_putc,"UV:ON "); 
4CCE:  MOVLW  EC
4CD0:  MOVWF  FF6
4CD2:  MOVLW  07
4CD4:  MOVWF  FF7
4CD6:  CALL   0A96
....................          estadomv=0; 
4CDA:  BCF    17.2
....................          velocidades(0); 
4CDC:  MOVLB  1
4CDE:  CLRF   x15
4CE0:  MOVLB  0
4CE2:  CALL   1F48
....................          estadofl=0; 
4CE6:  BCF    17.1
....................          Luz_Blanca_off; 
4CE8:  BCF    F8C.2
4CEA:  BCF    F95.2
....................          Luz_UV_on; 
4CEC:  BSF    F8C.1
4CEE:  BCF    F95.1
....................          tiempo_cumplido=0; 
4CF0:  BCF    17.7
....................          if(flaguv==0) 
4CF2:  BTFSC  18.1
4CF4:  BRA    4D12
....................          { 
....................             lcd_init();delay_ms(200);lcd_init();flaguv=1;guardaruv=1;Pulso=1; 
4CF6:  CALL   08B0
4CFA:  MOVLW  C8
4CFC:  MOVLB  1
4CFE:  MOVWF  x2C
4D00:  MOVLB  0
4D02:  CALL   080C
4D06:  CALL   08B0
4D0A:  BSF    18.1
4D0C:  MOVLW  01
4D0E:  MOVWF  31
4D10:  BSF    18.6
....................          } 
....................       } 
....................       else 
4D12:  BRA    4D56
....................       { 
....................          estadouv=0; 
4D14:  BCF    17.0
....................          lcd_gotoxy(13,4); 
4D16:  MOVLW  0D
4D18:  MOVLB  1
4D1A:  MOVWF  x27
4D1C:  MOVLW  04
4D1E:  MOVWF  x28
4D20:  MOVLB  0
4D22:  CALL   09AE
....................          printf(lcd_putc,"UV:OFF"); 
4D26:  MOVLW  F4
4D28:  MOVWF  FF6
4D2A:  MOVLW  07
4D2C:  MOVWF  FF7
4D2E:  CALL   0A96
....................          Luz_UV_off; 
4D32:  BCF    F8C.1
4D34:  BCF    F95.1
....................          if(flaguv==1) 
4D36:  BTFSS  18.1
4D38:  BRA    4D56
....................          { 
....................             lcd_init();delay_ms(200);lcd_init();flaguv=0;guardaruv=1;Pulso=1; 
4D3A:  CALL   08B0
4D3E:  MOVLW  C8
4D40:  MOVLB  1
4D42:  MOVWF  x2C
4D44:  MOVLB  0
4D46:  CALL   080C
4D4A:  CALL   08B0
4D4E:  BCF    18.1
4D50:  MOVLW  01
4D52:  MOVWF  31
4D54:  BSF    18.6
....................          } 
....................       } 
....................     
....................       if(estadofl==1) 
4D56:  BTFSS  17.1
4D58:  BRA    4D98
....................       { 
....................          lcd_gotoxy(1,3); 
4D5A:  MOVLW  01
4D5C:  MOVLB  1
4D5E:  MOVWF  x27
4D60:  MOVLW  03
4D62:  MOVWF  x28
4D64:  MOVLB  0
4D66:  CALL   09AE
....................          printf(lcd_putc,"Luz:ON "); 
4D6A:  MOVLW  FC
4D6C:  MOVWF  FF6
4D6E:  MOVLW  07
4D70:  MOVWF  FF7
4D72:  CALL   0A96
....................          Luz_Blanca_on; 
4D76:  BSF    F8C.2
4D78:  BCF    F95.2
....................          if(flagfl==0) 
4D7A:  BTFSC  18.2
4D7C:  BRA    4D96
....................          { 
....................             lcd_init();delay_ms(200);lcd_init();flagfl=1;Pulso=1; 
4D7E:  CALL   08B0
4D82:  MOVLW  C8
4D84:  MOVLB  1
4D86:  MOVWF  x2C
4D88:  MOVLB  0
4D8A:  CALL   080C
4D8E:  CALL   08B0
4D92:  BSF    18.2
4D94:  BSF    18.6
....................          } 
....................       } 
....................       else 
4D96:  BRA    4DD4
....................       { 
....................          lcd_gotoxy(1,3); 
4D98:  MOVLW  01
4D9A:  MOVLB  1
4D9C:  MOVWF  x27
4D9E:  MOVLW  03
4DA0:  MOVWF  x28
4DA2:  MOVLB  0
4DA4:  CALL   09AE
....................          printf(lcd_putc,"Luz:OFF"); 
4DA8:  MOVLW  04
4DAA:  MOVWF  FF6
4DAC:  MOVLW  08
4DAE:  MOVWF  FF7
4DB0:  CALL   0A96
....................          Luz_Blanca_off; 
4DB4:  BCF    F8C.2
4DB6:  BCF    F95.2
....................          if(flagfl==1) 
4DB8:  BTFSS  18.2
4DBA:  BRA    4DD4
....................          { 
....................             lcd_init();delay_ms(200);lcd_init();flagfl=0;Pulso=1; 
4DBC:  CALL   08B0
4DC0:  MOVLW  C8
4DC2:  MOVLB  1
4DC4:  MOVWF  x2C
4DC6:  MOVLB  0
4DC8:  CALL   080C
4DCC:  CALL   08B0
4DD0:  BCF    18.2
4DD2:  BSF    18.6
....................          } 
....................       } 
....................    } 
....................     
....................       if(DOWN)//Si oprime hacia arriba 
4DD4:  BSF    F96.0
4DD6:  BTFSS  F84.0
4DD8:  BRA    4E10
....................       { 
....................          delay_ms(20); 
4DDA:  MOVLW  14
4DDC:  MOVLB  1
4DDE:  MOVWF  x2C
4DE0:  MOVLB  0
4DE2:  CALL   080C
....................          if(DOWN){ 
4DE6:  BSF    F96.0
4DE8:  BTFSS  F84.0
4DEA:  BRA    4E0E
....................             if(Flanco == 0) 
4DEC:  BTFSC  17.3
4DEE:  BRA    4E0E
....................             { 
....................                estadofl=!estadofl;Flanco = 1;delay_ms(300);Pulso=1; 
4DF0:  BTG    17.1
4DF2:  BSF    17.3
4DF4:  MOVLW  02
4DF6:  MOVLB  1
4DF8:  MOVWF  x15
4DFA:  MOVLW  96
4DFC:  MOVWF  x2C
4DFE:  MOVLB  0
4E00:  CALL   080C
4E04:  MOVLB  1
4E06:  DECFSZ x15,F
4E08:  BRA    4DFA
4E0A:  BSF    18.6
4E0C:  MOVLB  0
....................             } 
....................          } 
....................       } 
....................       else 
4E0E:  BRA    4E12
....................       { 
....................          Flanco = 0; 
4E10:  BCF    17.3
....................       } 
....................        
....................       if(RIGHT)//Si oprime hacia abajo 
4E12:  BSF    F96.1
4E14:  BTFSS  F84.1
4E16:  BRA    4E4E
....................       { 
....................          delay_ms(20); 
4E18:  MOVLW  14
4E1A:  MOVLB  1
4E1C:  MOVWF  x2C
4E1E:  MOVLB  0
4E20:  CALL   080C
....................          if(RIGHT){ 
4E24:  BSF    F96.1
4E26:  BTFSS  F84.1
4E28:  BRA    4E4C
....................             if(Flanco1 == 0) 
4E2A:  BTFSC  17.4
4E2C:  BRA    4E4C
....................             { 
....................                estadomv=!estadomv;Flanco1 = 1;delay_ms(300);Pulso=1; 
4E2E:  BTG    17.2
4E30:  BSF    17.4
4E32:  MOVLW  02
4E34:  MOVLB  1
4E36:  MOVWF  x15
4E38:  MOVLW  96
4E3A:  MOVWF  x2C
4E3C:  MOVLB  0
4E3E:  CALL   080C
4E42:  MOVLB  1
4E44:  DECFSZ x15,F
4E46:  BRA    4E38
4E48:  BSF    18.6
4E4A:  MOVLB  0
....................             } 
....................          } 
....................       } 
....................       else 
4E4C:  BRA    4E50
....................       { 
....................          Flanco1 = 0; 
4E4E:  BCF    17.4
....................       } 
....................        
....................       if(IZQU)//Si oprime hacia izquierda 
4E50:  BSF    F96.2
4E52:  BTFSS  F84.2
4E54:  BRA    4E78
....................       {   
....................          delay_ms(20); 
4E56:  MOVLW  14
4E58:  MOVLB  1
4E5A:  MOVWF  x2C
4E5C:  MOVLB  0
4E5E:  CALL   080C
....................          if(IZQU){ 
4E62:  BSF    F96.2
4E64:  BTFSS  F84.2
4E66:  BRA    4E78
....................             delay_ms(150);  
4E68:  MOVLW  96
4E6A:  MOVLB  1
4E6C:  MOVWF  x2C
4E6E:  MOVLB  0
4E70:  CALL   080C
....................             estadouv=!estadouv; 
4E74:  BTG    17.0
....................             Pulso=1; 
4E76:  BSF    18.6
....................          } 
....................       } 
....................        
....................       if(UP)//Si oprime hacia izquierda 
4E78:  BSF    F92.5
4E7A:  BTFSS  F80.5
4E7C:  BRA    4ECE
....................       { 
....................          delay_ms(20); 
4E7E:  MOVLW  14
4E80:  MOVLB  1
4E82:  MOVWF  x2C
4E84:  MOVLB  0
4E86:  CALL   080C
....................          if(UP){ 
4E8A:  BSF    F92.5
4E8C:  BTFSS  F80.5
4E8E:  BRA    4ECE
....................             delay_ms(200); 
4E90:  MOVLW  C8
4E92:  MOVLB  1
4E94:  MOVWF  x2C
4E96:  MOVLB  0
4E98:  CALL   080C
....................             printf(lcd_putc,"\f"); 
4E9C:  MOVLW  0C
4E9E:  MOVLB  1
4EA0:  MOVWF  x26
4EA2:  MOVLB  0
4EA4:  CALL   0A20
....................             delay_ms(300); 
4EA8:  MOVLW  02
4EAA:  MOVLB  1
4EAC:  MOVWF  x15
4EAE:  MOVLW  96
4EB0:  MOVWF  x2C
4EB2:  MOVLB  0
4EB4:  CALL   080C
4EB8:  MOVLB  1
4EBA:  DECFSZ x15,F
4EBC:  BRA    4EAE
....................             Menu=1;  
4EBE:  MOVLW  01
4EC0:  MOVWF  19
....................             paso=0; 
4EC2:  CLRF   32
....................             Flecha=2; 
4EC4:  MOVLW  02
4EC6:  MOVWF  1D
....................             Flecha2=2; 
4EC8:  MOVWF  1F
....................             Pulso=1; 
4ECA:  BSF    18.6
4ECC:  MOVLB  0
....................          } 
....................       } 
....................        
....................       if(guardaruv==1) 
4ECE:  DECFSZ 31,W
4ED0:  BRA    4F80
....................       { 
....................          write_eeprom(50,segundos);write_eeprom(51,minutos); 
4ED2:  MOVLW  32
4ED4:  MOVWF  FA9
4ED6:  MOVFF  22,FA8
4EDA:  BCF    FA6.6
4EDC:  BCF    FA6.7
4EDE:  BSF    FA6.2
4EE0:  MOVF   FF2,W
4EE2:  MOVWF  00
4EE4:  BCF    FF2.7
4EE6:  MOVLB  F
4EE8:  MOVLW  55
4EEA:  MOVWF  FA7
4EEC:  MOVLW  AA
4EEE:  MOVWF  FA7
4EF0:  BSF    FA6.1
4EF2:  BTFSC  FA6.1
4EF4:  BRA    4EF2
4EF6:  BCF    FA6.2
4EF8:  MOVF   00,W
4EFA:  IORWF  FF2,F
4EFC:  MOVLW  33
4EFE:  MOVWF  FA9
4F00:  MOVFF  23,FA8
4F04:  BCF    FA6.6
4F06:  BCF    FA6.7
4F08:  BSF    FA6.2
4F0A:  MOVF   FF2,W
4F0C:  MOVWF  00
4F0E:  BCF    FF2.7
4F10:  MOVLW  55
4F12:  MOVWF  FA7
4F14:  MOVLW  AA
4F16:  MOVWF  FA7
4F18:  BSF    FA6.1
4F1A:  BTFSC  FA6.1
4F1C:  BRA    4F1A
4F1E:  BCF    FA6.2
4F20:  MOVF   00,W
4F22:  IORWF  FF2,F
....................          horasL=(int8)horas; 
4F24:  MOVFF  42,24
....................          horasH=(int8)(horas>>8); 
4F28:  MOVF   43,W
4F2A:  MOVWF  25
....................          write_eeprom(52,horasL); 
4F2C:  MOVLW  34
4F2E:  MOVWF  FA9
4F30:  MOVFF  24,FA8
4F34:  BCF    FA6.6
4F36:  BCF    FA6.7
4F38:  BSF    FA6.2
4F3A:  MOVFF  FF2,00
4F3E:  BCF    FF2.7
4F40:  MOVLW  55
4F42:  MOVWF  FA7
4F44:  MOVLW  AA
4F46:  MOVWF  FA7
4F48:  BSF    FA6.1
4F4A:  BTFSC  FA6.1
4F4C:  BRA    4F4A
4F4E:  BCF    FA6.2
4F50:  MOVF   00,W
4F52:  IORWF  FF2,F
....................          write_eeprom(53,horasH); 
4F54:  MOVLW  35
4F56:  MOVWF  FA9
4F58:  MOVFF  25,FA8
4F5C:  BCF    FA6.6
4F5E:  BCF    FA6.7
4F60:  BSF    FA6.2
4F62:  MOVFF  FF2,00
4F66:  BCF    FF2.7
4F68:  MOVLW  55
4F6A:  MOVWF  FA7
4F6C:  MOVLW  AA
4F6E:  MOVWF  FA7
4F70:  BSF    FA6.1
4F72:  BTFSC  FA6.1
4F74:  BRA    4F72
4F76:  BCF    FA6.2
4F78:  MOVF   00,W
4F7A:  IORWF  FF2,F
....................          guardaruv=0; 
4F7C:  CLRF   31
4F7E:  MOVLB  0
....................       } 
....................       
....................       if(segundos>=60) 
4F80:  MOVF   22,W
4F82:  SUBLW  3B
4F84:  BC    4F8A
....................       { 
....................          segundos=0;minutos++; 
4F86:  CLRF   22
4F88:  INCF   23,F
....................       } 
....................       if(minutos==60) 
4F8A:  MOVF   23,W
4F8C:  SUBLW  3C
4F8E:  BNZ   4F98
....................       { 
....................          minutos=0;horas++; 
4F90:  CLRF   23
4F92:  INCF   42,F
4F94:  BTFSC  FD8.2
4F96:  INCF   43,F
....................       } 
....................      
....................    } 
4F98:  BRA    47E4
.................... //----------------Fin-Menu100--------------------------------------------------------------    
....................     
....................    /*   if(tiemporeset>=20) 
....................    { 
....................       if(Menu==50){ 
....................          lcd_init();delay_ms(200);lcd_init();delay_ms(20); 
....................       } 
....................       tiemporeset=0; 
....................    }    
.................... */    
....................    } 
4F9A:  GOTO   26F4
.................... } 
....................  
4F9E:  SLEEP 

Configuration Fuses:
   Word  1: C220   XTPLL IESO FCMEN PLL1 CPUDIV1 USBDIV
   Word  2: 1E1F   BROWNOUT NOWDT BORV20 NOPUT WDT32768 NOVREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
