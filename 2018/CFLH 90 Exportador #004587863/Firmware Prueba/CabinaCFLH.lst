CCS PCH C Compiler, Version 4.104, 5967               19-oct.-18 10:46

               Filename: H:\JP\JP\Laboratorio\Cabina de Flujo Laminar Horizontal\2018\CFLH 90 Exportador #0045878XX\Firmware Prueba\CabinaCFLH.lst

               ROM used: 15142 bytes (46%)
                         Largest free fragment is 17624
               RAM used: 179 (9%) at main() level
                         216 (11%) worst case
               Stack:    7 worst case (6 in main + 1 for interrupts)

*
0000:  GOTO   1E2C
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   0184
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina de PCR. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz UV, Luz Blanca, Motor Ventilador y Cambio de Contraseña. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,NOVREGEN,NOMCLR,NOPUT// PLL1 para 4 MHz 
.................... //#fuses XT,NOWDT,NOPROTECT,NOLVP,NODEBUG,NOVREGEN,NOMCLR// PLL1 para 4 MHz 
.................... #use delay(clock=48000000) 
*
06E2:  CLRF   FEA
06E4:  MOVLW  C6
06E6:  MOVWF  FE9
06E8:  MOVF   FEF,W
06EA:  BZ    0708
06EC:  MOVLW  0F
06EE:  MOVWF  01
06F0:  CLRF   00
06F2:  DECFSZ 00,F
06F4:  BRA    06F2
06F6:  DECFSZ 01,F
06F8:  BRA    06F0
06FA:  MOVLW  8F
06FC:  MOVWF  00
06FE:  DECFSZ 00,F
0700:  BRA    06FE
0702:  NOP   
0704:  DECFSZ FEF,F
0706:  BRA    06EC
0708:  RETLW  00
.................... //#use delay(clock=20000000) 
.................... #include <MATH.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
*
1ACC:  BCF    xC2.0
....................    y = x; 
1ACE:  MOVFF  B6,BB
1AD2:  MOVFF  B5,BA
1AD6:  MOVFF  B4,B9
1ADA:  MOVFF  B3,B8
....................  
....................    if (x < 0) 
1ADE:  MOVFF  B6,C6
1AE2:  MOVFF  B5,C5
1AE6:  MOVFF  B4,C4
1AEA:  MOVFF  B3,C3
1AEE:  CLRF   xCA
1AF0:  CLRF   xC9
1AF2:  CLRF   xC8
1AF4:  CLRF   xC7
1AF6:  CALL   0B36
1AFA:  BNC   1B04
....................    { 
....................       s = 1; 
1AFC:  BSF    xC2.0
....................       y = -y; 
1AFE:  MOVF   xB9,W
1B00:  XORLW  80
1B02:  MOVWF  xB9
....................    } 
....................  
....................    if (y <= 32768.0) 
1B04:  MOVFF  BB,C6
1B08:  MOVFF  BA,C5
1B0C:  MOVFF  B9,C4
1B10:  MOVFF  B8,C3
1B14:  CLRF   xCA
1B16:  CLRF   xC9
1B18:  CLRF   xC8
1B1A:  MOVLW  8E
1B1C:  MOVWF  xC7
1B1E:  CALL   0B36
1B22:  BC    1B26
1B24:  BNZ   1B56
....................   res = (float32)(unsigned int16)y; 
1B26:  MOVFF  BB,C6
1B2A:  MOVFF  BA,C5
1B2E:  MOVFF  B9,C4
1B32:  MOVFF  B8,C3
1B36:  RCALL  1A94
1B38:  MOVFF  02,C8
1B3C:  MOVFF  01,C7
1B40:  CALL   0940
1B44:  MOVFF  03,BF
1B48:  MOVFF  02,BE
1B4C:  MOVFF  01,BD
1B50:  MOVFF  00,BC
....................  
....................  else if (y < 10000000.0) 
1B54:  BRA    1CE0
1B56:  MOVFF  BB,C6
1B5A:  MOVFF  BA,C5
1B5E:  MOVFF  B9,C4
1B62:  MOVFF  B8,C3
1B66:  MOVLW  80
1B68:  MOVWF  xCA
1B6A:  MOVLW  96
1B6C:  MOVWF  xC9
1B6E:  MOVLW  18
1B70:  MOVWF  xC8
1B72:  MOVLW  96
1B74:  MOVWF  xC7
1B76:  CALL   0B36
1B7A:  BTFSS  FD8.0
1B7C:  BRA    1CD0
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
1B7E:  MOVFF  BB,C6
1B82:  MOVFF  BA,C5
1B86:  MOVFF  B9,C4
1B8A:  MOVFF  B8,C3
1B8E:  CLRF   xCA
1B90:  CLRF   xC9
1B92:  CLRF   xC8
1B94:  MOVLW  8E
1B96:  MOVWF  xC7
1B98:  CALL   1208
1B9C:  MOVFF  03,C6
1BA0:  MOVFF  02,C5
1BA4:  MOVFF  01,C4
1BA8:  MOVFF  00,C3
1BAC:  RCALL  1A94
1BAE:  MOVFF  02,C1
1BB2:  MOVFF  01,C0
....................       y = 32768.0*(y/32768.0 - (float32)l); 
1BB6:  MOVFF  BB,C6
1BBA:  MOVFF  BA,C5
1BBE:  MOVFF  B9,C4
1BC2:  MOVFF  B8,C3
1BC6:  CLRF   xCA
1BC8:  CLRF   xC9
1BCA:  CLRF   xC8
1BCC:  MOVLW  8E
1BCE:  MOVWF  xC7
1BD0:  CALL   1208
1BD4:  MOVFF  00,C3
1BD8:  MOVFF  01,C4
1BDC:  MOVFF  02,C5
1BE0:  MOVFF  03,C6
1BE4:  MOVFF  C1,C8
1BE8:  MOVFF  C0,C7
1BEC:  CALL   0940
1BF0:  BSF    FD8.1
1BF2:  MOVFF  C6,CA
1BF6:  MOVFF  C5,C9
1BFA:  MOVFF  C4,C8
1BFE:  MOVFF  C3,C7
1C02:  MOVFF  03,CE
1C06:  MOVFF  02,CD
1C0A:  MOVFF  01,CC
1C0E:  MOVFF  00,CB
1C12:  CALL   1362
1C16:  CLRF   xC6
1C18:  CLRF   xC5
1C1A:  CLRF   xC4
1C1C:  MOVLW  8E
1C1E:  MOVWF  xC3
1C20:  MOVFF  03,CA
1C24:  MOVFF  02,C9
1C28:  MOVFF  01,C8
1C2C:  MOVFF  00,C7
1C30:  RCALL  1762
1C32:  MOVFF  03,BB
1C36:  MOVFF  02,BA
1C3A:  MOVFF  01,B9
1C3E:  MOVFF  00,B8
....................   res = 32768.0*(float32)l; 
1C42:  MOVFF  C1,C8
1C46:  MOVFF  C0,C7
1C4A:  CALL   0940
1C4E:  CLRF   xC6
1C50:  CLRF   xC5
1C52:  CLRF   xC4
1C54:  MOVLW  8E
1C56:  MOVWF  xC3
1C58:  MOVFF  03,CA
1C5C:  MOVFF  02,C9
1C60:  MOVFF  01,C8
1C64:  MOVFF  00,C7
1C68:  RCALL  1762
1C6A:  MOVFF  03,BF
1C6E:  MOVFF  02,BE
1C72:  MOVFF  01,BD
1C76:  MOVFF  00,BC
....................   res += (float32)(unsigned int16)y; 
1C7A:  MOVFF  BB,C6
1C7E:  MOVFF  BA,C5
1C82:  MOVFF  B9,C4
1C86:  MOVFF  B8,C3
1C8A:  RCALL  1A94
1C8C:  MOVFF  02,C8
1C90:  MOVFF  01,C7
1C94:  CALL   0940
1C98:  BCF    FD8.1
1C9A:  MOVFF  BF,CA
1C9E:  MOVFF  BE,C9
1CA2:  MOVFF  BD,C8
1CA6:  MOVFF  BC,C7
1CAA:  MOVFF  03,CE
1CAE:  MOVFF  02,CD
1CB2:  MOVFF  01,CC
1CB6:  MOVFF  00,CB
1CBA:  CALL   1362
1CBE:  MOVFF  03,BF
1CC2:  MOVFF  02,BE
1CC6:  MOVFF  01,BD
1CCA:  MOVFF  00,BC
....................  } 
....................  
....................  else 
1CCE:  BRA    1CE0
....................   res = y; 
1CD0:  MOVFF  BB,BF
1CD4:  MOVFF  BA,BE
1CD8:  MOVFF  B9,BD
1CDC:  MOVFF  B8,BC
....................  
....................  y = y - (float32)(unsigned int16)y; 
1CE0:  MOVFF  BB,C6
1CE4:  MOVFF  BA,C5
1CE8:  MOVFF  B9,C4
1CEC:  MOVFF  B8,C3
1CF0:  RCALL  1A94
1CF2:  MOVFF  02,C8
1CF6:  MOVFF  01,C7
1CFA:  CALL   0940
1CFE:  BSF    FD8.1
1D00:  MOVFF  BB,CA
1D04:  MOVFF  BA,C9
1D08:  MOVFF  B9,C8
1D0C:  MOVFF  B8,C7
1D10:  MOVFF  03,CE
1D14:  MOVFF  02,CD
1D18:  MOVFF  01,CC
1D1C:  MOVFF  00,CB
1D20:  CALL   1362
1D24:  MOVFF  03,BB
1D28:  MOVFF  02,BA
1D2C:  MOVFF  01,B9
1D30:  MOVFF  00,B8
....................  
....................  if (s) 
1D34:  BTFSS  xC2.0
1D36:  BRA    1D3E
....................   res = -res; 
1D38:  MOVF   xBD,W
1D3A:  XORLW  80
1D3C:  MOVWF  xBD
....................  
....................  if (y != 0) 
1D3E:  MOVFF  BB,C6
1D42:  MOVFF  BA,C5
1D46:  MOVFF  B9,C4
1D4A:  MOVFF  B8,C3
1D4E:  CLRF   xCA
1D50:  CLRF   xC9
1D52:  CLRF   xC8
1D54:  CLRF   xC7
1D56:  CALL   0B36
1D5A:  BZ    1DCC
....................  { 
....................   if (s == 1 && n == 0) 
1D5C:  BTFSS  xC2.0
1D5E:  BRA    1D94
1D60:  MOVF   xB7,F
1D62:  BNZ   1D94
....................    res -= 1.0; 
1D64:  BSF    FD8.1
1D66:  MOVFF  BF,CA
1D6A:  MOVFF  BE,C9
1D6E:  MOVFF  BD,C8
1D72:  MOVFF  BC,C7
1D76:  CLRF   xCE
1D78:  CLRF   xCD
1D7A:  CLRF   xCC
1D7C:  MOVLW  7F
1D7E:  MOVWF  xCB
1D80:  CALL   1362
1D84:  MOVFF  03,BF
1D88:  MOVFF  02,BE
1D8C:  MOVFF  01,BD
1D90:  MOVFF  00,BC
....................  
....................   if (s == 0 && n == 1) 
1D94:  BTFSC  xC2.0
1D96:  BRA    1DCC
1D98:  DECFSZ xB7,W
1D9A:  BRA    1DCC
....................    res += 1.0; 
1D9C:  BCF    FD8.1
1D9E:  MOVFF  BF,CA
1DA2:  MOVFF  BE,C9
1DA6:  MOVFF  BD,C8
1DAA:  MOVFF  BC,C7
1DAE:  CLRF   xCE
1DB0:  CLRF   xCD
1DB2:  CLRF   xCC
1DB4:  MOVLW  7F
1DB6:  MOVWF  xCB
1DB8:  CALL   1362
1DBC:  MOVFF  03,BF
1DC0:  MOVFF  02,BE
1DC4:  MOVFF  01,BD
1DC8:  MOVFF  00,BC
....................  } 
....................  if (x == 0) 
1DCC:  MOVFF  B6,C6
1DD0:  MOVFF  B5,C5
1DD4:  MOVFF  B4,C4
1DD8:  MOVFF  B3,C3
1DDC:  CLRF   xCA
1DDE:  CLRF   xC9
1DE0:  CLRF   xC8
1DE2:  CLRF   xC7
1DE4:  CALL   0B36
1DE8:  BNZ   1DF2
....................     res = 0; 
1DEA:  CLRF   xBF
1DEC:  CLRF   xBE
1DEE:  CLRF   xBD
1DF0:  CLRF   xBC
....................  
....................  return (res); 
1DF2:  MOVFF  BC,00
1DF6:  MOVFF  BD,01
1DFA:  MOVFF  BE,02
1DFE:  MOVFF  BF,03
.................... } 
1E02:  GOTO   1E1A (RETURN)
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
1E06:  MOVFF  B2,B6
1E0A:  MOVFF  B1,B5
1E0E:  MOVFF  B0,B4
1E12:  MOVFF  AF,B3
1E16:  CLRF   xB7
1E18:  BRA    1ACC
.................... } 
1E1A:  RETLW  00
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   UP            input(PIN_A5) 
.................... #define   DOWN          input(PIN_E0) 
.................... #define   RIGHT         input(PIN_E1) 
.................... #define   IZQU          input(PIN_E2) 
.................... #define   VIDRIO        !input(PIN_A2) 
....................  
.................... // Definición de otros puertos 
.................... #define   Luz_UV_on         output_bit(PIN_D1,1) 
.................... #define   Luz_UV_off        output_bit(PIN_D1,0) 
.................... #define   Luz_Blanca_on     output_bit(PIN_D2,1) 
.................... #define   Luz_Blanca_off    output_bit(PIN_D2,0) 
.................... #define   Motor_L1_on       output_bit(PIN_D3,1) 
.................... #define   Motor_L1_off      output_bit(PIN_D3,0) 
.................... #define   Buzzer_on         output_bit(PIN_D0,1) 
.................... #define   Buzzer_off        output_bit(PIN_D0,0) 
.................... #define   ON  1 
.................... #define   OFF 0 
....................  
.................... short estadouv=0,estadofl=0,estadomv=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,tiempo_cumplido=0,Lectura=0,flaguv=0,flagfl=0,estadobuzzer=0,estadoalarma=0; 
.................... int8 Menu=0, n_opcionH=6,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,segundos=0,minutos=0,horasL=0,horasH=0,G_l=0,G_h=0; 
.................... int8 tempo_minutos=0,tempo_segundos=0,tempo_minutos_pro=0,tempo_segundos_pro=0,r=0,q=0,i=0,unidad2=1,tiemporeset=0,guardaruv=0; 
.................... signed int8   paso=0; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... signed  int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 ActivaBuzzer=0; 
.................... int16 tiempos,horas=0,G16=0,tiempobloqueo=0; 
.................... float PromPresion[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float V1=0.0,Presion=0.0,Saturacion=0.0,CaidaPresion=0.0; 
.................... float G=2; 
.................... short Cambio=ON,flagmv=0,Ruido=OFF,Bloqueo=OFF; 
.................... char dato[3]; 
....................  
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN unused;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN enable;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTB")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_b(LCD_READ); 
....................       lcd.rw = 1; 
....................       delay_cycles(30);//30 
....................       lcd.enable = 1; 
....................       delay_cycles(30);//30 
....................       high = lcd.data; 
....................       lcd.enable = 0; 
....................       delay_cycles(30);//30 
....................       lcd.enable = 1; 
....................       delay_us(30);//30 
....................       low = lcd.data; 
....................       lcd.enable = 0; 
....................       set_tris_b(LCD_WRITE); 
....................       return( (high<<4) | low); 
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
070A:  SWAPF  xC7,W
070C:  ANDLW  F0
070E:  MOVWF  00
0710:  MOVLW  0F
0712:  ANDWF  F81,W
0714:  IORWF  00,W
0716:  MOVWF  F81
....................       delay_cycles(30);//30 
0718:  MOVLW  09
071A:  MOVWF  00
071C:  DECFSZ 00,F
071E:  BRA    071C
0720:  BRA    0722
....................       lcd.enable = 1; 
0722:  BSF    F81.3
....................       delay_us(55);//55 
0724:  MOVLW  DB
0726:  MOVWF  00
0728:  DECFSZ 00,F
072A:  BRA    0728
072C:  BRA    072E
....................       lcd.enable = 0; 
072E:  BCF    F81.3
.................... } 
0730:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
0732:  BCF    F81.1
....................       //while ( bit_test(lcd_read_byte(),7)); 
....................       delay_ms(1); 
0734:  MOVLW  01
0736:  MOVWF  xC6
0738:  RCALL  06E2
....................       lcd.rs = address; 
073A:  BTFSS  xC4.0
073C:  BCF    F81.1
073E:  BTFSC  xC4.0
0740:  BSF    F81.1
....................       delay_cycles(30);//30 
0742:  MOVLW  09
0744:  MOVWF  00
0746:  DECFSZ 00,F
0748:  BRA    0746
074A:  BRA    074C
....................       lcd.rw = 0; 
074C:  BCF    F81.2
....................       delay_cycles(30);//30 
074E:  MOVLW  09
0750:  MOVWF  00
0752:  DECFSZ 00,F
0754:  BRA    0752
0756:  BRA    0758
....................       lcd.enable = 0; 
0758:  BCF    F81.3
....................       lcd_send_nibble(n >> 4); 
075A:  SWAPF  xC5,W
075C:  MOVWF  xC6
075E:  MOVLW  0F
0760:  ANDWF  xC6,F
0762:  MOVFF  C6,C7
0766:  RCALL  070A
....................       lcd_send_nibble(n & 0xf); 
0768:  MOVF   xC5,W
076A:  ANDLW  0F
076C:  MOVWF  xC6
076E:  MOVWF  xC7
0770:  RCALL  070A
.................... } 
0772:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_b(LCD_WRITE); 
0774:  MOVLW  00
0776:  MOVWF  F93
....................     lcd.rs = 0; 
0778:  BCF    F81.1
....................     lcd.rw = 0; 
077A:  BCF    F81.2
....................     lcd.enable = 0; 
077C:  BCF    F81.3
....................     delay_ms(15); 
077E:  MOVLW  0F
0780:  MOVWF  xC6
0782:  RCALL  06E2
....................     for(i=1;i<=3;++i) { 
0784:  MOVLW  01
0786:  MOVWF  xAF
0788:  MOVF   xAF,W
078A:  SUBLW  03
078C:  BNC   079E
....................        lcd_send_nibble(3); 
078E:  MOVLW  03
0790:  MOVWF  xC7
0792:  RCALL  070A
....................        delay_ms(5); 
0794:  MOVLW  05
0796:  MOVWF  xC6
0798:  RCALL  06E2
....................     } 
079A:  INCF   xAF,F
079C:  BRA    0788
....................     lcd_send_nibble(2); 
079E:  MOVLW  02
07A0:  MOVWF  xC7
07A2:  RCALL  070A
....................     for(i=0;i<=3;++i) 
07A4:  CLRF   xAF
07A6:  MOVF   xAF,W
07A8:  SUBLW  03
07AA:  BNC   07C8
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
07AC:  CLRF   03
07AE:  MOVF   xAF,W
07B0:  MOVFF  FF2,B0
07B4:  BCF    FF2.7
07B6:  RCALL  0096
07B8:  BTFSC  xB0.7
07BA:  BSF    FF2.7
07BC:  MOVWF  xB0
07BE:  CLRF   xC4
07C0:  MOVWF  xC5
07C2:  RCALL  0732
07C4:  INCF   xAF,F
07C6:  BRA    07A6
.................... } 
07C8:  RETLW  00
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
*
07FA:  MOVLW  01
07FC:  SUBWF  xC2,W
07FE:  ADDLW  FC
0800:  BC    0820
0802:  ADDLW  04
0804:  GOTO   0830
....................      case 1 : address=0x80;break; 
0808:  MOVLW  80
080A:  MOVWF  xC3
080C:  BRA    0820
....................      case 2 : address=0xc0;break; 
080E:  MOVLW  C0
0810:  MOVWF  xC3
0812:  BRA    0820
....................      case 3 : address=0x94;break; 
0814:  MOVLW  94
0816:  MOVWF  xC3
0818:  BRA    0820
....................      case 4 : address=0xd4;break; 
081A:  MOVLW  D4
081C:  MOVWF  xC3
081E:  BRA    0820
....................    } 
....................    address+=x-1; 
0820:  MOVLW  01
0822:  SUBWF  xC1,W
0824:  ADDWF  xC3,F
....................    lcd_send_byte(0,address); 
0826:  CLRF   xC4
0828:  MOVFF  C3,C5
082C:  RCALL  0732
.................... } 
082E:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
....................    if(c=='ñ') 
*
085C:  MOVF   xC0,W
085E:  SUBLW  F1
0860:  BNZ   0866
....................    { 
....................       c=238; 
0862:  MOVLW  EE
0864:  MOVWF  xC0
....................    } 
....................    if(c=='Ñ') 
0866:  MOVF   xC0,W
0868:  SUBLW  D1
086A:  BNZ   0870
....................    { 
....................       c=255; 
086C:  MOVLW  FF
086E:  MOVWF  xC0
....................    } 
....................     
....................    switch (c) { 
0870:  MOVF   xC0,W
0872:  XORLW  0C
0874:  BZ    0880
0876:  XORLW  06
0878:  BZ    0894
087A:  XORLW  02
087C:  BZ    08A2
087E:  BRA    08AC
....................      case '\f'   : lcd_send_byte(0,1); 
0880:  CLRF   xC4
0882:  MOVLW  01
0884:  MOVWF  xC5
0886:  RCALL  0732
....................                    lcdline=1; 
0888:  MOVLW  01
088A:  MOVWF  xAE
....................                    delay_ms(2); 
088C:  MOVLW  02
088E:  MOVWF  xC6
0890:  RCALL  06E2
....................                                            break; 
0892:  BRA    08B8
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
0894:  INCF   xAE,F
0896:  MOVLW  01
0898:  MOVWF  xC1
089A:  MOVFF  AE,C2
089E:  RCALL  07FA
08A0:  BRA    08B8
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
08A2:  CLRF   xC4
08A4:  MOVLW  10
08A6:  MOVWF  xC5
08A8:  RCALL  0732
08AA:  BRA    08B8
....................      default     : lcd_send_byte(1,c);     break; 
08AC:  MOVLW  01
08AE:  MOVWF  xC4
08B0:  MOVFF  C0,C5
08B4:  RCALL  0732
08B6:  BRA    08B8
....................    } 
.................... } 
08B8:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... #include <Funciones.h> 
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {   
....................    if(x==1) 
*
0FE8:  DECFSZ xB0,W
0FEA:  BRA    1000
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Temporizador UV    ");} 
0FEC:  MOVLW  02
0FEE:  MOVWF  xC1
0FF0:  MOVFF  B1,C2
0FF4:  RCALL  07FA
0FF6:  MOVLW  B4
0FF8:  MOVWF  FF6
0FFA:  MOVLW  00
0FFC:  MOVWF  FF7
0FFE:  RCALL  08BA
....................    if(x==2) 
1000:  MOVF   xB0,W
1002:  SUBLW  02
1004:  BNZ   101C
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
1006:  MOVLW  02
1008:  MOVWF  xC1
100A:  MOVFF  B1,C2
100E:  CALL   07FA
1012:  MOVLW  C8
1014:  MOVWF  FF6
1016:  MOVLW  00
1018:  MOVWF  FF7
101A:  RCALL  08BA
....................    if(x==3) 
101C:  MOVF   xB0,W
101E:  SUBLW  03
1020:  BNZ   1038
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo Trabajo UV  ");} 
1022:  MOVLW  02
1024:  MOVWF  xC1
1026:  MOVFF  B1,C2
102A:  CALL   07FA
102E:  MOVLW  DC
1030:  MOVWF  FF6
1032:  MOVLW  00
1034:  MOVWF  FF7
1036:  RCALL  08BA
....................    if(x==4) 
1038:  MOVF   xB0,W
103A:  SUBLW  04
103C:  BNZ   1054
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Punto Cero         ");} 
103E:  MOVLW  02
1040:  MOVWF  xC1
1042:  MOVFF  B1,C2
1046:  CALL   07FA
104A:  MOVLW  F0
104C:  MOVWF  FF6
104E:  MOVLW  00
1050:  MOVWF  FF7
1052:  RCALL  08BA
....................     
....................    if(x==5) 
1054:  MOVF   xB0,W
1056:  SUBLW  05
1058:  BNZ   108E
....................    {if(estadoalarma==0) 
105A:  BTFSC  17.4
105C:  BRA    1074
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma          OFF");} 
105E:  MOVLW  02
1060:  MOVWF  xC1
1062:  MOVFF  B1,C2
1066:  CALL   07FA
106A:  MOVLW  04
106C:  MOVWF  FF6
106E:  MOVLW  01
1070:  MOVWF  FF7
1072:  RCALL  08BA
....................    if(estadoalarma==1) 
1074:  BTFSS  17.4
1076:  BRA    108E
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma           ON");} 
1078:  MOVLW  02
107A:  MOVWF  xC1
107C:  MOVFF  B1,C2
1080:  CALL   07FA
1084:  MOVLW  18
1086:  MOVWF  FF6
1088:  MOVLW  01
108A:  MOVWF  FF7
108C:  RCALL  08BA
....................    } 
.................... } 
108E:  RETLW  00
....................  
.................... void velocidades(int8 x)// Funcion para imprimir mensajes de Menu Principal. 
.................... {  if(x==0) 
*
1E1C:  MOVF   xAF,F
1E1E:  BNZ   1E26
....................    { 
....................       Motor_L1_off; 
1E20:  BCF    F8C.3
1E22:  BCF    F95.3
....................    } 
....................    else 
1E24:  BRA    1E2A
....................    { 
....................       Motor_L1_on; 
1E26:  BSF    F8C.3
1E28:  BCF    F95.3
....................    } 
.................... } 
1E2A:  RETLW  00
....................  
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
11B2:  RLCF   xB4,W
11B4:  MOVWF  00
11B6:  RLCF   00,F
11B8:  MOVLW  FC
11BA:  ANDWF  00,F
11BC:  MOVFF  00,01
11C0:  MOVF   FC2,W
11C2:  ANDLW  C3
11C4:  IORWF  00,W
11C6:  MOVWF  FC2
11C8:  MOVLW  0A
11CA:  MOVWF  xC6
11CC:  CALL   06E2
11D0:  BSF    FC2.1
11D2:  BTFSC  FC2.1
11D4:  BRA    11D2
11D6:  MOVFF  FC4,03
11DA:  MOVFF  FC3,C7
11DE:  MOVFF  FC4,C8
11E2:  CALL   0940
11E6:  MOVFF  03,B8
11EA:  MOVFF  02,B7
11EE:  MOVFF  01,B6
11F2:  MOVFF  00,B5
11F6:  MOVFF  B5,00
11FA:  MOVFF  B6,01
11FE:  MOVFF  B7,02
1202:  MOVFF  B8,03
.................... } 
1206:  RETLW  00
....................  
.................... float Leer_Sensor_Presion(int media){ 
*
15CC:  CLRF   xB3
15CE:  CLRF   xB2
15D0:  CLRF   xB1
15D2:  CLRF   xB0
....................    float promediopresion=0.0; 
....................     
....................    V1=sensores(0);  
15D4:  CLRF   xB4
15D6:  RCALL  11B2
15D8:  MOVFF  03,99
15DC:  MOVFF  02,98
15E0:  MOVFF  01,97
15E4:  MOVFF  00,96
....................    //V1 = (x_uno*5.0)/1023.0;   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
....................    Presion=(V1/G)-1.0;// Presion=(Voltaje/Ganancia)-1 
15E8:  MOVFF  99,C6
15EC:  MOVFF  98,C5
15F0:  MOVFF  97,C4
15F4:  MOVFF  96,C3
15F8:  MOVFF  A9,CA
15FC:  MOVFF  A8,C9
1600:  MOVFF  A7,C8
1604:  MOVFF  A6,C7
1608:  RCALL  1208
160A:  MOVFF  00,B4
160E:  MOVFF  01,B5
1612:  MOVFF  02,B6
1616:  MOVFF  03,B7
161A:  BSF    FD8.1
161C:  MOVFF  03,CA
1620:  MOVFF  02,C9
1624:  MOVFF  01,C8
1628:  MOVFF  00,C7
162C:  CLRF   xCE
162E:  CLRF   xCD
1630:  CLRF   xCC
1632:  MOVLW  7F
1634:  MOVWF  xCB
1636:  RCALL  1362
1638:  MOVFF  03,9D
163C:  MOVFF  02,9C
1640:  MOVFF  01,9B
1644:  MOVFF  00,9A
....................     
....................    if(Presion<0.0) 
1648:  MOVFF  9D,C6
164C:  MOVFF  9C,C5
1650:  MOVFF  9B,C4
1654:  MOVFF  9A,C3
1658:  CLRF   xCA
165A:  CLRF   xC9
165C:  CLRF   xC8
165E:  CLRF   xC7
1660:  CALL   0B36
1664:  BNC   166E
....................    { 
....................       Presion=0.0; 
1666:  CLRF   x9D
1668:  CLRF   x9C
166A:  CLRF   x9B
166C:  CLRF   x9A
....................    } 
....................  
....................    if(r>media-1) 
166E:  MOVLW  01
1670:  SUBWF  xAF,W
1672:  SUBWF  2B,W
1674:  BZ    167A
1676:  BNC   167A
....................    {r=0;} 
1678:  CLRF   2B
....................    PromPresion[r]=Presion;r++; 
167A:  MOVF   2B,W
167C:  MULLW  04
167E:  MOVF   FF3,W
1680:  CLRF   03
1682:  ADDLW  46
1684:  MOVWF  FE9
1686:  MOVLW  00
1688:  ADDWFC 03,W
168A:  MOVWF  FEA
168C:  MOVFF  9A,FEF
1690:  MOVFF  9B,FEC
1694:  MOVFF  9C,FEC
1698:  MOVFF  9D,FEC
169C:  INCF   2B,F
....................           
....................    for(q=0;q<=(media-1);q++) 
169E:  CLRF   2C
16A0:  MOVLW  01
16A2:  SUBWF  xAF,W
16A4:  SUBWF  2C,W
16A6:  BZ    16AA
16A8:  BC    1714
....................    { 
....................       promediopresion+=PromPresion[q]; 
16AA:  MOVF   2C,W
16AC:  MULLW  04
16AE:  MOVF   FF3,W
16B0:  CLRF   03
16B2:  ADDLW  46
16B4:  MOVWF  FE9
16B6:  MOVLW  00
16B8:  ADDWFC 03,W
16BA:  MOVWF  FEA
16BC:  MOVFF  FEF,00
16C0:  MOVFF  FEC,01
16C4:  MOVFF  FEC,02
16C8:  MOVFF  FEC,03
16CC:  MOVFF  FEA,B5
16D0:  MOVFF  FE9,B4
16D4:  BCF    FD8.1
16D6:  MOVFF  B3,CA
16DA:  MOVFF  B2,C9
16DE:  MOVFF  B1,C8
16E2:  MOVFF  B0,C7
16E6:  MOVFF  03,CE
16EA:  MOVFF  02,CD
16EE:  MOVFF  01,CC
16F2:  MOVFF  00,CB
16F6:  RCALL  1362
16F8:  MOVFF  B5,FEA
16FC:  MOVFF  B4,FE9
1700:  MOVFF  03,B3
1704:  MOVFF  02,B2
1708:  MOVFF  01,B1
170C:  MOVFF  00,B0
....................    }  
1710:  INCF   2C,F
1712:  BRA    16A0
....................    promediopresion=promediopresion/media;    
1714:  CLRF   xC8
1716:  MOVFF  AF,C7
171A:  CALL   0940
171E:  MOVFF  B3,C6
1722:  MOVFF  B2,C5
1726:  MOVFF  B1,C4
172A:  MOVFF  B0,C3
172E:  MOVFF  03,CA
1732:  MOVFF  02,C9
1736:  MOVFF  01,C8
173A:  MOVFF  00,C7
173E:  RCALL  1208
1740:  MOVFF  03,B3
1744:  MOVFF  02,B2
1748:  MOVFF  01,B1
174C:  MOVFF  00,B0
....................     
....................    return promediopresion; 
1750:  MOVFF  B0,00
1754:  MOVFF  B1,01
1758:  MOVFF  B2,02
175C:  MOVFF  B3,03
.................... } 
1760:  RETLW  00
....................  
.................... void EliminaRuido(void){ 
....................    /*if(Menu==50){ 
....................       dato[0]=lcd_getc(1,2); 
....................       dato[1]=lcd_getc(2,2); 
....................       dato[2]=lcd_getc(3,2); 
....................       if(dato[0]!=70 || dato[1]!=105 || dato[2]!=108){ 
....................          lcd_init();delay_ms(200);lcd_init(); 
....................          Cambio=ON; 
....................       } 
....................    }*/ 
.................... } 
*
0004:  RETLW  00
....................  
.................... void ConfigInterrupciones (void){ 
....................    lcd_init(); 
*
07CA:  RCALL  0774
....................    set_tris_a(0XFF); 
07CC:  MOVLW  FF
07CE:  MOVWF  F92
....................    set_tris_e(0XFF); 
07D0:  MOVWF  F96
....................    set_tris_d(0X00); 
07D2:  MOVLW  00
07D4:  MOVWF  F95
....................    output_d(0); 
07D6:  CLRF   F95
07D8:  CLRF   F8C
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
07DA:  MOVLW  85
07DC:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
07DE:  BSF    F9D.0
....................    setup_adc_ports(AN0); 
07E0:  MOVF   FC1,W
07E2:  ANDLW  C0
07E4:  IORLW  0E
07E6:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
07E8:  BCF    FC0.0
07EA:  BSF    FC0.1
07EC:  BCF    FC0.2
07EE:  BSF    FC0.7
07F0:  BSF    FC2.0
....................    enable_interrupts(global); 
07F2:  MOVLW  C0
07F4:  IORWF  FF2,F
.................... } 
07F6:  GOTO   1FA0 (RETURN)
....................  
.................... void MensajeBienvenida (void){ 
....................    lcd_gotoxy(1,1); 
*
08DA:  MOVLW  01
08DC:  MOVWF  xC1
08DE:  MOVWF  xC2
08E0:  RCALL  07FA
....................    printf(lcd_putc," CABINA  DE   FLUJO "); 
08E2:  MOVLW  2C
08E4:  MOVWF  FF6
08E6:  MOVLW  01
08E8:  MOVWF  FF7
08EA:  RCALL  08BA
....................    lcd_gotoxy(1,2); 
08EC:  MOVLW  01
08EE:  MOVWF  xC1
08F0:  MOVLW  02
08F2:  MOVWF  xC2
08F4:  RCALL  07FA
....................    printf(lcd_putc," LAMINAR HORIZONTAL "); 
08F6:  MOVLW  42
08F8:  MOVWF  FF6
08FA:  MOVLW  01
08FC:  MOVWF  FF7
08FE:  RCALL  08BA
....................    lcd_gotoxy(1,3); 
0900:  MOVLW  01
0902:  MOVWF  xC1
0904:  MOVLW  03
0906:  MOVWF  xC2
0908:  RCALL  07FA
....................    printf(lcd_putc,"    JP INGLOBAL     "); 
090A:  MOVLW  58
090C:  MOVWF  FF6
090E:  MOVLW  01
0910:  MOVWF  FF7
0912:  RCALL  08BA
....................    lcd_gotoxy(1,4); 
0914:  MOVLW  01
0916:  MOVWF  xC1
0918:  MOVLW  04
091A:  MOVWF  xC2
091C:  RCALL  07FA
....................    printf(lcd_putc,"   REF:  JPCFLH90   "); 
091E:  MOVLW  6E
0920:  MOVWF  FF6
0922:  MOVLW  01
0924:  MOVWF  FF7
0926:  RCALL  08BA
....................    delay_ms(2000); 
0928:  MOVLW  08
092A:  MOVWF  xAF
092C:  MOVLW  FA
092E:  MOVWF  xC6
0930:  RCALL  06E2
0932:  DECFSZ xAF,F
0934:  BRA    092C
....................    printf(lcd_putc,"\f"); 
0936:  MOVLW  0C
0938:  MOVWF  xC0
093A:  RCALL  085C
.................... } 
093C:  GOTO   1FA4 (RETURN)
....................  
.................... void LeeEEPROM (void){ 
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0); 
*
0976:  MOVFF  FF2,AF
097A:  BCF    FF2.7
097C:  CLRF   FA9
097E:  BCF    FA6.6
0980:  BCF    FA6.7
0982:  BSF    FA6.0
0984:  MOVF   FA8,W
0986:  BTFSC  xAF.7
0988:  BSF    FF2.7
098A:  MOVWF  39
....................    delay_ms(20);  
098C:  MOVLW  14
098E:  MOVWF  xC6
0990:  RCALL  06E2
....................    contrasena[1]=read_eeprom(1); 
0992:  MOVFF  FF2,AF
0996:  BCF    FF2.7
0998:  MOVLW  01
099A:  MOVWF  FA9
099C:  BCF    FA6.6
099E:  BCF    FA6.7
09A0:  BSF    FA6.0
09A2:  MOVF   FA8,W
09A4:  BTFSC  xAF.7
09A6:  BSF    FF2.7
09A8:  MOVWF  3A
....................    delay_ms(20); 
09AA:  MOVLW  14
09AC:  MOVWF  xC6
09AE:  RCALL  06E2
....................    contrasena[2]=read_eeprom(2); 
09B0:  MOVFF  FF2,AF
09B4:  BCF    FF2.7
09B6:  MOVLW  02
09B8:  MOVWF  FA9
09BA:  BCF    FA6.6
09BC:  BCF    FA6.7
09BE:  BSF    FA6.0
09C0:  MOVF   FA8,W
09C2:  BTFSC  xAF.7
09C4:  BSF    FF2.7
09C6:  MOVWF  3B
....................    delay_ms(20);  
09C8:  MOVLW  14
09CA:  MOVWF  xC6
09CC:  RCALL  06E2
....................    contrasena[3]=read_eeprom(3); 
09CE:  MOVFF  FF2,AF
09D2:  BCF    FF2.7
09D4:  MOVLW  03
09D6:  MOVWF  FA9
09D8:  BCF    FA6.6
09DA:  BCF    FA6.7
09DC:  BSF    FA6.0
09DE:  MOVF   FA8,W
09E0:  BTFSC  xAF.7
09E2:  BSF    FF2.7
09E4:  MOVWF  3C
....................    delay_ms(20); 
09E6:  MOVLW  14
09E8:  MOVWF  xC6
09EA:  RCALL  06E2
....................    estadoalarma=read_eeprom(4); 
09EC:  MOVFF  FF2,AF
09F0:  BCF    FF2.7
09F2:  MOVLW  04
09F4:  MOVWF  FA9
09F6:  BCF    FA6.6
09F8:  BCF    FA6.7
09FA:  BSF    FA6.0
09FC:  MOVF   FA8,W
09FE:  BTFSC  xAF.7
0A00:  BSF    FF2.7
0A02:  MOVWF  01
0A04:  BCF    17.4
0A06:  BTFSC  01.0
0A08:  BSF    17.4
....................    delay_ms(20); 
0A0A:  MOVLW  14
0A0C:  MOVWF  xC6
0A0E:  RCALL  06E2
....................    tempo_minutos=read_eeprom(5); 
0A10:  MOVFF  FF2,AF
0A14:  BCF    FF2.7
0A16:  MOVLW  05
0A18:  MOVWF  FA9
0A1A:  BCF    FA6.6
0A1C:  BCF    FA6.7
0A1E:  BSF    FA6.0
0A20:  MOVF   FA8,W
0A22:  BTFSC  xAF.7
0A24:  BSF    FF2.7
0A26:  MOVWF  27
....................    delay_ms(20); 
0A28:  MOVLW  14
0A2A:  MOVWF  xC6
0A2C:  RCALL  06E2
....................    tempo_segundos=read_eeprom(6); 
0A2E:  MOVFF  FF2,AF
0A32:  BCF    FF2.7
0A34:  MOVLW  06
0A36:  MOVWF  FA9
0A38:  BCF    FA6.6
0A3A:  BCF    FA6.7
0A3C:  BSF    FA6.0
0A3E:  MOVF   FA8,W
0A40:  BTFSC  xAF.7
0A42:  BSF    FF2.7
0A44:  MOVWF  28
....................    delay_ms(20); 
0A46:  MOVLW  14
0A48:  MOVWF  xC6
0A4A:  RCALL  06E2
....................    segundos=read_eeprom(7); 
0A4C:  MOVFF  FF2,AF
0A50:  BCF    FF2.7
0A52:  MOVLW  07
0A54:  MOVWF  FA9
0A56:  BCF    FA6.6
0A58:  BCF    FA6.7
0A5A:  BSF    FA6.0
0A5C:  MOVF   FA8,W
0A5E:  BTFSC  xAF.7
0A60:  BSF    FF2.7
0A62:  MOVWF  21
....................    delay_ms(20); 
0A64:  MOVLW  14
0A66:  MOVWF  xC6
0A68:  RCALL  06E2
....................    minutos=read_eeprom(8); 
0A6A:  MOVFF  FF2,AF
0A6E:  BCF    FF2.7
0A70:  MOVLW  08
0A72:  MOVWF  FA9
0A74:  BCF    FA6.6
0A76:  BCF    FA6.7
0A78:  BSF    FA6.0
0A7A:  MOVF   FA8,W
0A7C:  BTFSC  xAF.7
0A7E:  BSF    FF2.7
0A80:  MOVWF  22
....................    delay_ms(20); 
0A82:  MOVLW  14
0A84:  MOVWF  xC6
0A86:  RCALL  06E2
....................    horasL=read_eeprom(9); 
0A88:  MOVFF  FF2,AF
0A8C:  BCF    FF2.7
0A8E:  MOVLW  09
0A90:  MOVWF  FA9
0A92:  BCF    FA6.6
0A94:  BCF    FA6.7
0A96:  BSF    FA6.0
0A98:  MOVF   FA8,W
0A9A:  BTFSC  xAF.7
0A9C:  BSF    FF2.7
0A9E:  MOVWF  23
....................    delay_ms(20); 
0AA0:  MOVLW  14
0AA2:  MOVWF  xC6
0AA4:  RCALL  06E2
....................    horasH=read_eeprom(10); 
0AA6:  MOVFF  FF2,AF
0AAA:  BCF    FF2.7
0AAC:  MOVLW  0A
0AAE:  MOVWF  FA9
0AB0:  BCF    FA6.6
0AB2:  BCF    FA6.7
0AB4:  BSF    FA6.0
0AB6:  MOVF   FA8,W
0AB8:  BTFSC  xAF.7
0ABA:  BSF    FF2.7
0ABC:  MOVWF  24
....................    delay_ms(20); 
0ABE:  MOVLW  14
0AC0:  MOVWF  xC6
0AC2:  RCALL  06E2
....................    G_l=read_eeprom(11); 
0AC4:  MOVFF  FF2,AF
0AC8:  BCF    FF2.7
0ACA:  MOVLW  0B
0ACC:  MOVWF  FA9
0ACE:  BCF    FA6.6
0AD0:  BCF    FA6.7
0AD2:  BSF    FA6.0
0AD4:  MOVF   FA8,W
0AD6:  BTFSC  xAF.7
0AD8:  BSF    FF2.7
0ADA:  MOVWF  25
....................    delay_ms(20); 
0ADC:  MOVLW  14
0ADE:  MOVWF  xC6
0AE0:  RCALL  06E2
....................    G_h=read_eeprom(12); 
0AE2:  MOVFF  FF2,AF
0AE6:  BCF    FF2.7
0AE8:  MOVLW  0C
0AEA:  MOVWF  FA9
0AEC:  BCF    FA6.6
0AEE:  BCF    FA6.7
0AF0:  BSF    FA6.0
0AF2:  MOVF   FA8,W
0AF4:  BTFSC  xAF.7
0AF6:  BSF    FF2.7
0AF8:  MOVWF  26
....................    delay_ms(20); 
0AFA:  MOVLW  14
0AFC:  MOVWF  xC6
0AFE:  RCALL  06E2
....................    G16=make16(G_h,G_l); 
0B00:  MOVFF  26,43
0B04:  MOVFF  25,42
....................    G=G16; 
0B08:  MOVFF  43,C8
0B0C:  MOVFF  42,C7
0B10:  RCALL  0940
0B12:  MOVFF  03,A9
0B16:  MOVFF  02,A8
0B1A:  MOVFF  01,A7
0B1E:  MOVFF  00,A6
....................    horas=make16(horasH,horasL); 
0B22:  MOVFF  24,41
0B26:  MOVFF  23,40
....................    tempo_minutos_pro=tempo_minutos;tempo_segundos_pro=tempo_segundos; 
0B2A:  MOVFF  27,29
0B2E:  MOVFF  28,2A
.................... } 
0B32:  GOTO   1FA8 (RETURN)
....................  
.................... void LimitaValores(void){ 
....................     
....................    if(Contrasena[0]>9 || Contrasena[0]<0){ 
*
0BAC:  BTFSC  39.7
0BAE:  BRA    0BB6
0BB0:  MOVF   39,W
0BB2:  SUBLW  09
0BB4:  BNC   0BBC
0BB6:  BTFSC  39.7
0BB8:  BRA    0BBC
0BBA:  BRA    0BEC
....................       Contrasena[0]=0;write_eeprom(0,0);delay_ms(20); 
0BBC:  CLRF   39
0BBE:  CLRF   FA9
0BC0:  CLRF   FA8
0BC2:  BCF    FA6.6
0BC4:  BCF    FA6.7
0BC6:  BSF    FA6.2
0BC8:  MOVF   FF2,W
0BCA:  MOVWF  00
0BCC:  BCF    FF2.7
0BCE:  MOVLB  F
0BD0:  MOVLW  55
0BD2:  MOVWF  FA7
0BD4:  MOVLW  AA
0BD6:  MOVWF  FA7
0BD8:  BSF    FA6.1
0BDA:  BTFSC  FA6.1
0BDC:  BRA    0BDA
0BDE:  BCF    FA6.2
0BE0:  MOVF   00,W
0BE2:  IORWF  FF2,F
0BE4:  MOVLW  14
0BE6:  MOVLB  0
0BE8:  MOVWF  xC6
0BEA:  RCALL  06E2
....................    } 
....................    if(Contrasena[1]>9 || Contrasena[1]<0){ 
0BEC:  BTFSC  3A.7
0BEE:  BRA    0BF6
0BF0:  MOVF   3A,W
0BF2:  SUBLW  09
0BF4:  BNC   0BFC
0BF6:  BTFSC  3A.7
0BF8:  BRA    0BFC
0BFA:  BRA    0C2E
....................       Contrasena[1]=0;write_eeprom(1,0);delay_ms(20); 
0BFC:  CLRF   3A
0BFE:  MOVLW  01
0C00:  MOVWF  FA9
0C02:  CLRF   FA8
0C04:  BCF    FA6.6
0C06:  BCF    FA6.7
0C08:  BSF    FA6.2
0C0A:  MOVF   FF2,W
0C0C:  MOVWF  00
0C0E:  BCF    FF2.7
0C10:  MOVLB  F
0C12:  MOVLW  55
0C14:  MOVWF  FA7
0C16:  MOVLW  AA
0C18:  MOVWF  FA7
0C1A:  BSF    FA6.1
0C1C:  BTFSC  FA6.1
0C1E:  BRA    0C1C
0C20:  BCF    FA6.2
0C22:  MOVF   00,W
0C24:  IORWF  FF2,F
0C26:  MOVLW  14
0C28:  MOVLB  0
0C2A:  MOVWF  xC6
0C2C:  RCALL  06E2
....................    } 
....................    if(Contrasena[2]>9 || Contrasena[2]<0){ 
0C2E:  BTFSC  3B.7
0C30:  BRA    0C38
0C32:  MOVF   3B,W
0C34:  SUBLW  09
0C36:  BNC   0C3E
0C38:  BTFSC  3B.7
0C3A:  BRA    0C3E
0C3C:  BRA    0C70
....................       Contrasena[2]=0;write_eeprom(2,0);delay_ms(20); 
0C3E:  CLRF   3B
0C40:  MOVLW  02
0C42:  MOVWF  FA9
0C44:  CLRF   FA8
0C46:  BCF    FA6.6
0C48:  BCF    FA6.7
0C4A:  BSF    FA6.2
0C4C:  MOVF   FF2,W
0C4E:  MOVWF  00
0C50:  BCF    FF2.7
0C52:  MOVLB  F
0C54:  MOVLW  55
0C56:  MOVWF  FA7
0C58:  MOVLW  AA
0C5A:  MOVWF  FA7
0C5C:  BSF    FA6.1
0C5E:  BTFSC  FA6.1
0C60:  BRA    0C5E
0C62:  BCF    FA6.2
0C64:  MOVF   00,W
0C66:  IORWF  FF2,F
0C68:  MOVLW  14
0C6A:  MOVLB  0
0C6C:  MOVWF  xC6
0C6E:  RCALL  06E2
....................    } 
....................    if(Contrasena[3]>9 || Contrasena[3]<0){ 
0C70:  BTFSC  3C.7
0C72:  BRA    0C7A
0C74:  MOVF   3C,W
0C76:  SUBLW  09
0C78:  BNC   0C80
0C7A:  BTFSC  3C.7
0C7C:  BRA    0C80
0C7E:  BRA    0CB2
....................       Contrasena[3]=0;write_eeprom(3,0);delay_ms(20); 
0C80:  CLRF   3C
0C82:  MOVLW  03
0C84:  MOVWF  FA9
0C86:  CLRF   FA8
0C88:  BCF    FA6.6
0C8A:  BCF    FA6.7
0C8C:  BSF    FA6.2
0C8E:  MOVF   FF2,W
0C90:  MOVWF  00
0C92:  BCF    FF2.7
0C94:  MOVLB  F
0C96:  MOVLW  55
0C98:  MOVWF  FA7
0C9A:  MOVLW  AA
0C9C:  MOVWF  FA7
0C9E:  BSF    FA6.1
0CA0:  BTFSC  FA6.1
0CA2:  BRA    0CA0
0CA4:  BCF    FA6.2
0CA6:  MOVF   00,W
0CA8:  IORWF  FF2,F
0CAA:  MOVLW  14
0CAC:  MOVLB  0
0CAE:  MOVWF  xC6
0CB0:  RCALL  06E2
....................    } 
....................    if(estadoalarma>1){ 
0CB2:  MOVLW  00
0CB4:  BTFSC  17.4
0CB6:  MOVLW  01
0CB8:  SUBLW  01
0CBA:  BC    0CF0
....................       estadoalarma=1;write_eeprom(4,1);delay_ms(20); 
0CBC:  BSF    17.4
0CBE:  MOVLW  04
0CC0:  MOVWF  FA9
0CC2:  MOVLW  01
0CC4:  MOVWF  FA8
0CC6:  BCF    FA6.6
0CC8:  BCF    FA6.7
0CCA:  BSF    FA6.2
0CCC:  MOVF   FF2,W
0CCE:  MOVWF  00
0CD0:  BCF    FF2.7
0CD2:  MOVLB  F
0CD4:  MOVLW  55
0CD6:  MOVWF  FA7
0CD8:  MOVLW  AA
0CDA:  MOVWF  FA7
0CDC:  BSF    FA6.1
0CDE:  BTFSC  FA6.1
0CE0:  BRA    0CDE
0CE2:  BCF    FA6.2
0CE4:  MOVF   00,W
0CE6:  IORWF  FF2,F
0CE8:  MOVLW  14
0CEA:  MOVLB  0
0CEC:  MOVWF  xC6
0CEE:  RCALL  06E2
....................    } 
....................    if(tempo_minutos>60){ 
0CF0:  MOVF   27,W
0CF2:  SUBLW  3C
0CF4:  BC    0D2C
....................       tempo_minutos=20;write_eeprom(5,20);delay_ms(20); 
0CF6:  MOVLW  14
0CF8:  MOVWF  27
0CFA:  MOVLW  05
0CFC:  MOVWF  FA9
0CFE:  MOVLW  14
0D00:  MOVWF  FA8
0D02:  BCF    FA6.6
0D04:  BCF    FA6.7
0D06:  BSF    FA6.2
0D08:  MOVF   FF2,W
0D0A:  MOVWF  00
0D0C:  BCF    FF2.7
0D0E:  MOVLB  F
0D10:  MOVLW  55
0D12:  MOVWF  FA7
0D14:  MOVLW  AA
0D16:  MOVWF  FA7
0D18:  BSF    FA6.1
0D1A:  BTFSC  FA6.1
0D1C:  BRA    0D1A
0D1E:  BCF    FA6.2
0D20:  MOVF   00,W
0D22:  IORWF  FF2,F
0D24:  MOVLW  14
0D26:  MOVLB  0
0D28:  MOVWF  xC6
0D2A:  RCALL  06E2
....................    } 
....................    if(tempo_segundos){ 
0D2C:  MOVF   28,F
0D2E:  BZ    0D62
....................       tempo_segundos=0;write_eeprom(6,0);delay_ms(20); 
0D30:  CLRF   28
0D32:  MOVLW  06
0D34:  MOVWF  FA9
0D36:  CLRF   FA8
0D38:  BCF    FA6.6
0D3A:  BCF    FA6.7
0D3C:  BSF    FA6.2
0D3E:  MOVF   FF2,W
0D40:  MOVWF  00
0D42:  BCF    FF2.7
0D44:  MOVLB  F
0D46:  MOVLW  55
0D48:  MOVWF  FA7
0D4A:  MOVLW  AA
0D4C:  MOVWF  FA7
0D4E:  BSF    FA6.1
0D50:  BTFSC  FA6.1
0D52:  BRA    0D50
0D54:  BCF    FA6.2
0D56:  MOVF   00,W
0D58:  IORWF  FF2,F
0D5A:  MOVLW  14
0D5C:  MOVLB  0
0D5E:  MOVWF  xC6
0D60:  RCALL  06E2
....................    } 
....................    if(segundos>60){ 
0D62:  MOVF   21,W
0D64:  SUBLW  3C
0D66:  BC    0D9A
....................       segundos=0;write_eeprom(7,0);delay_ms(20); 
0D68:  CLRF   21
0D6A:  MOVLW  07
0D6C:  MOVWF  FA9
0D6E:  CLRF   FA8
0D70:  BCF    FA6.6
0D72:  BCF    FA6.7
0D74:  BSF    FA6.2
0D76:  MOVF   FF2,W
0D78:  MOVWF  00
0D7A:  BCF    FF2.7
0D7C:  MOVLB  F
0D7E:  MOVLW  55
0D80:  MOVWF  FA7
0D82:  MOVLW  AA
0D84:  MOVWF  FA7
0D86:  BSF    FA6.1
0D88:  BTFSC  FA6.1
0D8A:  BRA    0D88
0D8C:  BCF    FA6.2
0D8E:  MOVF   00,W
0D90:  IORWF  FF2,F
0D92:  MOVLW  14
0D94:  MOVLB  0
0D96:  MOVWF  xC6
0D98:  RCALL  06E2
....................    } 
....................    if(minutos>60){ 
0D9A:  MOVF   22,W
0D9C:  SUBLW  3C
0D9E:  BC    0DD2
....................       minutos=0;write_eeprom(8,0);delay_ms(20); 
0DA0:  CLRF   22
0DA2:  MOVLW  08
0DA4:  MOVWF  FA9
0DA6:  CLRF   FA8
0DA8:  BCF    FA6.6
0DAA:  BCF    FA6.7
0DAC:  BSF    FA6.2
0DAE:  MOVF   FF2,W
0DB0:  MOVWF  00
0DB2:  BCF    FF2.7
0DB4:  MOVLB  F
0DB6:  MOVLW  55
0DB8:  MOVWF  FA7
0DBA:  MOVLW  AA
0DBC:  MOVWF  FA7
0DBE:  BSF    FA6.1
0DC0:  BTFSC  FA6.1
0DC2:  BRA    0DC0
0DC4:  BCF    FA6.2
0DC6:  MOVF   00,W
0DC8:  IORWF  FF2,F
0DCA:  MOVLW  14
0DCC:  MOVLB  0
0DCE:  MOVWF  xC6
0DD0:  RCALL  06E2
....................    } 
....................    if(horas>10000){ 
0DD2:  MOVF   41,W
0DD4:  SUBLW  26
0DD6:  BC    0E48
0DD8:  XORLW  FF
0DDA:  BNZ   0DE2
0DDC:  MOVF   40,W
0DDE:  SUBLW  10
0DE0:  BC    0E48
....................       horas=0;write_eeprom(9,10);delay_ms(20);write_eeprom(10,0);delay_ms(20); 
0DE2:  CLRF   41
0DE4:  CLRF   40
0DE6:  MOVLW  09
0DE8:  MOVWF  FA9
0DEA:  MOVLW  0A
0DEC:  MOVWF  FA8
0DEE:  BCF    FA6.6
0DF0:  BCF    FA6.7
0DF2:  BSF    FA6.2
0DF4:  MOVF   FF2,W
0DF6:  MOVWF  00
0DF8:  BCF    FF2.7
0DFA:  MOVLB  F
0DFC:  MOVLW  55
0DFE:  MOVWF  FA7
0E00:  MOVLW  AA
0E02:  MOVWF  FA7
0E04:  BSF    FA6.1
0E06:  BTFSC  FA6.1
0E08:  BRA    0E06
0E0A:  BCF    FA6.2
0E0C:  MOVF   00,W
0E0E:  IORWF  FF2,F
0E10:  MOVLW  14
0E12:  MOVLB  0
0E14:  MOVWF  xC6
0E16:  RCALL  06E2
0E18:  MOVLW  0A
0E1A:  MOVWF  FA9
0E1C:  CLRF   FA8
0E1E:  BCF    FA6.6
0E20:  BCF    FA6.7
0E22:  BSF    FA6.2
0E24:  MOVF   FF2,W
0E26:  MOVWF  00
0E28:  BCF    FF2.7
0E2A:  MOVLB  F
0E2C:  MOVLW  55
0E2E:  MOVWF  FA7
0E30:  MOVLW  AA
0E32:  MOVWF  FA7
0E34:  BSF    FA6.1
0E36:  BTFSC  FA6.1
0E38:  BRA    0E36
0E3A:  BCF    FA6.2
0E3C:  MOVF   00,W
0E3E:  IORWF  FF2,F
0E40:  MOVLW  14
0E42:  MOVLB  0
0E44:  MOVWF  xC6
0E46:  RCALL  06E2
....................    } 
....................    if(G>1000){ 
0E48:  CLRF   xC6
0E4A:  CLRF   xC5
0E4C:  MOVLW  7A
0E4E:  MOVWF  xC4
0E50:  MOVLW  88
0E52:  MOVWF  xC3
0E54:  MOVFF  A9,CA
0E58:  MOVFF  A8,C9
0E5C:  MOVFF  A7,C8
0E60:  MOVFF  A6,C7
0E64:  RCALL  0B36
0E66:  BNC   0ED6
....................       G=240;write_eeprom(11,240);delay_ms(20);write_eeprom(12,0);delay_ms(20); 
0E68:  CLRF   xA9
0E6A:  CLRF   xA8
0E6C:  MOVLW  70
0E6E:  MOVWF  xA7
0E70:  MOVLW  86
0E72:  MOVWF  xA6
0E74:  MOVLW  0B
0E76:  MOVWF  FA9
0E78:  MOVLW  F0
0E7A:  MOVWF  FA8
0E7C:  BCF    FA6.6
0E7E:  BCF    FA6.7
0E80:  BSF    FA6.2
0E82:  MOVF   FF2,W
0E84:  MOVWF  00
0E86:  BCF    FF2.7
0E88:  MOVLB  F
0E8A:  MOVLW  55
0E8C:  MOVWF  FA7
0E8E:  MOVLW  AA
0E90:  MOVWF  FA7
0E92:  BSF    FA6.1
0E94:  BTFSC  FA6.1
0E96:  BRA    0E94
0E98:  BCF    FA6.2
0E9A:  MOVF   00,W
0E9C:  IORWF  FF2,F
0E9E:  MOVLW  14
0EA0:  MOVLB  0
0EA2:  MOVWF  xC6
0EA4:  RCALL  06E2
0EA6:  MOVLW  0C
0EA8:  MOVWF  FA9
0EAA:  CLRF   FA8
0EAC:  BCF    FA6.6
0EAE:  BCF    FA6.7
0EB0:  BSF    FA6.2
0EB2:  MOVF   FF2,W
0EB4:  MOVWF  00
0EB6:  BCF    FF2.7
0EB8:  MOVLB  F
0EBA:  MOVLW  55
0EBC:  MOVWF  FA7
0EBE:  MOVLW  AA
0EC0:  MOVWF  FA7
0EC2:  BSF    FA6.1
0EC4:  BTFSC  FA6.1
0EC6:  BRA    0EC4
0EC8:  BCF    FA6.2
0ECA:  MOVF   00,W
0ECC:  IORWF  FF2,F
0ECE:  MOVLW  14
0ED0:  MOVLB  0
0ED2:  MOVWF  xC6
0ED4:  RCALL  06E2
....................    } 
....................     
.................... } 
0ED6:  GOTO   1FAC (RETURN)
....................  
....................  
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    set_timer1(5536);  // 5 ms 
*
0184:  MOVLW  15
0186:  MOVWF  FCF
0188:  MOVLW  A0
018A:  MOVWF  FCE
....................    //set_timer1(45536);  // 5 ms 
....................    tiempos++; 
018C:  INCF   3E,F
018E:  BTFSC  FD8.2
0190:  INCF   3F,F
....................     
....................    if(Bloqueo){ 
0192:  BTFSS  xAA.0
0194:  BRA    019C
....................       tiempobloqueo++; 
0196:  INCF   44,F
0198:  BTFSC  FD8.2
019A:  INCF   45,F
....................    } 
....................     
....................    if(tiempos>=200)   // Ha transcurrido una decima de segundo (PIC18F4550 con XT = 16MHZ) 
019C:  MOVF   3F,F
019E:  BNZ   01A6
01A0:  MOVF   3E,W
01A2:  SUBLW  C7
01A4:  BC    01F4
....................    {tiempos=0;tiemporeset++;Lectura=1; 
01A6:  CLRF   3F
01A8:  CLRF   3E
01AA:  INCF   2F,F
01AC:  BSF    17.0
....................     
....................    if(ActivaBuzzer==1){ 
01AE:  DECFSZ 3D,W
01B0:  BRA    01C6
....................       if(estadobuzzer==0){ 
01B2:  BTFSC  17.3
01B4:  BRA    01BC
....................          Buzzer_off; 
01B6:  BCF    F8C.0
01B8:  BCF    F95.0
....................       }else{ 
01BA:  BRA    01C4
....................          if(estadoalarma==1) 
01BC:  BTFSS  17.4
01BE:  BRA    01C4
....................             Buzzer_on; 
01C0:  BSF    F8C.0
01C2:  BCF    F95.0
....................       } 
....................       estadobuzzer=!estadobuzzer; 
01C4:  BTG    17.3
....................    } 
....................    //----------------------------- Tiempo Total-----------------------------// 
....................    if(estadouv==1){ 
01C6:  BTFSS  16.0
01C8:  BRA    01F4
....................       segundos++; 
01CA:  INCF   21,F
....................       if(tiempo_cumplido==0) 
01CC:  BTFSC  16.7
01CE:  BRA    01F4
....................       { 
....................          if(tempo_segundos>0) 
01D0:  MOVF   28,F
01D2:  BZ    01D8
....................          { 
....................             tempo_segundos--; 
01D4:  DECF   28,F
....................          } 
....................          else 
01D6:  BRA    01F4
....................          { 
....................             if(tempo_minutos>0) 
01D8:  MOVF   27,F
01DA:  BZ    01E4
....................             { 
....................                tempo_minutos--; 
01DC:  DECF   27,F
....................                tempo_segundos=59; 
01DE:  MOVLW  3B
01E0:  MOVWF  28
....................             } 
....................             else 
01E2:  BRA    01F4
....................             { 
....................                tiempo_cumplido=1; 
01E4:  BSF    16.7
....................                estadouv=0;Luz_UV_off; 
01E6:  BCF    16.0
01E8:  BCF    F8C.1
01EA:  BCF    F95.1
....................                tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
01EC:  MOVFF  29,27
01F0:  MOVFF  2A,28
....................             } 
....................          } 
....................       } 
....................    } 
....................          
....................    } 
.................... } 
....................  
01F4:  BCF    F9E.0
01F6:  GOTO   0054
.................... void main () 
.................... { 
*
1E2C:  CLRF   FF8
1E2E:  BCF    FD0.7
1E30:  BSF    07.7
1E32:  CLRF   FEA
1E34:  CLRF   FE9
1E36:  BCF    16.0
1E38:  BCF    16.1
1E3A:  BCF    16.2
1E3C:  BCF    16.3
1E3E:  BCF    16.4
1E40:  BCF    16.5
1E42:  BCF    16.6
1E44:  BCF    16.7
1E46:  BCF    17.0
1E48:  BCF    17.1
1E4A:  BCF    17.2
1E4C:  BCF    17.3
1E4E:  BCF    17.4
1E50:  CLRF   18
1E52:  MOVLW  06
1E54:  MOVWF  19
1E56:  MOVLW  02
1E58:  MOVWF  1A
1E5A:  MOVLW  0B
1E5C:  MOVWF  1B
1E5E:  MOVLW  02
1E60:  MOVWF  1C
1E62:  MOVLW  03
1E64:  MOVWF  1D
1E66:  MOVLW  02
1E68:  MOVWF  1E
1E6A:  MOVWF  1F
1E6C:  MOVLW  04
1E6E:  MOVWF  20
1E70:  CLRF   21
1E72:  CLRF   22
1E74:  CLRF   23
1E76:  CLRF   24
1E78:  CLRF   25
1E7A:  CLRF   26
1E7C:  CLRF   27
1E7E:  CLRF   28
1E80:  CLRF   29
1E82:  CLRF   2A
1E84:  CLRF   2B
1E86:  CLRF   2C
1E88:  CLRF   2D
1E8A:  MOVLW  01
1E8C:  MOVWF  2E
1E8E:  CLRF   2F
1E90:  CLRF   30
1E92:  CLRF   31
1E94:  CLRF   3D
1E96:  CLRF   41
1E98:  CLRF   40
1E9A:  CLRF   43
1E9C:  CLRF   42
1E9E:  CLRF   45
1EA0:  CLRF   44
1EA2:  CLRF   x99
1EA4:  CLRF   x98
1EA6:  CLRF   x97
1EA8:  CLRF   x96
1EAA:  CLRF   x9D
1EAC:  CLRF   x9C
1EAE:  CLRF   x9B
1EB0:  CLRF   x9A
1EB2:  CLRF   xA1
1EB4:  CLRF   xA0
1EB6:  CLRF   x9F
1EB8:  CLRF   x9E
1EBA:  CLRF   xA5
1EBC:  CLRF   xA4
1EBE:  CLRF   xA3
1EC0:  CLRF   xA2
1EC2:  CLRF   xA9
1EC4:  CLRF   xA8
1EC6:  CLRF   xA7
1EC8:  MOVLW  80
1ECA:  MOVWF  xA6
1ECC:  BSF    17.5
1ECE:  BCF    17.6
1ED0:  BCF    17.7
1ED2:  BCF    xAA.0
1ED4:  MOVF   FC1,W
1ED6:  ANDLW  C0
1ED8:  IORLW  0F
1EDA:  MOVWF  FC1
1EDC:  MOVLW  07
1EDE:  MOVWF  FB4
1EE0:  MOVLW  3E
1EE2:  MOVWF  32
1EE4:  MOVLW  20
1EE6:  MOVWF  33
1EE8:  MOVLW  5E
1EEA:  MOVWF  34
1EEC:  CLRF   35
1EEE:  CLRF   36
1EF0:  CLRF   37
1EF2:  CLRF   38
1EF4:  CLRF   39
1EF6:  CLRF   3A
1EF8:  CLRF   3B
1EFA:  CLRF   3C
1EFC:  CLRF   46
1EFE:  CLRF   47
1F00:  CLRF   48
1F02:  CLRF   49
1F04:  CLRF   4A
1F06:  CLRF   4B
1F08:  CLRF   4C
1F0A:  CLRF   4D
1F0C:  CLRF   4E
1F0E:  CLRF   4F
1F10:  CLRF   50
1F12:  CLRF   51
1F14:  CLRF   52
1F16:  CLRF   53
1F18:  CLRF   54
1F1A:  CLRF   55
1F1C:  CLRF   56
1F1E:  CLRF   57
1F20:  CLRF   58
1F22:  CLRF   59
1F24:  CLRF   5A
1F26:  CLRF   5B
1F28:  CLRF   5C
1F2A:  CLRF   5D
1F2C:  CLRF   5E
1F2E:  CLRF   5F
1F30:  CLRF   x60
1F32:  CLRF   x61
1F34:  CLRF   x62
1F36:  CLRF   x63
1F38:  CLRF   x64
1F3A:  CLRF   x65
1F3C:  CLRF   x66
1F3E:  CLRF   x67
1F40:  CLRF   x68
1F42:  CLRF   x69
1F44:  CLRF   x6A
1F46:  CLRF   x6B
1F48:  CLRF   x6C
1F4A:  CLRF   x6D
1F4C:  CLRF   x6E
1F4E:  CLRF   x6F
1F50:  CLRF   x70
1F52:  CLRF   x71
1F54:  CLRF   x72
1F56:  CLRF   x73
1F58:  CLRF   x74
1F5A:  CLRF   x75
1F5C:  CLRF   x76
1F5E:  CLRF   x77
1F60:  CLRF   x78
1F62:  CLRF   x79
1F64:  CLRF   x7A
1F66:  CLRF   x7B
1F68:  CLRF   x7C
1F6A:  CLRF   x7D
1F6C:  CLRF   x7E
1F6E:  CLRF   x7F
1F70:  CLRF   x80
1F72:  CLRF   x81
1F74:  CLRF   x82
1F76:  CLRF   x83
1F78:  CLRF   x84
1F7A:  CLRF   x85
1F7C:  CLRF   x86
1F7E:  CLRF   x87
1F80:  CLRF   x88
1F82:  CLRF   x89
1F84:  CLRF   x8A
1F86:  CLRF   x8B
1F88:  CLRF   x8C
1F8A:  CLRF   x8D
1F8C:  CLRF   x8E
1F8E:  CLRF   x8F
1F90:  CLRF   x90
1F92:  CLRF   x91
1F94:  CLRF   x92
1F96:  CLRF   x93
1F98:  CLRF   x94
1F9A:  CLRF   x95
....................    ConfigInterrupciones(); 
1F9C:  GOTO   07CA
....................    MensajeBienvenida(); 
1FA0:  GOTO   08DA
....................    LeeEEPROM();  
1FA4:  GOTO   0976
....................    LimitaValores(); 
1FA8:  GOTO   0BAC
....................  
....................    while(true){ 
....................  
.................... //------------Menu0------------------------------------------------------------------    
....................    if(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
1FAC:  MOVF   18,F
1FAE:  BTFSS  FD8.2
1FB0:  BRA    23B4
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
1FB2:  MOVLW  01
1FB4:  MOVWF  xC1
1FB6:  MOVWF  xC2
1FB8:  CALL   07FA
....................          printf(lcd_putc,"     Ingrese        "); 
1FBC:  MOVLW  FA
1FBE:  MOVWF  FF6
1FC0:  MOVLW  01
1FC2:  MOVWF  FF7
1FC4:  CALL   08BA
....................          lcd_gotoxy(1,2); 
1FC8:  MOVLW  01
1FCA:  MOVWF  xC1
1FCC:  MOVLW  02
1FCE:  MOVWF  xC2
1FD0:  CALL   07FA
....................          printf(lcd_putc,"    Contraseña      "); 
1FD4:  MOVLW  10
1FD6:  MOVWF  FF6
1FD8:  MOVLW  02
1FDA:  MOVWF  FF7
1FDC:  CALL   08BA
....................          lcd_gotoxy(1,3); 
1FE0:  MOVLW  01
1FE2:  MOVWF  xC1
1FE4:  MOVLW  03
1FE6:  MOVWF  xC2
1FE8:  CALL   07FA
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
1FEC:  MOVLW  26
1FEE:  MOVWF  FF6
1FF0:  MOVLW  02
1FF2:  MOVWF  FF7
1FF4:  MOVLW  0A
1FF6:  MOVWF  xB3
1FF8:  CALL   0EDA
1FFC:  MOVFF  35,AF
2000:  MOVLW  1F
2002:  MOVWF  xB0
2004:  CALL   0F20
2008:  MOVFF  36,AF
200C:  MOVLW  1F
200E:  MOVWF  xB0
2010:  CALL   0F20
2014:  MOVFF  37,AF
2018:  MOVLW  1F
201A:  MOVWF  xB0
201C:  CALL   0F20
2020:  MOVFF  38,AF
2024:  MOVLW  1F
2026:  MOVWF  xB0
2028:  CALL   0F20
202C:  MOVLW  20
202E:  MOVWF  xC0
2030:  CALL   085C
2034:  MOVLW  20
2036:  MOVWF  xC0
2038:  CALL   085C
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
203C:  MOVFF  1B,C1
2040:  MOVLW  04
2042:  MOVWF  xC2
2044:  CALL   07FA
....................          lcd_putc(t[2]); 
2048:  MOVFF  34,C0
204C:  CALL   085C
....................           
....................          if(unidad>11&&unidad<14){ 
2050:  MOVF   1B,W
2052:  SUBLW  0B
2054:  BC    2074
2056:  MOVF   1B,W
2058:  SUBLW  0D
205A:  BNC   2074
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
205C:  MOVLW  01
205E:  SUBWF  1B,W
2060:  MOVWF  xAF
2062:  MOVWF  xC1
2064:  MOVLW  04
2066:  MOVWF  xC2
2068:  CALL   07FA
....................             lcd_putc(t[1]); 
206C:  MOVFF  33,C0
2070:  CALL   085C
....................          } 
....................           
....................          Cambio=OFF; 
2074:  BCF    17.5
....................       //} 
....................        
....................       if(UP){//Si oprime hacia arriba 
2076:  BSF    F92.5
2078:  BTFSS  F80.5
207A:  BRA    20AE
....................          delay_ms(20); 
207C:  MOVLW  14
207E:  MOVWF  xC6
2080:  CALL   06E2
....................          if(UP){ 
2084:  BSF    F92.5
2086:  BTFSS  F80.5
2088:  BRA    20AC
....................             if(Flanco == 0) { 
208A:  BTFSC  16.3
208C:  BRA    20AC
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
208E:  MOVLW  0B
2090:  SUBWF  1B,W
2092:  CLRF   03
2094:  ADDLW  35
2096:  MOVWF  FE9
2098:  MOVLW  00
209A:  ADDWFC 03,W
209C:  MOVWF  FEA
209E:  INCF   FEF,F
20A0:  BSF    16.3
20A2:  MOVLW  1E
20A4:  MOVWF  xC6
20A6:  CALL   06E2
20AA:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
20AC:  BRA    20B0
....................          Flanco = 0; 
20AE:  BCF    16.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
20B0:  BSF    F96.0
20B2:  BTFSS  F84.0
20B4:  BRA    20E8
....................          delay_ms(20); 
20B6:  MOVLW  14
20B8:  MOVWF  xC6
20BA:  CALL   06E2
....................          if(DOWN){ 
20BE:  BSF    F96.0
20C0:  BTFSS  F84.0
20C2:  BRA    20E6
....................             if(Flanco2 == 0) { 
20C4:  BTFSC  16.5
20C6:  BRA    20E6
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
20C8:  MOVLW  0B
20CA:  SUBWF  1B,W
20CC:  CLRF   03
20CE:  ADDLW  35
20D0:  MOVWF  FE9
20D2:  MOVLW  00
20D4:  ADDWFC 03,W
20D6:  MOVWF  FEA
20D8:  DECF   FEF,F
20DA:  BSF    16.5
20DC:  MOVLW  1E
20DE:  MOVWF  xC6
20E0:  CALL   06E2
20E4:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
20E6:  BRA    20EA
....................          Flanco2 = 0; 
20E8:  BCF    16.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
20EA:  BSF    F96.1
20EC:  BTFSS  F84.1
20EE:  BRA    211A
....................          delay_ms(20); 
20F0:  MOVLW  14
20F2:  MOVWF  xC6
20F4:  CALL   06E2
....................          if(RIGHT){ 
20F8:  BSF    F96.1
20FA:  BTFSS  F84.1
20FC:  BRA    2118
....................             if(Flanco1 == 0) { 
20FE:  BTFSC  16.4
2100:  BRA    2118
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2102:  BSF    16.4
2104:  INCF   1B,F
2106:  MOVLW  1E
2108:  MOVWF  xC6
210A:  CALL   06E2
210E:  MOVLW  0C
2110:  MOVWF  xC0
2112:  CALL   085C
2116:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2118:  BRA    211C
....................          Flanco1 = 0; 
211A:  BCF    16.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
211C:  BSF    F96.2
211E:  BTFSS  F84.2
2120:  BRA    214C
....................          delay_ms(150); 
2122:  MOVLW  96
2124:  MOVWF  xC6
2126:  CALL   06E2
....................          if(IZQU){ 
212A:  BSF    F96.2
212C:  BTFSS  F84.2
212E:  BRA    214A
....................             if(Flanco3 == 0){ 
2130:  BTFSC  16.6
2132:  BRA    214A
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2134:  BSF    16.6
2136:  DECF   1B,F
2138:  MOVLW  1E
213A:  MOVWF  xC6
213C:  CALL   06E2
2140:  MOVLW  0C
2142:  MOVWF  xC0
2144:  CALL   085C
2148:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
214A:  BRA    214E
....................         Flanco3 = 0; 
214C:  BCF    16.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
214E:  MOVLW  0B
2150:  SUBWF  1B,W
2152:  CLRF   03
2154:  ADDLW  35
2156:  MOVWF  FE9
2158:  MOVLW  00
215A:  ADDWFC 03,W
215C:  MOVWF  FEA
215E:  BTFSC  FEF.7
2160:  BRA    2164
2162:  BRA    2178
....................          clave[unidad-11]=9; 
2164:  MOVLW  0B
2166:  SUBWF  1B,W
2168:  CLRF   03
216A:  ADDLW  35
216C:  MOVWF  FE9
216E:  MOVLW  00
2170:  ADDWFC 03,W
2172:  MOVWF  FEA
2174:  MOVLW  09
2176:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
2178:  MOVLW  0B
217A:  SUBWF  1B,W
217C:  CLRF   03
217E:  ADDLW  35
2180:  MOVWF  FE9
2182:  MOVLW  00
2184:  ADDWFC 03,W
2186:  MOVWF  FEA
2188:  BTFSC  FEF.7
218A:  BRA    21A4
218C:  MOVF   FEF,W
218E:  SUBLW  09
2190:  BC    21A4
....................          clave[unidad-11]=0; 
2192:  MOVLW  0B
2194:  SUBWF  1B,W
2196:  CLRF   03
2198:  ADDLW  35
219A:  MOVWF  FE9
219C:  MOVLW  00
219E:  ADDWFC 03,W
21A0:  MOVWF  FEA
21A2:  CLRF   FEF
....................         
....................       if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
21A4:  MOVF   1B,W
21A6:  SUBLW  0A
21A8:  BNC   21AE
....................          unidad=11; 
21AA:  MOVLW  0B
21AC:  MOVWF  1B
....................              
....................       if(unidad>14){             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
21AE:  MOVF   1B,W
21B0:  SUBLW  0E
21B2:  BTFSC  FD8.0
21B4:  BRA    23B4
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2){ // Si Ingresa clave para reset general del sistema. 
21B6:  MOVF   35,W
21B8:  SUBLW  03
21BA:  BNZ   2296
21BC:  MOVF   36,W
21BE:  SUBLW  08
21C0:  BNZ   2296
21C2:  MOVF   37,W
21C4:  SUBLW  09
21C6:  BNZ   2296
21C8:  MOVF   38,W
21CA:  SUBLW  02
21CC:  BNZ   2296
....................             write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
21CE:  CLRF   FA9
21D0:  CLRF   FA8
21D2:  BCF    FA6.6
21D4:  BCF    FA6.7
21D6:  BSF    FA6.2
21D8:  MOVF   FF2,W
21DA:  MOVWF  00
21DC:  BCF    FF2.7
21DE:  MOVLB  F
21E0:  MOVLW  55
21E2:  MOVWF  FA7
21E4:  MOVLW  AA
21E6:  MOVWF  FA7
21E8:  BSF    FA6.1
21EA:  BTFSC  FA6.1
21EC:  BRA    21EA
21EE:  BCF    FA6.2
21F0:  MOVF   00,W
21F2:  IORWF  FF2,F
21F4:  MOVLW  14
21F6:  MOVLB  0
21F8:  MOVWF  xC6
21FA:  CALL   06E2
21FE:  MOVLW  01
2200:  MOVWF  FA9
2202:  CLRF   FA8
2204:  BCF    FA6.6
2206:  BCF    FA6.7
2208:  BSF    FA6.2
220A:  MOVF   FF2,W
220C:  MOVWF  00
220E:  BCF    FF2.7
2210:  MOVLB  F
2212:  MOVLW  55
2214:  MOVWF  FA7
2216:  MOVLW  AA
2218:  MOVWF  FA7
221A:  BSF    FA6.1
221C:  BTFSC  FA6.1
221E:  BRA    221C
2220:  BCF    FA6.2
2222:  MOVF   00,W
2224:  IORWF  FF2,F
2226:  MOVLW  14
2228:  MOVLB  0
222A:  MOVWF  xC6
222C:  CALL   06E2
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
2230:  MOVLW  02
2232:  MOVWF  FA9
2234:  CLRF   FA8
2236:  BCF    FA6.6
2238:  BCF    FA6.7
223A:  BSF    FA6.2
223C:  MOVF   FF2,W
223E:  MOVWF  00
2240:  BCF    FF2.7
2242:  MOVLB  F
2244:  MOVLW  55
2246:  MOVWF  FA7
2248:  MOVLW  AA
224A:  MOVWF  FA7
224C:  BSF    FA6.1
224E:  BTFSC  FA6.1
2250:  BRA    224E
2252:  BCF    FA6.2
2254:  MOVF   00,W
2256:  IORWF  FF2,F
2258:  MOVLW  14
225A:  MOVLB  0
225C:  MOVWF  xC6
225E:  CALL   06E2
2262:  MOVLW  03
2264:  MOVWF  FA9
2266:  CLRF   FA8
2268:  BCF    FA6.6
226A:  BCF    FA6.7
226C:  BSF    FA6.2
226E:  MOVF   FF2,W
2270:  MOVWF  00
2272:  BCF    FF2.7
2274:  MOVLB  F
2276:  MOVLW  55
2278:  MOVWF  FA7
227A:  MOVLW  AA
227C:  MOVWF  FA7
227E:  BSF    FA6.1
2280:  BTFSC  FA6.1
2282:  BRA    2280
2284:  BCF    FA6.2
2286:  MOVF   00,W
2288:  IORWF  FF2,F
228A:  MOVLW  14
228C:  MOVLB  0
228E:  MOVWF  xC6
2290:  CALL   06E2
....................              reset_cpu(); 
2294:  RESET
....................          } 
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]){ // Si las claves coinciden pasa a Menu Principal. 
2296:  MOVF   39,W
2298:  SUBWF  35,W
229A:  BNZ   233A
229C:  MOVF   3A,W
229E:  SUBWF  36,W
22A0:  BNZ   233A
22A2:  MOVF   3B,W
22A4:  SUBWF  37,W
22A6:  BNZ   233A
22A8:  MOVF   3C,W
22AA:  SUBWF  38,W
22AC:  BNZ   233A
....................             lcd_gotoxy(1,1); 
22AE:  MOVLW  01
22B0:  MOVWF  xC1
22B2:  MOVWF  xC2
22B4:  CALL   07FA
....................             printf(lcd_putc,"                   "); 
22B8:  MOVLW  3C
22BA:  MOVWF  FF6
22BC:  MOVLW  02
22BE:  MOVWF  FF7
22C0:  CALL   08BA
....................             lcd_gotoxy(1,2); 
22C4:  MOVLW  01
22C6:  MOVWF  xC1
22C8:  MOVLW  02
22CA:  MOVWF  xC2
22CC:  CALL   07FA
....................             printf(lcd_putc,"     Contraseña    "); 
22D0:  MOVLW  50
22D2:  MOVWF  FF6
22D4:  MOVLW  02
22D6:  MOVWF  FF7
22D8:  CALL   08BA
....................             lcd_gotoxy(1,3); 
22DC:  MOVLW  01
22DE:  MOVWF  xC1
22E0:  MOVLW  03
22E2:  MOVWF  xC2
22E4:  CALL   07FA
....................             printf(lcd_putc,"      Correcta     "); 
22E8:  MOVLW  64
22EA:  MOVWF  FF6
22EC:  MOVLW  02
22EE:  MOVWF  FF7
22F0:  CALL   08BA
....................             lcd_gotoxy(1,4); 
22F4:  MOVLW  01
22F6:  MOVWF  xC1
22F8:  MOVLW  04
22FA:  MOVWF  xC2
22FC:  CALL   07FA
....................             printf(lcd_putc,"                   "); 
2300:  MOVLW  78
2302:  MOVWF  FF6
2304:  MOVLW  02
2306:  MOVWF  FF7
2308:  CALL   08BA
....................             delay_ms(1000);Menu=50;unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
230C:  MOVLW  04
230E:  MOVWF  xAF
2310:  MOVLW  FA
2312:  MOVWF  xC6
2314:  CALL   06E2
2318:  DECFSZ xAF,F
231A:  BRA    2310
231C:  MOVLW  32
231E:  MOVWF  18
2320:  MOVLW  0B
2322:  MOVWF  1B
2324:  MOVLW  0C
2326:  MOVWF  xC0
2328:  CALL   085C
232C:  BSF    17.5
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
232E:  CLRF   35
2330:  CLRF   36
2332:  CLRF   37
2334:  CLRF   38
2336:  BSF    17.5
....................          } 
....................          else{                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
2338:  BRA    23B4
....................             lcd_gotoxy(1,1); 
233A:  MOVLW  01
233C:  MOVWF  xC1
233E:  MOVWF  xC2
2340:  CALL   07FA
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
2344:  MOVLW  01
2346:  MOVWF  xC1
2348:  MOVLW  02
234A:  MOVWF  xC2
234C:  CALL   07FA
....................             printf(lcd_putc,"     Contraseña    "); 
2350:  MOVLW  8C
2352:  MOVWF  FF6
2354:  MOVLW  02
2356:  MOVWF  FF7
2358:  CALL   08BA
....................             lcd_gotoxy(1,3); 
235C:  MOVLW  01
235E:  MOVWF  xC1
2360:  MOVLW  03
2362:  MOVWF  xC2
2364:  CALL   07FA
....................             printf(lcd_putc,"     Incorrecta    "); 
2368:  MOVLW  A0
236A:  MOVWF  FF6
236C:  MOVLW  02
236E:  MOVWF  FF7
2370:  CALL   08BA
....................             lcd_gotoxy(1,4); 
2374:  MOVLW  01
2376:  MOVWF  xC1
2378:  MOVLW  04
237A:  MOVWF  xC2
237C:  CALL   07FA
....................             printf(lcd_putc,"                   "); 
2380:  MOVLW  B4
2382:  MOVWF  FF6
2384:  MOVLW  02
2386:  MOVWF  FF7
2388:  CALL   08BA
....................             delay_ms(1000);unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
238C:  MOVLW  04
238E:  MOVWF  xAF
2390:  MOVLW  FA
2392:  MOVWF  xC6
2394:  CALL   06E2
2398:  DECFSZ xAF,F
239A:  BRA    2390
239C:  MOVLW  0B
239E:  MOVWF  1B
23A0:  MOVLW  0C
23A2:  MOVWF  xC0
23A4:  CALL   085C
23A8:  BSF    17.5
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
23AA:  CLRF   35
23AC:  CLRF   36
23AE:  CLRF   37
23B0:  CLRF   38
23B2:  BSF    17.5
....................          } 
....................       } 
....................    } 
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
23B4:  DECFSZ 18,W
23B6:  BRA    25EE
....................       EliminaRuido(); 
23B8:  CALL   0004
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
23BC:  MOVLW  01
23BE:  MOVWF  xC1
23C0:  MOVWF  xC2
23C2:  CALL   07FA
....................          printf(lcd_putc,"---MENU PRINCIPAL---"); 
23C6:  MOVLW  C8
23C8:  MOVWF  FF6
23CA:  MOVLW  02
23CC:  MOVWF  FF7
23CE:  CALL   08BA
....................          mensajes(1+paso,2); 
23D2:  MOVLW  01
23D4:  ADDWF  31,W
23D6:  MOVWF  xAF
23D8:  MOVWF  xB0
23DA:  MOVLW  02
23DC:  MOVWF  xB1
23DE:  CALL   0FE8
....................          mensajes(2+paso,3); 
23E2:  MOVLW  02
23E4:  ADDWF  31,W
23E6:  MOVWF  xAF
23E8:  MOVWF  xB0
23EA:  MOVLW  03
23EC:  MOVWF  xB1
23EE:  CALL   0FE8
....................          mensajes(3+paso,4); 
23F2:  MOVLW  03
23F4:  ADDWF  31,W
23F6:  MOVWF  xAF
23F8:  MOVWF  xB0
23FA:  MOVLW  04
23FC:  MOVWF  xB1
23FE:  CALL   0FE8
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
2402:  MOVLW  01
2404:  MOVWF  xC1
2406:  MOVFF  1C,C2
240A:  CALL   07FA
....................         lcd_putc(t[0]); 
240E:  MOVFF  32,C0
2412:  CALL   085C
....................  
....................         if(Flecha==2) 
2416:  MOVF   1C,W
2418:  SUBLW  02
241A:  BNZ   2444
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
241C:  MOVLW  01
241E:  MOVWF  xC1
2420:  MOVLW  04
2422:  MOVWF  xC2
2424:  CALL   07FA
....................             lcd_putc(t[1]); 
2428:  MOVFF  33,C0
242C:  CALL   085C
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
2430:  MOVLW  01
2432:  MOVWF  xC1
2434:  MOVLW  03
2436:  MOVWF  xC2
2438:  CALL   07FA
....................             lcd_putc(t[1]); 
243C:  MOVFF  33,C0
2440:  CALL   085C
....................           } 
....................          
....................         if(Flecha==4) 
2444:  MOVF   1C,W
2446:  SUBLW  04
2448:  BNZ   2472
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
244A:  MOVLW  01
244C:  MOVWF  xC1
244E:  MOVLW  02
2450:  MOVWF  xC2
2452:  CALL   07FA
....................             lcd_putc(t[1]); 
2456:  MOVFF  33,C0
245A:  CALL   085C
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
245E:  MOVLW  01
2460:  MOVWF  xC1
2462:  MOVLW  03
2464:  MOVWF  xC2
2466:  CALL   07FA
....................             lcd_putc(t[1]); 
246A:  MOVFF  33,C0
246E:  CALL   085C
....................           } 
....................          
....................         if(Flecha==3) 
2472:  MOVF   1C,W
2474:  SUBLW  03
2476:  BNZ   24A0
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
2478:  MOVLW  01
247A:  MOVWF  xC1
247C:  MOVLW  04
247E:  MOVWF  xC2
2480:  CALL   07FA
....................             lcd_putc(t[1]); 
2484:  MOVFF  33,C0
2488:  CALL   085C
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
248C:  MOVLW  01
248E:  MOVWF  xC1
2490:  MOVLW  02
2492:  MOVWF  xC2
2494:  CALL   07FA
....................             lcd_putc(t[1]); 
2498:  MOVFF  33,C0
249C:  CALL   085C
....................           } 
....................          Cambio=OFF; 
24A0:  BCF    17.5
....................      // } 
....................          
....................       if(UP){//Si oprime hacia arriba 
24A2:  BSF    F92.5
24A4:  BTFSS  F80.5
24A6:  BRA    24D2
....................          delay_ms(20); 
24A8:  MOVLW  14
24AA:  MOVWF  xC6
24AC:  CALL   06E2
....................          if(UP){ 
24B0:  BSF    F92.5
24B2:  BTFSS  F80.5
24B4:  BRA    24D0
....................             if(Flanco == 0){ 
24B6:  BTFSC  16.3
24B8:  BRA    24D0
....................                Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30);Cambio=ON; 
24BA:  DECF   1E,F
24BC:  DECF   1C,F
24BE:  MOVLW  01
24C0:  ADDWF  1C,W
24C2:  MOVWF  1D
24C4:  BSF    16.3
24C6:  MOVLW  1E
24C8:  MOVWF  xC6
24CA:  CALL   06E2
24CE:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
24D0:  BRA    24D4
....................          Flanco = 0; 
24D2:  BCF    16.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
24D4:  BSF    F96.0
24D6:  BTFSS  F84.0
24D8:  BRA    2504
....................          delay_ms(20); 
24DA:  MOVLW  14
24DC:  MOVWF  xC6
24DE:  CALL   06E2
....................          if(DOWN){ 
24E2:  BSF    F96.0
24E4:  BTFSS  F84.0
24E6:  BRA    2502
....................             if(Flanco2 == 0){ 
24E8:  BTFSC  16.5
24EA:  BRA    2502
....................                Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30);Cambio=ON; 
24EC:  INCF   1E,F
24EE:  INCF   1C,F
24F0:  MOVLW  01
24F2:  SUBWF  1C,W
24F4:  MOVWF  1D
24F6:  BSF    16.5
24F8:  MOVLW  1E
24FA:  MOVWF  xC6
24FC:  CALL   06E2
2500:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2502:  BRA    2506
....................          Flanco2 = 0; 
2504:  BCF    16.5
....................       } 
....................     
....................          
....................       if(Flecha2>nMenuH){ 
2506:  MOVF   1E,W
2508:  SUBWF  20,W
250A:  BC    251C
....................          paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4; 
250C:  INCF   31,F
250E:  MOVFF  1E,20
2512:  MOVLW  02
2514:  SUBWF  20,W
2516:  MOVWF  1F
2518:  MOVLW  04
251A:  MOVWF  1C
....................       } 
....................          
....................       if(Flecha2<nMenuL){ 
251C:  MOVF   1F,W
251E:  SUBWF  1E,W
2520:  BC    2532
....................          paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2; 
2522:  DECF   31,F
2524:  MOVFF  1E,1F
2528:  MOVLW  02
252A:  ADDWF  1F,W
252C:  MOVWF  20
252E:  MOVLW  02
2530:  MOVWF  1C
....................       } 
....................          
....................       if(Flecha2>n_opcionH){ 
2532:  MOVF   1E,W
2534:  SUBWF  19,W
2536:  BC    254A
....................          Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2; 
2538:  MOVFF  1A,1E
253C:  MOVLW  02
253E:  MOVWF  1C
2540:  CLRF   31
2542:  MOVFF  1E,1F
2546:  ADDWF  1F,W
2548:  MOVWF  20
....................       } 
....................          
....................       if(Flecha2<n_opcionL){ 
254A:  MOVF   1A,W
254C:  SUBWF  1E,W
254E:  BC    2566
....................          Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2; 
2550:  MOVFF  19,1E
2554:  MOVLW  04
2556:  MOVWF  1C
2558:  SUBWF  19,W
255A:  MOVWF  31
255C:  MOVFF  1E,20
2560:  MOVLW  02
2562:  SUBWF  20,W
2564:  MOVWF  1F
....................       } 
....................          
....................       if(paso<0) 
2566:  BTFSC  31.7
2568:  BRA    256C
256A:  BRA    256E
....................          paso=0; 
256C:  CLRF   31
....................           
....................       if(RIGHT){// Si oprime derecha 
256E:  BSF    F96.1
2570:  BTFSS  F84.1
2572:  BRA    25BA
....................          delay_ms(20); 
2574:  MOVLW  14
2576:  MOVWF  xC6
2578:  CALL   06E2
....................          if(RIGHT){ 
257C:  BSF    F96.1
257E:  BTFSS  F84.1
2580:  BRA    25B6
....................             if(Flanco1 == 0){ 
2582:  BTFSC  16.4
2584:  BRA    25B6
....................                Flanco1 = 1;Menu=Flecha2;Flecha=3;delay_ms(300);printf(lcd_putc,"\f"); 
2586:  BSF    16.4
2588:  MOVFF  1E,18
258C:  MOVLW  03
258E:  MOVWF  1C
2590:  MOVLW  02
2592:  MOVWF  xAF
2594:  MOVLW  96
2596:  MOVWF  xC6
2598:  CALL   06E2
259C:  DECFSZ xAF,F
259E:  BRA    2594
25A0:  MOVLW  0C
25A2:  MOVWF  xC0
25A4:  CALL   085C
....................                if(Menu==6){ 
25A8:  MOVF   18,W
25AA:  SUBLW  06
25AC:  BNZ   25B6
....................                   clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
25AE:  CLRF   35
25B0:  CLRF   36
25B2:  CLRF   37
25B4:  CLRF   38
....................                } 
....................             } 
....................          } 
....................          Cambio=ON; 
25B6:  BSF    17.5
....................       }else{ 
25B8:  BRA    25BC
....................         Flanco1 = 0; 
25BA:  BCF    16.4
....................       } 
....................              
....................       if(IZQU){ 
25BC:  BSF    F96.2
25BE:  BTFSS  F84.2
25C0:  BRA    25EE
....................          delay_ms(20); 
25C2:  MOVLW  14
25C4:  MOVWF  xC6
25C6:  CALL   06E2
....................          if(IZQU){ 
25CA:  BSF    F96.2
25CC:  BTFSS  F84.2
25CE:  BRA    25EE
....................             delay_ms(500);Menu=50;printf(lcd_putc,"\f");Cambio=ON; 
25D0:  MOVLW  02
25D2:  MOVWF  xAF
25D4:  MOVLW  FA
25D6:  MOVWF  xC6
25D8:  CALL   06E2
25DC:  DECFSZ xAF,F
25DE:  BRA    25D4
25E0:  MOVLW  32
25E2:  MOVWF  18
25E4:  MOVLW  0C
25E6:  MOVWF  xC0
25E8:  CALL   085C
25EC:  BSF    17.5
....................          } 
....................       } 
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de tiempo de trabajo de Luz UV    
25EE:  MOVF   18,W
25F0:  SUBLW  02
25F2:  BTFSS  FD8.2
25F4:  BRA    284A
....................    EliminaRuido(); 
25F6:  CALL   0004
....................    //if(Cambio){ 
....................       lcd_gotoxy(1,1); 
25FA:  MOVLW  01
25FC:  MOVWF  xC1
25FE:  MOVWF  xC2
2600:  CALL   07FA
....................       printf(lcd_putc,"    Temporizador     "); 
2604:  MOVLW  DE
2606:  MOVWF  FF6
2608:  MOVLW  02
260A:  MOVWF  FF7
260C:  CALL   08BA
....................       lcd_gotoxy(1,2); 
2610:  MOVLW  01
2612:  MOVWF  xC1
2614:  MOVLW  02
2616:  MOVWF  xC2
2618:  CALL   07FA
....................       printf(lcd_putc,"       Luz UV        "); 
261C:  MOVLW  F4
261E:  MOVWF  FF6
2620:  MOVLW  02
2622:  MOVWF  FF7
2624:  CALL   08BA
....................       lcd_gotoxy(6,3); 
2628:  MOVLW  06
262A:  MOVWF  xC1
262C:  MOVLW  03
262E:  MOVWF  xC2
2630:  CALL   07FA
....................       printf(lcd_putc,"%03u:%02u (M:S)  ",tempo_minutos_pro,tempo_segundos_pro);  
2634:  MOVFF  29,AF
2638:  MOVLW  03
263A:  MOVWF  xB0
263C:  CALL   1090
2640:  MOVLW  3A
2642:  MOVWF  xC0
2644:  CALL   085C
2648:  MOVFF  2A,AF
264C:  MOVLW  01
264E:  MOVWF  xB0
2650:  CALL   1090
2654:  MOVLW  13
2656:  MOVWF  FF6
2658:  MOVLW  03
265A:  MOVWF  FF7
265C:  MOVLW  08
265E:  MOVWF  xB3
2660:  CALL   0EDA
....................        
....................       lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
2664:  MOVLW  06
2666:  ADDWF  2E,W
2668:  MOVWF  xAF
266A:  MOVWF  xC1
266C:  MOVLW  04
266E:  MOVWF  xC2
2670:  CALL   07FA
....................       lcd_putc(t[2]); 
2674:  MOVFF  34,C0
2678:  CALL   085C
....................        
....................       Cambio=OFF; 
267C:  BCF    17.5
.................... //   } 
....................     
....................    if(UP) 
267E:  BSF    F92.5
2680:  BTFSS  F80.5
2682:  BRA    26D0
....................    { 
....................       delay_ms(20); 
2684:  MOVLW  14
2686:  MOVWF  xC6
2688:  CALL   06E2
....................       if(UP){ 
268C:  BSF    F92.5
268E:  BTFSS  F80.5
2690:  BRA    26D0
....................          if(unidad2==1) 
2692:  DECFSZ 2E,W
2694:  BRA    26B0
....................          { 
....................             if(tempo_minutos_pro<240) 
2696:  MOVF   29,W
2698:  SUBLW  EF
269A:  BNC   26B0
....................             { 
....................                tempo_minutos_pro+=5;delay_ms(300); 
269C:  MOVLW  05
269E:  ADDWF  29,F
26A0:  MOVLW  02
26A2:  MOVWF  xAF
26A4:  MOVLW  96
26A6:  MOVWF  xC6
26A8:  CALL   06E2
26AC:  DECFSZ xAF,F
26AE:  BRA    26A4
....................             } 
....................          } 
....................           
....................          if(unidad2==4) 
26B0:  MOVF   2E,W
26B2:  SUBLW  04
26B4:  BNZ   26CE
....................          { 
....................             if(tempo_segundos_pro<59) 
26B6:  MOVF   2A,W
26B8:  SUBLW  3A
26BA:  BNC   26CE
....................             { 
....................                tempo_segundos_pro++;delay_ms(300); 
26BC:  INCF   2A,F
26BE:  MOVLW  02
26C0:  MOVWF  xAF
26C2:  MOVLW  96
26C4:  MOVWF  xC6
26C6:  CALL   06E2
26CA:  DECFSZ xAF,F
26CC:  BRA    26C2
....................             } 
....................          }      
....................       Cambio=ON; 
26CE:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(DOWN) 
26D0:  BSF    F96.0
26D2:  BTFSS  F84.0
26D4:  BRA    271E
....................    { 
....................       delay_ms(20); 
26D6:  MOVLW  14
26D8:  MOVWF  xC6
26DA:  CALL   06E2
....................       if(DOWN){ 
26DE:  BSF    F96.0
26E0:  BTFSS  F84.0
26E2:  BRA    271E
....................          if(unidad2==1) 
26E4:  DECFSZ 2E,W
26E6:  BRA    2700
....................          { 
....................             if(tempo_minutos_pro>0) 
26E8:  MOVF   29,F
26EA:  BZ    2700
....................             { 
....................                tempo_minutos_pro-=5;delay_ms(300); 
26EC:  MOVLW  05
26EE:  SUBWF  29,F
26F0:  MOVLW  02
26F2:  MOVWF  xAF
26F4:  MOVLW  96
26F6:  MOVWF  xC6
26F8:  CALL   06E2
26FC:  DECFSZ xAF,F
26FE:  BRA    26F4
....................             }  
....................          } 
....................           
....................          if(unidad2==4) 
2700:  MOVF   2E,W
2702:  SUBLW  04
2704:  BNZ   271C
....................          { 
....................             if(tempo_segundos_pro>0) 
2706:  MOVF   2A,F
2708:  BZ    271C
....................             { 
....................                tempo_segundos_pro--;delay_ms(300); 
270A:  DECF   2A,F
270C:  MOVLW  02
270E:  MOVWF  xAF
2710:  MOVLW  96
2712:  MOVWF  xC6
2714:  CALL   06E2
2718:  DECFSZ xAF,F
271A:  BRA    2710
....................             }    
....................          } 
....................       Cambio=ON; 
271C:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(RIGHT) 
271E:  BSF    F96.1
2720:  BTFSS  F84.1
2722:  BRA    2760
....................    { 
....................       delay_ms(20); 
2724:  MOVLW  14
2726:  MOVWF  xC6
2728:  CALL   06E2
....................       if(RIGHT){ 
272C:  BSF    F96.1
272E:  BTFSS  F84.1
2730:  BRA    2760
....................          if(unidad2==1) 
2732:  DECFSZ 2E,W
2734:  BRA    273C
....................          { 
....................             unidad2=4; 
2736:  MOVLW  04
2738:  MOVWF  2E
....................          } 
....................          else 
273A:  BRA    2746
....................          { 
....................             if(unidad2==4) 
273C:  MOVF   2E,W
273E:  SUBLW  04
2740:  BNZ   2746
....................             { 
....................                unidad2=1; 
2742:  MOVLW  01
2744:  MOVWF  2E
....................             } 
....................          } 
....................       delay_ms(500); 
2746:  MOVLW  02
2748:  MOVWF  xAF
274A:  MOVLW  FA
274C:  MOVWF  xC6
274E:  CALL   06E2
2752:  DECFSZ xAF,F
2754:  BRA    274A
....................       printf(lcd_putc,"\f"); 
2756:  MOVLW  0C
2758:  MOVWF  xC0
275A:  CALL   085C
....................       Cambio=ON; 
275E:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(IZQU) 
2760:  BSF    F96.2
2762:  BTFSS  F84.2
2764:  BRA    284A
....................    { 
....................       if(IZQU){ 
2766:  BSF    F96.2
2768:  BTFSS  F84.2
276A:  BRA    284A
....................          delay_ms(200); 
276C:  MOVLW  C8
276E:  MOVWF  xC6
2770:  CALL   06E2
....................          printf(lcd_putc,"\f"); 
2774:  MOVLW  0C
2776:  MOVWF  xC0
2778:  CALL   085C
....................          lcd_gotoxy(1,2); 
277C:  MOVLW  01
277E:  MOVWF  xC1
2780:  MOVLW  02
2782:  MOVWF  xC2
2784:  CALL   07FA
....................          printf(lcd_putc,"Tiempo Almacenado"); 
2788:  MOVLW  1C
278A:  MOVWF  FF6
278C:  MOVLW  03
278E:  MOVWF  FF7
2790:  CALL   08BA
....................          lcd_gotoxy(1,3); 
2794:  MOVLW  01
2796:  MOVWF  xC1
2798:  MOVLW  03
279A:  MOVWF  xC2
279C:  CALL   07FA
....................          printf(lcd_putc,"  Correctamente  "); 
27A0:  MOVLW  2E
27A2:  MOVWF  FF6
27A4:  MOVLW  03
27A6:  MOVWF  FF7
27A8:  CALL   08BA
....................          write_eeprom(5,tempo_minutos_pro); 
27AC:  MOVLW  05
27AE:  MOVWF  FA9
27B0:  MOVFF  29,FA8
27B4:  BCF    FA6.6
27B6:  BCF    FA6.7
27B8:  BSF    FA6.2
27BA:  MOVF   FF2,W
27BC:  MOVWF  00
27BE:  BCF    FF2.7
27C0:  MOVLB  F
27C2:  MOVLW  55
27C4:  MOVWF  FA7
27C6:  MOVLW  AA
27C8:  MOVWF  FA7
27CA:  BSF    FA6.1
27CC:  BTFSC  FA6.1
27CE:  BRA    27CC
27D0:  BCF    FA6.2
27D2:  MOVF   00,W
27D4:  IORWF  FF2,F
....................          delay_ms(20); 
27D6:  MOVLW  14
27D8:  MOVLB  0
27DA:  MOVWF  xC6
27DC:  CALL   06E2
....................          write_eeprom(6,tempo_segundos_pro); 
27E0:  MOVLW  06
27E2:  MOVWF  FA9
27E4:  MOVFF  2A,FA8
27E8:  BCF    FA6.6
27EA:  BCF    FA6.7
27EC:  BSF    FA6.2
27EE:  MOVF   FF2,W
27F0:  MOVWF  00
27F2:  BCF    FF2.7
27F4:  MOVLB  F
27F6:  MOVLW  55
27F8:  MOVWF  FA7
27FA:  MOVLW  AA
27FC:  MOVWF  FA7
27FE:  BSF    FA6.1
2800:  BTFSC  FA6.1
2802:  BRA    2800
2804:  BCF    FA6.2
2806:  MOVF   00,W
2808:  IORWF  FF2,F
....................          delay_ms(20); 
280A:  MOVLW  14
280C:  MOVLB  0
280E:  MOVWF  xC6
2810:  CALL   06E2
....................          tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
2814:  MOVFF  29,27
2818:  MOVFF  2A,28
....................          delay_ms(700); 
281C:  MOVLW  04
281E:  MOVWF  xAF
2820:  MOVLW  AF
2822:  MOVWF  xC6
2824:  CALL   06E2
2828:  DECFSZ xAF,F
282A:  BRA    2820
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
282C:  MOVLW  1E
282E:  MOVWF  xC6
2830:  CALL   06E2
2834:  MOVLW  01
2836:  MOVWF  18
2838:  CLRF   31
283A:  MOVLW  02
283C:  MOVWF  1C
283E:  MOVWF  1E
2840:  MOVLW  0C
2842:  MOVWF  xC0
2844:  CALL   085C
....................          Cambio=ON; 
2848:  BSF    17.5
....................       } 
....................    }   
....................   } 
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................  
.................... //----------------Menu3--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu para Cambio de Contraseña 
284A:  MOVF   18,W
284C:  SUBLW  03
284E:  BTFSS  FD8.2
2850:  BRA    2B9C
....................       EliminaRuido(); 
2852:  CALL   0004
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
2856:  MOVLW  01
2858:  MOVWF  xC1
285A:  MOVWF  xC2
285C:  CALL   07FA
....................          printf(lcd_putc,"     Ingrese        "); 
2860:  MOVLW  40
2862:  MOVWF  FF6
2864:  MOVLW  03
2866:  MOVWF  FF7
2868:  CALL   08BA
....................          lcd_gotoxy(1,2); 
286C:  MOVLW  01
286E:  MOVWF  xC1
2870:  MOVLW  02
2872:  MOVWF  xC2
2874:  CALL   07FA
....................          printf(lcd_putc,"    Contraseña      "); 
2878:  MOVLW  56
287A:  MOVWF  FF6
287C:  MOVLW  03
287E:  MOVWF  FF7
2880:  CALL   08BA
....................          lcd_gotoxy(1,3); 
2884:  MOVLW  01
2886:  MOVWF  xC1
2888:  MOVLW  03
288A:  MOVWF  xC2
288C:  CALL   07FA
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2890:  MOVLW  6C
2892:  MOVWF  FF6
2894:  MOVLW  03
2896:  MOVWF  FF7
2898:  MOVLW  0A
289A:  MOVWF  xB3
289C:  CALL   0EDA
28A0:  MOVFF  35,AF
28A4:  MOVLW  1F
28A6:  MOVWF  xB0
28A8:  CALL   0F20
28AC:  MOVFF  36,AF
28B0:  MOVLW  1F
28B2:  MOVWF  xB0
28B4:  CALL   0F20
28B8:  MOVFF  37,AF
28BC:  MOVLW  1F
28BE:  MOVWF  xB0
28C0:  CALL   0F20
28C4:  MOVFF  38,AF
28C8:  MOVLW  1F
28CA:  MOVWF  xB0
28CC:  CALL   0F20
28D0:  MOVLW  20
28D2:  MOVWF  xC0
28D4:  CALL   085C
28D8:  MOVLW  20
28DA:  MOVWF  xC0
28DC:  CALL   085C
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
28E0:  MOVFF  1B,C1
28E4:  MOVLW  04
28E6:  MOVWF  xC2
28E8:  CALL   07FA
....................          lcd_putc(t[2]); 
28EC:  MOVFF  34,C0
28F0:  CALL   085C
....................           
....................          if(unidad>11&&unidad<14){ 
28F4:  MOVF   1B,W
28F6:  SUBLW  0B
28F8:  BC    2918
28FA:  MOVF   1B,W
28FC:  SUBLW  0D
28FE:  BNC   2918
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2900:  MOVLW  01
2902:  SUBWF  1B,W
2904:  MOVWF  xAF
2906:  MOVWF  xC1
2908:  MOVLW  04
290A:  MOVWF  xC2
290C:  CALL   07FA
....................             lcd_putc(t[1]); 
2910:  MOVFF  33,C0
2914:  CALL   085C
....................          } 
....................           
....................          Cambio=OFF; 
2918:  BCF    17.5
....................       //} 
....................        
....................       if(UP){//Si oprime hacia arriba 
291A:  BSF    F92.5
291C:  BTFSS  F80.5
291E:  BRA    2952
....................          delay_ms(20); 
2920:  MOVLW  14
2922:  MOVWF  xC6
2924:  CALL   06E2
....................          if(UP){ 
2928:  BSF    F92.5
292A:  BTFSS  F80.5
292C:  BRA    2950
....................             if(Flanco == 0) { 
292E:  BTFSC  16.3
2930:  BRA    2950
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
2932:  MOVLW  0B
2934:  SUBWF  1B,W
2936:  CLRF   03
2938:  ADDLW  35
293A:  MOVWF  FE9
293C:  MOVLW  00
293E:  ADDWFC 03,W
2940:  MOVWF  FEA
2942:  INCF   FEF,F
2944:  BSF    16.3
2946:  MOVLW  1E
2948:  MOVWF  xC6
294A:  CALL   06E2
294E:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2950:  BRA    2954
....................          Flanco = 0; 
2952:  BCF    16.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
2954:  BSF    F96.0
2956:  BTFSS  F84.0
2958:  BRA    298C
....................          delay_ms(20); 
295A:  MOVLW  14
295C:  MOVWF  xC6
295E:  CALL   06E2
....................          if(DOWN){ 
2962:  BSF    F96.0
2964:  BTFSS  F84.0
2966:  BRA    298A
....................             if(Flanco2 == 0) { 
2968:  BTFSC  16.5
296A:  BRA    298A
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
296C:  MOVLW  0B
296E:  SUBWF  1B,W
2970:  CLRF   03
2972:  ADDLW  35
2974:  MOVWF  FE9
2976:  MOVLW  00
2978:  ADDWFC 03,W
297A:  MOVWF  FEA
297C:  DECF   FEF,F
297E:  BSF    16.5
2980:  MOVLW  1E
2982:  MOVWF  xC6
2984:  CALL   06E2
2988:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
298A:  BRA    298E
....................          Flanco2 = 0; 
298C:  BCF    16.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
298E:  BSF    F96.1
2990:  BTFSS  F84.1
2992:  BRA    29BE
....................          delay_ms(20); 
2994:  MOVLW  14
2996:  MOVWF  xC6
2998:  CALL   06E2
....................          if(RIGHT){ 
299C:  BSF    F96.1
299E:  BTFSS  F84.1
29A0:  BRA    29BC
....................             if(Flanco1 == 0) { 
29A2:  BTFSC  16.4
29A4:  BRA    29BC
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
29A6:  BSF    16.4
29A8:  INCF   1B,F
29AA:  MOVLW  1E
29AC:  MOVWF  xC6
29AE:  CALL   06E2
29B2:  MOVLW  0C
29B4:  MOVWF  xC0
29B6:  CALL   085C
29BA:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
29BC:  BRA    29C0
....................          Flanco1 = 0; 
29BE:  BCF    16.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
29C0:  BSF    F96.2
29C2:  BTFSS  F84.2
29C4:  BRA    29F0
....................          delay_ms(150); 
29C6:  MOVLW  96
29C8:  MOVWF  xC6
29CA:  CALL   06E2
....................          if(IZQU){ 
29CE:  BSF    F96.2
29D0:  BTFSS  F84.2
29D2:  BRA    29EE
....................             if(Flanco3 == 0){ 
29D4:  BTFSC  16.6
29D6:  BRA    29EE
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
29D8:  BSF    16.6
29DA:  DECF   1B,F
29DC:  MOVLW  1E
29DE:  MOVWF  xC6
29E0:  CALL   06E2
29E4:  MOVLW  0C
29E6:  MOVWF  xC0
29E8:  CALL   085C
29EC:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
29EE:  BRA    29F2
....................         Flanco3 = 0; 
29F0:  BCF    16.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
29F2:  MOVLW  0B
29F4:  SUBWF  1B,W
29F6:  CLRF   03
29F8:  ADDLW  35
29FA:  MOVWF  FE9
29FC:  MOVLW  00
29FE:  ADDWFC 03,W
2A00:  MOVWF  FEA
2A02:  BTFSC  FEF.7
2A04:  BRA    2A08
2A06:  BRA    2A1C
....................          clave[unidad-11]=9; 
2A08:  MOVLW  0B
2A0A:  SUBWF  1B,W
2A0C:  CLRF   03
2A0E:  ADDLW  35
2A10:  MOVWF  FE9
2A12:  MOVLW  00
2A14:  ADDWFC 03,W
2A16:  MOVWF  FEA
2A18:  MOVLW  09
2A1A:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
2A1C:  MOVLW  0B
2A1E:  SUBWF  1B,W
2A20:  CLRF   03
2A22:  ADDLW  35
2A24:  MOVWF  FE9
2A26:  MOVLW  00
2A28:  ADDWFC 03,W
2A2A:  MOVWF  FEA
2A2C:  BTFSC  FEF.7
2A2E:  BRA    2A48
2A30:  MOVF   FEF,W
2A32:  SUBLW  09
2A34:  BC    2A48
....................          clave[unidad-11]=0; 
2A36:  MOVLW  0B
2A38:  SUBWF  1B,W
2A3A:  CLRF   03
2A3C:  ADDLW  35
2A3E:  MOVWF  FE9
2A40:  MOVLW  00
2A42:  ADDWFC 03,W
2A44:  MOVWF  FEA
2A46:  CLRF   FEF
....................         
....................       if(unidad<11){             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
2A48:  MOVF   1B,W
2A4A:  SUBLW  0A
2A4C:  BNC   2A6E
....................          unidad=11; 
2A4E:  MOVLW  0B
2A50:  MOVWF  1B
....................          Menu=1; 
2A52:  MOVLW  01
2A54:  MOVWF  18
....................          paso=0; 
2A56:  CLRF   31
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
2A58:  CLRF   35
2A5A:  CLRF   36
2A5C:  CLRF   37
2A5E:  CLRF   38
2A60:  BSF    17.5
....................          unidad=11;printf(lcd_putc,"\f"); 
2A62:  MOVLW  0B
2A64:  MOVWF  1B
2A66:  MOVLW  0C
2A68:  MOVWF  xC0
2A6A:  CALL   085C
....................       } 
....................         
....................       if(unidad>14){// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
2A6E:  MOVF   1B,W
2A70:  SUBLW  0E
2A72:  BTFSC  FD8.0
2A74:  BRA    2B9C
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]){ 
2A76:  MOVF   39,W
2A78:  SUBWF  35,W
2A7A:  BNZ   2B18
2A7C:  MOVF   3A,W
2A7E:  SUBWF  36,W
2A80:  BNZ   2B18
2A82:  MOVF   3B,W
2A84:  SUBWF  37,W
2A86:  BNZ   2B18
2A88:  MOVF   3C,W
2A8A:  SUBWF  38,W
2A8C:  BNZ   2B18
....................             lcd_gotoxy(1,1); 
2A8E:  MOVLW  01
2A90:  MOVWF  xC1
2A92:  MOVWF  xC2
2A94:  CALL   07FA
....................             printf(lcd_putc,"                    "); 
2A98:  MOVLW  82
2A9A:  MOVWF  FF6
2A9C:  MOVLW  03
2A9E:  MOVWF  FF7
2AA0:  CALL   08BA
....................             lcd_gotoxy(1,2); 
2AA4:  MOVLW  01
2AA6:  MOVWF  xC1
2AA8:  MOVLW  02
2AAA:  MOVWF  xC2
2AAC:  CALL   07FA
....................             printf(lcd_putc,"     Contraseña     "); 
2AB0:  MOVLW  98
2AB2:  MOVWF  FF6
2AB4:  MOVLW  03
2AB6:  MOVWF  FF7
2AB8:  CALL   08BA
....................             lcd_gotoxy(1,3); 
2ABC:  MOVLW  01
2ABE:  MOVWF  xC1
2AC0:  MOVLW  03
2AC2:  MOVWF  xC2
2AC4:  CALL   07FA
....................             printf(lcd_putc,"      Correcta      "); 
2AC8:  MOVLW  AE
2ACA:  MOVWF  FF6
2ACC:  MOVLW  03
2ACE:  MOVWF  FF7
2AD0:  CALL   08BA
....................             lcd_gotoxy(1,4); 
2AD4:  MOVLW  01
2AD6:  MOVWF  xC1
2AD8:  MOVLW  04
2ADA:  MOVWF  xC2
2ADC:  CALL   07FA
....................             printf(lcd_putc,"                    "); 
2AE0:  MOVLW  C4
2AE2:  MOVWF  FF6
2AE4:  MOVLW  03
2AE6:  MOVWF  FF7
2AE8:  CALL   08BA
....................             delay_ms(500);Menu=61;unidad=11;printf(lcd_putc,"\f"); 
2AEC:  MOVLW  02
2AEE:  MOVWF  xAF
2AF0:  MOVLW  FA
2AF2:  MOVWF  xC6
2AF4:  CALL   06E2
2AF8:  DECFSZ xAF,F
2AFA:  BRA    2AF0
2AFC:  MOVLW  3D
2AFE:  MOVWF  18
2B00:  MOVLW  0B
2B02:  MOVWF  1B
2B04:  MOVLW  0C
2B06:  MOVWF  xC0
2B08:  CALL   085C
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
2B0C:  CLRF   35
2B0E:  CLRF   36
2B10:  CLRF   37
2B12:  CLRF   38
2B14:  BSF    17.5
....................          }else{ 
2B16:  BRA    2B9C
....................             lcd_gotoxy(1,1); 
2B18:  MOVLW  01
2B1A:  MOVWF  xC1
2B1C:  MOVWF  xC2
2B1E:  CALL   07FA
....................             printf(lcd_putc,"                    "); 
2B22:  MOVLW  DA
2B24:  MOVWF  FF6
2B26:  MOVLW  03
2B28:  MOVWF  FF7
2B2A:  CALL   08BA
....................             lcd_gotoxy(1,2); 
2B2E:  MOVLW  01
2B30:  MOVWF  xC1
2B32:  MOVLW  02
2B34:  MOVWF  xC2
2B36:  CALL   07FA
....................             printf(lcd_putc,"     Contraseña     "); 
2B3A:  MOVLW  F0
2B3C:  MOVWF  FF6
2B3E:  MOVLW  03
2B40:  MOVWF  FF7
2B42:  CALL   08BA
....................             lcd_gotoxy(1,3); 
2B46:  MOVLW  01
2B48:  MOVWF  xC1
2B4A:  MOVLW  03
2B4C:  MOVWF  xC2
2B4E:  CALL   07FA
....................             printf(lcd_putc,"     Incorrecta     "); 
2B52:  MOVLW  06
2B54:  MOVWF  FF6
2B56:  MOVLW  04
2B58:  MOVWF  FF7
2B5A:  CALL   08BA
....................             lcd_gotoxy(1,4); 
2B5E:  MOVLW  01
2B60:  MOVWF  xC1
2B62:  MOVLW  04
2B64:  MOVWF  xC2
2B66:  CALL   07FA
....................             printf(lcd_putc,"                    "); 
2B6A:  MOVLW  1C
2B6C:  MOVWF  FF6
2B6E:  MOVLW  04
2B70:  MOVWF  FF7
2B72:  CALL   08BA
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
2B76:  MOVLW  02
2B78:  MOVWF  xAF
2B7A:  MOVLW  FA
2B7C:  MOVWF  xC6
2B7E:  CALL   06E2
2B82:  DECFSZ xAF,F
2B84:  BRA    2B7A
2B86:  MOVLW  0B
2B88:  MOVWF  1B
2B8A:  MOVLW  0C
2B8C:  MOVWF  xC0
2B8E:  CALL   085C
2B92:  BSF    17.5
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
2B94:  CLRF   35
2B96:  CLRF   36
2B98:  CLRF   37
2B9A:  CLRF   38
....................          } 
....................       } 
....................    }       
.................... //----------------Fin-Menu3--------------------------------------------------------------- 
....................  
.................... //----------------Menu6.1--------------------------------------------------------------- 
....................    if(Menu == 61){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
2B9C:  MOVF   18,W
2B9E:  SUBLW  3D
2BA0:  BTFSS  FD8.2
2BA2:  BRA    2F2C
....................       EliminaRuido(); 
2BA4:  CALL   0004
.................... //      if(Cambio){ 
....................          lcd_gotoxy(1,1); 
2BA8:  MOVLW  01
2BAA:  MOVWF  xC1
2BAC:  MOVWF  xC2
2BAE:  CALL   07FA
....................          printf(lcd_putc,"   Ingrese Nueva    "); 
2BB2:  MOVLW  32
2BB4:  MOVWF  FF6
2BB6:  MOVLW  04
2BB8:  MOVWF  FF7
2BBA:  CALL   08BA
....................          lcd_gotoxy(1,2); 
2BBE:  MOVLW  01
2BC0:  MOVWF  xC1
2BC2:  MOVLW  02
2BC4:  MOVWF  xC2
2BC6:  CALL   07FA
....................          printf(lcd_putc,"     Contraseña     "); 
2BCA:  MOVLW  48
2BCC:  MOVWF  FF6
2BCE:  MOVLW  04
2BD0:  MOVWF  FF7
2BD2:  CALL   08BA
....................          lcd_gotoxy(1,3); 
2BD6:  MOVLW  01
2BD8:  MOVWF  xC1
2BDA:  MOVLW  03
2BDC:  MOVWF  xC2
2BDE:  CALL   07FA
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2BE2:  MOVLW  5E
2BE4:  MOVWF  FF6
2BE6:  MOVLW  04
2BE8:  MOVWF  FF7
2BEA:  MOVLW  0A
2BEC:  MOVWF  xB3
2BEE:  CALL   0EDA
2BF2:  MOVFF  35,AF
2BF6:  MOVLW  1F
2BF8:  MOVWF  xB0
2BFA:  CALL   0F20
2BFE:  MOVFF  36,AF
2C02:  MOVLW  1F
2C04:  MOVWF  xB0
2C06:  CALL   0F20
2C0A:  MOVFF  37,AF
2C0E:  MOVLW  1F
2C10:  MOVWF  xB0
2C12:  CALL   0F20
2C16:  MOVFF  38,AF
2C1A:  MOVLW  1F
2C1C:  MOVWF  xB0
2C1E:  CALL   0F20
2C22:  MOVLW  20
2C24:  MOVWF  xC0
2C26:  CALL   085C
2C2A:  MOVLW  20
2C2C:  MOVWF  xC0
2C2E:  CALL   085C
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
2C32:  MOVFF  1B,C1
2C36:  MOVLW  04
2C38:  MOVWF  xC2
2C3A:  CALL   07FA
....................          lcd_putc(t[2]); 
2C3E:  MOVFF  34,C0
2C42:  CALL   085C
....................           
....................          if(unidad>11&&unidad<14){ 
2C46:  MOVF   1B,W
2C48:  SUBLW  0B
2C4A:  BC    2C6A
2C4C:  MOVF   1B,W
2C4E:  SUBLW  0D
2C50:  BNC   2C6A
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2C52:  MOVLW  01
2C54:  SUBWF  1B,W
2C56:  MOVWF  xAF
2C58:  MOVWF  xC1
2C5A:  MOVLW  04
2C5C:  MOVWF  xC2
2C5E:  CALL   07FA
....................             lcd_putc(t[1]); 
2C62:  MOVFF  33,C0
2C66:  CALL   085C
....................          } 
....................           
....................          Cambio=OFF; 
2C6A:  BCF    17.5
.................... //      } 
....................        
....................       if(UP){//Si oprime hacia arriba 
2C6C:  BSF    F92.5
2C6E:  BTFSS  F80.5
2C70:  BRA    2CA4
....................          delay_ms(20); 
2C72:  MOVLW  14
2C74:  MOVWF  xC6
2C76:  CALL   06E2
....................          if(UP){ 
2C7A:  BSF    F92.5
2C7C:  BTFSS  F80.5
2C7E:  BRA    2CA2
....................             if(Flanco == 0) { 
2C80:  BTFSC  16.3
2C82:  BRA    2CA2
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
2C84:  MOVLW  0B
2C86:  SUBWF  1B,W
2C88:  CLRF   03
2C8A:  ADDLW  35
2C8C:  MOVWF  FE9
2C8E:  MOVLW  00
2C90:  ADDWFC 03,W
2C92:  MOVWF  FEA
2C94:  INCF   FEF,F
2C96:  BSF    16.3
2C98:  MOVLW  1E
2C9A:  MOVWF  xC6
2C9C:  CALL   06E2
2CA0:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2CA2:  BRA    2CA6
....................          Flanco = 0; 
2CA4:  BCF    16.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
2CA6:  BSF    F96.0
2CA8:  BTFSS  F84.0
2CAA:  BRA    2CDE
....................          delay_ms(20); 
2CAC:  MOVLW  14
2CAE:  MOVWF  xC6
2CB0:  CALL   06E2
....................          if(DOWN){ 
2CB4:  BSF    F96.0
2CB6:  BTFSS  F84.0
2CB8:  BRA    2CDC
....................             if(Flanco2 == 0) { 
2CBA:  BTFSC  16.5
2CBC:  BRA    2CDC
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
2CBE:  MOVLW  0B
2CC0:  SUBWF  1B,W
2CC2:  CLRF   03
2CC4:  ADDLW  35
2CC6:  MOVWF  FE9
2CC8:  MOVLW  00
2CCA:  ADDWFC 03,W
2CCC:  MOVWF  FEA
2CCE:  DECF   FEF,F
2CD0:  BSF    16.5
2CD2:  MOVLW  1E
2CD4:  MOVWF  xC6
2CD6:  CALL   06E2
2CDA:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2CDC:  BRA    2CE0
....................          Flanco2 = 0; 
2CDE:  BCF    16.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
2CE0:  BSF    F96.1
2CE2:  BTFSS  F84.1
2CE4:  BRA    2D08
....................          if(RIGHT){ 
2CE6:  BSF    F96.1
2CE8:  BTFSS  F84.1
2CEA:  BRA    2D06
....................             if(Flanco1 == 0) { 
2CEC:  BTFSC  16.4
2CEE:  BRA    2D06
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2CF0:  BSF    16.4
2CF2:  INCF   1B,F
2CF4:  MOVLW  1E
2CF6:  MOVWF  xC6
2CF8:  CALL   06E2
2CFC:  MOVLW  0C
2CFE:  MOVWF  xC0
2D00:  CALL   085C
2D04:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2D06:  BRA    2D0A
....................          Flanco1 = 0; 
2D08:  BCF    16.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
2D0A:  BSF    F96.2
2D0C:  BTFSS  F84.2
2D0E:  BRA    2D3A
....................          delay_ms(150); 
2D10:  MOVLW  96
2D12:  MOVWF  xC6
2D14:  CALL   06E2
....................          if(IZQU){ 
2D18:  BSF    F96.2
2D1A:  BTFSS  F84.2
2D1C:  BRA    2D38
....................             if(Flanco3 == 0){ 
2D1E:  BTFSC  16.6
2D20:  BRA    2D38
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2D22:  BSF    16.6
2D24:  DECF   1B,F
2D26:  MOVLW  1E
2D28:  MOVWF  xC6
2D2A:  CALL   06E2
2D2E:  MOVLW  0C
2D30:  MOVWF  xC0
2D32:  CALL   085C
2D36:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2D38:  BRA    2D3C
....................         Flanco3 = 0; 
2D3A:  BCF    16.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
2D3C:  MOVLW  0B
2D3E:  SUBWF  1B,W
2D40:  CLRF   03
2D42:  ADDLW  35
2D44:  MOVWF  FE9
2D46:  MOVLW  00
2D48:  ADDWFC 03,W
2D4A:  MOVWF  FEA
2D4C:  BTFSC  FEF.7
2D4E:  BRA    2D52
2D50:  BRA    2D66
....................          clave[unidad-11]=9; 
2D52:  MOVLW  0B
2D54:  SUBWF  1B,W
2D56:  CLRF   03
2D58:  ADDLW  35
2D5A:  MOVWF  FE9
2D5C:  MOVLW  00
2D5E:  ADDWFC 03,W
2D60:  MOVWF  FEA
2D62:  MOVLW  09
2D64:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
2D66:  MOVLW  0B
2D68:  SUBWF  1B,W
2D6A:  CLRF   03
2D6C:  ADDLW  35
2D6E:  MOVWF  FE9
2D70:  MOVLW  00
2D72:  ADDWFC 03,W
2D74:  MOVWF  FEA
2D76:  BTFSC  FEF.7
2D78:  BRA    2D92
2D7A:  MOVF   FEF,W
2D7C:  SUBLW  09
2D7E:  BC    2D92
....................          clave[unidad-11]=0; 
2D80:  MOVLW  0B
2D82:  SUBWF  1B,W
2D84:  CLRF   03
2D86:  ADDLW  35
2D88:  MOVWF  FE9
2D8A:  MOVLW  00
2D8C:  ADDWFC 03,W
2D8E:  MOVWF  FEA
2D90:  CLRF   FEF
....................         
....................       if(unidad<11){             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
2D92:  MOVF   1B,W
2D94:  SUBLW  0A
2D96:  BNC   2DB6
....................          unidad=11; 
2D98:  MOVLW  0B
2D9A:  MOVWF  1B
....................          Menu=1; 
2D9C:  MOVLW  01
2D9E:  MOVWF  18
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
2DA0:  CLRF   35
2DA2:  CLRF   36
2DA4:  CLRF   37
2DA6:  CLRF   38
2DA8:  BSF    17.5
....................          unidad=11;printf(lcd_putc,"\f"); 
2DAA:  MOVLW  0B
2DAC:  MOVWF  1B
2DAE:  MOVLW  0C
2DB0:  MOVWF  xC0
2DB2:  CALL   085C
....................       } 
....................         
....................       if(unidad>14){// Si ya ingreso la nueva contraseña.      
2DB6:  MOVF   1B,W
2DB8:  SUBLW  0E
2DBA:  BTFSC  FD8.0
2DBC:  BRA    2F2C
....................          lcd_gotoxy(1,1); 
2DBE:  MOVLW  01
2DC0:  MOVWF  xC1
2DC2:  MOVWF  xC2
2DC4:  CALL   07FA
....................          printf(lcd_putc,"                    "); 
2DC8:  MOVLW  74
2DCA:  MOVWF  FF6
2DCC:  MOVLW  04
2DCE:  MOVWF  FF7
2DD0:  CALL   08BA
....................          lcd_gotoxy(1,2); 
2DD4:  MOVLW  01
2DD6:  MOVWF  xC1
2DD8:  MOVLW  02
2DDA:  MOVWF  xC2
2DDC:  CALL   07FA
....................          printf(lcd_putc,"     Contraseña     "); 
2DE0:  MOVLW  8A
2DE2:  MOVWF  FF6
2DE4:  MOVLW  04
2DE6:  MOVWF  FF7
2DE8:  CALL   08BA
....................          lcd_gotoxy(1,3); 
2DEC:  MOVLW  01
2DEE:  MOVWF  xC1
2DF0:  MOVLW  03
2DF2:  MOVWF  xC2
2DF4:  CALL   07FA
....................          printf(lcd_putc,"     Almacenada     "); 
2DF8:  MOVLW  A0
2DFA:  MOVWF  FF6
2DFC:  MOVLW  04
2DFE:  MOVWF  FF7
2E00:  CALL   08BA
....................          lcd_gotoxy(1,4); 
2E04:  MOVLW  01
2E06:  MOVWF  xC1
2E08:  MOVLW  04
2E0A:  MOVWF  xC2
2E0C:  CALL   07FA
....................          printf(lcd_putc,"                    "); 
2E10:  MOVLW  B6
2E12:  MOVWF  FF6
2E14:  MOVLW  04
2E16:  MOVWF  FF7
2E18:  CALL   08BA
....................          write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
2E1C:  CLRF   FA9
2E1E:  MOVFF  35,FA8
2E22:  BCF    FA6.6
2E24:  BCF    FA6.7
2E26:  BSF    FA6.2
2E28:  MOVF   FF2,W
2E2A:  MOVWF  00
2E2C:  BCF    FF2.7
2E2E:  MOVLB  F
2E30:  MOVLW  55
2E32:  MOVWF  FA7
2E34:  MOVLW  AA
2E36:  MOVWF  FA7
2E38:  BSF    FA6.1
2E3A:  BTFSC  FA6.1
2E3C:  BRA    2E3A
2E3E:  BCF    FA6.2
2E40:  MOVF   00,W
2E42:  IORWF  FF2,F
2E44:  MOVLW  14
2E46:  MOVLB  0
2E48:  MOVWF  xC6
2E4A:  CALL   06E2
2E4E:  MOVLW  01
2E50:  MOVWF  FA9
2E52:  MOVFF  36,FA8
2E56:  BCF    FA6.6
2E58:  BCF    FA6.7
2E5A:  BSF    FA6.2
2E5C:  MOVF   FF2,W
2E5E:  MOVWF  00
2E60:  BCF    FF2.7
2E62:  MOVLB  F
2E64:  MOVLW  55
2E66:  MOVWF  FA7
2E68:  MOVLW  AA
2E6A:  MOVWF  FA7
2E6C:  BSF    FA6.1
2E6E:  BTFSC  FA6.1
2E70:  BRA    2E6E
2E72:  BCF    FA6.2
2E74:  MOVF   00,W
2E76:  IORWF  FF2,F
2E78:  MOVLW  14
2E7A:  MOVLB  0
2E7C:  MOVWF  xC6
2E7E:  CALL   06E2
....................          write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
2E82:  MOVLW  02
2E84:  MOVWF  FA9
2E86:  MOVFF  37,FA8
2E8A:  BCF    FA6.6
2E8C:  BCF    FA6.7
2E8E:  BSF    FA6.2
2E90:  MOVF   FF2,W
2E92:  MOVWF  00
2E94:  BCF    FF2.7
2E96:  MOVLB  F
2E98:  MOVLW  55
2E9A:  MOVWF  FA7
2E9C:  MOVLW  AA
2E9E:  MOVWF  FA7
2EA0:  BSF    FA6.1
2EA2:  BTFSC  FA6.1
2EA4:  BRA    2EA2
2EA6:  BCF    FA6.2
2EA8:  MOVF   00,W
2EAA:  IORWF  FF2,F
2EAC:  MOVLW  14
2EAE:  MOVLB  0
2EB0:  MOVWF  xC6
2EB2:  CALL   06E2
2EB6:  MOVLW  03
2EB8:  MOVWF  FA9
2EBA:  MOVFF  38,FA8
2EBE:  BCF    FA6.6
2EC0:  BCF    FA6.7
2EC2:  BSF    FA6.2
2EC4:  MOVF   FF2,W
2EC6:  MOVWF  00
2EC8:  BCF    FF2.7
2ECA:  MOVLB  F
2ECC:  MOVLW  55
2ECE:  MOVWF  FA7
2ED0:  MOVLW  AA
2ED2:  MOVWF  FA7
2ED4:  BSF    FA6.1
2ED6:  BTFSC  FA6.1
2ED8:  BRA    2ED6
2EDA:  BCF    FA6.2
2EDC:  MOVF   00,W
2EDE:  IORWF  FF2,F
2EE0:  MOVLW  14
2EE2:  MOVLB  0
2EE4:  MOVWF  xC6
2EE6:  CALL   06E2
....................          delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
2EEA:  MOVLW  02
2EEC:  MOVWF  xAF
2EEE:  MOVLW  FA
2EF0:  MOVWF  xC6
2EF2:  CALL   06E2
2EF6:  DECFSZ xAF,F
2EF8:  BRA    2EEE
2EFA:  MOVLW  01
2EFC:  MOVWF  18
2EFE:  CLRF   31
2F00:  MOVLW  02
2F02:  MOVWF  1C
2F04:  MOVWF  1E
....................          contrasena[0]=clave[0];contrasena[1]=clave[1];contrasena[2]=clave[2];contrasena[3]=clave[3]; 
2F06:  MOVFF  35,39
2F0A:  MOVFF  36,3A
2F0E:  MOVFF  37,3B
2F12:  MOVFF  38,3C
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
2F16:  CLRF   35
2F18:  CLRF   36
2F1A:  CLRF   37
2F1C:  CLRF   38
2F1E:  BSF    17.5
....................          unidad=11;printf(lcd_putc,"\f");          
2F20:  MOVLW  0B
2F22:  MOVWF  1B
2F24:  MOVLW  0C
2F26:  MOVWF  xC0
2F28:  CALL   085C
....................       } 
....................    }       
.................... //----------------Fin-Menu6.1--------------------------------------------------------------- 
....................     
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu de tiempo de trabajo de Luz UV 
2F2C:  MOVF   18,W
2F2E:  SUBLW  04
2F30:  BTFSS  FD8.2
2F32:  BRA    3146
....................    EliminaRuido(); 
2F34:  CALL   0004
.................... //   if(Cambio){ 
....................       lcd_gotoxy(1,1); 
2F38:  MOVLW  01
2F3A:  MOVWF  xC1
2F3C:  MOVWF  xC2
2F3E:  CALL   07FA
....................       printf(lcd_putc,"  Duracion Actual   "); 
2F42:  MOVLW  CC
2F44:  MOVWF  FF6
2F46:  MOVLW  04
2F48:  MOVWF  FF7
2F4A:  CALL   08BA
....................       lcd_gotoxy(1,2); 
2F4E:  MOVLW  01
2F50:  MOVWF  xC1
2F52:  MOVLW  02
2F54:  MOVWF  xC2
2F56:  CALL   07FA
....................       printf(lcd_putc,"   Tiempo= %05Lu   ",horas); 
2F5A:  MOVLW  E2
2F5C:  MOVWF  FF6
2F5E:  MOVLW  04
2F60:  MOVWF  FF7
2F62:  MOVLW  0B
2F64:  MOVWF  xB3
2F66:  CALL   0EDA
2F6A:  MOVLW  08
2F6C:  MOVWF  FE9
2F6E:  MOVFF  41,B0
2F72:  MOVFF  40,AF
2F76:  GOTO   10FC
2F7A:  MOVLW  20
2F7C:  MOVWF  xC0
2F7E:  CALL   085C
2F82:  MOVLW  20
2F84:  MOVWF  xC0
2F86:  CALL   085C
2F8A:  MOVLW  20
2F8C:  MOVWF  xC0
2F8E:  CALL   085C
....................       lcd_gotoxy(1,4); 
2F92:  MOVLW  01
2F94:  MOVWF  xC1
2F96:  MOVLW  04
2F98:  MOVWF  xC2
2F9A:  CALL   07FA
....................       printf(lcd_putc," RESET= Oprima ^ y > "); 
2F9E:  MOVLW  F6
2FA0:  MOVWF  FF6
2FA2:  MOVLW  04
2FA4:  MOVWF  FF7
2FA6:  CALL   08BA
....................        
....................       Cambio=OFF; 
2FAA:  BCF    17.5
.................... //   } 
....................     
....................       if(UP && RIGHT){//Si oprime hacia arriba 
2FAC:  BSF    F92.5
2FAE:  BTFSS  F80.5
2FB0:  BRA    3102
2FB2:  BSF    F96.1
2FB4:  BTFSS  F84.1
2FB6:  BRA    3102
....................          delay_ms(20); 
2FB8:  MOVLW  14
2FBA:  MOVWF  xC6
2FBC:  CALL   06E2
....................          if(UP && RIGHT){ 
2FC0:  BSF    F92.5
2FC2:  BTFSS  F80.5
2FC4:  BRA    3102
2FC6:  BSF    F96.1
2FC8:  BTFSS  F84.1
2FCA:  BRA    3102
....................             delay_ms(200); 
2FCC:  MOVLW  C8
2FCE:  MOVWF  xC6
2FD0:  CALL   06E2
....................             printf(lcd_putc,"\f"); 
2FD4:  MOVLW  0C
2FD6:  MOVWF  xC0
2FD8:  CALL   085C
....................             lcd_gotoxy(1,2); 
2FDC:  MOVLW  01
2FDE:  MOVWF  xC1
2FE0:  MOVLW  02
2FE2:  MOVWF  xC2
2FE4:  CALL   07FA
....................             printf(lcd_putc," Reset de tiempo "); 
2FE8:  MOVLW  0C
2FEA:  MOVWF  FF6
2FEC:  MOVLW  05
2FEE:  MOVWF  FF7
2FF0:  CALL   08BA
....................             lcd_gotoxy(1,3); 
2FF4:  MOVLW  01
2FF6:  MOVWF  xC1
2FF8:  MOVLW  03
2FFA:  MOVWF  xC2
2FFC:  CALL   07FA
....................             printf(lcd_putc,"     Exitoso     "); 
3000:  MOVLW  1E
3002:  MOVWF  FF6
3004:  MOVLW  05
3006:  MOVWF  FF7
3008:  CALL   08BA
....................             write_eeprom(7,0); 
300C:  MOVLW  07
300E:  MOVWF  FA9
3010:  CLRF   FA8
3012:  BCF    FA6.6
3014:  BCF    FA6.7
3016:  BSF    FA6.2
3018:  MOVF   FF2,W
301A:  MOVWF  00
301C:  BCF    FF2.7
301E:  MOVLB  F
3020:  MOVLW  55
3022:  MOVWF  FA7
3024:  MOVLW  AA
3026:  MOVWF  FA7
3028:  BSF    FA6.1
302A:  BTFSC  FA6.1
302C:  BRA    302A
302E:  BCF    FA6.2
3030:  MOVF   00,W
3032:  IORWF  FF2,F
....................             delay_ms(20); 
3034:  MOVLW  14
3036:  MOVLB  0
3038:  MOVWF  xC6
303A:  CALL   06E2
....................             write_eeprom(8,0); 
303E:  MOVLW  08
3040:  MOVWF  FA9
3042:  CLRF   FA8
3044:  BCF    FA6.6
3046:  BCF    FA6.7
3048:  BSF    FA6.2
304A:  MOVF   FF2,W
304C:  MOVWF  00
304E:  BCF    FF2.7
3050:  MOVLB  F
3052:  MOVLW  55
3054:  MOVWF  FA7
3056:  MOVLW  AA
3058:  MOVWF  FA7
305A:  BSF    FA6.1
305C:  BTFSC  FA6.1
305E:  BRA    305C
3060:  BCF    FA6.2
3062:  MOVF   00,W
3064:  IORWF  FF2,F
....................             delay_ms(20); 
3066:  MOVLW  14
3068:  MOVLB  0
306A:  MOVWF  xC6
306C:  CALL   06E2
....................             write_eeprom(9,0); 
3070:  MOVLW  09
3072:  MOVWF  FA9
3074:  CLRF   FA8
3076:  BCF    FA6.6
3078:  BCF    FA6.7
307A:  BSF    FA6.2
307C:  MOVF   FF2,W
307E:  MOVWF  00
3080:  BCF    FF2.7
3082:  MOVLB  F
3084:  MOVLW  55
3086:  MOVWF  FA7
3088:  MOVLW  AA
308A:  MOVWF  FA7
308C:  BSF    FA6.1
308E:  BTFSC  FA6.1
3090:  BRA    308E
3092:  BCF    FA6.2
3094:  MOVF   00,W
3096:  IORWF  FF2,F
....................             delay_ms(20); 
3098:  MOVLW  14
309A:  MOVLB  0
309C:  MOVWF  xC6
309E:  CALL   06E2
....................             write_eeprom(10,0); 
30A2:  MOVLW  0A
30A4:  MOVWF  FA9
30A6:  CLRF   FA8
30A8:  BCF    FA6.6
30AA:  BCF    FA6.7
30AC:  BSF    FA6.2
30AE:  MOVF   FF2,W
30B0:  MOVWF  00
30B2:  BCF    FF2.7
30B4:  MOVLB  F
30B6:  MOVLW  55
30B8:  MOVWF  FA7
30BA:  MOVLW  AA
30BC:  MOVWF  FA7
30BE:  BSF    FA6.1
30C0:  BTFSC  FA6.1
30C2:  BRA    30C0
30C4:  BCF    FA6.2
30C6:  MOVF   00,W
30C8:  IORWF  FF2,F
....................             delay_ms(700); 
30CA:  MOVLW  04
30CC:  MOVLB  0
30CE:  MOVWF  xAF
30D0:  MOVLW  AF
30D2:  MOVWF  xC6
30D4:  CALL   06E2
30D8:  DECFSZ xAF,F
30DA:  BRA    30D0
....................             segundos=0;minutos=0;horas=0; 
30DC:  CLRF   21
30DE:  CLRF   22
30E0:  CLRF   41
30E2:  CLRF   40
....................             delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
30E4:  MOVLW  1E
30E6:  MOVWF  xC6
30E8:  CALL   06E2
30EC:  MOVLW  01
30EE:  MOVWF  18
30F0:  CLRF   31
30F2:  MOVLW  02
30F4:  MOVWF  1C
30F6:  MOVWF  1E
30F8:  MOVLW  0C
30FA:  MOVWF  xC0
30FC:  CALL   085C
....................             Cambio=ON; 
3100:  BSF    17.5
....................          } 
....................       } 
....................              
....................       if(IZQU){// Si oprime Izquierda 
3102:  BSF    F96.2
3104:  BTFSS  F84.2
3106:  BRA    3144
....................          delay_ms(20); 
3108:  MOVLW  14
310A:  MOVWF  xC6
310C:  CALL   06E2
....................          if(IZQU){ 
3110:  BSF    F96.2
3112:  BTFSS  F84.2
3114:  BRA    3142
....................             if(Flanco3 == 0){ 
3116:  BTFSC  16.6
3118:  BRA    3142
....................                Flanco3 = 1;delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f");Cambio=ON; 
311A:  BSF    16.6
311C:  MOVLW  02
311E:  MOVWF  xAF
3120:  MOVLW  FA
3122:  MOVWF  xC6
3124:  CALL   06E2
3128:  DECFSZ xAF,F
312A:  BRA    3120
312C:  MOVLW  01
312E:  MOVWF  18
3130:  CLRF   31
3132:  MOVLW  02
3134:  MOVWF  1C
3136:  MOVWF  1E
3138:  MOVLW  0C
313A:  MOVWF  xC0
313C:  CALL   085C
3140:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
3142:  BRA    3146
....................          Flanco3 = 0; 
3144:  BCF    16.6
....................       } 
....................    } 
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5){ // Menu de Punto Cero 
3146:  MOVF   18,W
3148:  SUBLW  05
314A:  BTFSS  FD8.2
314C:  BRA    33A2
....................       EliminaRuido(); 
314E:  CALL   0004
.................... //      if(Cambio){ 
....................          lcd_gotoxy(1,1); 
3152:  MOVLW  01
3154:  MOVWF  xC1
3156:  MOVWF  xC2
3158:  CALL   07FA
....................          printf(lcd_putc,"  Zero Point Config "); 
315C:  MOVLW  30
315E:  MOVWF  FF6
3160:  MOVLW  05
3162:  MOVWF  FF7
3164:  CALL   08BA
....................          lcd_gotoxy(1,2); 
3168:  MOVLW  01
316A:  MOVWF  xC1
316C:  MOVLW  02
316E:  MOVWF  xC2
3170:  CALL   07FA
....................          printf(lcd_putc,"Presion= %3.2f inH2O ",(Leer_Sensor_Presion(5)*4.02)); 
3174:  MOVLW  05
3176:  MOVWF  xAF
3178:  CALL   15CC
317C:  MOVFF  00,AF
3180:  MOVFF  01,B0
3184:  MOVFF  02,B1
3188:  MOVFF  03,B2
318C:  MOVFF  03,C6
3190:  MOVFF  02,C5
3194:  MOVFF  01,C4
3198:  MOVFF  00,C3
319C:  MOVLW  D7
319E:  MOVWF  xCA
31A0:  MOVLW  A3
31A2:  MOVWF  xC9
31A4:  CLRF   xC8
31A6:  MOVLW  81
31A8:  MOVWF  xC7
31AA:  CALL   1762
31AE:  MOVFF  00,AF
31B2:  MOVFF  01,B0
31B6:  MOVFF  02,B1
31BA:  MOVFF  03,B2
31BE:  MOVLW  46
31C0:  MOVWF  FF6
31C2:  MOVLW  05
31C4:  MOVWF  FF7
31C6:  MOVLW  09
31C8:  MOVWF  xB3
31CA:  CALL   0EDA
31CE:  MOVLW  02
31D0:  MOVWF  FE9
31D2:  MOVFF  B2,B6
31D6:  MOVFF  B1,B5
31DA:  MOVFF  B0,B4
31DE:  MOVFF  AF,B3
31E2:  MOVWF  xB7
31E4:  CALL   190E
31E8:  MOVLW  54
31EA:  MOVWF  FF6
31EC:  MOVLW  05
31EE:  MOVWF  FF7
31F0:  MOVLW  07
31F2:  MOVWF  xB3
31F4:  CALL   0EDA
....................          lcd_gotoxy(1,3); 
31F8:  MOVLW  01
31FA:  MOVWF  xC1
31FC:  MOVLW  03
31FE:  MOVWF  xC2
3200:  CALL   07FA
....................          printf(lcd_putc,"    ADC=%2.0f",sensores(0)); 
3204:  CLRF   xB4
3206:  CALL   11B2
320A:  MOVFF  00,AF
320E:  MOVFF  01,B0
3212:  MOVFF  02,B1
3216:  MOVFF  03,B2
321A:  MOVLW  5C
321C:  MOVWF  FF6
321E:  MOVLW  05
3220:  MOVWF  FF7
3222:  MOVLW  08
3224:  MOVWF  xB3
3226:  CALL   0EDA
322A:  MOVLW  01
322C:  MOVWF  FE9
322E:  MOVFF  B2,B6
3232:  MOVFF  B1,B5
3236:  MOVFF  B0,B4
323A:  MOVFF  AF,B3
323E:  CLRF   xB7
3240:  CALL   190E
....................          lcd_gotoxy(1,4); 
3244:  MOVLW  01
3246:  MOVWF  xC1
3248:  MOVLW  04
324A:  MOVWF  xC2
324C:  CALL   07FA
....................          printf(lcd_putc,"    ZF=%2.0f",G); 
3250:  MOVLW  6A
3252:  MOVWF  FF6
3254:  MOVLW  05
3256:  MOVWF  FF7
3258:  MOVLW  07
325A:  MOVWF  xB3
325C:  CALL   0EDA
3260:  MOVLW  01
3262:  MOVWF  FE9
3264:  MOVFF  A9,B6
3268:  MOVFF  A8,B5
326C:  MOVFF  A7,B4
3270:  MOVFF  A6,B3
3274:  CLRF   xB7
3276:  CALL   190E
....................           
....................          Cambio=OFF; 
327A:  BCF    17.5
.................... //      } 
....................      
....................       if(RIGHT){// Si oprime derecha 
327C:  BSF    F96.1
327E:  BTFSS  F84.1
3280:  BRA    3362
....................          delay_ms(20); 
3282:  MOVLW  14
3284:  MOVWF  xC6
3286:  CALL   06E2
....................          if(RIGHT){ 
328A:  BSF    F96.1
328C:  BTFSS  F84.1
328E:  BRA    3360
....................             if(Flanco1 == 0){ 
3290:  BTFSC  16.4
3292:  BRA    3360
....................                /*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
3294:  MOVLW  01
3296:  MOVWF  18
3298:  CLRF   31
329A:  MOVLW  02
329C:  MOVWF  1C
329E:  MOVWF  1E
32A0:  MOVLW  0B
32A2:  MOVWF  1B
32A4:  MOVLW  02
32A6:  MOVWF  xAF
32A8:  MOVLW  FA
32AA:  MOVWF  xC6
32AC:  CALL   06E2
32B0:  DECFSZ xAF,F
32B2:  BRA    32A8
32B4:  MOVLW  0C
32B6:  MOVWF  xC0
32B8:  CALL   085C
....................                G=sensores(0); 
32BC:  CLRF   xB4
32BE:  CALL   11B2
32C2:  MOVFF  03,A9
32C6:  MOVFF  02,A8
32CA:  MOVFF  01,A7
32CE:  MOVFF  00,A6
....................                G16=(int16)G; 
32D2:  MOVFF  A9,C6
32D6:  MOVFF  A8,C5
32DA:  MOVFF  A7,C4
32DE:  MOVFF  A6,C3
32E2:  CALL   1A94
32E6:  MOVFF  02,43
32EA:  MOVFF  01,42
....................                G_l=G16; G_h=(G16>>8); 
32EE:  MOVFF  42,25
32F2:  MOVFF  43,26
....................                 
....................                write_eeprom(11,G_l); 
32F6:  MOVLW  0B
32F8:  MOVWF  FA9
32FA:  MOVFF  25,FA8
32FE:  BCF    FA6.6
3300:  BCF    FA6.7
3302:  BSF    FA6.2
3304:  MOVF   FF2,W
3306:  MOVWF  00
3308:  BCF    FF2.7
330A:  MOVLB  F
330C:  MOVLW  55
330E:  MOVWF  FA7
3310:  MOVLW  AA
3312:  MOVWF  FA7
3314:  BSF    FA6.1
3316:  BTFSC  FA6.1
3318:  BRA    3316
331A:  BCF    FA6.2
331C:  MOVF   00,W
331E:  IORWF  FF2,F
....................                delay_ms(20); 
3320:  MOVLW  14
3322:  MOVLB  0
3324:  MOVWF  xC6
3326:  CALL   06E2
....................                write_eeprom(12,G_h);//Guardar valor de Setpoint en eeprom 
332A:  MOVLW  0C
332C:  MOVWF  FA9
332E:  MOVFF  26,FA8
3332:  BCF    FA6.6
3334:  BCF    FA6.7
3336:  BSF    FA6.2
3338:  MOVF   FF2,W
333A:  MOVWF  00
333C:  BCF    FF2.7
333E:  MOVLB  F
3340:  MOVLW  55
3342:  MOVWF  FA7
3344:  MOVLW  AA
3346:  MOVWF  FA7
3348:  BSF    FA6.1
334A:  BTFSC  FA6.1
334C:  BRA    334A
334E:  BCF    FA6.2
3350:  MOVF   00,W
3352:  IORWF  FF2,F
....................                delay_ms(20); 
3354:  MOVLW  14
3356:  MOVLB  0
3358:  MOVWF  xC6
335A:  CALL   06E2
....................                Cambio=ON; 
335E:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
3360:  BRA    3364
....................          Flanco1 = 0; 
3362:  BCF    16.4
....................       } 
....................              
....................       if(IZQU){// Si oprime Izquierda 
3364:  BSF    F96.2
3366:  BTFSS  F84.2
3368:  BRA    33A0
....................          delay_ms(20); 
336A:  MOVLW  14
336C:  MOVWF  xC6
336E:  CALL   06E2
....................          if(IZQU){ 
3372:  BSF    F96.2
3374:  BTFSS  F84.2
3376:  BRA    339E
....................             if(Flanco3 == 0){ 
3378:  BTFSC  16.6
337A:  BRA    339E
....................                /*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f"); 
337C:  MOVLW  01
337E:  MOVWF  18
3380:  CLRF   31
3382:  MOVLW  02
3384:  MOVWF  1C
3386:  MOVWF  1E
3388:  MOVLW  0B
338A:  MOVWF  1B
338C:  MOVLW  1E
338E:  MOVWF  xC6
3390:  CALL   06E2
3394:  MOVLW  0C
3396:  MOVWF  xC0
3398:  CALL   085C
....................                Cambio=ON; 
339C:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
339E:  BRA    33A2
....................          Flanco3 = 0; 
33A0:  BCF    16.6
....................       } 
....................    } 
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6){ // Menu de seleccion de estado de Alarma 
33A2:  MOVF   18,W
33A4:  SUBLW  06
33A6:  BTFSS  FD8.2
33A8:  BRA    34D0
....................    estadoalarma=!estadoalarma;Flanco1 = 1;Menu=1; paso=0; 
33AA:  BTG    17.4
33AC:  BSF    16.4
33AE:  MOVLW  01
33B0:  MOVWF  18
33B2:  CLRF   31
....................                        
....................             if(estadoalarma==1) 
33B4:  BTFSS  17.4
33B6:  BRA    3418
....................             {estadoalarma=1; 
33B8:  BSF    17.4
....................                lcd_gotoxy(1,1); 
33BA:  MOVLW  01
33BC:  MOVWF  xC1
33BE:  MOVWF  xC2
33C0:  CALL   07FA
....................                printf(lcd_putc,"                    "); 
33C4:  MOVLW  78
33C6:  MOVWF  FF6
33C8:  MOVLW  05
33CA:  MOVWF  FF7
33CC:  CALL   08BA
....................                lcd_gotoxy(1,2); 
33D0:  MOVLW  01
33D2:  MOVWF  xC1
33D4:  MOVLW  02
33D6:  MOVWF  xC2
33D8:  CALL   07FA
....................                printf(lcd_putc,"        Activo      "); 
33DC:  MOVLW  8E
33DE:  MOVWF  FF6
33E0:  MOVLW  05
33E2:  MOVWF  FF7
33E4:  CALL   08BA
....................                lcd_gotoxy(1,3); 
33E8:  MOVLW  01
33EA:  MOVWF  xC1
33EC:  MOVLW  03
33EE:  MOVWF  xC2
33F0:  CALL   07FA
....................                printf(lcd_putc,"        Alarma      "); 
33F4:  MOVLW  A4
33F6:  MOVWF  FF6
33F8:  MOVLW  05
33FA:  MOVWF  FF7
33FC:  CALL   08BA
....................                lcd_gotoxy(1,4); 
3400:  MOVLW  01
3402:  MOVWF  xC1
3404:  MOVLW  04
3406:  MOVWF  xC2
3408:  CALL   07FA
....................                printf(lcd_putc,"                    ");} 
340C:  MOVLW  BA
340E:  MOVWF  FF6
3410:  MOVLW  05
3412:  MOVWF  FF7
3414:  CALL   08BA
....................                 
....................             if(estadoalarma==0) 
3418:  BTFSC  17.4
341A:  BRA    347C
....................             {estadoalarma=0; 
341C:  BCF    17.4
....................                lcd_gotoxy(1,1); 
341E:  MOVLW  01
3420:  MOVWF  xC1
3422:  MOVWF  xC2
3424:  CALL   07FA
....................                printf(lcd_putc,"                    "); 
3428:  MOVLW  D0
342A:  MOVWF  FF6
342C:  MOVLW  05
342E:  MOVWF  FF7
3430:  CALL   08BA
....................                lcd_gotoxy(1,2); 
3434:  MOVLW  01
3436:  MOVWF  xC1
3438:  MOVLW  02
343A:  MOVWF  xC2
343C:  CALL   07FA
....................                printf(lcd_putc,"      Desactivo     "); 
3440:  MOVLW  E6
3442:  MOVWF  FF6
3444:  MOVLW  05
3446:  MOVWF  FF7
3448:  CALL   08BA
....................                lcd_gotoxy(1,3); 
344C:  MOVLW  01
344E:  MOVWF  xC1
3450:  MOVLW  03
3452:  MOVWF  xC2
3454:  CALL   07FA
....................                printf(lcd_putc,"       Alarma       "); 
3458:  MOVLW  FC
345A:  MOVWF  FF6
345C:  MOVLW  05
345E:  MOVWF  FF7
3460:  CALL   08BA
....................                lcd_gotoxy(1,4); 
3464:  MOVLW  01
3466:  MOVWF  xC1
3468:  MOVLW  04
346A:  MOVWF  xC2
346C:  CALL   07FA
....................                printf(lcd_putc,"                    ");} 
3470:  MOVLW  12
3472:  MOVWF  FF6
3474:  MOVLW  06
3476:  MOVWF  FF7
3478:  CALL   08BA
....................               
....................             write_eeprom(4,estadoalarma);delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
347C:  MOVLW  00
347E:  BTFSC  17.4
3480:  MOVLW  01
3482:  MOVWF  xAF
3484:  MOVLW  04
3486:  MOVWF  FA9
3488:  MOVFF  AF,FA8
348C:  BCF    FA6.6
348E:  BCF    FA6.7
3490:  BSF    FA6.2
3492:  MOVF   FF2,W
3494:  MOVWF  00
3496:  BCF    FF2.7
3498:  MOVLB  F
349A:  MOVLW  55
349C:  MOVWF  FA7
349E:  MOVLW  AA
34A0:  MOVWF  FA7
34A2:  BSF    FA6.1
34A4:  BTFSC  FA6.1
34A6:  BRA    34A4
34A8:  BCF    FA6.2
34AA:  MOVF   00,W
34AC:  IORWF  FF2,F
34AE:  MOVLW  04
34B0:  MOVLB  0
34B2:  MOVWF  xAF
34B4:  MOVLW  FA
34B6:  MOVWF  xC6
34B8:  CALL   06E2
34BC:  DECFSZ xAF,F
34BE:  BRA    34B4
34C0:  MOVLW  02
34C2:  MOVWF  1C
34C4:  MOVWF  1E
34C6:  MOVLW  0C
34C8:  MOVWF  xC0
34CA:  CALL   085C
....................             Cambio=ON; 
34CE:  BSF    17.5
....................    }       
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu100--------------------------------------------------------------- 
....................    if(Menu == 50){ // Menu de seleccion de Estado de Luz UV    
34D0:  MOVF   18,W
34D2:  SUBLW  32
34D4:  BTFSS  FD8.2
34D6:  BRA    3B08
....................    if(Lectura==1) 
34D8:  BTFSS  17.0
34DA:  BRA    36FE
....................    { 
....................       Lectura=0; 
34DC:  BCF    17.0
....................       CaidaPresion=Leer_Sensor_Presion(5); 
34DE:  MOVLW  05
34E0:  MOVWF  xAF
34E2:  CALL   15CC
34E6:  MOVFF  03,A5
34EA:  MOVFF  02,A4
34EE:  MOVFF  01,A3
34F2:  MOVFF  00,A2
....................       lcd_gotoxy(1,1); 
34F6:  MOVLW  01
34F8:  MOVWF  xC1
34FA:  MOVWF  xC2
34FC:  CALL   07FA
....................       printf(lcd_putc,"JPCR DP:%3.2f inH2O ",(CaidaPresion*4.02));       
3500:  MOVFF  A5,C6
3504:  MOVFF  A4,C5
3508:  MOVFF  A3,C4
350C:  MOVFF  A2,C3
3510:  MOVLW  D7
3512:  MOVWF  xCA
3514:  MOVLW  A3
3516:  MOVWF  xC9
3518:  CLRF   xC8
351A:  MOVLW  81
351C:  MOVWF  xC7
351E:  CALL   1762
3522:  MOVFF  00,AF
3526:  MOVFF  01,B0
352A:  MOVFF  02,B1
352E:  MOVFF  03,B2
3532:  MOVLW  28
3534:  MOVWF  FF6
3536:  MOVLW  06
3538:  MOVWF  FF7
353A:  MOVLW  08
353C:  MOVWF  xB3
353E:  CALL   0EDA
3542:  MOVLW  02
3544:  MOVWF  FE9
3546:  MOVFF  B2,B6
354A:  MOVFF  B1,B5
354E:  MOVFF  B0,B4
3552:  MOVFF  AF,B3
3556:  MOVWF  xB7
3558:  CALL   190E
355C:  MOVLW  35
355E:  MOVWF  FF6
3560:  MOVLW  06
3562:  MOVWF  FF7
3564:  MOVLW  07
3566:  MOVWF  xB3
3568:  CALL   0EDA
....................       Saturacion=(CaidaPresion/0.37)*11; 
356C:  MOVFF  A5,C6
3570:  MOVFF  A4,C5
3574:  MOVFF  A3,C4
3578:  MOVFF  A2,C3
357C:  MOVLW  A4
357E:  MOVWF  xCA
3580:  MOVLW  70
3582:  MOVWF  xC9
3584:  MOVLW  3D
3586:  MOVWF  xC8
3588:  MOVLW  7D
358A:  MOVWF  xC7
358C:  CALL   1208
3590:  MOVFF  00,AF
3594:  MOVFF  01,B0
3598:  MOVFF  02,B1
359C:  MOVFF  03,B2
35A0:  MOVFF  03,C6
35A4:  MOVFF  02,C5
35A8:  MOVFF  01,C4
35AC:  MOVFF  00,C3
35B0:  CLRF   xCA
35B2:  CLRF   xC9
35B4:  MOVLW  30
35B6:  MOVWF  xC8
35B8:  MOVLW  82
35BA:  MOVWF  xC7
35BC:  CALL   1762
35C0:  MOVFF  03,A1
35C4:  MOVFF  02,A0
35C8:  MOVFF  01,9F
35CC:  MOVFF  00,9E
....................        
....................       if(Saturacion>11) 
35D0:  CLRF   xC6
35D2:  CLRF   xC5
35D4:  MOVLW  30
35D6:  MOVWF  xC4
35D8:  MOVLW  82
35DA:  MOVWF  xC3
35DC:  MOVFF  A1,CA
35E0:  MOVFF  A0,C9
35E4:  MOVFF  9F,C8
35E8:  MOVFF  9E,C7
35EC:  CALL   0B36
35F0:  BNC   35FE
....................       { 
....................          Saturacion=11; 
35F2:  CLRF   xA1
35F4:  CLRF   xA0
35F6:  MOVLW  30
35F8:  MOVWF  x9F
35FA:  MOVLW  82
35FC:  MOVWF  x9E
....................       } 
....................        
....................       for(i=0;i<floor(Saturacion);i++) 
35FE:  CLRF   2D
3600:  MOVFF  A1,B2
3604:  MOVFF  A0,B1
3608:  MOVFF  9F,B0
360C:  MOVFF  9E,AF
3610:  CALL   1E06
3614:  MOVFF  00,AF
3618:  MOVFF  01,B0
361C:  MOVFF  02,B1
3620:  MOVFF  03,B2
3624:  CLRF   xC8
3626:  MOVFF  2D,C7
362A:  CALL   0940
362E:  MOVFF  03,C6
3632:  MOVFF  02,C5
3636:  MOVFF  01,C4
363A:  MOVFF  00,C3
363E:  MOVFF  B2,CA
3642:  MOVFF  B1,C9
3646:  MOVFF  B0,C8
364A:  MOVFF  AF,C7
364E:  CALL   0B36
3652:  BNC   3670
....................       { 
....................          lcd_gotoxy(i+8,2); 
3654:  MOVLW  08
3656:  ADDWF  2D,W
3658:  MOVWF  xAF
365A:  MOVWF  xC1
365C:  MOVLW  02
365E:  MOVWF  xC2
3660:  CALL   07FA
....................          printf(lcd_putc,"Ñ"); 
3664:  MOVLW  D1
3666:  MOVWF  xC0
3668:  CALL   085C
....................       } 
366C:  INCF   2D,F
366E:  BRA    3600
....................        
....................       for(i=floor(Saturacion);i<11;i++) 
3670:  MOVFF  A1,B2
3674:  MOVFF  A0,B1
3678:  MOVFF  9F,B0
367C:  MOVFF  9E,AF
3680:  CALL   1E06
3684:  MOVFF  03,C6
3688:  MOVFF  02,C5
368C:  MOVFF  01,C4
3690:  MOVFF  00,C3
3694:  CALL   1A94
3698:  MOVFF  01,2D
369C:  MOVF   2D,W
369E:  SUBLW  0A
36A0:  BNC   36BE
....................       { 
....................          lcd_gotoxy(i+8,2); 
36A2:  MOVLW  08
36A4:  ADDWF  2D,W
36A6:  MOVWF  xAF
36A8:  MOVWF  xC1
36AA:  MOVLW  02
36AC:  MOVWF  xC2
36AE:  CALL   07FA
....................          printf(lcd_putc," "); 
36B2:  MOVLW  20
36B4:  MOVWF  xC0
36B6:  CALL   085C
....................       } 
36BA:  INCF   2D,F
36BC:  BRA    369C
....................        
....................       lcd_gotoxy(9,3); 
36BE:  MOVLW  09
36C0:  MOVWF  xC1
36C2:  MOVLW  03
36C4:  MOVWF  xC2
36C6:  CALL   07FA
....................       printf(lcd_putc,"Tempo:%03u:%02u",tempo_minutos,tempo_segundos); 
36CA:  MOVLW  3E
36CC:  MOVWF  FF6
36CE:  MOVLW  06
36D0:  MOVWF  FF7
36D2:  MOVLW  06
36D4:  MOVWF  xB3
36D6:  CALL   0EDA
36DA:  MOVFF  27,AF
36DE:  MOVLW  03
36E0:  MOVWF  xB0
36E2:  CALL   1090
36E6:  MOVLW  3A
36E8:  MOVWF  xC0
36EA:  CALL   085C
36EE:  MOVFF  28,AF
36F2:  MOVLW  01
36F4:  MOVWF  xB0
36F6:  CALL   1090
....................       EliminaRuido(); 
36FA:  CALL   0004
....................    } 
....................      
....................    if(tiempo_cumplido==1) 
36FE:  BTFSS  16.7
3700:  BRA    379A
....................    { 
....................       if(estadoalarma==1) 
3702:  BTFSS  17.4
3704:  BRA    3790
....................       { 
....................          printf(lcd_putc,"\f"); 
3706:  MOVLW  0C
3708:  MOVWF  xC0
370A:  CALL   085C
....................          lcd_gotoxy(1,2); 
370E:  MOVLW  01
3710:  MOVWF  xC1
3712:  MOVLW  02
3714:  MOVWF  xC2
3716:  CALL   07FA
....................          printf(lcd_putc,"  Temporizador  de  "); 
371A:  MOVLW  4E
371C:  MOVWF  FF6
371E:  MOVLW  06
3720:  MOVWF  FF7
3722:  CALL   08BA
....................          lcd_gotoxy(1,3); 
3726:  MOVLW  01
3728:  MOVWF  xC1
372A:  MOVLW  03
372C:  MOVWF  xC2
372E:  CALL   07FA
....................          printf(lcd_putc," Luz UV  Finalizado "); 
3732:  MOVLW  64
3734:  MOVWF  FF6
3736:  MOVLW  06
3738:  MOVWF  FF7
373A:  CALL   08BA
....................          lcd_gotoxy(1,4); 
373E:  MOVLW  01
3740:  MOVWF  xC1
3742:  MOVLW  04
3744:  MOVWF  xC2
3746:  CALL   07FA
....................          printf(lcd_putc,"                    "); 
374A:  MOVLW  7A
374C:  MOVWF  FF6
374E:  MOVLW  06
3750:  MOVWF  FF7
3752:  CALL   08BA
....................          lcd_gotoxy(1,1); 
3756:  MOVLW  01
3758:  MOVWF  xC1
375A:  MOVWF  xC2
375C:  CALL   07FA
....................          printf(lcd_putc,"                    "); 
3760:  MOVLW  90
3762:  MOVWF  FF6
3764:  MOVLW  06
3766:  MOVWF  FF7
3768:  CALL   08BA
....................          for(i=0;i<5;i++) 
376C:  CLRF   2D
376E:  MOVF   2D,W
3770:  SUBLW  04
3772:  BNC   3790
....................          { 
....................             Buzzer_on; 
3774:  BSF    F8C.0
3776:  BCF    F95.0
....................             delay_ms(200); 
3778:  MOVLW  C8
377A:  MOVWF  xC6
377C:  CALL   06E2
....................             Buzzer_off; 
3780:  BCF    F8C.0
3782:  BCF    F95.0
....................             delay_ms(200); 
3784:  MOVLW  C8
3786:  MOVWF  xC6
3788:  CALL   06E2
....................          } 
378C:  INCF   2D,F
378E:  BRA    376E
....................       } 
....................       tiempo_cumplido=0; 
3790:  BCF    16.7
....................       printf(lcd_putc,"\f"); 
3792:  MOVLW  0C
3794:  MOVWF  xC0
3796:  CALL   085C
....................    } 
....................     
....................    if(CaidaPresion>=0.37) 
379A:  MOVLW  A4
379C:  MOVWF  xC6
379E:  MOVLW  70
37A0:  MOVWF  xC5
37A2:  MOVLW  3D
37A4:  MOVWF  xC4
37A6:  MOVLW  7D
37A8:  MOVWF  xC3
37AA:  MOVFF  A5,CA
37AE:  MOVFF  A4,C9
37B2:  MOVFF  A3,C8
37B6:  MOVFF  A2,C7
37BA:  CALL   0B36
37BE:  BC    37C2
37C0:  BNZ   37C8
....................    {  
....................       ActivaBuzzer=1; 
37C2:  MOVLW  01
37C4:  MOVWF  3D
....................    } 
....................    else 
37C6:  BRA    37CE
....................    { 
....................       ActivaBuzzer=0; 
37C8:  CLRF   3D
....................       Buzzer_off; 
37CA:  BCF    F8C.0
37CC:  BCF    F95.0
....................    } 
....................        
....................    //if(Cambio){ 
....................       lcd_gotoxy(1,2); 
37CE:  MOVLW  01
37D0:  MOVWF  xC1
37D2:  MOVLW  02
37D4:  MOVWF  xC2
37D6:  CALL   07FA
....................       printf(lcd_putc,"Filtro:"); 
37DA:  MOVLW  A6
37DC:  MOVWF  FF6
37DE:  MOVLW  06
37E0:  MOVWF  FF7
37E2:  CALL   08BA
....................        
....................       if(estadomv==1) 
37E6:  BTFSS  16.2
37E8:  BRA    3804
....................       { 
....................          lcd_gotoxy(1,4); 
37EA:  MOVLW  01
37EC:  MOVWF  xC1
37EE:  MOVLW  04
37F0:  MOVWF  xC2
37F2:  CALL   07FA
....................          printf(lcd_putc,"Motor:ON ");       
37F6:  MOVLW  AE
37F8:  MOVWF  FF6
37FA:  MOVLW  06
37FC:  MOVWF  FF7
37FE:  CALL   08BA
....................       } 
....................       else 
3802:  BRA    381C
....................       { 
....................          lcd_gotoxy(1,4); 
3804:  MOVLW  01
3806:  MOVWF  xC1
3808:  MOVLW  04
380A:  MOVWF  xC2
380C:  CALL   07FA
....................          printf(lcd_putc,"Motor:OFF"); 
3810:  MOVLW  B8
3812:  MOVWF  FF6
3814:  MOVLW  06
3816:  MOVWF  FF7
3818:  CALL   08BA
....................       } 
....................        
....................       if(estadouv==1) 
381C:  BTFSS  16.0
381E:  BRA    383A
....................       { 
....................          lcd_gotoxy(13,4); 
3820:  MOVLW  0D
3822:  MOVWF  xC1
3824:  MOVLW  04
3826:  MOVWF  xC2
3828:  CALL   07FA
....................          printf(lcd_putc,"UV:ON "); 
382C:  MOVLW  C2
382E:  MOVWF  FF6
3830:  MOVLW  06
3832:  MOVWF  FF7
3834:  CALL   08BA
....................       } 
....................       else 
3838:  BRA    3852
....................       {          
....................          lcd_gotoxy(13,4); 
383A:  MOVLW  0D
383C:  MOVWF  xC1
383E:  MOVLW  04
3840:  MOVWF  xC2
3842:  CALL   07FA
....................          printf(lcd_putc,"UV:OFF"); 
3846:  MOVLW  CA
3848:  MOVWF  FF6
384A:  MOVLW  06
384C:  MOVWF  FF7
384E:  CALL   08BA
....................       } 
....................        
....................       if(estadofl==1) 
3852:  BTFSS  16.1
3854:  BRA    3870
....................       { 
....................          lcd_gotoxy(1,3); 
3856:  MOVLW  01
3858:  MOVWF  xC1
385A:  MOVLW  03
385C:  MOVWF  xC2
385E:  CALL   07FA
....................          printf(lcd_putc,"Luz:ON "); 
3862:  MOVLW  D2
3864:  MOVWF  FF6
3866:  MOVLW  06
3868:  MOVWF  FF7
386A:  CALL   08BA
....................       } 
....................       else 
386E:  BRA    3888
....................       { 
....................          lcd_gotoxy(1,3); 
3870:  MOVLW  01
3872:  MOVWF  xC1
3874:  MOVLW  03
3876:  MOVWF  xC2
3878:  CALL   07FA
....................          printf(lcd_putc,"Luz:OFF"); 
387C:  MOVLW  DA
387E:  MOVWF  FF6
3880:  MOVLW  06
3882:  MOVWF  FF7
3884:  CALL   08BA
....................       }  
....................       Cambio=OFF; 
3888:  BCF    17.5
....................    //} 
....................     
....................    if(estadomv==1){  
388A:  BTFSS  16.2
388C:  BRA    38B0
....................       velocidades(1); 
388E:  MOVLW  01
3890:  MOVWF  xAF
3892:  CALL   1E1C
....................       if(flagmv==0){ 
3896:  BTFSC  17.6
3898:  BRA    38AE
....................          lcd_init();delay_ms(200);lcd_init();flagmv=1;Cambio=ON; 
389A:  CALL   0774
389E:  MOVLW  C8
38A0:  MOVWF  xC6
38A2:  CALL   06E2
38A6:  CALL   0774
38AA:  BSF    17.6
38AC:  BSF    17.5
....................       } 
....................    }else{ 
38AE:  BRA    38CE
....................       velocidades(0);     
38B0:  CLRF   xAF
38B2:  CALL   1E1C
....................       if(flagmv==1){ 
38B6:  BTFSS  17.6
38B8:  BRA    38CE
....................          lcd_init();delay_ms(200);lcd_init();flagmv=0;Cambio=ON; 
38BA:  CALL   0774
38BE:  MOVLW  C8
38C0:  MOVWF  xC6
38C2:  CALL   06E2
38C6:  CALL   0774
38CA:  BCF    17.6
38CC:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(estadouv==1) 
38CE:  BTFSS  16.0
38D0:  BRA    3904
....................    { 
....................       estadomv=0; 
38D2:  BCF    16.2
....................       velocidades(0); 
38D4:  CLRF   xAF
38D6:  CALL   1E1C
....................       estadofl=0; 
38DA:  BCF    16.1
....................       Luz_Blanca_off; 
38DC:  BCF    F8C.2
38DE:  BCF    F95.2
....................       Luz_UV_on; 
38E0:  BSF    F8C.1
38E2:  BCF    F95.1
....................       tiempo_cumplido=0; 
38E4:  BCF    16.7
....................       if(flaguv==0) 
38E6:  BTFSC  17.1
38E8:  BRA    3902
....................       { 
....................          lcd_init();delay_ms(200);lcd_init();flaguv=1;guardaruv=1;Cambio=ON; 
38EA:  CALL   0774
38EE:  MOVLW  C8
38F0:  MOVWF  xC6
38F2:  CALL   06E2
38F6:  CALL   0774
38FA:  BSF    17.1
38FC:  MOVLW  01
38FE:  MOVWF  30
3900:  BSF    17.5
....................       } 
....................    } 
....................    else 
3902:  BRA    3926
....................    { 
....................       estadouv=0; 
3904:  BCF    16.0
....................       Luz_UV_off; 
3906:  BCF    F8C.1
3908:  BCF    F95.1
....................       if(flaguv==1) 
390A:  BTFSS  17.1
390C:  BRA    3926
....................       { 
....................          lcd_init();delay_ms(200);lcd_init();flaguv=0;guardaruv=1;Cambio=ON; 
390E:  CALL   0774
3912:  MOVLW  C8
3914:  MOVWF  xC6
3916:  CALL   06E2
391A:  CALL   0774
391E:  BCF    17.1
3920:  MOVLW  01
3922:  MOVWF  30
3924:  BSF    17.5
....................       } 
....................    } 
....................        
....................    if(estadofl==1) 
3926:  BTFSS  16.1
3928:  BRA    3948
....................    { 
....................       Luz_Blanca_on; 
392A:  BSF    F8C.2
392C:  BCF    F95.2
....................       if(flagfl==0) 
392E:  BTFSC  17.2
3930:  BRA    3946
....................       { 
....................          lcd_init();delay_ms(200);lcd_init();flagfl=1;Cambio=ON; 
3932:  CALL   0774
3936:  MOVLW  C8
3938:  MOVWF  xC6
393A:  CALL   06E2
393E:  CALL   0774
3942:  BSF    17.2
3944:  BSF    17.5
....................       } 
....................    } 
....................    else 
3946:  BRA    3964
....................    { 
....................       Luz_Blanca_off; 
3948:  BCF    F8C.2
394A:  BCF    F95.2
....................       if(flagfl==1) 
394C:  BTFSS  17.2
394E:  BRA    3964
....................       { 
....................          lcd_init();delay_ms(200);lcd_init();flagfl=0;Cambio=ON; 
3950:  CALL   0774
3954:  MOVLW  C8
3956:  MOVWF  xC6
3958:  CALL   06E2
395C:  CALL   0774
3960:  BCF    17.2
3962:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(DOWN)//Si oprime hacia arriba 
3964:  BSF    F96.0
3966:  BTFSS  F84.0
3968:  BRA    3994
....................    { 
....................       delay_ms(20); 
396A:  MOVLW  14
396C:  MOVWF  xC6
396E:  CALL   06E2
....................       if(DOWN){ 
3972:  BSF    F96.0
3974:  BTFSS  F84.0
3976:  BRA    3992
....................          if(Flanco == 0) 
3978:  BTFSC  16.3
397A:  BRA    3992
....................          { 
....................             estadofl=!estadofl;Flanco = 1;delay_ms(300);Cambio=ON; 
397C:  BTG    16.1
397E:  BSF    16.3
3980:  MOVLW  02
3982:  MOVWF  xAF
3984:  MOVLW  96
3986:  MOVWF  xC6
3988:  CALL   06E2
398C:  DECFSZ xAF,F
398E:  BRA    3984
3990:  BSF    17.5
....................          } 
....................       } 
....................    } 
....................    else 
3992:  BRA    3996
....................    { 
....................       Flanco = 0; 
3994:  BCF    16.3
....................    } 
....................     
....................    if(RIGHT)//Si oprime hacia abajo 
3996:  BSF    F96.1
3998:  BTFSS  F84.1
399A:  BRA    39C6
....................    { 
....................       delay_ms(20); 
399C:  MOVLW  14
399E:  MOVWF  xC6
39A0:  CALL   06E2
....................       if(RIGHT){ 
39A4:  BSF    F96.1
39A6:  BTFSS  F84.1
39A8:  BRA    39C4
....................          if(Flanco1 == 0) 
39AA:  BTFSC  16.4
39AC:  BRA    39C4
....................          { 
....................             estadomv=!estadomv;Flanco1 = 1;delay_ms(300);Cambio=ON; 
39AE:  BTG    16.2
39B0:  BSF    16.4
39B2:  MOVLW  02
39B4:  MOVWF  xAF
39B6:  MOVLW  96
39B8:  MOVWF  xC6
39BA:  CALL   06E2
39BE:  DECFSZ xAF,F
39C0:  BRA    39B6
39C2:  BSF    17.5
....................          } 
....................       } 
....................    } 
....................    else 
39C4:  BRA    39C8
....................    { 
....................       Flanco1 = 0; 
39C6:  BCF    16.4
....................    } 
....................     
....................    if(IZQU)//Si oprime hacia izquierda 
39C8:  BSF    F96.2
39CA:  BTFSS  F84.2
39CC:  BRA    39E8
....................    { 
....................       delay_ms(20); 
39CE:  MOVLW  14
39D0:  MOVWF  xC6
39D2:  CALL   06E2
....................       if(IZQU){ 
39D6:  BSF    F96.2
39D8:  BTFSS  F84.2
39DA:  BRA    39E8
....................          delay_ms(150);  
39DC:  MOVLW  96
39DE:  MOVWF  xC6
39E0:  CALL   06E2
....................          estadouv=!estadouv; 
39E4:  BTG    16.0
....................          Cambio=ON; 
39E6:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(UP)//Si oprime hacia izquierda 
39E8:  BSF    F92.5
39EA:  BTFSS  F80.5
39EC:  BRA    3A2A
....................    { 
....................       delay_ms(20); 
39EE:  MOVLW  14
39F0:  MOVWF  xC6
39F2:  CALL   06E2
....................       if(UP){ 
39F6:  BSF    F92.5
39F8:  BTFSS  F80.5
39FA:  BRA    3A2A
....................          delay_ms(200); 
39FC:  MOVLW  C8
39FE:  MOVWF  xC6
3A00:  CALL   06E2
....................          printf(lcd_putc,"\f"); 
3A04:  MOVLW  0C
3A06:  MOVWF  xC0
3A08:  CALL   085C
....................          delay_ms(300); 
3A0C:  MOVLW  02
3A0E:  MOVWF  xAF
3A10:  MOVLW  96
3A12:  MOVWF  xC6
3A14:  CALL   06E2
3A18:  DECFSZ xAF,F
3A1A:  BRA    3A10
....................          Menu=1;  
3A1C:  MOVLW  01
3A1E:  MOVWF  18
....................          paso=0; 
3A20:  CLRF   31
....................          Flecha=2; 
3A22:  MOVLW  02
3A24:  MOVWF  1C
....................          Flecha2=2; 
3A26:  MOVWF  1E
....................          Cambio=ON; 
3A28:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(guardaruv==1) 
3A2A:  DECFSZ 30,W
3A2C:  BRA    3AF0
....................    { 
....................       write_eeprom(7,segundos);write_eeprom(8,minutos); 
3A2E:  MOVLW  07
3A30:  MOVWF  FA9
3A32:  MOVFF  21,FA8
3A36:  BCF    FA6.6
3A38:  BCF    FA6.7
3A3A:  BSF    FA6.2
3A3C:  MOVF   FF2,W
3A3E:  MOVWF  00
3A40:  BCF    FF2.7
3A42:  MOVLB  F
3A44:  MOVLW  55
3A46:  MOVWF  FA7
3A48:  MOVLW  AA
3A4A:  MOVWF  FA7
3A4C:  BSF    FA6.1
3A4E:  BTFSC  FA6.1
3A50:  BRA    3A4E
3A52:  BCF    FA6.2
3A54:  MOVF   00,W
3A56:  IORWF  FF2,F
3A58:  MOVLW  08
3A5A:  MOVWF  FA9
3A5C:  MOVFF  22,FA8
3A60:  BCF    FA6.6
3A62:  BCF    FA6.7
3A64:  BSF    FA6.2
3A66:  MOVF   FF2,W
3A68:  MOVWF  00
3A6A:  BCF    FF2.7
3A6C:  MOVLW  55
3A6E:  MOVWF  FA7
3A70:  MOVLW  AA
3A72:  MOVWF  FA7
3A74:  BSF    FA6.1
3A76:  BTFSC  FA6.1
3A78:  BRA    3A76
3A7A:  BCF    FA6.2
3A7C:  MOVF   00,W
3A7E:  IORWF  FF2,F
....................       horasL=make8(horas,0); 
3A80:  MOVFF  40,23
....................       horasH=make8(horas,1); 
3A84:  MOVFF  41,24
....................       write_eeprom(9,horasL); 
3A88:  MOVLW  09
3A8A:  MOVWF  FA9
3A8C:  MOVFF  23,FA8
3A90:  BCF    FA6.6
3A92:  BCF    FA6.7
3A94:  BSF    FA6.2
3A96:  MOVFF  FF2,00
3A9A:  BCF    FF2.7
3A9C:  MOVLW  55
3A9E:  MOVWF  FA7
3AA0:  MOVLW  AA
3AA2:  MOVWF  FA7
3AA4:  BSF    FA6.1
3AA6:  BTFSC  FA6.1
3AA8:  BRA    3AA6
3AAA:  BCF    FA6.2
3AAC:  MOVF   00,W
3AAE:  IORWF  FF2,F
....................       delay_ms(20); 
3AB0:  MOVLW  14
3AB2:  MOVLB  0
3AB4:  MOVWF  xC6
3AB6:  CALL   06E2
....................       write_eeprom(10,horasH); 
3ABA:  MOVLW  0A
3ABC:  MOVWF  FA9
3ABE:  MOVFF  24,FA8
3AC2:  BCF    FA6.6
3AC4:  BCF    FA6.7
3AC6:  BSF    FA6.2
3AC8:  MOVF   FF2,W
3ACA:  MOVWF  00
3ACC:  BCF    FF2.7
3ACE:  MOVLB  F
3AD0:  MOVLW  55
3AD2:  MOVWF  FA7
3AD4:  MOVLW  AA
3AD6:  MOVWF  FA7
3AD8:  BSF    FA6.1
3ADA:  BTFSC  FA6.1
3ADC:  BRA    3ADA
3ADE:  BCF    FA6.2
3AE0:  MOVF   00,W
3AE2:  IORWF  FF2,F
....................       delay_ms(20); 
3AE4:  MOVLW  14
3AE6:  MOVLB  0
3AE8:  MOVWF  xC6
3AEA:  CALL   06E2
....................       guardaruv=0; 
3AEE:  CLRF   30
....................    } 
....................     
....................    if(segundos>=60) 
3AF0:  MOVF   21,W
3AF2:  SUBLW  3B
3AF4:  BC    3AFA
....................    { 
....................       segundos=0;minutos++; 
3AF6:  CLRF   21
3AF8:  INCF   22,F
....................    } 
....................    if(minutos==60) 
3AFA:  MOVF   22,W
3AFC:  SUBLW  3C
3AFE:  BNZ   3B08
....................    { 
....................       minutos=0;horas++; 
3B00:  CLRF   22
3B02:  INCF   40,F
3B04:  BTFSC  FD8.2
3B06:  INCF   41,F
....................    }   
....................      
....................    } 
.................... //----------------Fin-Menu100--------------------------------------------------------------   
....................    if(tiemporeset>=60) 
3B08:  MOVF   2F,W
3B0A:  SUBLW  3B
3B0C:  BC    3B22
....................    { 
....................       lcd_init();delay_ms(200);lcd_init(); 
3B0E:  CALL   0774
3B12:  MOVLW  C8
3B14:  MOVWF  xC6
3B16:  CALL   06E2
3B1A:  CALL   0774
....................       tiemporeset=0; 
3B1E:  CLRF   2F
....................       Cambio=ON; 
3B20:  BSF    17.5
....................    }    
....................    } 
3B22:  GOTO   1FAC
.................... } 
....................  
3B26:  SLEEP 

Configuration Fuses:
   Word  1: CE20   IESO FCMEN HSPLL PLL1 CPUDIV1 USBDIV
   Word  2: 1E1F   BROWNOUT NOWDT BORV20 NOPUT WDT32768 NOVREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
