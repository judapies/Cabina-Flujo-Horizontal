CCS PCH C Compiler, Version 4.104, 5967               02-jul.-21 07:23

               Filename: D:\Laboratorio\Cabina de Flujo Laminar Horizontal\2021\CFLH 120 CTL Company SAS #004588638 OP2021152\Firmware 2.1.1 - Sin Presion\CabinaCFLH.lst

               ROM used: 19936 bytes (61%)
                         Largest free fragment is 12830
               RAM used: 228 (11%) at main() level
                         265 (13%) worst case
               Stack:    7 worst case (6 in main + 1 for interrupts)

*
0000:  GOTO   29D0
*
0008:  GOTO   00A6
000C:  NOP   
000E:  NOP   
0010:  NOP   
0012:  NOP   
0014:  NOP   
0016:  NOP   
0018:  MOVWF  04
001A:  MOVFF  FD8,05
001E:  MOVFF  FE0,06
0022:  MOVLB  0
0024:  MOVFF  FE9,0C
0028:  MOVFF  FEA,07
002C:  MOVFF  FE1,08
0030:  MOVFF  FE2,09
0034:  MOVFF  FD9,0A
0038:  MOVFF  FDA,0B
003C:  MOVFF  FF3,12
0040:  MOVFF  FF4,13
0044:  MOVFF  FFA,14
0048:  MOVFF  00,0E
004C:  MOVFF  01,0F
0050:  MOVFF  02,10
0054:  MOVFF  03,11
0058:  BTFSS  F9D.0
005A:  GOTO   0064
005E:  BTFSC  F9E.0
0060:  GOTO   0426
0064:  MOVFF  0E,00
0068:  MOVFF  0F,01
006C:  MOVFF  10,02
0070:  MOVFF  11,03
0074:  MOVFF  0C,FE9
0078:  MOVFF  07,FEA
007C:  BSF    07.7
007E:  MOVFF  08,FE1
0082:  MOVFF  09,FE2
0086:  MOVFF  0A,FD9
008A:  MOVFF  0B,FDA
008E:  MOVFF  12,FF3
0092:  MOVFF  13,FF4
0096:  MOVFF  14,FFA
009A:  MOVF   04,W
009C:  MOVFF  06,FE0
00A0:  MOVFF  05,FD8
00A4:  RETFIE 0
00A6:  MOVWF  16
00A8:  MOVFF  FD8,17
00AC:  MOVFF  FE0,18
00B0:  MOVLB  0
00B2:  MOVFF  FE9,1E
00B6:  MOVFF  FEA,19
00BA:  MOVFF  FE1,1A
00BE:  MOVFF  FE2,1B
00C2:  MOVFF  FD9,1C
00C6:  MOVFF  FDA,1D
00CA:  MOVFF  FF3,24
00CE:  MOVFF  FF4,25
00D2:  MOVFF  FFA,26
00D6:  MOVFF  00,20
00DA:  MOVFF  01,21
00DE:  MOVFF  02,22
00E2:  MOVFF  03,23
00E6:  BTFSS  FF2.5
00E8:  GOTO   00F2
00EC:  BTFSC  FF2.2
00EE:  GOTO   03F4
00F2:  BTFSS  FF2.4
00F4:  GOTO   00FE
00F8:  BTFSC  FF2.1
00FA:  GOTO   0248
00FE:  MOVFF  20,00
0102:  MOVFF  21,01
0106:  MOVFF  22,02
010A:  MOVFF  23,03
010E:  MOVFF  1E,FE9
0112:  MOVFF  19,FEA
0116:  BSF    19.7
0118:  MOVFF  1A,FE1
011C:  MOVFF  1B,FE2
0120:  MOVFF  1C,FD9
0124:  MOVFF  1D,FDA
0128:  MOVFF  24,FF3
012C:  MOVFF  25,FF4
0130:  MOVFF  26,FFA
0134:  MOVF   16,W
0136:  MOVFF  18,FE0
013A:  MOVFF  17,FD8
013E:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina de PCR. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz UV, Luz Blanca, Motor Ventilador y Cambio de Contraseña. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... #device HIGH_INTS=TRUE //Activamos niveles de prioridad 
.................... #priority TIMER2 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL5,CPUDIV4,VREGEN,NOMCLR,NOBROWNOUT,NOPUT,NOCPD,NOSTVREN,NOWRT,NOWRTD,NOIESO,NOFCMEN,NOPBADEN,NOWRTC,NOWRTB,NOEBTR,NOEBTRB,NOCPB,NOLPT1OSC,NOXINST,NOICPRT// PLL1 para 4 MHz 
.................... #use delay(clock=16000000) 
*
0BDA:  CLRF   FEA
0BDC:  MOVLW  F7
0BDE:  MOVWF  FE9
0BE0:  MOVF   FEF,W
0BE2:  BZ    0C00
0BE4:  MOVLW  05
0BE6:  MOVWF  01
0BE8:  CLRF   00
0BEA:  DECFSZ 00,F
0BEC:  BRA    0BEA
0BEE:  DECFSZ 01,F
0BF0:  BRA    0BE8
0BF2:  MOVLW  2E
0BF4:  MOVWF  00
0BF6:  DECFSZ 00,F
0BF8:  BRA    0BF6
0BFA:  BRA    0BFC
0BFC:  DECFSZ FEF,F
0BFE:  BRA    0BE4
0C00:  RETLW  00
.................... //#fuses HS,WDT8192,NOPROTECT,NOLVP,NODEBUG,NOSTVREN,NOPUT,NOCPD,NOWRT,NOIESO,NOFCMEN,NOPBADEN,NOWRTC,NOWRTB,NOEBTR,NOEBTRB,NOCPB,NOXINST,NOLPT1OSC,NOMCLR 
.................... //#use delay(clock=20000000) 
.................... #include <MATH.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
*
2680:  BCF    xF3.0
....................    y = x; 
2682:  MOVFF  E7,EC
2686:  MOVFF  E6,EB
268A:  MOVFF  E5,EA
268E:  MOVFF  E4,E9
....................  
....................    if (x < 0) 
2692:  MOVFF  E7,F7
2696:  MOVFF  E6,F6
269A:  MOVFF  E5,F5
269E:  MOVFF  E4,F4
26A2:  CLRF   xFB
26A4:  CLRF   xFA
26A6:  CLRF   xF9
26A8:  CLRF   xF8
26AA:  CALL   10D8
26AE:  BNC   26B8
....................    { 
....................       s = 1; 
26B0:  BSF    xF3.0
....................       y = -y; 
26B2:  MOVF   xEA,W
26B4:  XORLW  80
26B6:  MOVWF  xEA
....................    } 
....................  
....................    if (y <= 32768.0) 
26B8:  MOVFF  EC,F7
26BC:  MOVFF  EB,F6
26C0:  MOVFF  EA,F5
26C4:  MOVFF  E9,F4
26C8:  CLRF   xFB
26CA:  CLRF   xFA
26CC:  CLRF   xF9
26CE:  MOVLW  8E
26D0:  MOVWF  xF8
26D2:  CALL   10D8
26D6:  BC    26DA
26D8:  BNZ   270A
....................   res = (float32)(unsigned int16)y; 
26DA:  MOVFF  EC,F7
26DE:  MOVFF  EB,F6
26E2:  MOVFF  EA,F5
26E6:  MOVFF  E9,F4
26EA:  RCALL  2648
26EC:  MOVFF  02,F9
26F0:  MOVFF  01,F8
26F4:  CALL   0D04
26F8:  MOVFF  03,F0
26FC:  MOVFF  02,EF
2700:  MOVFF  01,EE
2704:  MOVFF  00,ED
....................  
....................  else if (y < 10000000.0) 
2708:  BRA    2894
270A:  MOVFF  EC,F7
270E:  MOVFF  EB,F6
2712:  MOVFF  EA,F5
2716:  MOVFF  E9,F4
271A:  MOVLW  80
271C:  MOVWF  xFB
271E:  MOVLW  96
2720:  MOVWF  xFA
2722:  MOVLW  18
2724:  MOVWF  xF9
2726:  MOVLW  96
2728:  MOVWF  xF8
272A:  CALL   10D8
272E:  BTFSS  FD8.0
2730:  BRA    2884
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
2732:  MOVFF  EC,F7
2736:  MOVFF  EB,F6
273A:  MOVFF  EA,F5
273E:  MOVFF  E9,F4
2742:  CLRF   xFB
2744:  CLRF   xFA
2746:  CLRF   xF9
2748:  MOVLW  8E
274A:  MOVWF  xF8
274C:  CALL   1CF2
2750:  MOVFF  03,F7
2754:  MOVFF  02,F6
2758:  MOVFF  01,F5
275C:  MOVFF  00,F4
2760:  RCALL  2648
2762:  MOVFF  02,F2
2766:  MOVFF  01,F1
....................       y = 32768.0*(y/32768.0 - (float32)l); 
276A:  MOVFF  EC,F7
276E:  MOVFF  EB,F6
2772:  MOVFF  EA,F5
2776:  MOVFF  E9,F4
277A:  CLRF   xFB
277C:  CLRF   xFA
277E:  CLRF   xF9
2780:  MOVLW  8E
2782:  MOVWF  xF8
2784:  CALL   1CF2
2788:  MOVFF  00,F4
278C:  MOVFF  01,F5
2790:  MOVFF  02,F6
2794:  MOVFF  03,F7
2798:  MOVFF  F2,F9
279C:  MOVFF  F1,F8
27A0:  CALL   0D04
27A4:  BSF    FD8.1
27A6:  MOVFF  F7,FB
27AA:  MOVFF  F6,FA
27AE:  MOVFF  F5,F9
27B2:  MOVFF  F4,F8
27B6:  MOVFF  03,FF
27BA:  MOVFF  02,FE
27BE:  MOVFF  01,FD
27C2:  MOVFF  00,FC
27C6:  CALL   1E9A
27CA:  CLRF   xF7
27CC:  CLRF   xF6
27CE:  CLRF   xF5
27D0:  MOVLW  8E
27D2:  MOVWF  xF4
27D4:  MOVFF  03,FB
27D8:  MOVFF  02,FA
27DC:  MOVFF  01,F9
27E0:  MOVFF  00,F8
27E4:  RCALL  211C
27E6:  MOVFF  03,EC
27EA:  MOVFF  02,EB
27EE:  MOVFF  01,EA
27F2:  MOVFF  00,E9
....................   res = 32768.0*(float32)l; 
27F6:  MOVFF  F2,F9
27FA:  MOVFF  F1,F8
27FE:  CALL   0D04
2802:  CLRF   xF7
2804:  CLRF   xF6
2806:  CLRF   xF5
2808:  MOVLW  8E
280A:  MOVWF  xF4
280C:  MOVFF  03,FB
2810:  MOVFF  02,FA
2814:  MOVFF  01,F9
2818:  MOVFF  00,F8
281C:  RCALL  211C
281E:  MOVFF  03,F0
2822:  MOVFF  02,EF
2826:  MOVFF  01,EE
282A:  MOVFF  00,ED
....................   res += (float32)(unsigned int16)y; 
282E:  MOVFF  EC,F7
2832:  MOVFF  EB,F6
2836:  MOVFF  EA,F5
283A:  MOVFF  E9,F4
283E:  RCALL  2648
2840:  MOVFF  02,F9
2844:  MOVFF  01,F8
2848:  CALL   0D04
284C:  BCF    FD8.1
284E:  MOVFF  F0,FB
2852:  MOVFF  EF,FA
2856:  MOVFF  EE,F9
285A:  MOVFF  ED,F8
285E:  MOVFF  03,FF
2862:  MOVFF  02,FE
2866:  MOVFF  01,FD
286A:  MOVFF  00,FC
286E:  CALL   1E9A
2872:  MOVFF  03,F0
2876:  MOVFF  02,EF
287A:  MOVFF  01,EE
287E:  MOVFF  00,ED
....................  } 
....................  
....................  else 
2882:  BRA    2894
....................   res = y; 
2884:  MOVFF  EC,F0
2888:  MOVFF  EB,EF
288C:  MOVFF  EA,EE
2890:  MOVFF  E9,ED
....................  
....................  y = y - (float32)(unsigned int16)y; 
2894:  MOVFF  EC,F7
2898:  MOVFF  EB,F6
289C:  MOVFF  EA,F5
28A0:  MOVFF  E9,F4
28A4:  RCALL  2648
28A6:  MOVFF  02,F9
28AA:  MOVFF  01,F8
28AE:  CALL   0D04
28B2:  BSF    FD8.1
28B4:  MOVFF  EC,FB
28B8:  MOVFF  EB,FA
28BC:  MOVFF  EA,F9
28C0:  MOVFF  E9,F8
28C4:  MOVFF  03,FF
28C8:  MOVFF  02,FE
28CC:  MOVFF  01,FD
28D0:  MOVFF  00,FC
28D4:  CALL   1E9A
28D8:  MOVFF  03,EC
28DC:  MOVFF  02,EB
28E0:  MOVFF  01,EA
28E4:  MOVFF  00,E9
....................  
....................  if (s) 
28E8:  BTFSS  xF3.0
28EA:  BRA    28F2
....................   res = -res; 
28EC:  MOVF   xEE,W
28EE:  XORLW  80
28F0:  MOVWF  xEE
....................  
....................  if (y != 0) 
28F2:  MOVFF  EC,F7
28F6:  MOVFF  EB,F6
28FA:  MOVFF  EA,F5
28FE:  MOVFF  E9,F4
2902:  CLRF   xFB
2904:  CLRF   xFA
2906:  CLRF   xF9
2908:  CLRF   xF8
290A:  CALL   10D8
290E:  BZ    2980
....................  { 
....................   if (s == 1 && n == 0) 
2910:  BTFSS  xF3.0
2912:  BRA    2948
2914:  MOVF   xE8,F
2916:  BNZ   2948
....................    res -= 1.0; 
2918:  BSF    FD8.1
291A:  MOVFF  F0,FB
291E:  MOVFF  EF,FA
2922:  MOVFF  EE,F9
2926:  MOVFF  ED,F8
292A:  CLRF   xFF
292C:  CLRF   xFE
292E:  CLRF   xFD
2930:  MOVLW  7F
2932:  MOVWF  xFC
2934:  CALL   1E9A
2938:  MOVFF  03,F0
293C:  MOVFF  02,EF
2940:  MOVFF  01,EE
2944:  MOVFF  00,ED
....................  
....................   if (s == 0 && n == 1) 
2948:  BTFSC  xF3.0
294A:  BRA    2980
294C:  DECFSZ xE8,W
294E:  BRA    2980
....................    res += 1.0; 
2950:  BCF    FD8.1
2952:  MOVFF  F0,FB
2956:  MOVFF  EF,FA
295A:  MOVFF  EE,F9
295E:  MOVFF  ED,F8
2962:  CLRF   xFF
2964:  CLRF   xFE
2966:  CLRF   xFD
2968:  MOVLW  7F
296A:  MOVWF  xFC
296C:  CALL   1E9A
2970:  MOVFF  03,F0
2974:  MOVFF  02,EF
2978:  MOVFF  01,EE
297C:  MOVFF  00,ED
....................  } 
....................  if (x == 0) 
2980:  MOVFF  E7,F7
2984:  MOVFF  E6,F6
2988:  MOVFF  E5,F5
298C:  MOVFF  E4,F4
2990:  CLRF   xFB
2992:  CLRF   xFA
2994:  CLRF   xF9
2996:  CLRF   xF8
2998:  CALL   10D8
299C:  BNZ   29A6
....................     res = 0; 
299E:  CLRF   xF0
29A0:  CLRF   xEF
29A2:  CLRF   xEE
29A4:  CLRF   xED
....................  
....................  return (res); 
29A6:  MOVFF  ED,00
29AA:  MOVFF  EE,01
29AE:  MOVFF  EF,02
29B2:  MOVFF  F0,03
.................... } 
29B6:  GOTO   29CE (RETURN)
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
29BA:  MOVFF  E3,E7
29BE:  MOVFF  E2,E6
29C2:  MOVFF  E1,E5
29C6:  MOVFF  E0,E4
29CA:  CLRF   xE8
29CC:  BRA    2680
.................... } 
29CE:  RETLW  00
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN unused;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN enable;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTD")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_d(LCD_READ); 
....................       lcd.rw = 1; 
....................       delay_cycles(30);//30 
....................       lcd.enable = 1; 
....................       delay_cycles(30);//30 
....................       high = lcd.data; 
....................       lcd.enable = 0; 
....................       delay_cycles(30);//30 
....................       lcd.enable = 1; 
....................       delay_us(30);//30 
....................       low = lcd.data; 
....................       lcd.enable = 0; 
....................       set_tris_d(LCD_WRITE); 
....................       return( (high<<4) | low); 
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
0C02:  SWAPF  xF8,W
0C04:  ANDLW  F0
0C06:  MOVWF  00
0C08:  MOVLW  0F
0C0A:  ANDWF  F83,W
0C0C:  IORWF  00,W
0C0E:  MOVWF  F83
....................       delay_cycles(30);//30 
0C10:  MOVLW  09
0C12:  MOVWF  00
0C14:  DECFSZ 00,F
0C16:  BRA    0C14
0C18:  BRA    0C1A
....................       lcd.enable = 1; 
0C1A:  BSF    F83.3
....................       delay_us(55);//55 
0C1C:  MOVLW  49
0C1E:  MOVWF  00
0C20:  DECFSZ 00,F
0C22:  BRA    0C20
....................       lcd.enable = 0; 
0C24:  BCF    F83.3
.................... } 
0C26:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
0C28:  BCF    F83.1
....................       //while ( bit_test(lcd_read_byte(),7)); 
....................       delay_ms(1); 
0C2A:  MOVLW  01
0C2C:  MOVWF  xF7
0C2E:  RCALL  0BDA
....................       lcd.rs = address; 
0C30:  BTFSS  xF5.0
0C32:  BCF    F83.1
0C34:  BTFSC  xF5.0
0C36:  BSF    F83.1
....................       delay_cycles(30);//30 
0C38:  MOVLW  09
0C3A:  MOVWF  00
0C3C:  DECFSZ 00,F
0C3E:  BRA    0C3C
0C40:  BRA    0C42
....................       lcd.rw = 0; 
0C42:  BCF    F83.2
....................       delay_cycles(30);//30 
0C44:  MOVLW  09
0C46:  MOVWF  00
0C48:  DECFSZ 00,F
0C4A:  BRA    0C48
0C4C:  BRA    0C4E
....................       lcd.enable = 0; 
0C4E:  BCF    F83.3
....................       lcd_send_nibble(n >> 4); 
0C50:  SWAPF  xF6,W
0C52:  MOVWF  xF7
0C54:  MOVLW  0F
0C56:  ANDWF  xF7,F
0C58:  MOVFF  F7,F8
0C5C:  RCALL  0C02
....................       lcd_send_nibble(n & 0xf); 
0C5E:  MOVF   xF6,W
0C60:  ANDLW  0F
0C62:  MOVWF  xF7
0C64:  MOVWF  xF8
0C66:  RCALL  0C02
.................... } 
0C68:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_d(LCD_WRITE); 
0C6A:  MOVLW  00
0C6C:  MOVWF  F95
....................     lcd.rs = 0; 
0C6E:  BCF    F83.1
....................     lcd.rw = 0; 
0C70:  BCF    F83.2
....................     lcd.enable = 0; 
0C72:  BCF    F83.3
....................     delay_ms(15); 
0C74:  MOVLW  0F
0C76:  MOVWF  xF7
0C78:  RCALL  0BDA
....................     for(i=1;i<=3;++i) { 
0C7A:  MOVLW  01
0C7C:  MOVWF  xE0
0C7E:  MOVF   xE0,W
0C80:  SUBLW  03
0C82:  BNC   0C94
....................        lcd_send_nibble(3); 
0C84:  MOVLW  03
0C86:  MOVWF  xF8
0C88:  RCALL  0C02
....................        delay_ms(5); 
0C8A:  MOVLW  05
0C8C:  MOVWF  xF7
0C8E:  RCALL  0BDA
....................     } 
0C90:  INCF   xE0,F
0C92:  BRA    0C7E
....................     lcd_send_nibble(2); 
0C94:  MOVLW  02
0C96:  MOVWF  xF8
0C98:  RCALL  0C02
....................     for(i=0;i<=3;++i) 
0C9A:  CLRF   xE0
0C9C:  MOVF   xE0,W
0C9E:  SUBLW  03
0CA0:  BNC   0CC6
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
0CA2:  CLRF   03
0CA4:  MOVF   xE0,W
0CA6:  MOVFF  FF2,E1
0CAA:  BCF    FF2.6
0CAC:  BCF    FF2.7
0CAE:  CALL   0140
0CB2:  BTFSC  xE1.6
0CB4:  BSF    FF2.6
0CB6:  BTFSC  xE1.7
0CB8:  BSF    FF2.7
0CBA:  MOVWF  xE1
0CBC:  CLRF   xF5
0CBE:  MOVWF  xF6
0CC0:  RCALL  0C28
0CC2:  INCF   xE0,F
0CC4:  BRA    0C9C
.................... } 
0CC6:  RETLW  00
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
*
16BA:  MOVLW  01
16BC:  SUBWF  xF3,W
16BE:  ADDLW  FC
16C0:  BC    16E0
16C2:  ADDLW  04
16C4:  GOTO   16F2
....................      case 1 : address=0x80;break; 
16C8:  MOVLW  80
16CA:  MOVWF  xF4
16CC:  BRA    16E0
....................      case 2 : address=0xc0;break; 
16CE:  MOVLW  C0
16D0:  MOVWF  xF4
16D2:  BRA    16E0
....................      case 3 : address=0x94;break; 
16D4:  MOVLW  94
16D6:  MOVWF  xF4
16D8:  BRA    16E0
....................      case 4 : address=0xd4;break; 
16DA:  MOVLW  D4
16DC:  MOVWF  xF4
16DE:  BRA    16E0
....................    } 
....................    address+=x-1; 
16E0:  MOVLW  01
16E2:  SUBWF  xF2,W
16E4:  ADDWF  xF4,F
....................    lcd_send_byte(0,address); 
16E6:  CLRF   xF5
16E8:  MOVFF  F4,F6
16EC:  CALL   0C28
.................... } 
16F0:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
....................    if(c=='ñ') 
*
1724:  MOVF   xF1,W
1726:  SUBLW  F1
1728:  BNZ   172E
....................    { 
....................       c=238; 
172A:  MOVLW  EE
172C:  MOVWF  xF1
....................    } 
....................    if(c=='Ñ') 
172E:  MOVF   xF1,W
1730:  SUBLW  D1
1732:  BNZ   1738
....................    { 
....................       c=255; 
1734:  MOVLW  FF
1736:  MOVWF  xF1
....................    } 
....................     
....................    switch (c) { 
1738:  MOVF   xF1,W
173A:  XORLW  0C
173C:  BZ    1748
173E:  XORLW  06
1740:  BZ    1760
1742:  XORLW  02
1744:  BZ    176E
1746:  BRA    177A
....................      case '\f'   : lcd_send_byte(0,1); 
1748:  CLRF   xF5
174A:  MOVLW  01
174C:  MOVWF  xF6
174E:  CALL   0C28
....................                    lcdline=1; 
1752:  MOVLW  01
1754:  MOVWF  28
....................                    delay_ms(2); 
1756:  MOVLW  02
1758:  MOVWF  xF7
175A:  CALL   0BDA
....................                                            break; 
175E:  BRA    1788
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
1760:  INCF   28,F
1762:  MOVLW  01
1764:  MOVWF  xF2
1766:  MOVFF  28,F3
176A:  RCALL  16BA
176C:  BRA    1788
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
176E:  CLRF   xF5
1770:  MOVLW  10
1772:  MOVWF  xF6
1774:  CALL   0C28
1778:  BRA    1788
....................      default     : lcd_send_byte(1,c);     break; 
177A:  MOVLW  01
177C:  MOVWF  xF5
177E:  MOVFF  F1,F6
1782:  CALL   0C28
1786:  BRA    1788
....................    } 
.................... } 
1788:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   UP            !input(PIN_A5) 
.................... #define   DOWN          !input(PIN_E0) 
.................... #define   RIGHT         !input(PIN_E1) 
.................... #define   IZQU          !input(PIN_E2) 
.................... #define   VIDRIOUUP     !input(PIN_A1) 
.................... #define   VIDRIODN      !input(PIN_A2) 
....................  
.................... // Definición de otros puertos 
.................... #define   Luz_UV_on         output_bit(PIN_B4,0) 
.................... #define   Luz_UV_off        output_bit(PIN_B4,1) 
.................... #define   Luz_Blanca_on     output_bit(PIN_B3,0) 
.................... #define   Luz_Blanca_off    output_bit(PIN_B3,1) 
.................... #define   Motor_on          output_bit(PIN_C2,1) 
.................... #define   Motor_off         output_bit(PIN_C2,0) 
.................... #define   Motor2_on         output_bit(PIN_C1,1) 
.................... #define   Motor2_off        output_bit(PIN_C1,0) 
.................... #define   Buzzer_on         output_bit(PIN_C0,1) 
.................... #define   Buzzer_off        output_bit(PIN_C0,0) 
.................... #define   O1_on             output_bit(PIN_B6,1) 
.................... #define   O1_off            output_bit(PIN_B6,0) 
.................... #define   O2_on             output_bit(PIN_B7,1) 
.................... #define   O2_off            output_bit(PIN_B7,0) 
.................... #define   ON  1 
.................... #define   OFF 0 
....................  
.................... short estadouv=0,estadofl=0,estadomv=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,tiempo_cumplido=0,Lectura=0,flaguv=0,flagfl=0,estadobuzzer=0,estadoalarma=0,pulsoSubir=OFF,pulsoBajar=OFF; 
.................... int8 Menu=0, n_opcionH=7,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,segundos=0,minutos=0,horasL=0,horasH=0,G_l=0,G_h=0; 
.................... int8 tempo_minutos=0,tempo_segundos=0,tempo_minutos_pro=0,tempo_segundos_pro=0,r=0,q=0,i=0,unidad2=1,tiemporeset=0,guardaruv=0,motor=0,luz=0,velocidadInicial=10; 
.................... signed int8   paso=0; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... signed  int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 ActivaBuzzer=0,codigoSubir=0,codigoBajar=0,codigoDetener=0,Vel1=4; 
.................... int16 tiempos,horas=0,G16=0; 
.................... float PromPresion[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float V1=0.0,Presion=0.0,Saturacion=0.0,CaidaPresion=0.0; 
.................... float G=2; 
.................... short Cambio=ON,flagmv=0; 
....................  
.................... int16 pulsos=0,tup=0,tdown=0,tright=0,tleft=0,segundosTrabajo=0,horasTrabajo=0; 
.................... short Cruce=OFF; 
....................  
.................... int8 VelMotor=0; 
....................  
.................... int1 BITS[32]; 
.................... int16 Ta,Tb,TICK=0; 
.................... Int1 BIT_START, NUEVO_DATO; 
.................... int BYTE_IR[4]; 
.................... int8 BIT_BYTE(int1 D7, int1 D6, int1 D5, int1 D4, int1 D3, int1 D2, int1 D1, int1 D0); 
....................  
.................... #include <Funciones.h> 
.................... int8 BIT_BYTE(int1 D7, int1 D6, int1 D5, int1 D4, int1 D3, int1 D2, int1 D1, int1 D0); 
....................  
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {   
....................    if(x==1) 
*
1BE4:  DECFSZ xE1,W
1BE6:  BRA    1BFC
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Temporizador UV    ");} 
1BE8:  MOVLW  02
1BEA:  MOVWF  xF2
1BEC:  MOVFF  E2,F3
1BF0:  RCALL  16BA
1BF2:  MOVLW  64
1BF4:  MOVWF  FF6
1BF6:  MOVLW  01
1BF8:  MOVWF  FF7
1BFA:  RCALL  178A
....................    if(x==2) 
1BFC:  MOVF   xE1,W
1BFE:  SUBLW  02
1C00:  BNZ   1C16
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
1C02:  MOVLW  02
1C04:  MOVWF  xF2
1C06:  MOVFF  E2,F3
1C0A:  RCALL  16BA
1C0C:  MOVLW  78
1C0E:  MOVWF  FF6
1C10:  MOVLW  01
1C12:  MOVWF  FF7
1C14:  RCALL  178A
....................    if(x==3) 
1C16:  MOVF   xE1,W
1C18:  SUBLW  03
1C1A:  BNZ   1C30
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo Trabajo UV  ");} 
1C1C:  MOVLW  02
1C1E:  MOVWF  xF2
1C20:  MOVFF  E2,F3
1C24:  RCALL  16BA
1C26:  MOVLW  8C
1C28:  MOVWF  FF6
1C2A:  MOVLW  01
1C2C:  MOVWF  FF7
1C2E:  RCALL  178A
....................    if(x==4) 
1C30:  MOVF   xE1,W
1C32:  SUBLW  04
1C34:  BNZ   1C4A
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Punto Cero         ");} 
1C36:  MOVLW  02
1C38:  MOVWF  xF2
1C3A:  MOVFF  E2,F3
1C3E:  RCALL  16BA
1C40:  MOVLW  A0
1C42:  MOVWF  FF6
1C44:  MOVLW  01
1C46:  MOVWF  FF7
1C48:  RCALL  178A
....................     
....................    if(x==5) 
1C4A:  MOVF   xE1,W
1C4C:  SUBLW  05
1C4E:  BNZ   1C80
....................    {if(estadoalarma==0) 
1C50:  BTFSC  2A.4
1C52:  BRA    1C68
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma          OFF");} 
1C54:  MOVLW  02
1C56:  MOVWF  xF2
1C58:  MOVFF  E2,F3
1C5C:  RCALL  16BA
1C5E:  MOVLW  B4
1C60:  MOVWF  FF6
1C62:  MOVLW  01
1C64:  MOVWF  FF7
1C66:  RCALL  178A
....................    if(estadoalarma==1) 
1C68:  BTFSS  2A.4
1C6A:  BRA    1C80
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma           ON");} 
1C6C:  MOVLW  02
1C6E:  MOVWF  xF2
1C70:  MOVFF  E2,F3
1C74:  RCALL  16BA
1C76:  MOVLW  C8
1C78:  MOVWF  FF6
1C7A:  MOVLW  01
1C7C:  MOVWF  FF7
1C7E:  RCALL  178A
....................    } 
....................     
....................    if(x==6) 
1C80:  MOVF   xE1,W
1C82:  SUBLW  06
1C84:  BNZ   1C9A
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Velocidad          ");} 
1C86:  MOVLW  02
1C88:  MOVWF  xF2
1C8A:  MOVFF  E2,F3
1C8E:  RCALL  16BA
1C90:  MOVLW  DC
1C92:  MOVWF  FF6
1C94:  MOVLW  01
1C96:  MOVWF  FF7
1C98:  RCALL  178A
.................... } 
1C9A:  RETLW  00
....................  
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
1C9C:  RLCF   xF1,W
1C9E:  MOVWF  00
1CA0:  RLCF   00,F
1CA2:  MOVLW  FC
1CA4:  ANDWF  00,F
1CA6:  MOVFF  00,01
1CAA:  MOVF   FC2,W
1CAC:  ANDLW  C3
1CAE:  IORWF  00,W
1CB0:  MOVWF  FC2
1CB2:  MOVLW  0A
1CB4:  MOVWF  xF7
1CB6:  CALL   0BDA
1CBA:  BSF    FC2.1
1CBC:  BTFSC  FC2.1
1CBE:  BRA    1CBC
1CC0:  MOVFF  FC4,03
1CC4:  MOVFF  FC3,F8
1CC8:  MOVFF  FC4,F9
1CCC:  CALL   0D04
1CD0:  MOVFF  03,F5
1CD4:  MOVFF  02,F4
1CD8:  MOVFF  01,F3
1CDC:  MOVFF  00,F2
1CE0:  MOVFF  F2,00
1CE4:  MOVFF  F3,01
1CE8:  MOVFF  F4,02
1CEC:  MOVFF  F5,03
.................... } 
1CF0:  RETLW  00
....................  
.................... float Leer_Sensor_Presion(int media){ 
*
220E:  CLRF   xE4
2210:  CLRF   xE3
2212:  CLRF   xE2
2214:  CLRF   xE1
2216:  CLRF   xE8
2218:  CLRF   xE7
221A:  CLRF   xE6
221C:  CLRF   xE5
221E:  CLRF   xEC
2220:  CLRF   xEB
2222:  CLRF   xEA
2224:  CLRF   xE9
2226:  CLRF   xF0
2228:  CLRF   xEF
222A:  CLRF   xEE
222C:  CLRF   xED
....................    float promediopresion=0.0; 
....................    float VG=0.0,VS=0.0,G2=0.0; 
....................     
....................    V1=sensores(0);  
222E:  CLRF   xF1
2230:  RCALL  1C9C
2232:  MOVFF  03,B1
2236:  MOVFF  02,B0
223A:  MOVFF  01,AF
223E:  MOVFF  00,AE
....................    //V1 = (x_uno*5.0)/1023.0;   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
....................    Presion=(V1/G)-1.0;// Presion=(Voltaje/Ganancia)-1 
2242:  MOVFF  B1,F7
2246:  MOVFF  B0,F6
224A:  MOVFF  AF,F5
224E:  MOVFF  AE,F4
2252:  MOVFF  C1,FB
2256:  MOVFF  C0,FA
225A:  MOVFF  BF,F9
225E:  MOVFF  BE,F8
2262:  RCALL  1CF2
2264:  MOVFF  00,F1
2268:  MOVFF  01,F2
226C:  MOVFF  02,F3
2270:  MOVFF  03,F4
2274:  BSF    FD8.1
2276:  MOVFF  03,FB
227A:  MOVFF  02,FA
227E:  MOVFF  01,F9
2282:  MOVFF  00,F8
2286:  CLRF   xFF
2288:  CLRF   xFE
228A:  CLRF   xFD
228C:  MOVLW  7F
228E:  MOVWF  xFC
2290:  RCALL  1E9A
2292:  MOVFF  03,B5
2296:  MOVFF  02,B4
229A:  MOVFF  01,B3
229E:  MOVFF  00,B2
....................    //VS = (V1*5.0)/1023.0;   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
....................    //G2=G; 
....................    //VG = (G2*5.0)/1023.0; 
....................    //Presion=(VS-VG);// Presion=(Voltaje/Ganancia)-1 
....................     
....................    if(Presion>0) 
22A2:  CLRF   xF7
22A4:  CLRF   xF6
22A6:  CLRF   xF5
22A8:  CLRF   xF4
22AA:  MOVFF  B5,FB
22AE:  MOVFF  B4,FA
22B2:  MOVFF  B3,F9
22B6:  MOVFF  B2,F8
22BA:  CALL   10D8
22BE:  BNC   22C8
....................       Presion=0.0; 
22C0:  CLRF   xB5
22C2:  CLRF   xB4
22C4:  CLRF   xB3
22C6:  CLRF   xB2
....................    
....................    if(Presion<0.0){ 
22C8:  MOVFF  B5,F7
22CC:  MOVFF  B4,F6
22D0:  MOVFF  B3,F5
22D4:  MOVFF  B2,F4
22D8:  CLRF   xFB
22DA:  CLRF   xFA
22DC:  CLRF   xF9
22DE:  CLRF   xF8
22E0:  CALL   10D8
22E4:  BNC   2314
....................       Presion=Presion*-1; 
22E6:  MOVFF  B5,F7
22EA:  MOVFF  B4,F6
22EE:  MOVFF  B3,F5
22F2:  MOVFF  B2,F4
22F6:  CLRF   xFB
22F8:  CLRF   xFA
22FA:  MOVLW  80
22FC:  MOVWF  xF9
22FE:  MOVLW  7F
2300:  MOVWF  xF8
2302:  RCALL  211C
2304:  MOVFF  03,B5
2308:  MOVFF  02,B4
230C:  MOVFF  01,B3
2310:  MOVFF  00,B2
....................    } 
....................  
....................    if(r>media-1) 
2314:  MOVLW  01
2316:  SUBWF  xE0,W
2318:  SUBWF  3E,W
231A:  BZ    2320
231C:  BNC   2320
....................    {r=0;} 
231E:  CLRF   3E
....................    PromPresion[r]=Presion;r++; 
2320:  MOVF   3E,W
2322:  MULLW  04
2324:  MOVF   FF3,W
2326:  CLRF   03
2328:  ADDLW  5E
232A:  MOVWF  FE9
232C:  MOVLW  00
232E:  ADDWFC 03,W
2330:  MOVWF  FEA
2332:  MOVFF  B2,FEF
2336:  MOVFF  B3,FEC
233A:  MOVFF  B4,FEC
233E:  MOVFF  B5,FEC
2342:  INCF   3E,F
....................           
....................    for(q=0;q<=(media-1);q++) 
2344:  CLRF   3F
2346:  MOVLW  01
2348:  SUBWF  xE0,W
234A:  SUBWF  3F,W
234C:  BZ    2350
234E:  BC    23BA
....................    { 
....................       promediopresion+=PromPresion[q]; 
2350:  MOVF   3F,W
2352:  MULLW  04
2354:  MOVF   FF3,W
2356:  CLRF   03
2358:  ADDLW  5E
235A:  MOVWF  FE9
235C:  MOVLW  00
235E:  ADDWFC 03,W
2360:  MOVWF  FEA
2362:  MOVFF  FEF,00
2366:  MOVFF  FEC,01
236A:  MOVFF  FEC,02
236E:  MOVFF  FEC,03
2372:  MOVFF  FEA,F2
2376:  MOVFF  FE9,F1
237A:  BCF    FD8.1
237C:  MOVFF  E4,FB
2380:  MOVFF  E3,FA
2384:  MOVFF  E2,F9
2388:  MOVFF  E1,F8
238C:  MOVFF  03,FF
2390:  MOVFF  02,FE
2394:  MOVFF  01,FD
2398:  MOVFF  00,FC
239C:  RCALL  1E9A
239E:  MOVFF  F2,FEA
23A2:  MOVFF  F1,FE9
23A6:  MOVFF  03,E4
23AA:  MOVFF  02,E3
23AE:  MOVFF  01,E2
23B2:  MOVFF  00,E1
....................    }  
23B6:  INCF   3F,F
23B8:  BRA    2346
....................    promediopresion=promediopresion/media;    
23BA:  CLRF   xF9
23BC:  MOVFF  E0,F8
23C0:  CALL   0D04
23C4:  MOVFF  E4,F7
23C8:  MOVFF  E3,F6
23CC:  MOVFF  E2,F5
23D0:  MOVFF  E1,F4
23D4:  MOVFF  03,FB
23D8:  MOVFF  02,FA
23DC:  MOVFF  01,F9
23E0:  MOVFF  00,F8
23E4:  RCALL  1CF2
23E6:  MOVFF  03,E4
23EA:  MOVFF  02,E3
23EE:  MOVFF  01,E2
23F2:  MOVFF  00,E1
....................     
....................    return promediopresion; 
23F6:  MOVFF  E1,00
23FA:  MOVFF  E2,01
23FE:  MOVFF  E3,02
2402:  MOVFF  E4,03
.................... } 
2406:  RETLW  00
....................  
.................... void EliminaRuido(void){ 
....................    /*if(Menu==50){ 
....................       dato[0]=lcd_getc(1,2); 
....................       dato[1]=lcd_getc(2,2); 
....................       dato[2]=lcd_getc(3,2); 
....................       if(dato[0]!=70 || dato[1]!=105 || dato[2]!=108){ 
....................          lcd_init();delay_ms(200);lcd_init(); 
....................          Cambio=ON; 
....................       } 
....................    }*/ 
.................... } 
*
0004:  RETLW  00
....................  
.................... void ConfigInterrupciones (void){ 
....................    delay_ms(200); 
*
0CC8:  MOVLW  C8
0CCA:  MOVWF  xF7
0CCC:  RCALL  0BDA
....................    lcd_init(); 
0CCE:  RCALL  0C6A
....................    set_tris_a(0XFF); 
0CD0:  MOVLW  FF
0CD2:  MOVWF  F92
....................    set_tris_e(0XFF); 
0CD4:  MOVWF  F96
....................    enable_interrupts(global); 
0CD6:  MOVLW  C0
0CD8:  IORWF  FF2,F
....................    enable_interrupts(INT_EXT_L2H); 
0CDA:  BSF    FF2.4
0CDC:  BSF    FF1.6
....................    //enable_interrupts(INT_EXT1_H2L); 
....................    setup_timer_0(RTCC_8_BIT|RTCC_DIV_256); 
0CDE:  MOVLW  C7
0CE0:  MOVWF  FD5
....................    enable_interrupts(INT_TIMER0); 
0CE2:  BSF    FF2.5
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
0CE4:  MOVLW  85
0CE6:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
0CE8:  BSF    F9D.0
....................    //setup_timer_2(T2_DIV_BY_16,0xfd,1); 
....................    //enable_interrupts(INT_TIMER2); 
....................    setup_adc_ports(AN0); 
0CEA:  MOVF   FC1,W
0CEC:  ANDLW  C0
0CEE:  IORLW  0E
0CF0:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
0CF2:  BCF    FC0.0
0CF4:  BSF    FC0.1
0CF6:  BCF    FC0.2
0CF8:  BSF    FC0.7
0CFA:  BSF    FC2.0
....................    enable_interrupts(global); 
0CFC:  MOVLW  C0
0CFE:  IORWF  FF2,F
.................... } 
0D00:  GOTO   2B82 (RETURN)
....................  
.................... void MensajeBienvenida (void){ 
....................    lcd_gotoxy(1,1); 
*
17AA:  MOVLW  01
17AC:  MOVWF  xF2
17AE:  MOVWF  xF3
17B0:  RCALL  16BA
....................    printf(lcd_putc,"CABINA FLUJO LAMINAR"); 
17B2:  MOVLW  F0
17B4:  MOVWF  FF6
17B6:  MOVLW  01
17B8:  MOVWF  FF7
17BA:  RCALL  178A
....................    lcd_gotoxy(1,2); 
17BC:  MOVLW  01
17BE:  MOVWF  xF2
17C0:  MOVLW  02
17C2:  MOVWF  xF3
17C4:  RCALL  16BA
....................    printf(lcd_putc,"     HORIZONTAL     "); 
17C6:  MOVLW  06
17C8:  MOVWF  FF6
17CA:  MOVLW  02
17CC:  MOVWF  FF7
17CE:  RCALL  178A
....................    lcd_gotoxy(1,3); 
17D0:  MOVLW  01
17D2:  MOVWF  xF2
17D4:  MOVLW  03
17D6:  MOVWF  xF3
17D8:  RCALL  16BA
....................    printf(lcd_putc,"    JP  INGLOBAL    "); 
17DA:  MOVLW  1C
17DC:  MOVWF  FF6
17DE:  MOVLW  02
17E0:  MOVWF  FF7
17E2:  RCALL  178A
....................    lcd_gotoxy(1,4); 
17E4:  MOVLW  01
17E6:  MOVWF  xF2
17E8:  MOVLW  04
17EA:  MOVWF  xF3
17EC:  RCALL  16BA
....................    printf(lcd_putc,"     REF:JPCH48     "); 
17EE:  MOVLW  32
17F0:  MOVWF  FF6
17F2:  MOVLW  02
17F4:  MOVWF  FF7
17F6:  RCALL  178A
....................    delay_ms(2000); 
17F8:  MOVLW  08
17FA:  MOVWF  xE0
17FC:  MOVLW  FA
17FE:  MOVWF  xF7
1800:  CALL   0BDA
1804:  DECFSZ xE0,F
1806:  BRA    17FC
....................    printf(lcd_putc,"\f"); 
1808:  MOVLW  0C
180A:  MOVWF  xF1
180C:  RCALL  1724
.................... } 
180E:  GOTO   2B94 (RETURN)
....................  
.................... void LeeEEPROM (void){ 
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0); 
*
0D3A:  MOVFF  FF2,E0
0D3E:  BCF    FF2.6
0D40:  BCF    FF2.7
0D42:  CLRF   FA9
0D44:  BCF    FA6.6
0D46:  BCF    FA6.7
0D48:  BSF    FA6.0
0D4A:  MOVF   FA8,W
0D4C:  BTFSC  xE0.6
0D4E:  BSF    FF2.6
0D50:  BTFSC  xE0.7
0D52:  BSF    FF2.7
0D54:  MOVWF  4F
....................    delay_ms(20);  
0D56:  MOVLW  14
0D58:  MOVWF  xF7
0D5A:  RCALL  0BDA
....................    contrasena[1]=read_eeprom(1); 
0D5C:  MOVFF  FF2,E0
0D60:  BCF    FF2.6
0D62:  BCF    FF2.7
0D64:  MOVLW  01
0D66:  MOVWF  FA9
0D68:  BCF    FA6.6
0D6A:  BCF    FA6.7
0D6C:  BSF    FA6.0
0D6E:  MOVF   FA8,W
0D70:  BTFSC  xE0.6
0D72:  BSF    FF2.6
0D74:  BTFSC  xE0.7
0D76:  BSF    FF2.7
0D78:  MOVWF  50
....................    delay_ms(20); 
0D7A:  MOVLW  14
0D7C:  MOVWF  xF7
0D7E:  RCALL  0BDA
....................    contrasena[2]=read_eeprom(2); 
0D80:  MOVFF  FF2,E0
0D84:  BCF    FF2.6
0D86:  BCF    FF2.7
0D88:  MOVLW  02
0D8A:  MOVWF  FA9
0D8C:  BCF    FA6.6
0D8E:  BCF    FA6.7
0D90:  BSF    FA6.0
0D92:  MOVF   FA8,W
0D94:  BTFSC  xE0.6
0D96:  BSF    FF2.6
0D98:  BTFSC  xE0.7
0D9A:  BSF    FF2.7
0D9C:  MOVWF  51
....................    delay_ms(20);  
0D9E:  MOVLW  14
0DA0:  MOVWF  xF7
0DA2:  RCALL  0BDA
....................    contrasena[3]=read_eeprom(3); 
0DA4:  MOVFF  FF2,E0
0DA8:  BCF    FF2.6
0DAA:  BCF    FF2.7
0DAC:  MOVLW  03
0DAE:  MOVWF  FA9
0DB0:  BCF    FA6.6
0DB2:  BCF    FA6.7
0DB4:  BSF    FA6.0
0DB6:  MOVF   FA8,W
0DB8:  BTFSC  xE0.6
0DBA:  BSF    FF2.6
0DBC:  BTFSC  xE0.7
0DBE:  BSF    FF2.7
0DC0:  MOVWF  52
....................    delay_ms(20); 
0DC2:  MOVLW  14
0DC4:  MOVWF  xF7
0DC6:  RCALL  0BDA
....................    estadoalarma=read_eeprom(4); 
0DC8:  MOVFF  FF2,E0
0DCC:  BCF    FF2.6
0DCE:  BCF    FF2.7
0DD0:  MOVLW  04
0DD2:  MOVWF  FA9
0DD4:  BCF    FA6.6
0DD6:  BCF    FA6.7
0DD8:  BSF    FA6.0
0DDA:  MOVF   FA8,W
0DDC:  BTFSC  xE0.6
0DDE:  BSF    FF2.6
0DE0:  BTFSC  xE0.7
0DE2:  BSF    FF2.7
0DE4:  MOVWF  01
0DE6:  BCF    2A.4
0DE8:  BTFSC  01.0
0DEA:  BSF    2A.4
....................    delay_ms(20); 
0DEC:  MOVLW  14
0DEE:  MOVWF  xF7
0DF0:  RCALL  0BDA
....................    tempo_minutos=read_eeprom(5); 
0DF2:  MOVFF  FF2,E0
0DF6:  BCF    FF2.6
0DF8:  BCF    FF2.7
0DFA:  MOVLW  05
0DFC:  MOVWF  FA9
0DFE:  BCF    FA6.6
0E00:  BCF    FA6.7
0E02:  BSF    FA6.0
0E04:  MOVF   FA8,W
0E06:  BTFSC  xE0.6
0E08:  BSF    FF2.6
0E0A:  BTFSC  xE0.7
0E0C:  BSF    FF2.7
0E0E:  MOVWF  3A
....................    delay_ms(20); 
0E10:  MOVLW  14
0E12:  MOVWF  xF7
0E14:  RCALL  0BDA
....................    tempo_segundos=read_eeprom(6); 
0E16:  MOVFF  FF2,E0
0E1A:  BCF    FF2.6
0E1C:  BCF    FF2.7
0E1E:  MOVLW  06
0E20:  MOVWF  FA9
0E22:  BCF    FA6.6
0E24:  BCF    FA6.7
0E26:  BSF    FA6.0
0E28:  MOVF   FA8,W
0E2A:  BTFSC  xE0.6
0E2C:  BSF    FF2.6
0E2E:  BTFSC  xE0.7
0E30:  BSF    FF2.7
0E32:  MOVWF  3B
....................    delay_ms(20); 
0E34:  MOVLW  14
0E36:  MOVWF  xF7
0E38:  RCALL  0BDA
....................    segundos=read_eeprom(7); 
0E3A:  MOVFF  FF2,E0
0E3E:  BCF    FF2.6
0E40:  BCF    FF2.7
0E42:  MOVLW  07
0E44:  MOVWF  FA9
0E46:  BCF    FA6.6
0E48:  BCF    FA6.7
0E4A:  BSF    FA6.0
0E4C:  MOVF   FA8,W
0E4E:  BTFSC  xE0.6
0E50:  BSF    FF2.6
0E52:  BTFSC  xE0.7
0E54:  BSF    FF2.7
0E56:  MOVWF  34
....................    delay_ms(20); 
0E58:  MOVLW  14
0E5A:  MOVWF  xF7
0E5C:  RCALL  0BDA
....................    minutos=read_eeprom(8); 
0E5E:  MOVFF  FF2,E0
0E62:  BCF    FF2.6
0E64:  BCF    FF2.7
0E66:  MOVLW  08
0E68:  MOVWF  FA9
0E6A:  BCF    FA6.6
0E6C:  BCF    FA6.7
0E6E:  BSF    FA6.0
0E70:  MOVF   FA8,W
0E72:  BTFSC  xE0.6
0E74:  BSF    FF2.6
0E76:  BTFSC  xE0.7
0E78:  BSF    FF2.7
0E7A:  MOVWF  35
....................    delay_ms(20); 
0E7C:  MOVLW  14
0E7E:  MOVWF  xF7
0E80:  RCALL  0BDA
....................    horasL=read_eeprom(9); 
0E82:  MOVFF  FF2,E0
0E86:  BCF    FF2.6
0E88:  BCF    FF2.7
0E8A:  MOVLW  09
0E8C:  MOVWF  FA9
0E8E:  BCF    FA6.6
0E90:  BCF    FA6.7
0E92:  BSF    FA6.0
0E94:  MOVF   FA8,W
0E96:  BTFSC  xE0.6
0E98:  BSF    FF2.6
0E9A:  BTFSC  xE0.7
0E9C:  BSF    FF2.7
0E9E:  MOVWF  36
....................    delay_ms(20); 
0EA0:  MOVLW  14
0EA2:  MOVWF  xF7
0EA4:  RCALL  0BDA
....................    horasH=read_eeprom(10); 
0EA6:  MOVFF  FF2,E0
0EAA:  BCF    FF2.6
0EAC:  BCF    FF2.7
0EAE:  MOVLW  0A
0EB0:  MOVWF  FA9
0EB2:  BCF    FA6.6
0EB4:  BCF    FA6.7
0EB6:  BSF    FA6.0
0EB8:  MOVF   FA8,W
0EBA:  BTFSC  xE0.6
0EBC:  BSF    FF2.6
0EBE:  BTFSC  xE0.7
0EC0:  BSF    FF2.7
0EC2:  MOVWF  37
....................    delay_ms(20); 
0EC4:  MOVLW  14
0EC6:  MOVWF  xF7
0EC8:  RCALL  0BDA
....................    G_l=read_eeprom(11); 
0ECA:  MOVFF  FF2,E0
0ECE:  BCF    FF2.6
0ED0:  BCF    FF2.7
0ED2:  MOVLW  0B
0ED4:  MOVWF  FA9
0ED6:  BCF    FA6.6
0ED8:  BCF    FA6.7
0EDA:  BSF    FA6.0
0EDC:  MOVF   FA8,W
0EDE:  BTFSC  xE0.6
0EE0:  BSF    FF2.6
0EE2:  BTFSC  xE0.7
0EE4:  BSF    FF2.7
0EE6:  MOVWF  38
....................    delay_ms(20); 
0EE8:  MOVLW  14
0EEA:  MOVWF  xF7
0EEC:  RCALL  0BDA
....................    G_h=read_eeprom(12); 
0EEE:  MOVFF  FF2,E0
0EF2:  BCF    FF2.6
0EF4:  BCF    FF2.7
0EF6:  MOVLW  0C
0EF8:  MOVWF  FA9
0EFA:  BCF    FA6.6
0EFC:  BCF    FA6.7
0EFE:  BSF    FA6.0
0F00:  MOVF   FA8,W
0F02:  BTFSC  xE0.6
0F04:  BSF    FF2.6
0F06:  BTFSC  xE0.7
0F08:  BSF    FF2.7
0F0A:  MOVWF  39
....................    delay_ms(20); 
0F0C:  MOVLW  14
0F0E:  MOVWF  xF7
0F10:  RCALL  0BDA
....................    Vel1=read_eeprom(13); 
0F12:  MOVFF  FF2,E0
0F16:  BCF    FF2.6
0F18:  BCF    FF2.7
0F1A:  MOVLW  0D
0F1C:  MOVWF  FA9
0F1E:  BCF    FA6.6
0F20:  BCF    FA6.7
0F22:  BSF    FA6.0
0F24:  MOVF   FA8,W
0F26:  BTFSC  xE0.6
0F28:  BSF    FF2.6
0F2A:  BTFSC  xE0.7
0F2C:  BSF    FF2.7
0F2E:  MOVWF  57
....................    delay_ms(20); 
0F30:  MOVLW  14
0F32:  MOVWF  xF7
0F34:  RCALL  0BDA
....................    codigoSubir=read_eeprom(15); 
0F36:  MOVFF  FF2,E0
0F3A:  BCF    FF2.6
0F3C:  BCF    FF2.7
0F3E:  MOVLW  0F
0F40:  MOVWF  FA9
0F42:  BCF    FA6.6
0F44:  BCF    FA6.7
0F46:  BSF    FA6.0
0F48:  MOVF   FA8,W
0F4A:  BTFSC  xE0.6
0F4C:  BSF    FF2.6
0F4E:  BTFSC  xE0.7
0F50:  BSF    FF2.7
0F52:  MOVWF  54
....................    delay_ms(20); 
0F54:  MOVLW  14
0F56:  MOVWF  xF7
0F58:  RCALL  0BDA
....................    codigoBajar=read_eeprom(16); 
0F5A:  MOVFF  FF2,E0
0F5E:  BCF    FF2.6
0F60:  BCF    FF2.7
0F62:  MOVLW  10
0F64:  MOVWF  FA9
0F66:  BCF    FA6.6
0F68:  BCF    FA6.7
0F6A:  BSF    FA6.0
0F6C:  MOVF   FA8,W
0F6E:  BTFSC  xE0.6
0F70:  BSF    FF2.6
0F72:  BTFSC  xE0.7
0F74:  BSF    FF2.7
0F76:  MOVWF  55
....................    delay_ms(20); 
0F78:  MOVLW  14
0F7A:  MOVWF  xF7
0F7C:  RCALL  0BDA
....................    codigoDetener=read_eeprom(17); 
0F7E:  MOVFF  FF2,E0
0F82:  BCF    FF2.6
0F84:  BCF    FF2.7
0F86:  MOVLW  11
0F88:  MOVWF  FA9
0F8A:  BCF    FA6.6
0F8C:  BCF    FA6.7
0F8E:  BSF    FA6.0
0F90:  MOVF   FA8,W
0F92:  BTFSC  xE0.6
0F94:  BSF    FF2.6
0F96:  BTFSC  xE0.7
0F98:  BSF    FF2.7
0F9A:  MOVWF  56
....................    delay_ms(20); 
0F9C:  MOVLW  14
0F9E:  MOVWF  xF7
0FA0:  RCALL  0BDA
....................    G16=make16(G_h,G_l); 
0FA2:  MOVFF  39,5D
0FA6:  MOVFF  38,5C
....................    G=G16; 
0FAA:  MOVFF  5D,F9
0FAE:  MOVFF  5C,F8
0FB2:  RCALL  0D04
0FB4:  MOVFF  03,C1
0FB8:  MOVFF  02,C0
0FBC:  MOVFF  01,BF
0FC0:  MOVFF  00,BE
....................    horasTrabajo=make16(read_eeprom(19),read_eeprom(18)); 
0FC4:  MOVFF  FF2,E0
0FC8:  BCF    FF2.6
0FCA:  BCF    FF2.7
0FCC:  MOVLW  13
0FCE:  MOVWF  FA9
0FD0:  BCF    FA6.6
0FD2:  BCF    FA6.7
0FD4:  BSF    FA6.0
0FD6:  MOVF   FA8,W
0FD8:  BTFSC  xE0.6
0FDA:  BSF    FF2.6
0FDC:  BTFSC  xE0.7
0FDE:  BSF    FF2.7
0FE0:  MOVWF  xE1
0FE2:  MOVFF  FF2,E2
0FE6:  BCF    FF2.6
0FE8:  BCF    FF2.7
0FEA:  MOVLW  12
0FEC:  MOVWF  FA9
0FEE:  BCF    FA6.6
0FF0:  BCF    FA6.7
0FF2:  BSF    FA6.0
0FF4:  MOVF   FA8,W
0FF6:  BTFSC  xE2.6
0FF8:  BSF    FF2.6
0FFA:  BTFSC  xE2.7
0FFC:  BSF    FF2.7
0FFE:  MOVWF  xE3
1000:  MOVFF  E1,D0
1004:  MOVFF  E3,CF
....................    delay_ms(20); 
1008:  MOVLW  14
100A:  MOVWF  xF7
100C:  RCALL  0BDA
....................    segundosTrabajo=make16(read_eeprom(21),read_eeprom(20)); 
100E:  MOVFF  FF2,E0
1012:  BCF    FF2.6
1014:  BCF    FF2.7
1016:  MOVLW  15
1018:  MOVWF  FA9
101A:  BCF    FA6.6
101C:  BCF    FA6.7
101E:  BSF    FA6.0
1020:  MOVF   FA8,W
1022:  BTFSC  xE0.6
1024:  BSF    FF2.6
1026:  BTFSC  xE0.7
1028:  BSF    FF2.7
102A:  MOVWF  xE1
102C:  MOVFF  FF2,E2
1030:  BCF    FF2.6
1032:  BCF    FF2.7
1034:  MOVLW  14
1036:  MOVWF  FA9
1038:  BCF    FA6.6
103A:  BCF    FA6.7
103C:  BSF    FA6.0
103E:  MOVF   FA8,W
1040:  BTFSC  xE2.6
1042:  BSF    FF2.6
1044:  BTFSC  xE2.7
1046:  BSF    FF2.7
1048:  MOVWF  xE3
104A:  MOVFF  E1,CE
104E:  MOVFF  E3,CD
....................    delay_ms(20); 
1052:  MOVLW  14
1054:  MOVWF  xF7
1056:  RCALL  0BDA
....................    motor=read_eeprom(22); 
1058:  MOVFF  FF2,E0
105C:  BCF    FF2.6
105E:  BCF    FF2.7
1060:  MOVLW  16
1062:  MOVWF  FA9
1064:  BCF    FA6.6
1066:  BCF    FA6.7
1068:  BSF    FA6.0
106A:  MOVF   FA8,W
106C:  BTFSC  xE0.6
106E:  BSF    FF2.6
1070:  BTFSC  xE0.7
1072:  BSF    FF2.7
1074:  MOVWF  44
....................    delay_ms(20); 
1076:  MOVLW  14
1078:  MOVWF  xF7
107A:  RCALL  0BDA
....................    luz=read_eeprom(23); 
107C:  MOVFF  FF2,E0
1080:  BCF    FF2.6
1082:  BCF    FF2.7
1084:  MOVLW  17
1086:  MOVWF  FA9
1088:  BCF    FA6.6
108A:  BCF    FA6.7
108C:  BSF    FA6.0
108E:  MOVF   FA8,W
1090:  BTFSC  xE0.6
1092:  BSF    FF2.6
1094:  BTFSC  xE0.7
1096:  BSF    FF2.7
1098:  MOVWF  45
....................    delay_ms(20); 
109A:  MOVLW  14
109C:  MOVWF  xF7
109E:  RCALL  0BDA
....................    velocidadInicial=read_eeprom(24); 
10A0:  MOVFF  FF2,E0
10A4:  BCF    FF2.6
10A6:  BCF    FF2.7
10A8:  MOVLW  18
10AA:  MOVWF  FA9
10AC:  BCF    FA6.6
10AE:  BCF    FA6.7
10B0:  BSF    FA6.0
10B2:  MOVF   FA8,W
10B4:  BTFSC  xE0.6
10B6:  BSF    FF2.6
10B8:  BTFSC  xE0.7
10BA:  BSF    FF2.7
10BC:  MOVWF  46
....................    delay_ms(20); 
10BE:  MOVLW  14
10C0:  MOVWF  xF7
10C2:  RCALL  0BDA
....................    horas=make16(horasH,horasL); 
10C4:  MOVFF  37,5B
10C8:  MOVFF  36,5A
....................    tempo_minutos_pro=tempo_minutos;tempo_segundos_pro=tempo_segundos; 
10CC:  MOVFF  3A,3C
10D0:  MOVFF  3B,3D
.................... } 
10D4:  GOTO   2B86 (RETURN)
....................  
.................... void LimitaValores(void){ 
....................     
....................    if(Contrasena[0]>9 || Contrasena[0]<0){ 
*
114E:  BTFSC  4F.7
1150:  BRA    1158
1152:  MOVF   4F,W
1154:  SUBLW  09
1156:  BNC   115E
1158:  BTFSC  4F.7
115A:  BRA    115E
115C:  BRA    1190
....................       Contrasena[0]=0;write_eeprom(0,0);delay_ms(20); 
115E:  CLRF   4F
1160:  CLRF   FA9
1162:  CLRF   FA8
1164:  BCF    FA6.6
1166:  BCF    FA6.7
1168:  BSF    FA6.2
116A:  MOVF   FF2,W
116C:  MOVWF  00
116E:  BCF    FF2.6
1170:  BCF    FF2.7
1172:  MOVLB  F
1174:  MOVLW  55
1176:  MOVWF  FA7
1178:  MOVLW  AA
117A:  MOVWF  FA7
117C:  BSF    FA6.1
117E:  BTFSC  FA6.1
1180:  BRA    117E
1182:  BCF    FA6.2
1184:  MOVF   00,W
1186:  IORWF  FF2,F
1188:  MOVLW  14
118A:  MOVLB  0
118C:  MOVWF  xF7
118E:  RCALL  0BDA
....................    } 
....................    if(Contrasena[1]>9 || Contrasena[1]<0){ 
1190:  BTFSC  50.7
1192:  BRA    119A
1194:  MOVF   50,W
1196:  SUBLW  09
1198:  BNC   11A0
119A:  BTFSC  50.7
119C:  BRA    11A0
119E:  BRA    11D4
....................       Contrasena[1]=0;write_eeprom(1,0);delay_ms(20); 
11A0:  CLRF   50
11A2:  MOVLW  01
11A4:  MOVWF  FA9
11A6:  CLRF   FA8
11A8:  BCF    FA6.6
11AA:  BCF    FA6.7
11AC:  BSF    FA6.2
11AE:  MOVF   FF2,W
11B0:  MOVWF  00
11B2:  BCF    FF2.6
11B4:  BCF    FF2.7
11B6:  MOVLB  F
11B8:  MOVLW  55
11BA:  MOVWF  FA7
11BC:  MOVLW  AA
11BE:  MOVWF  FA7
11C0:  BSF    FA6.1
11C2:  BTFSC  FA6.1
11C4:  BRA    11C2
11C6:  BCF    FA6.2
11C8:  MOVF   00,W
11CA:  IORWF  FF2,F
11CC:  MOVLW  14
11CE:  MOVLB  0
11D0:  MOVWF  xF7
11D2:  RCALL  0BDA
....................    } 
....................    if(Contrasena[2]>9 || Contrasena[2]<0){ 
11D4:  BTFSC  51.7
11D6:  BRA    11DE
11D8:  MOVF   51,W
11DA:  SUBLW  09
11DC:  BNC   11E4
11DE:  BTFSC  51.7
11E0:  BRA    11E4
11E2:  BRA    1218
....................       Contrasena[2]=0;write_eeprom(2,0);delay_ms(20); 
11E4:  CLRF   51
11E6:  MOVLW  02
11E8:  MOVWF  FA9
11EA:  CLRF   FA8
11EC:  BCF    FA6.6
11EE:  BCF    FA6.7
11F0:  BSF    FA6.2
11F2:  MOVF   FF2,W
11F4:  MOVWF  00
11F6:  BCF    FF2.6
11F8:  BCF    FF2.7
11FA:  MOVLB  F
11FC:  MOVLW  55
11FE:  MOVWF  FA7
1200:  MOVLW  AA
1202:  MOVWF  FA7
1204:  BSF    FA6.1
1206:  BTFSC  FA6.1
1208:  BRA    1206
120A:  BCF    FA6.2
120C:  MOVF   00,W
120E:  IORWF  FF2,F
1210:  MOVLW  14
1212:  MOVLB  0
1214:  MOVWF  xF7
1216:  RCALL  0BDA
....................    } 
....................    if(Contrasena[3]>9 || Contrasena[3]<0){ 
1218:  BTFSC  52.7
121A:  BRA    1222
121C:  MOVF   52,W
121E:  SUBLW  09
1220:  BNC   1228
1222:  BTFSC  52.7
1224:  BRA    1228
1226:  BRA    125C
....................       Contrasena[3]=0;write_eeprom(3,0);delay_ms(20); 
1228:  CLRF   52
122A:  MOVLW  03
122C:  MOVWF  FA9
122E:  CLRF   FA8
1230:  BCF    FA6.6
1232:  BCF    FA6.7
1234:  BSF    FA6.2
1236:  MOVF   FF2,W
1238:  MOVWF  00
123A:  BCF    FF2.6
123C:  BCF    FF2.7
123E:  MOVLB  F
1240:  MOVLW  55
1242:  MOVWF  FA7
1244:  MOVLW  AA
1246:  MOVWF  FA7
1248:  BSF    FA6.1
124A:  BTFSC  FA6.1
124C:  BRA    124A
124E:  BCF    FA6.2
1250:  MOVF   00,W
1252:  IORWF  FF2,F
1254:  MOVLW  14
1256:  MOVLB  0
1258:  MOVWF  xF7
125A:  RCALL  0BDA
....................    } 
....................    if(estadoalarma>1){ 
125C:  MOVLW  00
125E:  BTFSC  2A.4
1260:  MOVLW  01
1262:  SUBLW  01
1264:  BC    129C
....................       estadoalarma=1;write_eeprom(4,1);delay_ms(20); 
1266:  BSF    2A.4
1268:  MOVLW  04
126A:  MOVWF  FA9
126C:  MOVLW  01
126E:  MOVWF  FA8
1270:  BCF    FA6.6
1272:  BCF    FA6.7
1274:  BSF    FA6.2
1276:  MOVF   FF2,W
1278:  MOVWF  00
127A:  BCF    FF2.6
127C:  BCF    FF2.7
127E:  MOVLB  F
1280:  MOVLW  55
1282:  MOVWF  FA7
1284:  MOVLW  AA
1286:  MOVWF  FA7
1288:  BSF    FA6.1
128A:  BTFSC  FA6.1
128C:  BRA    128A
128E:  BCF    FA6.2
1290:  MOVF   00,W
1292:  IORWF  FF2,F
1294:  MOVLW  14
1296:  MOVLB  0
1298:  MOVWF  xF7
129A:  RCALL  0BDA
....................    } 
....................    if(tempo_minutos>200){ 
129C:  MOVF   3A,W
129E:  SUBLW  C8
12A0:  BC    12DA
....................       tempo_minutos=20;write_eeprom(5,20);delay_ms(20); 
12A2:  MOVLW  14
12A4:  MOVWF  3A
12A6:  MOVLW  05
12A8:  MOVWF  FA9
12AA:  MOVLW  14
12AC:  MOVWF  FA8
12AE:  BCF    FA6.6
12B0:  BCF    FA6.7
12B2:  BSF    FA6.2
12B4:  MOVF   FF2,W
12B6:  MOVWF  00
12B8:  BCF    FF2.6
12BA:  BCF    FF2.7
12BC:  MOVLB  F
12BE:  MOVLW  55
12C0:  MOVWF  FA7
12C2:  MOVLW  AA
12C4:  MOVWF  FA7
12C6:  BSF    FA6.1
12C8:  BTFSC  FA6.1
12CA:  BRA    12C8
12CC:  BCF    FA6.2
12CE:  MOVF   00,W
12D0:  IORWF  FF2,F
12D2:  MOVLW  14
12D4:  MOVLB  0
12D6:  MOVWF  xF7
12D8:  RCALL  0BDA
....................    } 
....................    if(tempo_segundos>59){ 
12DA:  MOVF   3B,W
12DC:  SUBLW  3B
12DE:  BC    1314
....................       tempo_segundos=0;write_eeprom(6,0);delay_ms(20); 
12E0:  CLRF   3B
12E2:  MOVLW  06
12E4:  MOVWF  FA9
12E6:  CLRF   FA8
12E8:  BCF    FA6.6
12EA:  BCF    FA6.7
12EC:  BSF    FA6.2
12EE:  MOVF   FF2,W
12F0:  MOVWF  00
12F2:  BCF    FF2.6
12F4:  BCF    FF2.7
12F6:  MOVLB  F
12F8:  MOVLW  55
12FA:  MOVWF  FA7
12FC:  MOVLW  AA
12FE:  MOVWF  FA7
1300:  BSF    FA6.1
1302:  BTFSC  FA6.1
1304:  BRA    1302
1306:  BCF    FA6.2
1308:  MOVF   00,W
130A:  IORWF  FF2,F
130C:  MOVLW  14
130E:  MOVLB  0
1310:  MOVWF  xF7
1312:  RCALL  0BDA
....................    } 
....................    if(segundos>60){ 
1314:  MOVF   34,W
1316:  SUBLW  3C
1318:  BC    134E
....................       segundos=0;write_eeprom(7,0);delay_ms(20); 
131A:  CLRF   34
131C:  MOVLW  07
131E:  MOVWF  FA9
1320:  CLRF   FA8
1322:  BCF    FA6.6
1324:  BCF    FA6.7
1326:  BSF    FA6.2
1328:  MOVF   FF2,W
132A:  MOVWF  00
132C:  BCF    FF2.6
132E:  BCF    FF2.7
1330:  MOVLB  F
1332:  MOVLW  55
1334:  MOVWF  FA7
1336:  MOVLW  AA
1338:  MOVWF  FA7
133A:  BSF    FA6.1
133C:  BTFSC  FA6.1
133E:  BRA    133C
1340:  BCF    FA6.2
1342:  MOVF   00,W
1344:  IORWF  FF2,F
1346:  MOVLW  14
1348:  MOVLB  0
134A:  MOVWF  xF7
134C:  RCALL  0BDA
....................    } 
....................    if(minutos>60){ 
134E:  MOVF   35,W
1350:  SUBLW  3C
1352:  BC    1388
....................       minutos=0;write_eeprom(8,0);delay_ms(20); 
1354:  CLRF   35
1356:  MOVLW  08
1358:  MOVWF  FA9
135A:  CLRF   FA8
135C:  BCF    FA6.6
135E:  BCF    FA6.7
1360:  BSF    FA6.2
1362:  MOVF   FF2,W
1364:  MOVWF  00
1366:  BCF    FF2.6
1368:  BCF    FF2.7
136A:  MOVLB  F
136C:  MOVLW  55
136E:  MOVWF  FA7
1370:  MOVLW  AA
1372:  MOVWF  FA7
1374:  BSF    FA6.1
1376:  BTFSC  FA6.1
1378:  BRA    1376
137A:  BCF    FA6.2
137C:  MOVF   00,W
137E:  IORWF  FF2,F
1380:  MOVLW  14
1382:  MOVLB  0
1384:  MOVWF  xF7
1386:  RCALL  0BDA
....................    } 
....................    if(horas>10000){ 
1388:  MOVF   5B,W
138A:  SUBLW  26
138C:  BC    1404
138E:  XORLW  FF
1390:  BNZ   1398
1392:  MOVF   5A,W
1394:  SUBLW  10
1396:  BC    1404
....................       horas=0;write_eeprom(9,10);delay_ms(20);write_eeprom(10,0);delay_ms(20); 
1398:  CLRF   5B
139A:  CLRF   5A
139C:  MOVLW  09
139E:  MOVWF  FA9
13A0:  MOVLW  0A
13A2:  MOVWF  FA8
13A4:  BCF    FA6.6
13A6:  BCF    FA6.7
13A8:  BSF    FA6.2
13AA:  MOVF   FF2,W
13AC:  MOVWF  00
13AE:  BCF    FF2.6
13B0:  BCF    FF2.7
13B2:  MOVLB  F
13B4:  MOVLW  55
13B6:  MOVWF  FA7
13B8:  MOVLW  AA
13BA:  MOVWF  FA7
13BC:  BSF    FA6.1
13BE:  BTFSC  FA6.1
13C0:  BRA    13BE
13C2:  BCF    FA6.2
13C4:  MOVF   00,W
13C6:  IORWF  FF2,F
13C8:  MOVLW  14
13CA:  MOVLB  0
13CC:  MOVWF  xF7
13CE:  RCALL  0BDA
13D0:  MOVLW  0A
13D2:  MOVWF  FA9
13D4:  CLRF   FA8
13D6:  BCF    FA6.6
13D8:  BCF    FA6.7
13DA:  BSF    FA6.2
13DC:  MOVF   FF2,W
13DE:  MOVWF  00
13E0:  BCF    FF2.6
13E2:  BCF    FF2.7
13E4:  MOVLB  F
13E6:  MOVLW  55
13E8:  MOVWF  FA7
13EA:  MOVLW  AA
13EC:  MOVWF  FA7
13EE:  BSF    FA6.1
13F0:  BTFSC  FA6.1
13F2:  BRA    13F0
13F4:  BCF    FA6.2
13F6:  MOVF   00,W
13F8:  IORWF  FF2,F
13FA:  MOVLW  14
13FC:  MOVLB  0
13FE:  MOVWF  xF7
1400:  CALL   0BDA
....................    } 
....................    if(G<150 || G>300){ 
1404:  MOVFF  C1,F7
1408:  MOVFF  C0,F6
140C:  MOVFF  BF,F5
1410:  MOVFF  BE,F4
1414:  CLRF   xFB
1416:  CLRF   xFA
1418:  MOVLW  16
141A:  MOVWF  xF9
141C:  MOVLW  86
141E:  MOVWF  xF8
1420:  RCALL  10D8
1422:  BC    1444
1424:  CLRF   xF7
1426:  CLRF   xF6
1428:  MOVLW  16
142A:  MOVWF  xF5
142C:  MOVLW  87
142E:  MOVWF  xF4
1430:  MOVFF  C1,FB
1434:  MOVFF  C0,FA
1438:  MOVFF  BF,F9
143C:  MOVFF  BE,F8
1440:  RCALL  10D8
1442:  BNC   14BA
....................       G=220;write_eeprom(11,220);delay_ms(20);write_eeprom(12,0);delay_ms(20); 
1444:  CLRF   xC1
1446:  CLRF   xC0
1448:  MOVLW  5C
144A:  MOVWF  xBF
144C:  MOVLW  86
144E:  MOVWF  xBE
1450:  MOVLW  0B
1452:  MOVWF  FA9
1454:  MOVLW  DC
1456:  MOVWF  FA8
1458:  BCF    FA6.6
145A:  BCF    FA6.7
145C:  BSF    FA6.2
145E:  MOVF   FF2,W
1460:  MOVWF  00
1462:  BCF    FF2.6
1464:  BCF    FF2.7
1466:  MOVLB  F
1468:  MOVLW  55
146A:  MOVWF  FA7
146C:  MOVLW  AA
146E:  MOVWF  FA7
1470:  BSF    FA6.1
1472:  BTFSC  FA6.1
1474:  BRA    1472
1476:  BCF    FA6.2
1478:  MOVF   00,W
147A:  IORWF  FF2,F
147C:  MOVLW  14
147E:  MOVLB  0
1480:  MOVWF  xF7
1482:  CALL   0BDA
1486:  MOVLW  0C
1488:  MOVWF  FA9
148A:  CLRF   FA8
148C:  BCF    FA6.6
148E:  BCF    FA6.7
1490:  BSF    FA6.2
1492:  MOVF   FF2,W
1494:  MOVWF  00
1496:  BCF    FF2.6
1498:  BCF    FF2.7
149A:  MOVLB  F
149C:  MOVLW  55
149E:  MOVWF  FA7
14A0:  MOVLW  AA
14A2:  MOVWF  FA7
14A4:  BSF    FA6.1
14A6:  BTFSC  FA6.1
14A8:  BRA    14A6
14AA:  BCF    FA6.2
14AC:  MOVF   00,W
14AE:  IORWF  FF2,F
14B0:  MOVLW  14
14B2:  MOVLB  0
14B4:  MOVWF  xF7
14B6:  CALL   0BDA
....................    } 
....................    if(Vel1>20 || Vel1<1){ 
14BA:  MOVF   57,W
14BC:  SUBLW  14
14BE:  BNC   14C4
14C0:  MOVF   57,F
14C2:  BNZ   14FE
....................       Vel1=10;write_eeprom(13,10);delay_ms(20); 
14C4:  MOVLW  0A
14C6:  MOVWF  57
14C8:  MOVLW  0D
14CA:  MOVWF  FA9
14CC:  MOVLW  0A
14CE:  MOVWF  FA8
14D0:  BCF    FA6.6
14D2:  BCF    FA6.7
14D4:  BSF    FA6.2
14D6:  MOVF   FF2,W
14D8:  MOVWF  00
14DA:  BCF    FF2.6
14DC:  BCF    FF2.7
14DE:  MOVLB  F
14E0:  MOVLW  55
14E2:  MOVWF  FA7
14E4:  MOVLW  AA
14E6:  MOVWF  FA7
14E8:  BSF    FA6.1
14EA:  BTFSC  FA6.1
14EC:  BRA    14EA
14EE:  BCF    FA6.2
14F0:  MOVF   00,W
14F2:  IORWF  FF2,F
14F4:  MOVLW  14
14F6:  MOVLB  0
14F8:  MOVWF  xF7
14FA:  CALL   0BDA
....................    } 
....................    if(horasTrabajo>60000){ 
14FE:  MOVF   xD0,W
1500:  SUBLW  E9
1502:  BC    157A
1504:  XORLW  FF
1506:  BNZ   150E
1508:  MOVF   xCF,W
150A:  SUBLW  60
150C:  BC    157A
....................       horasTrabajo=0;write_eeprom(19,0);delay_ms(20);write_eeprom(18,0);delay_ms(20); 
150E:  CLRF   xD0
1510:  CLRF   xCF
1512:  MOVLW  13
1514:  MOVWF  FA9
1516:  CLRF   FA8
1518:  BCF    FA6.6
151A:  BCF    FA6.7
151C:  BSF    FA6.2
151E:  MOVF   FF2,W
1520:  MOVWF  00
1522:  BCF    FF2.6
1524:  BCF    FF2.7
1526:  MOVLB  F
1528:  MOVLW  55
152A:  MOVWF  FA7
152C:  MOVLW  AA
152E:  MOVWF  FA7
1530:  BSF    FA6.1
1532:  BTFSC  FA6.1
1534:  BRA    1532
1536:  BCF    FA6.2
1538:  MOVF   00,W
153A:  IORWF  FF2,F
153C:  MOVLW  14
153E:  MOVLB  0
1540:  MOVWF  xF7
1542:  CALL   0BDA
1546:  MOVLW  12
1548:  MOVWF  FA9
154A:  CLRF   FA8
154C:  BCF    FA6.6
154E:  BCF    FA6.7
1550:  BSF    FA6.2
1552:  MOVF   FF2,W
1554:  MOVWF  00
1556:  BCF    FF2.6
1558:  BCF    FF2.7
155A:  MOVLB  F
155C:  MOVLW  55
155E:  MOVWF  FA7
1560:  MOVLW  AA
1562:  MOVWF  FA7
1564:  BSF    FA6.1
1566:  BTFSC  FA6.1
1568:  BRA    1566
156A:  BCF    FA6.2
156C:  MOVF   00,W
156E:  IORWF  FF2,F
1570:  MOVLW  14
1572:  MOVLB  0
1574:  MOVWF  xF7
1576:  CALL   0BDA
....................    } 
....................    if(segundosTrabajo>3600){ 
157A:  MOVF   xCE,W
157C:  SUBLW  0D
157E:  BC    15F6
1580:  XORLW  FF
1582:  BNZ   158A
1584:  MOVF   xCD,W
1586:  SUBLW  10
1588:  BC    15F6
....................       segundosTrabajo=0;write_eeprom(20,0);delay_ms(20);write_eeprom(21,0);delay_ms(20); 
158A:  CLRF   xCE
158C:  CLRF   xCD
158E:  MOVLW  14
1590:  MOVWF  FA9
1592:  CLRF   FA8
1594:  BCF    FA6.6
1596:  BCF    FA6.7
1598:  BSF    FA6.2
159A:  MOVF   FF2,W
159C:  MOVWF  00
159E:  BCF    FF2.6
15A0:  BCF    FF2.7
15A2:  MOVLB  F
15A4:  MOVLW  55
15A6:  MOVWF  FA7
15A8:  MOVLW  AA
15AA:  MOVWF  FA7
15AC:  BSF    FA6.1
15AE:  BTFSC  FA6.1
15B0:  BRA    15AE
15B2:  BCF    FA6.2
15B4:  MOVF   00,W
15B6:  IORWF  FF2,F
15B8:  MOVLW  14
15BA:  MOVLB  0
15BC:  MOVWF  xF7
15BE:  CALL   0BDA
15C2:  MOVLW  15
15C4:  MOVWF  FA9
15C6:  CLRF   FA8
15C8:  BCF    FA6.6
15CA:  BCF    FA6.7
15CC:  BSF    FA6.2
15CE:  MOVF   FF2,W
15D0:  MOVWF  00
15D2:  BCF    FF2.6
15D4:  BCF    FF2.7
15D6:  MOVLB  F
15D8:  MOVLW  55
15DA:  MOVWF  FA7
15DC:  MOVLW  AA
15DE:  MOVWF  FA7
15E0:  BSF    FA6.1
15E2:  BTFSC  FA6.1
15E4:  BRA    15E2
15E6:  BCF    FA6.2
15E8:  MOVF   00,W
15EA:  IORWF  FF2,F
15EC:  MOVLW  14
15EE:  MOVLB  0
15F0:  MOVWF  xF7
15F2:  CALL   0BDA
....................    } 
....................    if(motor>1){ 
15F6:  MOVF   44,W
15F8:  SUBLW  01
15FA:  BC    1636
....................       motor=1;write_eeprom(22,1);delay_ms(20); 
15FC:  MOVLW  01
15FE:  MOVWF  44
1600:  MOVLW  16
1602:  MOVWF  FA9
1604:  MOVLW  01
1606:  MOVWF  FA8
1608:  BCF    FA6.6
160A:  BCF    FA6.7
160C:  BSF    FA6.2
160E:  MOVF   FF2,W
1610:  MOVWF  00
1612:  BCF    FF2.6
1614:  BCF    FF2.7
1616:  MOVLB  F
1618:  MOVLW  55
161A:  MOVWF  FA7
161C:  MOVLW  AA
161E:  MOVWF  FA7
1620:  BSF    FA6.1
1622:  BTFSC  FA6.1
1624:  BRA    1622
1626:  BCF    FA6.2
1628:  MOVF   00,W
162A:  IORWF  FF2,F
162C:  MOVLW  14
162E:  MOVLB  0
1630:  MOVWF  xF7
1632:  CALL   0BDA
....................    } 
....................    if(luz>1){ 
1636:  MOVF   45,W
1638:  SUBLW  01
163A:  BC    1676
....................       luz=1;write_eeprom(23,1);delay_ms(20); 
163C:  MOVLW  01
163E:  MOVWF  45
1640:  MOVLW  17
1642:  MOVWF  FA9
1644:  MOVLW  01
1646:  MOVWF  FA8
1648:  BCF    FA6.6
164A:  BCF    FA6.7
164C:  BSF    FA6.2
164E:  MOVF   FF2,W
1650:  MOVWF  00
1652:  BCF    FF2.6
1654:  BCF    FF2.7
1656:  MOVLB  F
1658:  MOVLW  55
165A:  MOVWF  FA7
165C:  MOVLW  AA
165E:  MOVWF  FA7
1660:  BSF    FA6.1
1662:  BTFSC  FA6.1
1664:  BRA    1662
1666:  BCF    FA6.2
1668:  MOVF   00,W
166A:  IORWF  FF2,F
166C:  MOVLW  14
166E:  MOVLB  0
1670:  MOVWF  xF7
1672:  CALL   0BDA
....................    } 
....................    if(velocidadInicial>15){ 
1676:  MOVF   46,W
1678:  SUBLW  0F
167A:  BC    16B6
....................       velocidadInicial=10;write_eeprom(24,10);delay_ms(20); 
167C:  MOVLW  0A
167E:  MOVWF  46
1680:  MOVLW  18
1682:  MOVWF  FA9
1684:  MOVLW  0A
1686:  MOVWF  FA8
1688:  BCF    FA6.6
168A:  BCF    FA6.7
168C:  BSF    FA6.2
168E:  MOVF   FF2,W
1690:  MOVWF  00
1692:  BCF    FF2.6
1694:  BCF    FF2.7
1696:  MOVLB  F
1698:  MOVLW  55
169A:  MOVWF  FA7
169C:  MOVLW  AA
169E:  MOVWF  FA7
16A0:  BSF    FA6.1
16A2:  BTFSC  FA6.1
16A4:  BRA    16A2
16A6:  BCF    FA6.2
16A8:  MOVF   00,W
16AA:  IORWF  FF2,F
16AC:  MOVLW  14
16AE:  MOVLB  0
16B0:  MOVWF  xF7
16B2:  CALL   0BDA
....................    } 
.................... } 
16B6:  GOTO   2B8A (RETURN)
....................  
.................... void bajarVidrio(){ 
....................    pulsoSubir=OFF; 
....................    if(VIDRIOUUP || !VIDRIODN){ 
....................       O1_on;O2_off; 
....................    }else{ 
....................       O1_off;O2_off; 
....................       pulsoBajar=OFF; 
....................    } 
.................... } 
....................  
.................... void subirVidrio(){ 
....................    pulsoBajar=OFF; 
....................    if(!VIDRIOUUP || VIDRIODN){ 
....................       O1_off;O2_on; 
....................    }else{ 
....................       O1_off;O2_off; 
....................       pulsoSubir=OFF; 
....................    } 
.................... } 
....................  
.................... void detenerVidrio(){ 
....................    O1_off;O2_off; 
.................... } 
....................  
.................... void leeControlRemoto(){ 
....................    if(NUEVO_DATO==1){ 
....................       NUEVO_DATO=0; 
....................       BYTE_IR[0]=BIT_BYTE(BITS[0],BITS[1],BITS[2],BITS[3],BITS[4],BITS[5],BITS[6],BITS[7]); 
....................       BYTE_IR[1]=BIT_BYTE(BITS[8],BITS[9],BITS[10],BITS[11],BITS[12],BITS[13],BITS[14],BITS[15]); 
....................       BYTE_IR[2]=BIT_BYTE(BITS[16],BITS[17],BITS[18],BITS[19],BITS[20],BITS[21],BITS[22],BITS[23]); 
....................       BYTE_IR[3]=BIT_BYTE(BITS[24],BITS[25],BITS[26],BITS[27],BITS[28],BITS[29],BITS[30],BITS[31]); 
....................     
....................       if(BYTE_IR[3]==codigoBajar){ //Bajar Vidrio  //AD 
....................          pulsoBajar=ON; 
....................       } 
....................        
....................       if(BYTE_IR[3]==codigoSubir){ // Subir Vidrio //E7 
....................          pulsoSubir=ON; 
....................       } 
....................       
....................       if(BYTE_IR[3]==codigoDetener){ //F7 E3 A5 
....................          O1_off;O2_off; 
....................          pulsoSubir=OFF; 
....................          pulsoBajar=OFF; 
....................       } 
....................    } 
....................     
....................    if(pulsoBajar) 
....................       bajarVidrio(); 
....................        
....................    if(pulsoSubir) 
....................       subirVidrio();     
....................       
.................... } 
....................  
.................... void cuentaTiempoTrabajoFiltro(){ 
....................    //**Contador de Tiempo de Trabajo del filtro**// 
....................    if(segundosTrabajo>=3600){ // Tiempo de Trabajo 
*
1970:  MOVF   xCE,W
1972:  SUBLW  0D
1974:  BTFSC  FD8.0
1976:  BRA    1A80
1978:  XORLW  FF
197A:  BNZ   1984
197C:  MOVF   xCD,W
197E:  SUBLW  0F
1980:  BTFSC  FD8.0
1982:  BRA    1A80
....................       segundosTrabajo=0; //Minutos Trabajo realmente son segundos. 
1984:  CLRF   xCE
1986:  CLRF   xCD
....................       write_eeprom(20,make8(segundosTrabajo,0)); 
1988:  MOVFF  CD,E0
198C:  MOVLW  14
198E:  MOVWF  FA9
1990:  MOVFF  E0,FA8
1994:  BCF    FA6.6
1996:  BCF    FA6.7
1998:  BSF    FA6.2
199A:  MOVF   FF2,W
199C:  MOVWF  00
199E:  BCF    FF2.6
19A0:  BCF    FF2.7
19A2:  MOVLB  F
19A4:  MOVLW  55
19A6:  MOVWF  FA7
19A8:  MOVLW  AA
19AA:  MOVWF  FA7
19AC:  BSF    FA6.1
19AE:  BTFSC  FA6.1
19B0:  BRA    19AE
19B2:  BCF    FA6.2
19B4:  MOVF   00,W
19B6:  IORWF  FF2,F
....................       delay_ms(20); 
19B8:  MOVLW  14
19BA:  MOVLB  0
19BC:  MOVWF  xF7
19BE:  CALL   0BDA
....................       write_eeprom(21,make8(segundosTrabajo,1)); 
19C2:  MOVFF  CE,E0
19C6:  MOVLW  15
19C8:  MOVWF  FA9
19CA:  MOVFF  E0,FA8
19CE:  BCF    FA6.6
19D0:  BCF    FA6.7
19D2:  BSF    FA6.2
19D4:  MOVF   FF2,W
19D6:  MOVWF  00
19D8:  BCF    FF2.6
19DA:  BCF    FF2.7
19DC:  MOVLB  F
19DE:  MOVLW  55
19E0:  MOVWF  FA7
19E2:  MOVLW  AA
19E4:  MOVWF  FA7
19E6:  BSF    FA6.1
19E8:  BTFSC  FA6.1
19EA:  BRA    19E8
19EC:  BCF    FA6.2
19EE:  MOVF   00,W
19F0:  IORWF  FF2,F
....................       delay_ms(20); 
19F2:  MOVLW  14
19F4:  MOVLB  0
19F6:  MOVWF  xF7
19F8:  CALL   0BDA
....................       horasTrabajo++; 
19FC:  INCF   xCF,F
19FE:  BTFSC  FD8.2
1A00:  INCF   xD0,F
....................       write_eeprom(18,make8(horasTrabajo,0)); 
1A02:  MOVFF  CF,E0
1A06:  MOVLW  12
1A08:  MOVWF  FA9
1A0A:  MOVFF  E0,FA8
1A0E:  BCF    FA6.6
1A10:  BCF    FA6.7
1A12:  BSF    FA6.2
1A14:  MOVF   FF2,W
1A16:  MOVWF  00
1A18:  BCF    FF2.6
1A1A:  BCF    FF2.7
1A1C:  MOVLB  F
1A1E:  MOVLW  55
1A20:  MOVWF  FA7
1A22:  MOVLW  AA
1A24:  MOVWF  FA7
1A26:  BSF    FA6.1
1A28:  BTFSC  FA6.1
1A2A:  BRA    1A28
1A2C:  BCF    FA6.2
1A2E:  MOVF   00,W
1A30:  IORWF  FF2,F
....................       delay_ms(20); 
1A32:  MOVLW  14
1A34:  MOVLB  0
1A36:  MOVWF  xF7
1A38:  CALL   0BDA
....................       write_eeprom(19,make8(horasTrabajo,1)); 
1A3C:  MOVFF  D0,E0
1A40:  MOVLW  13
1A42:  MOVWF  FA9
1A44:  MOVFF  E0,FA8
1A48:  BCF    FA6.6
1A4A:  BCF    FA6.7
1A4C:  BSF    FA6.2
1A4E:  MOVF   FF2,W
1A50:  MOVWF  00
1A52:  BCF    FF2.6
1A54:  BCF    FF2.7
1A56:  MOVLB  F
1A58:  MOVLW  55
1A5A:  MOVWF  FA7
1A5C:  MOVLW  AA
1A5E:  MOVWF  FA7
1A60:  BSF    FA6.1
1A62:  BTFSC  FA6.1
1A64:  BRA    1A62
1A66:  BCF    FA6.2
1A68:  MOVF   00,W
1A6A:  IORWF  FF2,F
....................       delay_ms(20); 
1A6C:  MOVLW  14
1A6E:  MOVLB  0
1A70:  MOVWF  xF7
1A72:  CALL   0BDA
....................       delay_ms(20); 
1A76:  MOVLW  14
1A78:  MOVWF  xF7
1A7A:  CALL   0BDA
....................    }else if(segundosTrabajo==900 || segundosTrabajo==1800 || segundosTrabajo==2700 ){ 
1A7E:  BRA    1B18
1A80:  MOVF   xCD,W
1A82:  SUBLW  84
1A84:  BNZ   1A8C
1A86:  MOVF   xCE,W
1A88:  SUBLW  03
1A8A:  BZ    1AA4
1A8C:  MOVF   xCD,W
1A8E:  SUBLW  08
1A90:  BNZ   1A98
1A92:  MOVF   xCE,W
1A94:  SUBLW  07
1A96:  BZ    1AA4
1A98:  MOVF   xCD,W
1A9A:  SUBLW  8C
1A9C:  BNZ   1B18
1A9E:  MOVF   xCE,W
1AA0:  SUBLW  0A
1AA2:  BNZ   1B18
....................       write_eeprom(20,make8(segundosTrabajo,0)); 
1AA4:  MOVFF  CD,E0
1AA8:  MOVLW  14
1AAA:  MOVWF  FA9
1AAC:  MOVFF  E0,FA8
1AB0:  BCF    FA6.6
1AB2:  BCF    FA6.7
1AB4:  BSF    FA6.2
1AB6:  MOVF   FF2,W
1AB8:  MOVWF  00
1ABA:  BCF    FF2.6
1ABC:  BCF    FF2.7
1ABE:  MOVLB  F
1AC0:  MOVLW  55
1AC2:  MOVWF  FA7
1AC4:  MOVLW  AA
1AC6:  MOVWF  FA7
1AC8:  BSF    FA6.1
1ACA:  BTFSC  FA6.1
1ACC:  BRA    1ACA
1ACE:  BCF    FA6.2
1AD0:  MOVF   00,W
1AD2:  IORWF  FF2,F
....................       delay_ms(20); 
1AD4:  MOVLW  14
1AD6:  MOVLB  0
1AD8:  MOVWF  xF7
1ADA:  CALL   0BDA
....................       write_eeprom(21,make8(segundosTrabajo,1)); 
1ADE:  MOVFF  CE,E0
1AE2:  MOVLW  15
1AE4:  MOVWF  FA9
1AE6:  MOVFF  E0,FA8
1AEA:  BCF    FA6.6
1AEC:  BCF    FA6.7
1AEE:  BSF    FA6.2
1AF0:  MOVF   FF2,W
1AF2:  MOVWF  00
1AF4:  BCF    FF2.6
1AF6:  BCF    FF2.7
1AF8:  MOVLB  F
1AFA:  MOVLW  55
1AFC:  MOVWF  FA7
1AFE:  MOVLW  AA
1B00:  MOVWF  FA7
1B02:  BSF    FA6.1
1B04:  BTFSC  FA6.1
1B06:  BRA    1B04
1B08:  BCF    FA6.2
1B0A:  MOVF   00,W
1B0C:  IORWF  FF2,F
....................       delay_ms(20); 
1B0E:  MOVLW  14
1B10:  MOVLB  0
1B12:  MOVWF  xF7
1B14:  CALL   0BDA
....................    } 
.................... //----------------------------------------// 
.................... } 
1B18:  GOTO   2F14 (RETURN)
....................  
.................... void clearSalidasSinUsar(){ 
....................    output_bit(PIN_A3,0); 
....................    //output_bit(PIN_C3,0);//Solo para PIC Diferente a 18F4550 
....................    //output_bit(PIN_C4,0); 
....................    //output_bit(PIN_C5,0); 
....................    output_bit(PIN_C6,0); 
....................    output_bit(PIN_C7,0); 
....................    output_bit(PIN_B5,0); 
.................... }  
....................  
....................  
.................... #int_EXT HIGH 
.................... void ext0() {   
....................    Cruce=ON; 
*
0248:  BSF    xC2.1
....................     
....................    if(VelMotor==19){ 
024A:  MOVF   xD1,W
024C:  SUBLW  13
024E:  BNZ   0260
....................       set_timer0(232);       
0250:  CLRF   FD7
0252:  MOVLW  E8
0254:  MOVWF  FD6
....................       Motor_off;  
0256:  BCF    F8B.2
0258:  BCF    F94.2
....................       Motor2_off;  
025A:  BCF    F8B.1
025C:  BCF    F94.1
....................    }else if(VelMotor==18){ 
025E:  BRA    03E8
0260:  MOVF   xD1,W
0262:  SUBLW  12
0264:  BNZ   0276
....................       set_timer0(228);       
0266:  CLRF   FD7
0268:  MOVLW  E4
026A:  MOVWF  FD6
....................       Motor_off;  
026C:  BCF    F8B.2
026E:  BCF    F94.2
....................       Motor2_off;  
0270:  BCF    F8B.1
0272:  BCF    F94.1
....................    }else if(VelMotor==17){ 
0274:  BRA    03E8
0276:  MOVF   xD1,W
0278:  SUBLW  11
027A:  BNZ   028C
....................       set_timer0(224);       
027C:  CLRF   FD7
027E:  MOVLW  E0
0280:  MOVWF  FD6
....................       Motor_off;  
0282:  BCF    F8B.2
0284:  BCF    F94.2
....................       Motor2_off;  
0286:  BCF    F8B.1
0288:  BCF    F94.1
....................    }else if(VelMotor==16){ 
028A:  BRA    03E8
028C:  MOVF   xD1,W
028E:  SUBLW  10
0290:  BNZ   02A2
....................       set_timer0(220); // Cada cuenta del timer0 es 51.2us y timer1 es 1.59us 
0292:  CLRF   FD7
0294:  MOVLW  DC
0296:  MOVWF  FD6
....................       Motor_off;  
0298:  BCF    F8B.2
029A:  BCF    F94.2
....................       Motor2_off;  
029C:  BCF    F8B.1
029E:  BCF    F94.1
....................    }else if(VelMotor==15){ 
02A0:  BRA    03E8
02A2:  MOVF   xD1,W
02A4:  SUBLW  0F
02A6:  BNZ   02B8
....................       set_timer0(216);       
02A8:  CLRF   FD7
02AA:  MOVLW  D8
02AC:  MOVWF  FD6
....................       Motor_off;  
02AE:  BCF    F8B.2
02B0:  BCF    F94.2
....................       Motor2_off;  
02B2:  BCF    F8B.1
02B4:  BCF    F94.1
....................    }else if(VelMotor==14){ 
02B6:  BRA    03E8
02B8:  MOVF   xD1,W
02BA:  SUBLW  0E
02BC:  BNZ   02CE
....................       set_timer0(212);       
02BE:  CLRF   FD7
02C0:  MOVLW  D4
02C2:  MOVWF  FD6
....................       Motor_off;  
02C4:  BCF    F8B.2
02C6:  BCF    F94.2
....................       Motor2_off;  
02C8:  BCF    F8B.1
02CA:  BCF    F94.1
....................    }else if(VelMotor==13){ 
02CC:  BRA    03E8
02CE:  MOVF   xD1,W
02D0:  SUBLW  0D
02D2:  BNZ   02E4
....................       set_timer0(208);       
02D4:  CLRF   FD7
02D6:  MOVLW  D0
02D8:  MOVWF  FD6
....................       Motor_off;  
02DA:  BCF    F8B.2
02DC:  BCF    F94.2
....................       Motor2_off;  
02DE:  BCF    F8B.1
02E0:  BCF    F94.1
....................    }else if(VelMotor==12){ 
02E2:  BRA    03E8
02E4:  MOVF   xD1,W
02E6:  SUBLW  0C
02E8:  BNZ   02FA
....................       set_timer0(204);       
02EA:  CLRF   FD7
02EC:  MOVLW  CC
02EE:  MOVWF  FD6
....................       Motor_off;  
02F0:  BCF    F8B.2
02F2:  BCF    F94.2
....................       Motor2_off;  
02F4:  BCF    F8B.1
02F6:  BCF    F94.1
....................    }else if(VelMotor==11){ 
02F8:  BRA    03E8
02FA:  MOVF   xD1,W
02FC:  SUBLW  0B
02FE:  BNZ   0310
....................       set_timer0(200);       
0300:  CLRF   FD7
0302:  MOVLW  C8
0304:  MOVWF  FD6
....................       Motor_off;  
0306:  BCF    F8B.2
0308:  BCF    F94.2
....................       Motor2_off;  
030A:  BCF    F8B.1
030C:  BCF    F94.1
....................    }else if(VelMotor==10){ 
030E:  BRA    03E8
0310:  MOVF   xD1,W
0312:  SUBLW  0A
0314:  BNZ   0326
....................       set_timer0(196);       
0316:  CLRF   FD7
0318:  MOVLW  C4
031A:  MOVWF  FD6
....................       Motor_off;  
031C:  BCF    F8B.2
031E:  BCF    F94.2
....................       Motor2_off;  
0320:  BCF    F8B.1
0322:  BCF    F94.1
....................    }else if(VelMotor==9){ 
0324:  BRA    03E8
0326:  MOVF   xD1,W
0328:  SUBLW  09
032A:  BNZ   033C
....................       set_timer0(192);       
032C:  CLRF   FD7
032E:  MOVLW  C0
0330:  MOVWF  FD6
....................       Motor_off;  
0332:  BCF    F8B.2
0334:  BCF    F94.2
....................       Motor2_off;  
0336:  BCF    F8B.1
0338:  BCF    F94.1
....................    }else if(VelMotor==8){ 
033A:  BRA    03E8
033C:  MOVF   xD1,W
033E:  SUBLW  08
0340:  BNZ   0352
....................       set_timer0(188);       
0342:  CLRF   FD7
0344:  MOVLW  BC
0346:  MOVWF  FD6
....................       Motor_off;  
0348:  BCF    F8B.2
034A:  BCF    F94.2
....................       Motor2_off;  
034C:  BCF    F8B.1
034E:  BCF    F94.1
....................    }else if(VelMotor==7){ 
0350:  BRA    03E8
0352:  MOVF   xD1,W
0354:  SUBLW  07
0356:  BNZ   0368
....................       set_timer0(184);       
0358:  CLRF   FD7
035A:  MOVLW  B8
035C:  MOVWF  FD6
....................       Motor_off;  
035E:  BCF    F8B.2
0360:  BCF    F94.2
....................       Motor2_off;  
0362:  BCF    F8B.1
0364:  BCF    F94.1
....................    }else if(VelMotor==6){ 
0366:  BRA    03E8
0368:  MOVF   xD1,W
036A:  SUBLW  06
036C:  BNZ   037E
....................       set_timer0(180);       
036E:  CLRF   FD7
0370:  MOVLW  B4
0372:  MOVWF  FD6
....................       Motor_off;  
0374:  BCF    F8B.2
0376:  BCF    F94.2
....................       Motor2_off;  
0378:  BCF    F8B.1
037A:  BCF    F94.1
....................    }else if(VelMotor==5){ 
037C:  BRA    03E8
037E:  MOVF   xD1,W
0380:  SUBLW  05
0382:  BNZ   0394
....................       set_timer0(176);       
0384:  CLRF   FD7
0386:  MOVLW  B0
0388:  MOVWF  FD6
....................       Motor_off;  
038A:  BCF    F8B.2
038C:  BCF    F94.2
....................       Motor2_off;  
038E:  BCF    F8B.1
0390:  BCF    F94.1
....................    }else if(VelMotor==4){ 
0392:  BRA    03E8
0394:  MOVF   xD1,W
0396:  SUBLW  04
0398:  BNZ   03AA
....................       set_timer0(172);       
039A:  CLRF   FD7
039C:  MOVLW  AC
039E:  MOVWF  FD6
....................       Motor_off;  
03A0:  BCF    F8B.2
03A2:  BCF    F94.2
....................       Motor2_off;  
03A4:  BCF    F8B.1
03A6:  BCF    F94.1
....................    }else if(VelMotor==3){ 
03A8:  BRA    03E8
03AA:  MOVF   xD1,W
03AC:  SUBLW  03
03AE:  BNZ   03C0
....................       set_timer0(168); 
03B0:  CLRF   FD7
03B2:  MOVLW  A8
03B4:  MOVWF  FD6
....................       Motor_off;  
03B6:  BCF    F8B.2
03B8:  BCF    F94.2
....................       Motor2_off;  
03BA:  BCF    F8B.1
03BC:  BCF    F94.1
....................    }else if(VelMotor==2){ 
03BE:  BRA    03E8
03C0:  MOVF   xD1,W
03C2:  SUBLW  02
03C4:  BNZ   03D6
....................       set_timer0(164); 
03C6:  CLRF   FD7
03C8:  MOVLW  A4
03CA:  MOVWF  FD6
....................       Motor_off;  
03CC:  BCF    F8B.2
03CE:  BCF    F94.2
....................       Motor2_off;  
03D0:  BCF    F8B.1
03D2:  BCF    F94.1
....................    }else if(VelMotor==1){ 
03D4:  BRA    03E8
03D6:  DECFSZ xD1,W
03D8:  BRA    03E8
....................       set_timer0(160); 
03DA:  CLRF   FD7
03DC:  MOVLW  A0
03DE:  MOVWF  FD6
....................       Motor_off;  
03E0:  BCF    F8B.2
03E2:  BCF    F94.2
....................       Motor2_off;  
03E4:  BCF    F8B.1
03E6:  BCF    F94.1
....................    } 
....................    pulsos++;    
03E8:  INCF   xC3,F
03EA:  BTFSC  FD8.2
03EC:  INCF   xC4,F
.................... } 
....................  
03EE:  BCF    FF2.1
03F0:  GOTO   00FE
.................... #int_TIMER0 HIGH 
.................... void temp0s(void){ 
....................    if(VelMotor>0 && VelMotor<20){ 
03F4:  MOVF   xD1,F
03F6:  BZ    0420
03F8:  MOVF   xD1,W
03FA:  SUBLW  13
03FC:  BNC   0420
....................    if(Cruce){         //If the triac pin is low we change the state and prepare the timer 
03FE:  BTFSS  xC2.1
0400:  BRA    0414
....................       Motor_on; 
0402:  BSF    F8B.2
0404:  BCF    F94.2
....................       Motor2_on;  
0406:  BSF    F8B.1
0408:  BCF    F94.1
....................       set_timer0(253);         // Next timer overflow will clear the triac pin 
040A:  CLRF   FD7
040C:  MOVLW  FD
040E:  MOVWF  FD6
....................       Cruce=OFF;         // Flag now signals that we need to turn off the triac output pin 
0410:  BCF    xC2.1
....................    } else {            //The triac has been triggered, cut the pulse 
0412:  BRA    0420
....................       Motor_off; 
0414:  BCF    F8B.2
0416:  BCF    F94.2
....................       Motor2_off;  
0418:  BCF    F8B.1
041A:  BCF    F94.1
....................       set_timer0(0);         //Set timer period to maximum, timer should not overflow untill next zero cross interrupt 
041C:  CLRF   FD7
041E:  CLRF   FD6
....................    } 
....................    } 
.................... } 
....................  
.................... //#int_TIMER2 
0420:  BCF    FF2.2
0422:  GOTO   00FE
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    //set_timer2(231);//100.25uS 
....................    set_timer1(45536);//5ms 
0426:  MOVLW  B1
0428:  MOVWF  FCF
042A:  MOVLW  E0
042C:  MOVWF  FCE
....................    tiempos++; 
042E:  INCF   58,F
0430:  BTFSC  FD8.2
0432:  INCF   59,F
....................    if(UP) 
0434:  BSF    F92.5
0436:  BTFSC  F80.5
0438:  BRA    0442
....................          tup++; 
043A:  INCF   xC5,F
043C:  BTFSC  FD8.2
043E:  INCF   xC6,F
....................       else 
0440:  BRA    0446
....................          tup=0; 
0442:  CLRF   xC6
0444:  CLRF   xC5
....................           
....................       if(DOWN) 
0446:  BSF    F96.0
0448:  BTFSC  F84.0
044A:  BRA    0454
....................          tdown++; 
044C:  INCF   xC7,F
044E:  BTFSC  FD8.2
0450:  INCF   xC8,F
....................       else 
0452:  BRA    0458
....................          tdown=0; 
0454:  CLRF   xC8
0456:  CLRF   xC7
....................           
....................       if(RIGHT) 
0458:  BSF    F96.1
045A:  BTFSC  F84.1
045C:  BRA    0466
....................          tright++; 
045E:  INCF   xC9,F
0460:  BTFSC  FD8.2
0462:  INCF   xCA,F
....................       else 
0464:  BRA    046A
....................          tright=0; 
0466:  CLRF   xCA
0468:  CLRF   xC9
....................        
....................       if(IZQU) 
046A:  BSF    F96.2
046C:  BTFSC  F84.2
046E:  BRA    0478
....................          tleft++; 
0470:  INCF   xCB,F
0472:  BTFSC  FD8.2
0474:  INCF   xCC,F
....................       else 
0476:  BRA    047C
....................          tleft=0; 
0478:  CLRF   xCC
047A:  CLRF   xCB
....................      
....................    //if(tiempos>=10000){ 
....................    //if(tiempos>=9710){//1s 
....................    if(tiempos>=200){//1s 
047C:  MOVF   59,F
047E:  BNZ   0486
0480:  MOVF   58,W
0482:  SUBLW  C7
0484:  BC    04E2
....................       output_toggle(PIN_A3); 
0486:  BCF    F92.3
0488:  BTG    F89.3
....................       tiempos=0;tiemporeset++;Lectura=1; 
048A:  CLRF   59
048C:  CLRF   58
048E:  INCF   42,F
0490:  BSF    2A.0
....................     
....................       if(ActivaBuzzer==1){ 
0492:  DECFSZ 53,W
0494:  BRA    04AA
....................          if(estadobuzzer==0){ 
0496:  BTFSC  2A.3
0498:  BRA    04A0
....................             Buzzer_off; 
049A:  BCF    F8B.0
049C:  BCF    F94.0
....................          }else{ 
049E:  BRA    04A8
....................             if(estadoalarma==1) 
04A0:  BTFSS  2A.4
04A2:  BRA    04A8
....................                Buzzer_on; 
04A4:  BSF    F8B.0
04A6:  BCF    F94.0
....................          } 
....................          estadobuzzer=!estadobuzzer; 
04A8:  BTG    2A.3
....................       } 
....................       if(estadomv==1) 
04AA:  BTFSS  29.2
04AC:  BRA    04B4
....................          segundosTrabajo++; 
04AE:  INCF   xCD,F
04B0:  BTFSC  FD8.2
04B2:  INCF   xCE,F
....................    //----------------------------- Tiempo Total-----------------------------// 
....................       if(estadouv==1){ 
04B4:  BTFSS  29.0
04B6:  BRA    04E2
....................          segundos++; 
04B8:  INCF   34,F
....................          if(tiempo_cumplido==0){ 
04BA:  BTFSC  29.7
04BC:  BRA    04E2
....................             if(tempo_segundos>0){ 
04BE:  MOVF   3B,F
04C0:  BZ    04C6
....................                tempo_segundos--; 
04C2:  DECF   3B,F
....................             }else{ 
04C4:  BRA    04E2
....................                if(tempo_minutos>0){ 
04C6:  MOVF   3A,F
04C8:  BZ    04D2
....................                   tempo_minutos--; 
04CA:  DECF   3A,F
....................                   tempo_segundos=59; 
04CC:  MOVLW  3B
04CE:  MOVWF  3B
....................                }else{ 
04D0:  BRA    04E2
....................                   tiempo_cumplido=1; 
04D2:  BSF    29.7
....................                   estadouv=0;Luz_UV_off; 
04D4:  BCF    29.0
04D6:  BSF    F8A.4
04D8:  BCF    F93.4
....................                   tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
04DA:  MOVFF  3C,3A
04DE:  MOVFF  3D,3B
....................                } 
....................             } 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
04E2:  BCF    F9E.0
04E4:  GOTO   0064
.................... void main () 
.................... { 
*
29D0:  CLRF   FF8
29D2:  BSF    FF1.2
29D4:  BCF    F9F.0
29D6:  BSF    FD0.7
29D8:  BSF    07.7
29DA:  CLRF   FEA
29DC:  CLRF   FE9
29DE:  BCF    29.0
29E0:  BCF    29.1
29E2:  BCF    29.2
29E4:  BCF    29.3
29E6:  BCF    29.4
29E8:  BCF    29.5
29EA:  BCF    29.6
29EC:  BCF    29.7
29EE:  BCF    2A.0
29F0:  BCF    2A.1
29F2:  BCF    2A.2
29F4:  BCF    2A.3
29F6:  BCF    2A.4
29F8:  BCF    2A.5
29FA:  BCF    2A.6
29FC:  CLRF   2B
29FE:  MOVLW  07
2A00:  MOVWF  2C
2A02:  MOVLW  02
2A04:  MOVWF  2D
2A06:  MOVLW  0B
2A08:  MOVWF  2E
2A0A:  MOVLW  02
2A0C:  MOVWF  2F
2A0E:  MOVLW  03
2A10:  MOVWF  30
2A12:  MOVLW  02
2A14:  MOVWF  31
2A16:  MOVWF  32
2A18:  MOVLW  04
2A1A:  MOVWF  33
2A1C:  CLRF   34
2A1E:  CLRF   35
2A20:  CLRF   36
2A22:  CLRF   37
2A24:  CLRF   38
2A26:  CLRF   39
2A28:  CLRF   3A
2A2A:  CLRF   3B
2A2C:  CLRF   3C
2A2E:  CLRF   3D
2A30:  CLRF   3E
2A32:  CLRF   3F
2A34:  CLRF   40
2A36:  MOVLW  01
2A38:  MOVWF  41
2A3A:  CLRF   42
2A3C:  CLRF   43
2A3E:  CLRF   44
2A40:  CLRF   45
2A42:  MOVLW  0A
2A44:  MOVWF  46
2A46:  CLRF   47
2A48:  CLRF   53
2A4A:  CLRF   54
2A4C:  CLRF   55
2A4E:  CLRF   56
2A50:  MOVLW  04
2A52:  MOVWF  57
2A54:  CLRF   5B
2A56:  CLRF   5A
2A58:  CLRF   5D
2A5A:  CLRF   5C
2A5C:  CLRF   xB1
2A5E:  CLRF   xB0
2A60:  CLRF   xAF
2A62:  CLRF   xAE
2A64:  CLRF   xB5
2A66:  CLRF   xB4
2A68:  CLRF   xB3
2A6A:  CLRF   xB2
2A6C:  CLRF   xB9
2A6E:  CLRF   xB8
2A70:  CLRF   xB7
2A72:  CLRF   xB6
2A74:  CLRF   xBD
2A76:  CLRF   xBC
2A78:  CLRF   xBB
2A7A:  CLRF   xBA
2A7C:  CLRF   xC1
2A7E:  CLRF   xC0
2A80:  CLRF   xBF
2A82:  MOVLW  80
2A84:  MOVWF  xBE
2A86:  BSF    2A.7
2A88:  BCF    xC2.0
2A8A:  CLRF   xC4
2A8C:  CLRF   xC3
2A8E:  CLRF   xC6
2A90:  CLRF   xC5
2A92:  CLRF   xC8
2A94:  CLRF   xC7
2A96:  CLRF   xCA
2A98:  CLRF   xC9
2A9A:  CLRF   xCC
2A9C:  CLRF   xCB
2A9E:  CLRF   xCE
2AA0:  CLRF   xCD
2AA2:  CLRF   xD0
2AA4:  CLRF   xCF
2AA6:  BCF    xC2.1
2AA8:  CLRF   xD1
2AAA:  CLRF   xDB
2AAC:  CLRF   xDA
2AAE:  MOVF   FC1,W
2AB0:  ANDLW  C0
2AB2:  IORLW  0F
2AB4:  MOVWF  FC1
2AB6:  MOVLW  07
2AB8:  MOVWF  FB4
2ABA:  MOVLW  3E
2ABC:  MOVWF  48
2ABE:  MOVLW  20
2AC0:  MOVWF  49
2AC2:  MOVLW  5E
2AC4:  MOVWF  4A
2AC6:  CLRF   4B
2AC8:  CLRF   4C
2ACA:  CLRF   4D
2ACC:  CLRF   4E
2ACE:  CLRF   4F
2AD0:  CLRF   50
2AD2:  CLRF   51
2AD4:  CLRF   52
2AD6:  CLRF   5E
2AD8:  CLRF   5F
2ADA:  CLRF   x60
2ADC:  CLRF   x61
2ADE:  CLRF   x62
2AE0:  CLRF   x63
2AE2:  CLRF   x64
2AE4:  CLRF   x65
2AE6:  CLRF   x66
2AE8:  CLRF   x67
2AEA:  CLRF   x68
2AEC:  CLRF   x69
2AEE:  CLRF   x6A
2AF0:  CLRF   x6B
2AF2:  CLRF   x6C
2AF4:  CLRF   x6D
2AF6:  CLRF   x6E
2AF8:  CLRF   x6F
2AFA:  CLRF   x70
2AFC:  CLRF   x71
2AFE:  CLRF   x72
2B00:  CLRF   x73
2B02:  CLRF   x74
2B04:  CLRF   x75
2B06:  CLRF   x76
2B08:  CLRF   x77
2B0A:  CLRF   x78
2B0C:  CLRF   x79
2B0E:  CLRF   x7A
2B10:  CLRF   x7B
2B12:  CLRF   x7C
2B14:  CLRF   x7D
2B16:  CLRF   x7E
2B18:  CLRF   x7F
2B1A:  CLRF   x80
2B1C:  CLRF   x81
2B1E:  CLRF   x82
2B20:  CLRF   x83
2B22:  CLRF   x84
2B24:  CLRF   x85
2B26:  CLRF   x86
2B28:  CLRF   x87
2B2A:  CLRF   x88
2B2C:  CLRF   x89
2B2E:  CLRF   x8A
2B30:  CLRF   x8B
2B32:  CLRF   x8C
2B34:  CLRF   x8D
2B36:  CLRF   x8E
2B38:  CLRF   x8F
2B3A:  CLRF   x90
2B3C:  CLRF   x91
2B3E:  CLRF   x92
2B40:  CLRF   x93
2B42:  CLRF   x94
2B44:  CLRF   x95
2B46:  CLRF   x96
2B48:  CLRF   x97
2B4A:  CLRF   x98
2B4C:  CLRF   x99
2B4E:  CLRF   x9A
2B50:  CLRF   x9B
2B52:  CLRF   x9C
2B54:  CLRF   x9D
2B56:  CLRF   x9E
2B58:  CLRF   x9F
2B5A:  CLRF   xA0
2B5C:  CLRF   xA1
2B5E:  CLRF   xA2
2B60:  CLRF   xA3
2B62:  CLRF   xA4
2B64:  CLRF   xA5
2B66:  CLRF   xA6
2B68:  CLRF   xA7
2B6A:  CLRF   xA8
2B6C:  CLRF   xA9
2B6E:  CLRF   xAA
2B70:  CLRF   xAB
2B72:  CLRF   xAC
2B74:  CLRF   xAD
....................    Motor_off; 
2B76:  BCF    F8B.2
2B78:  BCF    F94.2
....................    Motor2_off; 
2B7A:  BCF    F8B.1
2B7C:  BCF    F94.1
....................    ConfigInterrupciones(); 
2B7E:  GOTO   0CC8
....................    //MensajeBienvenida(); 
....................    LeeEEPROM();  
2B82:  GOTO   0D3A
....................    LimitaValores(); 
2B86:  GOTO   114E
....................    if(motor!=1){ 
2B8A:  DECFSZ 44,W
2B8C:  BRA    2B90
2B8E:  BRA    2B96
....................       MensajeBienvenida();  
2B90:  GOTO   17AA
....................    }else{ 
2B94:  BRA    2BA8
....................       if(luz==1) 
2B96:  DECFSZ 45,W
2B98:  BRA    2B9C
....................          estadofl=1; 
2B9A:  BSF    29.1
....................       if(luz==0) 
2B9C:  MOVF   45,F
2B9E:  BNZ   2BA2
....................          estadofl=0; 
2BA0:  BCF    29.1
....................       estadomv=1; 
2BA2:  BSF    29.2
....................       Menu=50; 
2BA4:  MOVLW  32
2BA6:  MOVWF  2B
....................    } 
....................    Motor_off; 
2BA8:  BCF    F8B.2
2BAA:  BCF    F94.2
....................    Motor2_off; 
2BAC:  BCF    F8B.1
2BAE:  BCF    F94.1
....................     
....................    if(UP && DOWN && RIGHT){ 
2BB0:  BSF    F92.5
2BB2:  BTFSC  F80.5
2BB4:  BRA    2D30
2BB6:  BSF    F96.0
2BB8:  BTFSC  F84.0
2BBA:  BRA    2D30
2BBC:  BSF    F96.1
2BBE:  BTFSC  F84.1
2BC0:  BRA    2D30
....................       for(;;){ 
....................          if(velocidadInicial>15) 
2BC2:  MOVF   46,W
2BC4:  SUBLW  0F
2BC6:  BC    2BCC
....................             velocidadInicial=15; 
2BC8:  MOVLW  0F
2BCA:  MOVWF  46
....................          if(velocidadInicial<1) 
2BCC:  MOVF   46,F
2BCE:  BNZ   2BD4
....................             velocidadInicial=1; 
2BD0:  MOVLW  01
2BD2:  MOVWF  46
....................         
....................          lcd_gotoxy(1,1); 
2BD4:  MOVLW  01
2BD6:  MOVWF  xF2
2BD8:  MOVWF  xF3
2BDA:  CALL   16BA
....................          printf(lcd_putc,"Seleccione Velocidad"); 
2BDE:  MOVLW  E8
2BE0:  MOVWF  FF6
2BE2:  MOVLW  04
2BE4:  MOVWF  FF7
2BE6:  CALL   178A
....................          lcd_gotoxy(1,2); 
2BEA:  MOVLW  01
2BEC:  MOVWF  xF2
2BEE:  MOVLW  02
2BF0:  MOVWF  xF3
2BF2:  CALL   16BA
....................          printf(lcd_putc,"Inicial   Ventilador"); 
2BF6:  MOVLW  FE
2BF8:  MOVWF  FF6
2BFA:  MOVLW  04
2BFC:  MOVWF  FF7
2BFE:  CALL   178A
....................          lcd_gotoxy(1,3); 
2C02:  MOVLW  01
2C04:  MOVWF  xF2
2C06:  MOVLW  03
2C08:  MOVWF  xF3
2C0A:  CALL   16BA
....................          printf(lcd_putc,"     Vel: %02u       ",velocidadInicial); 
2C0E:  MOVLW  14
2C10:  MOVWF  FF6
2C12:  MOVLW  05
2C14:  MOVWF  FF7
2C16:  MOVLW  0A
2C18:  MOVWF  xE4
2C1A:  CALL   1812
2C1E:  MOVFF  46,E0
2C22:  MOVLW  01
2C24:  MOVWF  xE1
2C26:  CALL   1858
2C2A:  MOVLW  22
2C2C:  MOVWF  FF6
2C2E:  MOVLW  05
2C30:  MOVWF  FF7
2C32:  MOVLW  07
2C34:  MOVWF  xE4
2C36:  CALL   1812
....................          lcd_gotoxy(1,4); 
2C3A:  MOVLW  01
2C3C:  MOVWF  xF2
2C3E:  MOVLW  04
2C40:  MOVWF  xF3
2C42:  CALL   16BA
....................          printf(lcd_putc,"                    ");       
2C46:  MOVLW  2A
2C48:  MOVWF  FF6
2C4A:  MOVLW  05
2C4C:  MOVWF  FF7
2C4E:  CALL   178A
....................           
....................          if(UP){   
2C52:  BSF    F92.5
2C54:  BTFSC  F80.5
2C56:  BRA    2C62
....................             delay_ms(200);velocidadInicial++; 
2C58:  MOVLW  C8
2C5A:  MOVWF  xF7
2C5C:  CALL   0BDA
2C60:  INCF   46,F
....................          } 
....................                 
....................          if(DOWN && Vel1>0)//Si oprime hacia abajo 
2C62:  BSF    F96.0
2C64:  BTFSC  F84.0
2C66:  BRA    2C76
2C68:  MOVF   57,F
2C6A:  BZ    2C76
....................          {   
....................             delay_ms(200);velocidadInicial--; 
2C6C:  MOVLW  C8
2C6E:  MOVWF  xF7
2C70:  CALL   0BDA
2C74:  DECF   46,F
....................          } 
....................           
....................          if(IZQU)//Si oprime boton de Toma. 
2C76:  BSF    F96.2
2C78:  BTFSC  F84.2
2C7A:  BRA    2D2E
....................          {                   
....................             write_eeprom(24,velocidadInicial);//Guardar valor de Setpoint en eeprom 
2C7C:  MOVLW  18
2C7E:  MOVWF  FA9
2C80:  MOVFF  46,FA8
2C84:  BCF    FA6.6
2C86:  BCF    FA6.7
2C88:  BSF    FA6.2
2C8A:  MOVF   FF2,W
2C8C:  MOVWF  00
2C8E:  BCF    FF2.6
2C90:  BCF    FF2.7
2C92:  MOVLB  F
2C94:  MOVLW  55
2C96:  MOVWF  FA7
2C98:  MOVLW  AA
2C9A:  MOVWF  FA7
2C9C:  BSF    FA6.1
2C9E:  BTFSC  FA6.1
2CA0:  BRA    2C9E
2CA2:  BCF    FA6.2
2CA4:  MOVF   00,W
2CA6:  IORWF  FF2,F
....................             delay_ms(20); 
2CA8:  MOVLW  14
2CAA:  MOVLB  0
2CAC:  MOVWF  xF7
2CAE:  CALL   0BDA
....................             lcd_gotoxy(1,1); 
2CB2:  MOVLW  01
2CB4:  MOVWF  xF2
2CB6:  MOVWF  xF3
2CB8:  CALL   16BA
....................             printf(lcd_putc,"                    "); 
2CBC:  MOVLW  40
2CBE:  MOVWF  FF6
2CC0:  MOVLW  05
2CC2:  MOVWF  FF7
2CC4:  CALL   178A
....................             lcd_gotoxy(1,2); 
2CC8:  MOVLW  01
2CCA:  MOVWF  xF2
2CCC:  MOVLW  02
2CCE:  MOVWF  xF3
2CD0:  CALL   16BA
....................             printf(lcd_putc,"     Velocidad      "); 
2CD4:  MOVLW  56
2CD6:  MOVWF  FF6
2CD8:  MOVLW  05
2CDA:  MOVWF  FF7
2CDC:  CALL   178A
....................             lcd_gotoxy(1,3); 
2CE0:  MOVLW  01
2CE2:  MOVWF  xF2
2CE4:  MOVLW  03
2CE6:  MOVWF  xF3
2CE8:  CALL   16BA
....................             printf(lcd_putc,"      Almacenada    "); 
2CEC:  MOVLW  6C
2CEE:  MOVWF  FF6
2CF0:  MOVLW  05
2CF2:  MOVWF  FF7
2CF4:  CALL   178A
....................             lcd_gotoxy(1,4); 
2CF8:  MOVLW  01
2CFA:  MOVWF  xF2
2CFC:  MOVLW  04
2CFE:  MOVWF  xF3
2D00:  CALL   16BA
....................             printf(lcd_putc,"                    ");  
2D04:  MOVLW  82
2D06:  MOVWF  FF6
2D08:  MOVLW  05
2D0A:  MOVWF  FF7
2D0C:  CALL   178A
....................             delay_ms(1000); 
2D10:  MOVLW  04
2D12:  MOVWF  xE0
2D14:  MOVLW  FA
2D16:  MOVWF  xF7
2D18:  CALL   0BDA
2D1C:  DECFSZ xE0,F
2D1E:  BRA    2D14
....................             printf(lcd_putc,"\f"); 
2D20:  MOVLW  0C
2D22:  MOVWF  xF1
2D24:  CALL   1724
....................             lcd_init(); 
2D28:  CALL   0C6A
....................             reset_cpu(); 
2D2C:  RESET
....................          } 
....................       } 
2D2E:  BRA    2BC2
....................    } 
....................     
....................    if(UP && RIGHT){ 
2D30:  BSF    F92.5
2D32:  BTFSC  F80.5
2D34:  BRA    2F10
2D36:  BSF    F96.1
2D38:  BTFSC  F84.1
2D3A:  BRA    2F10
....................       for(;;){ 
....................          lcd_gotoxy(1,1); 
2D3C:  MOVLW  01
2D3E:  MOVWF  xF2
2D40:  MOVWF  xF3
2D42:  CALL   16BA
....................          printf(lcd_putc,"  Tiempo de Trabajo  "); 
2D46:  MOVLW  98
2D48:  MOVWF  FF6
2D4A:  MOVLW  05
2D4C:  MOVWF  FF7
2D4E:  CALL   178A
....................          lcd_gotoxy(1,2); 
2D52:  MOVLW  01
2D54:  MOVWF  xF2
2D56:  MOVLW  02
2D58:  MOVWF  xF3
2D5A:  CALL   16BA
....................          printf(lcd_putc,"   Tiempo= %05Lu   ",horas); 
2D5E:  MOVLW  AE
2D60:  MOVWF  FF6
2D62:  MOVLW  05
2D64:  MOVWF  FF7
2D66:  MOVLW  0B
2D68:  MOVWF  xE4
2D6A:  CALL   1812
2D6E:  MOVLW  08
2D70:  MOVWF  FE9
2D72:  MOVFF  5B,E1
2D76:  MOVFF  5A,E0
2D7A:  CALL   18BE
2D7E:  MOVLW  20
2D80:  MOVWF  xF1
2D82:  CALL   1724
2D86:  MOVLW  20
2D88:  MOVWF  xF1
2D8A:  CALL   1724
2D8E:  MOVLW  20
2D90:  MOVWF  xF1
2D92:  CALL   1724
....................          lcd_gotoxy(1,4); 
2D96:  MOVLW  01
2D98:  MOVWF  xF2
2D9A:  MOVLW  04
2D9C:  MOVWF  xF3
2D9E:  CALL   16BA
....................          printf(lcd_putc," RESET= Oprima < "); 
2DA2:  MOVLW  C2
2DA4:  MOVWF  FF6
2DA6:  MOVLW  05
2DA8:  MOVWF  FF7
2DAA:  CALL   178A
....................           
....................          if(IZQU){ 
2DAE:  BSF    F96.2
2DB0:  BTFSC  F84.2
2DB2:  BRA    2F0E
....................          delay_ms(100); 
2DB4:  MOVLW  64
2DB6:  MOVWF  xF7
2DB8:  CALL   0BDA
....................             if(IZQU){ 
2DBC:  BSF    F96.2
2DBE:  BTFSC  F84.2
2DC0:  BRA    2F0E
....................                write_eeprom(20,0); 
2DC2:  MOVLW  14
2DC4:  MOVWF  FA9
2DC6:  CLRF   FA8
2DC8:  BCF    FA6.6
2DCA:  BCF    FA6.7
2DCC:  BSF    FA6.2
2DCE:  MOVF   FF2,W
2DD0:  MOVWF  00
2DD2:  BCF    FF2.6
2DD4:  BCF    FF2.7
2DD6:  MOVLB  F
2DD8:  MOVLW  55
2DDA:  MOVWF  FA7
2DDC:  MOVLW  AA
2DDE:  MOVWF  FA7
2DE0:  BSF    FA6.1
2DE2:  BTFSC  FA6.1
2DE4:  BRA    2DE2
2DE6:  BCF    FA6.2
2DE8:  MOVF   00,W
2DEA:  IORWF  FF2,F
....................                delay_ms(20); 
2DEC:  MOVLW  14
2DEE:  MOVLB  0
2DF0:  MOVWF  xF7
2DF2:  CALL   0BDA
....................                write_eeprom(21,0); 
2DF6:  MOVLW  15
2DF8:  MOVWF  FA9
2DFA:  CLRF   FA8
2DFC:  BCF    FA6.6
2DFE:  BCF    FA6.7
2E00:  BSF    FA6.2
2E02:  MOVF   FF2,W
2E04:  MOVWF  00
2E06:  BCF    FF2.6
2E08:  BCF    FF2.7
2E0A:  MOVLB  F
2E0C:  MOVLW  55
2E0E:  MOVWF  FA7
2E10:  MOVLW  AA
2E12:  MOVWF  FA7
2E14:  BSF    FA6.1
2E16:  BTFSC  FA6.1
2E18:  BRA    2E16
2E1A:  BCF    FA6.2
2E1C:  MOVF   00,W
2E1E:  IORWF  FF2,F
....................                delay_ms(20); 
2E20:  MOVLW  14
2E22:  MOVLB  0
2E24:  MOVWF  xF7
2E26:  CALL   0BDA
....................                write_eeprom(18,0); 
2E2A:  MOVLW  12
2E2C:  MOVWF  FA9
2E2E:  CLRF   FA8
2E30:  BCF    FA6.6
2E32:  BCF    FA6.7
2E34:  BSF    FA6.2
2E36:  MOVF   FF2,W
2E38:  MOVWF  00
2E3A:  BCF    FF2.6
2E3C:  BCF    FF2.7
2E3E:  MOVLB  F
2E40:  MOVLW  55
2E42:  MOVWF  FA7
2E44:  MOVLW  AA
2E46:  MOVWF  FA7
2E48:  BSF    FA6.1
2E4A:  BTFSC  FA6.1
2E4C:  BRA    2E4A
2E4E:  BCF    FA6.2
2E50:  MOVF   00,W
2E52:  IORWF  FF2,F
....................                delay_ms(20); 
2E54:  MOVLW  14
2E56:  MOVLB  0
2E58:  MOVWF  xF7
2E5A:  CALL   0BDA
....................                write_eeprom(19,0); 
2E5E:  MOVLW  13
2E60:  MOVWF  FA9
2E62:  CLRF   FA8
2E64:  BCF    FA6.6
2E66:  BCF    FA6.7
2E68:  BSF    FA6.2
2E6A:  MOVF   FF2,W
2E6C:  MOVWF  00
2E6E:  BCF    FF2.6
2E70:  BCF    FF2.7
2E72:  MOVLB  F
2E74:  MOVLW  55
2E76:  MOVWF  FA7
2E78:  MOVLW  AA
2E7A:  MOVWF  FA7
2E7C:  BSF    FA6.1
2E7E:  BTFSC  FA6.1
2E80:  BRA    2E7E
2E82:  BCF    FA6.2
2E84:  MOVF   00,W
2E86:  IORWF  FF2,F
....................                delay_ms(20); 
2E88:  MOVLW  14
2E8A:  MOVLB  0
2E8C:  MOVWF  xF7
2E8E:  CALL   0BDA
....................                lcd_gotoxy(1,1); 
2E92:  MOVLW  01
2E94:  MOVWF  xF2
2E96:  MOVWF  xF3
2E98:  CALL   16BA
....................                printf(lcd_putc,"                    "); 
2E9C:  MOVLW  D4
2E9E:  MOVWF  FF6
2EA0:  MOVLW  05
2EA2:  MOVWF  FF7
2EA4:  CALL   178A
....................                lcd_gotoxy(1,2); 
2EA8:  MOVLW  01
2EAA:  MOVWF  xF2
2EAC:  MOVLW  02
2EAE:  MOVWF  xF3
2EB0:  CALL   16BA
....................                printf(lcd_putc,"  Borrando  Tiempo  "); 
2EB4:  MOVLW  EA
2EB6:  MOVWF  FF6
2EB8:  MOVLW  05
2EBA:  MOVWF  FF7
2EBC:  CALL   178A
....................                lcd_gotoxy(1,3); 
2EC0:  MOVLW  01
2EC2:  MOVWF  xF2
2EC4:  MOVLW  03
2EC6:  MOVWF  xF3
2EC8:  CALL   16BA
....................                printf(lcd_putc,"    de Trabajo      "); 
2ECC:  MOVLW  00
2ECE:  MOVWF  FF6
2ED0:  MOVLW  06
2ED2:  MOVWF  FF7
2ED4:  CALL   178A
....................                lcd_gotoxy(1,4); 
2ED8:  MOVLW  01
2EDA:  MOVWF  xF2
2EDC:  MOVLW  04
2EDE:  MOVWF  xF3
2EE0:  CALL   16BA
....................                printf(lcd_putc,"                    ");  
2EE4:  MOVLW  16
2EE6:  MOVWF  FF6
2EE8:  MOVLW  06
2EEA:  MOVWF  FF7
2EEC:  CALL   178A
....................                delay_ms(1000); 
2EF0:  MOVLW  04
2EF2:  MOVWF  xE0
2EF4:  MOVLW  FA
2EF6:  MOVWF  xF7
2EF8:  CALL   0BDA
2EFC:  DECFSZ xE0,F
2EFE:  BRA    2EF4
....................                printf(lcd_putc,"\f"); 
2F00:  MOVLW  0C
2F02:  MOVWF  xF1
2F04:  CALL   1724
....................                lcd_init(); 
2F08:  CALL   0C6A
....................                reset_cpu(); 
2F0C:  RESET
....................             } 
....................          } 
....................       } 
2F0E:  BRA    2D3C
....................    } 
....................  
....................    while(true){ 
....................    //leeControlRemoto(); 
....................    cuentaTiempoTrabajoFiltro(); 
2F10:  GOTO   1970
....................    if(VelMotor==20){ 
2F14:  MOVF   xD1,W
2F16:  SUBLW  14
2F18:  BNZ   2F26
....................       Motor_on; 
2F1A:  BSF    F8B.2
2F1C:  BCF    F94.2
....................       Motor2_on;  
2F1E:  BSF    F8B.1
2F20:  BCF    F94.1
....................       set_timer0(0); 
2F22:  CLRF   FD7
2F24:  CLRF   FD6
....................    } 
....................     
....................    if(VelMotor==0){ 
2F26:  MOVF   xD1,F
2F28:  BNZ   2F36
....................       Motor_off; 
2F2A:  BCF    F8B.2
2F2C:  BCF    F94.2
....................       Motor2_off;  
2F2E:  BCF    F8B.1
2F30:  BCF    F94.1
....................       set_timer0(0); 
2F32:  CLRF   FD7
2F34:  CLRF   FD6
....................    } 
.................... //------------Menu0------------------------------------------------------------------    
....................    if(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
2F36:  MOVF   2B,F
2F38:  BTFSS  FD8.2
2F3A:  BRA    3346
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
2F3C:  MOVLW  01
2F3E:  MOVWF  xF2
2F40:  MOVWF  xF3
2F42:  CALL   16BA
....................          printf(lcd_putc,"     Ingrese        "); 
2F46:  MOVLW  2C
2F48:  MOVWF  FF6
2F4A:  MOVLW  06
2F4C:  MOVWF  FF7
2F4E:  CALL   178A
....................          lcd_gotoxy(1,2); 
2F52:  MOVLW  01
2F54:  MOVWF  xF2
2F56:  MOVLW  02
2F58:  MOVWF  xF3
2F5A:  CALL   16BA
....................          printf(lcd_putc,"    Contraseña      "); 
2F5E:  MOVLW  42
2F60:  MOVWF  FF6
2F62:  MOVLW  06
2F64:  MOVWF  FF7
2F66:  CALL   178A
....................          lcd_gotoxy(1,3); 
2F6A:  MOVLW  01
2F6C:  MOVWF  xF2
2F6E:  MOVLW  03
2F70:  MOVWF  xF3
2F72:  CALL   16BA
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2F76:  MOVLW  58
2F78:  MOVWF  FF6
2F7A:  MOVLW  06
2F7C:  MOVWF  FF7
2F7E:  MOVLW  0A
2F80:  MOVWF  xE4
2F82:  CALL   1812
2F86:  MOVFF  4B,E0
2F8A:  MOVLW  1F
2F8C:  MOVWF  xE1
2F8E:  CALL   1B1C
2F92:  MOVFF  4C,E0
2F96:  MOVLW  1F
2F98:  MOVWF  xE1
2F9A:  CALL   1B1C
2F9E:  MOVFF  4D,E0
2FA2:  MOVLW  1F
2FA4:  MOVWF  xE1
2FA6:  CALL   1B1C
2FAA:  MOVFF  4E,E0
2FAE:  MOVLW  1F
2FB0:  MOVWF  xE1
2FB2:  CALL   1B1C
2FB6:  MOVLW  20
2FB8:  MOVWF  xF1
2FBA:  CALL   1724
2FBE:  MOVLW  20
2FC0:  MOVWF  xF1
2FC2:  CALL   1724
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
2FC6:  MOVFF  2E,F2
2FCA:  MOVLW  04
2FCC:  MOVWF  xF3
2FCE:  CALL   16BA
....................          lcd_putc(t[2]); 
2FD2:  MOVFF  4A,F1
2FD6:  CALL   1724
....................           
....................          if(unidad>11&&unidad<14){ 
2FDA:  MOVF   2E,W
2FDC:  SUBLW  0B
2FDE:  BC    2FFE
2FE0:  MOVF   2E,W
2FE2:  SUBLW  0D
2FE4:  BNC   2FFE
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2FE6:  MOVLW  01
2FE8:  SUBWF  2E,W
2FEA:  MOVWF  xE0
2FEC:  MOVWF  xF2
2FEE:  MOVLW  04
2FF0:  MOVWF  xF3
2FF2:  CALL   16BA
....................             lcd_putc(t[1]); 
2FF6:  MOVFF  49,F1
2FFA:  CALL   1724
....................          } 
....................           
....................          Cambio=OFF; 
2FFE:  BCF    2A.7
....................       //} 
....................        
....................       if(UP){//Si oprime hacia arriba 
3000:  BSF    F92.5
3002:  BTFSC  F80.5
3004:  BRA    3038
....................          delay_ms(20); 
3006:  MOVLW  14
3008:  MOVWF  xF7
300A:  CALL   0BDA
....................          if(UP){ 
300E:  BSF    F92.5
3010:  BTFSC  F80.5
3012:  BRA    3036
....................             if(Flanco == 0) { 
3014:  BTFSC  29.3
3016:  BRA    3036
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
3018:  MOVLW  0B
301A:  SUBWF  2E,W
301C:  CLRF   03
301E:  ADDLW  4B
3020:  MOVWF  FE9
3022:  MOVLW  00
3024:  ADDWFC 03,W
3026:  MOVWF  FEA
3028:  INCF   FEF,F
302A:  BSF    29.3
302C:  MOVLW  1E
302E:  MOVWF  xF7
3030:  CALL   0BDA
3034:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
3036:  BRA    303A
....................          Flanco = 0; 
3038:  BCF    29.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
303A:  BSF    F96.0
303C:  BTFSC  F84.0
303E:  BRA    3072
....................          delay_ms(20); 
3040:  MOVLW  14
3042:  MOVWF  xF7
3044:  CALL   0BDA
....................          if(DOWN){ 
3048:  BSF    F96.0
304A:  BTFSC  F84.0
304C:  BRA    3070
....................             if(Flanco2 == 0) { 
304E:  BTFSC  29.5
3050:  BRA    3070
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
3052:  MOVLW  0B
3054:  SUBWF  2E,W
3056:  CLRF   03
3058:  ADDLW  4B
305A:  MOVWF  FE9
305C:  MOVLW  00
305E:  ADDWFC 03,W
3060:  MOVWF  FEA
3062:  DECF   FEF,F
3064:  BSF    29.5
3066:  MOVLW  1E
3068:  MOVWF  xF7
306A:  CALL   0BDA
306E:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
3070:  BRA    3074
....................          Flanco2 = 0; 
3072:  BCF    29.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
3074:  BSF    F96.1
3076:  BTFSC  F84.1
3078:  BRA    30A4
....................          delay_ms(20); 
307A:  MOVLW  14
307C:  MOVWF  xF7
307E:  CALL   0BDA
....................          if(RIGHT){ 
3082:  BSF    F96.1
3084:  BTFSC  F84.1
3086:  BRA    30A2
....................             if(Flanco1 == 0) { 
3088:  BTFSC  29.4
308A:  BRA    30A2
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
308C:  BSF    29.4
308E:  INCF   2E,F
3090:  MOVLW  1E
3092:  MOVWF  xF7
3094:  CALL   0BDA
3098:  MOVLW  0C
309A:  MOVWF  xF1
309C:  CALL   1724
30A0:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
30A2:  BRA    30A6
....................          Flanco1 = 0; 
30A4:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
30A6:  BSF    F96.2
30A8:  BTFSC  F84.2
30AA:  BRA    30D6
....................          delay_ms(150); 
30AC:  MOVLW  96
30AE:  MOVWF  xF7
30B0:  CALL   0BDA
....................          if(IZQU){ 
30B4:  BSF    F96.2
30B6:  BTFSC  F84.2
30B8:  BRA    30D4
....................             if(Flanco3 == 0){ 
30BA:  BTFSC  29.6
30BC:  BRA    30D4
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
30BE:  BSF    29.6
30C0:  DECF   2E,F
30C2:  MOVLW  1E
30C4:  MOVWF  xF7
30C6:  CALL   0BDA
30CA:  MOVLW  0C
30CC:  MOVWF  xF1
30CE:  CALL   1724
30D2:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
30D4:  BRA    30D8
....................         Flanco3 = 0; 
30D6:  BCF    29.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
30D8:  MOVLW  0B
30DA:  SUBWF  2E,W
30DC:  CLRF   03
30DE:  ADDLW  4B
30E0:  MOVWF  FE9
30E2:  MOVLW  00
30E4:  ADDWFC 03,W
30E6:  MOVWF  FEA
30E8:  BTFSC  FEF.7
30EA:  BRA    30EE
30EC:  BRA    3102
....................          clave[unidad-11]=9; 
30EE:  MOVLW  0B
30F0:  SUBWF  2E,W
30F2:  CLRF   03
30F4:  ADDLW  4B
30F6:  MOVWF  FE9
30F8:  MOVLW  00
30FA:  ADDWFC 03,W
30FC:  MOVWF  FEA
30FE:  MOVLW  09
3100:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
3102:  MOVLW  0B
3104:  SUBWF  2E,W
3106:  CLRF   03
3108:  ADDLW  4B
310A:  MOVWF  FE9
310C:  MOVLW  00
310E:  ADDWFC 03,W
3110:  MOVWF  FEA
3112:  BTFSC  FEF.7
3114:  BRA    312E
3116:  MOVF   FEF,W
3118:  SUBLW  09
311A:  BC    312E
....................          clave[unidad-11]=0; 
311C:  MOVLW  0B
311E:  SUBWF  2E,W
3120:  CLRF   03
3122:  ADDLW  4B
3124:  MOVWF  FE9
3126:  MOVLW  00
3128:  ADDWFC 03,W
312A:  MOVWF  FEA
312C:  CLRF   FEF
....................         
....................       if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
312E:  MOVF   2E,W
3130:  SUBLW  0A
3132:  BNC   3138
....................          unidad=11; 
3134:  MOVLW  0B
3136:  MOVWF  2E
....................              
....................       if(unidad>14){             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
3138:  MOVF   2E,W
313A:  SUBLW  0E
313C:  BTFSC  FD8.0
313E:  BRA    3346
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2){ // Si Ingresa clave para reset general del sistema. 
3140:  MOVF   4B,W
3142:  SUBLW  03
3144:  BNZ   3228
3146:  MOVF   4C,W
3148:  SUBLW  08
314A:  BNZ   3228
314C:  MOVF   4D,W
314E:  SUBLW  09
3150:  BNZ   3228
3152:  MOVF   4E,W
3154:  SUBLW  02
3156:  BNZ   3228
....................             write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
3158:  CLRF   FA9
315A:  CLRF   FA8
315C:  BCF    FA6.6
315E:  BCF    FA6.7
3160:  BSF    FA6.2
3162:  MOVF   FF2,W
3164:  MOVWF  00
3166:  BCF    FF2.6
3168:  BCF    FF2.7
316A:  MOVLB  F
316C:  MOVLW  55
316E:  MOVWF  FA7
3170:  MOVLW  AA
3172:  MOVWF  FA7
3174:  BSF    FA6.1
3176:  BTFSC  FA6.1
3178:  BRA    3176
317A:  BCF    FA6.2
317C:  MOVF   00,W
317E:  IORWF  FF2,F
3180:  MOVLW  14
3182:  MOVLB  0
3184:  MOVWF  xF7
3186:  CALL   0BDA
318A:  MOVLW  01
318C:  MOVWF  FA9
318E:  CLRF   FA8
3190:  BCF    FA6.6
3192:  BCF    FA6.7
3194:  BSF    FA6.2
3196:  MOVF   FF2,W
3198:  MOVWF  00
319A:  BCF    FF2.6
319C:  BCF    FF2.7
319E:  MOVLB  F
31A0:  MOVLW  55
31A2:  MOVWF  FA7
31A4:  MOVLW  AA
31A6:  MOVWF  FA7
31A8:  BSF    FA6.1
31AA:  BTFSC  FA6.1
31AC:  BRA    31AA
31AE:  BCF    FA6.2
31B0:  MOVF   00,W
31B2:  IORWF  FF2,F
31B4:  MOVLW  14
31B6:  MOVLB  0
31B8:  MOVWF  xF7
31BA:  CALL   0BDA
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
31BE:  MOVLW  02
31C0:  MOVWF  FA9
31C2:  CLRF   FA8
31C4:  BCF    FA6.6
31C6:  BCF    FA6.7
31C8:  BSF    FA6.2
31CA:  MOVF   FF2,W
31CC:  MOVWF  00
31CE:  BCF    FF2.6
31D0:  BCF    FF2.7
31D2:  MOVLB  F
31D4:  MOVLW  55
31D6:  MOVWF  FA7
31D8:  MOVLW  AA
31DA:  MOVWF  FA7
31DC:  BSF    FA6.1
31DE:  BTFSC  FA6.1
31E0:  BRA    31DE
31E2:  BCF    FA6.2
31E4:  MOVF   00,W
31E6:  IORWF  FF2,F
31E8:  MOVLW  14
31EA:  MOVLB  0
31EC:  MOVWF  xF7
31EE:  CALL   0BDA
31F2:  MOVLW  03
31F4:  MOVWF  FA9
31F6:  CLRF   FA8
31F8:  BCF    FA6.6
31FA:  BCF    FA6.7
31FC:  BSF    FA6.2
31FE:  MOVF   FF2,W
3200:  MOVWF  00
3202:  BCF    FF2.6
3204:  BCF    FF2.7
3206:  MOVLB  F
3208:  MOVLW  55
320A:  MOVWF  FA7
320C:  MOVLW  AA
320E:  MOVWF  FA7
3210:  BSF    FA6.1
3212:  BTFSC  FA6.1
3214:  BRA    3212
3216:  BCF    FA6.2
3218:  MOVF   00,W
321A:  IORWF  FF2,F
321C:  MOVLW  14
321E:  MOVLB  0
3220:  MOVWF  xF7
3222:  CALL   0BDA
....................              reset_cpu(); 
3226:  RESET
....................          } 
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]){ // Si las claves coinciden pasa a Menu Principal. 
3228:  MOVF   4F,W
322A:  SUBWF  4B,W
322C:  BNZ   32CC
322E:  MOVF   50,W
3230:  SUBWF  4C,W
3232:  BNZ   32CC
3234:  MOVF   51,W
3236:  SUBWF  4D,W
3238:  BNZ   32CC
323A:  MOVF   52,W
323C:  SUBWF  4E,W
323E:  BNZ   32CC
....................             lcd_gotoxy(1,1); 
3240:  MOVLW  01
3242:  MOVWF  xF2
3244:  MOVWF  xF3
3246:  CALL   16BA
....................             printf(lcd_putc,"                   "); 
324A:  MOVLW  6E
324C:  MOVWF  FF6
324E:  MOVLW  06
3250:  MOVWF  FF7
3252:  CALL   178A
....................             lcd_gotoxy(1,2); 
3256:  MOVLW  01
3258:  MOVWF  xF2
325A:  MOVLW  02
325C:  MOVWF  xF3
325E:  CALL   16BA
....................             printf(lcd_putc,"     Contraseña    "); 
3262:  MOVLW  82
3264:  MOVWF  FF6
3266:  MOVLW  06
3268:  MOVWF  FF7
326A:  CALL   178A
....................             lcd_gotoxy(1,3); 
326E:  MOVLW  01
3270:  MOVWF  xF2
3272:  MOVLW  03
3274:  MOVWF  xF3
3276:  CALL   16BA
....................             printf(lcd_putc,"      Correcta     "); 
327A:  MOVLW  96
327C:  MOVWF  FF6
327E:  MOVLW  06
3280:  MOVWF  FF7
3282:  CALL   178A
....................             lcd_gotoxy(1,4); 
3286:  MOVLW  01
3288:  MOVWF  xF2
328A:  MOVLW  04
328C:  MOVWF  xF3
328E:  CALL   16BA
....................             printf(lcd_putc,"                   "); 
3292:  MOVLW  AA
3294:  MOVWF  FF6
3296:  MOVLW  06
3298:  MOVWF  FF7
329A:  CALL   178A
....................             delay_ms(1000);Menu=50;unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
329E:  MOVLW  04
32A0:  MOVWF  xE0
32A2:  MOVLW  FA
32A4:  MOVWF  xF7
32A6:  CALL   0BDA
32AA:  DECFSZ xE0,F
32AC:  BRA    32A2
32AE:  MOVLW  32
32B0:  MOVWF  2B
32B2:  MOVLW  0B
32B4:  MOVWF  2E
32B6:  MOVLW  0C
32B8:  MOVWF  xF1
32BA:  CALL   1724
32BE:  BSF    2A.7
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
32C0:  CLRF   4B
32C2:  CLRF   4C
32C4:  CLRF   4D
32C6:  CLRF   4E
32C8:  BSF    2A.7
....................          } 
....................          else{                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
32CA:  BRA    3346
....................             lcd_gotoxy(1,1); 
32CC:  MOVLW  01
32CE:  MOVWF  xF2
32D0:  MOVWF  xF3
32D2:  CALL   16BA
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
32D6:  MOVLW  01
32D8:  MOVWF  xF2
32DA:  MOVLW  02
32DC:  MOVWF  xF3
32DE:  CALL   16BA
....................             printf(lcd_putc,"     Contraseña    "); 
32E2:  MOVLW  BE
32E4:  MOVWF  FF6
32E6:  MOVLW  06
32E8:  MOVWF  FF7
32EA:  CALL   178A
....................             lcd_gotoxy(1,3); 
32EE:  MOVLW  01
32F0:  MOVWF  xF2
32F2:  MOVLW  03
32F4:  MOVWF  xF3
32F6:  CALL   16BA
....................             printf(lcd_putc,"     Incorrecta    "); 
32FA:  MOVLW  D2
32FC:  MOVWF  FF6
32FE:  MOVLW  06
3300:  MOVWF  FF7
3302:  CALL   178A
....................             lcd_gotoxy(1,4); 
3306:  MOVLW  01
3308:  MOVWF  xF2
330A:  MOVLW  04
330C:  MOVWF  xF3
330E:  CALL   16BA
....................             printf(lcd_putc,"                   "); 
3312:  MOVLW  E6
3314:  MOVWF  FF6
3316:  MOVLW  06
3318:  MOVWF  FF7
331A:  CALL   178A
....................             delay_ms(1000);unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
331E:  MOVLW  04
3320:  MOVWF  xE0
3322:  MOVLW  FA
3324:  MOVWF  xF7
3326:  CALL   0BDA
332A:  DECFSZ xE0,F
332C:  BRA    3322
332E:  MOVLW  0B
3330:  MOVWF  2E
3332:  MOVLW  0C
3334:  MOVWF  xF1
3336:  CALL   1724
333A:  BSF    2A.7
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
333C:  CLRF   4B
333E:  CLRF   4C
3340:  CLRF   4D
3342:  CLRF   4E
3344:  BSF    2A.7
....................          } 
....................       } 
....................    } 
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
3346:  DECFSZ 2B,W
3348:  BRA    3580
....................       EliminaRuido(); 
334A:  CALL   0004
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
334E:  MOVLW  01
3350:  MOVWF  xF2
3352:  MOVWF  xF3
3354:  CALL   16BA
....................          printf(lcd_putc,"---MENU PRINCIPAL---"); 
3358:  MOVLW  FA
335A:  MOVWF  FF6
335C:  MOVLW  06
335E:  MOVWF  FF7
3360:  CALL   178A
....................          mensajes(1+paso,2); 
3364:  MOVLW  01
3366:  ADDWF  47,W
3368:  MOVWF  xE0
336A:  MOVWF  xE1
336C:  MOVLW  02
336E:  MOVWF  xE2
3370:  CALL   1BE4
....................          mensajes(2+paso,3); 
3374:  MOVLW  02
3376:  ADDWF  47,W
3378:  MOVWF  xE0
337A:  MOVWF  xE1
337C:  MOVLW  03
337E:  MOVWF  xE2
3380:  CALL   1BE4
....................          mensajes(3+paso,4); 
3384:  MOVLW  03
3386:  ADDWF  47,W
3388:  MOVWF  xE0
338A:  MOVWF  xE1
338C:  MOVLW  04
338E:  MOVWF  xE2
3390:  CALL   1BE4
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
3394:  MOVLW  01
3396:  MOVWF  xF2
3398:  MOVFF  2F,F3
339C:  CALL   16BA
....................         lcd_putc(t[0]); 
33A0:  MOVFF  48,F1
33A4:  CALL   1724
....................  
....................         if(Flecha==2) 
33A8:  MOVF   2F,W
33AA:  SUBLW  02
33AC:  BNZ   33D6
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
33AE:  MOVLW  01
33B0:  MOVWF  xF2
33B2:  MOVLW  04
33B4:  MOVWF  xF3
33B6:  CALL   16BA
....................             lcd_putc(t[1]); 
33BA:  MOVFF  49,F1
33BE:  CALL   1724
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
33C2:  MOVLW  01
33C4:  MOVWF  xF2
33C6:  MOVLW  03
33C8:  MOVWF  xF3
33CA:  CALL   16BA
....................             lcd_putc(t[1]); 
33CE:  MOVFF  49,F1
33D2:  CALL   1724
....................           } 
....................          
....................         if(Flecha==4) 
33D6:  MOVF   2F,W
33D8:  SUBLW  04
33DA:  BNZ   3404
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
33DC:  MOVLW  01
33DE:  MOVWF  xF2
33E0:  MOVLW  02
33E2:  MOVWF  xF3
33E4:  CALL   16BA
....................             lcd_putc(t[1]); 
33E8:  MOVFF  49,F1
33EC:  CALL   1724
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
33F0:  MOVLW  01
33F2:  MOVWF  xF2
33F4:  MOVLW  03
33F6:  MOVWF  xF3
33F8:  CALL   16BA
....................             lcd_putc(t[1]); 
33FC:  MOVFF  49,F1
3400:  CALL   1724
....................           } 
....................          
....................         if(Flecha==3) 
3404:  MOVF   2F,W
3406:  SUBLW  03
3408:  BNZ   3432
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
340A:  MOVLW  01
340C:  MOVWF  xF2
340E:  MOVLW  04
3410:  MOVWF  xF3
3412:  CALL   16BA
....................             lcd_putc(t[1]); 
3416:  MOVFF  49,F1
341A:  CALL   1724
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
341E:  MOVLW  01
3420:  MOVWF  xF2
3422:  MOVLW  02
3424:  MOVWF  xF3
3426:  CALL   16BA
....................             lcd_putc(t[1]); 
342A:  MOVFF  49,F1
342E:  CALL   1724
....................           } 
....................          Cambio=OFF; 
3432:  BCF    2A.7
....................      // } 
....................          
....................       if(UP){//Si oprime hacia arriba 
3434:  BSF    F92.5
3436:  BTFSC  F80.5
3438:  BRA    3464
....................          delay_ms(20); 
343A:  MOVLW  14
343C:  MOVWF  xF7
343E:  CALL   0BDA
....................          if(UP){ 
3442:  BSF    F92.5
3444:  BTFSC  F80.5
3446:  BRA    3462
....................             if(Flanco == 0){ 
3448:  BTFSC  29.3
344A:  BRA    3462
....................                Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30);Cambio=ON; 
344C:  DECF   31,F
344E:  DECF   2F,F
3450:  MOVLW  01
3452:  ADDWF  2F,W
3454:  MOVWF  30
3456:  BSF    29.3
3458:  MOVLW  1E
345A:  MOVWF  xF7
345C:  CALL   0BDA
3460:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
3462:  BRA    3466
....................          Flanco = 0; 
3464:  BCF    29.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
3466:  BSF    F96.0
3468:  BTFSC  F84.0
346A:  BRA    3496
....................          delay_ms(20); 
346C:  MOVLW  14
346E:  MOVWF  xF7
3470:  CALL   0BDA
....................          if(DOWN){ 
3474:  BSF    F96.0
3476:  BTFSC  F84.0
3478:  BRA    3494
....................             if(Flanco2 == 0){ 
347A:  BTFSC  29.5
347C:  BRA    3494
....................                Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30);Cambio=ON; 
347E:  INCF   31,F
3480:  INCF   2F,F
3482:  MOVLW  01
3484:  SUBWF  2F,W
3486:  MOVWF  30
3488:  BSF    29.5
348A:  MOVLW  1E
348C:  MOVWF  xF7
348E:  CALL   0BDA
3492:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
3494:  BRA    3498
....................          Flanco2 = 0; 
3496:  BCF    29.5
....................       } 
....................     
....................          
....................       if(Flecha2>nMenuH){ 
3498:  MOVF   31,W
349A:  SUBWF  33,W
349C:  BC    34AE
....................          paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4; 
349E:  INCF   47,F
34A0:  MOVFF  31,33
34A4:  MOVLW  02
34A6:  SUBWF  33,W
34A8:  MOVWF  32
34AA:  MOVLW  04
34AC:  MOVWF  2F
....................       } 
....................          
....................       if(Flecha2<nMenuL){ 
34AE:  MOVF   32,W
34B0:  SUBWF  31,W
34B2:  BC    34C4
....................          paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2; 
34B4:  DECF   47,F
34B6:  MOVFF  31,32
34BA:  MOVLW  02
34BC:  ADDWF  32,W
34BE:  MOVWF  33
34C0:  MOVLW  02
34C2:  MOVWF  2F
....................       } 
....................          
....................       if(Flecha2>n_opcionH){ 
34C4:  MOVF   31,W
34C6:  SUBWF  2C,W
34C8:  BC    34DC
....................          Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2; 
34CA:  MOVFF  2D,31
34CE:  MOVLW  02
34D0:  MOVWF  2F
34D2:  CLRF   47
34D4:  MOVFF  31,32
34D8:  ADDWF  32,W
34DA:  MOVWF  33
....................       } 
....................          
....................       if(Flecha2<n_opcionL){ 
34DC:  MOVF   2D,W
34DE:  SUBWF  31,W
34E0:  BC    34F8
....................          Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2; 
34E2:  MOVFF  2C,31
34E6:  MOVLW  04
34E8:  MOVWF  2F
34EA:  SUBWF  2C,W
34EC:  MOVWF  47
34EE:  MOVFF  31,33
34F2:  MOVLW  02
34F4:  SUBWF  33,W
34F6:  MOVWF  32
....................       } 
....................          
....................       if(paso<0) 
34F8:  BTFSC  47.7
34FA:  BRA    34FE
34FC:  BRA    3500
....................          paso=0; 
34FE:  CLRF   47
....................           
....................       if(RIGHT){// Si oprime derecha 
3500:  BSF    F96.1
3502:  BTFSC  F84.1
3504:  BRA    354C
....................          delay_ms(20); 
3506:  MOVLW  14
3508:  MOVWF  xF7
350A:  CALL   0BDA
....................          if(RIGHT){ 
350E:  BSF    F96.1
3510:  BTFSC  F84.1
3512:  BRA    3548
....................             if(Flanco1 == 0){ 
3514:  BTFSC  29.4
3516:  BRA    3548
....................                Flanco1 = 1;Menu=Flecha2;Flecha=3;delay_ms(300);printf(lcd_putc,"\f"); 
3518:  BSF    29.4
351A:  MOVFF  31,2B
351E:  MOVLW  03
3520:  MOVWF  2F
3522:  MOVLW  02
3524:  MOVWF  xE0
3526:  MOVLW  96
3528:  MOVWF  xF7
352A:  CALL   0BDA
352E:  DECFSZ xE0,F
3530:  BRA    3526
3532:  MOVLW  0C
3534:  MOVWF  xF1
3536:  CALL   1724
....................                if(Menu==6){ 
353A:  MOVF   2B,W
353C:  SUBLW  06
353E:  BNZ   3548
....................                   clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
3540:  CLRF   4B
3542:  CLRF   4C
3544:  CLRF   4D
3546:  CLRF   4E
....................                } 
....................             } 
....................          } 
....................          Cambio=ON; 
3548:  BSF    2A.7
....................       }else{ 
354A:  BRA    354E
....................         Flanco1 = 0; 
354C:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){ 
354E:  BSF    F96.2
3550:  BTFSC  F84.2
3552:  BRA    3580
....................          delay_ms(20); 
3554:  MOVLW  14
3556:  MOVWF  xF7
3558:  CALL   0BDA
....................          if(IZQU){ 
355C:  BSF    F96.2
355E:  BTFSC  F84.2
3560:  BRA    3580
....................             delay_ms(500);Menu=50;printf(lcd_putc,"\f");Cambio=ON; 
3562:  MOVLW  02
3564:  MOVWF  xE0
3566:  MOVLW  FA
3568:  MOVWF  xF7
356A:  CALL   0BDA
356E:  DECFSZ xE0,F
3570:  BRA    3566
3572:  MOVLW  32
3574:  MOVWF  2B
3576:  MOVLW  0C
3578:  MOVWF  xF1
357A:  CALL   1724
357E:  BSF    2A.7
....................          } 
....................       } 
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de tiempo de trabajo de Luz UV    
3580:  MOVF   2B,W
3582:  SUBLW  02
3584:  BTFSS  FD8.2
3586:  BRA    37E0
....................    EliminaRuido(); 
3588:  CALL   0004
....................    //if(Cambio){ 
....................       lcd_gotoxy(1,1); 
358C:  MOVLW  01
358E:  MOVWF  xF2
3590:  MOVWF  xF3
3592:  CALL   16BA
....................       printf(lcd_putc,"    Temporizador     "); 
3596:  MOVLW  10
3598:  MOVWF  FF6
359A:  MOVLW  07
359C:  MOVWF  FF7
359E:  CALL   178A
....................       lcd_gotoxy(1,2); 
35A2:  MOVLW  01
35A4:  MOVWF  xF2
35A6:  MOVLW  02
35A8:  MOVWF  xF3
35AA:  CALL   16BA
....................       printf(lcd_putc,"       Luz UV        "); 
35AE:  MOVLW  26
35B0:  MOVWF  FF6
35B2:  MOVLW  07
35B4:  MOVWF  FF7
35B6:  CALL   178A
....................       lcd_gotoxy(6,3); 
35BA:  MOVLW  06
35BC:  MOVWF  xF2
35BE:  MOVLW  03
35C0:  MOVWF  xF3
35C2:  CALL   16BA
....................       printf(lcd_putc,"%03u:%02u (M:S)  ",tempo_minutos_pro,tempo_segundos_pro);  
35C6:  MOVFF  3C,E0
35CA:  MOVLW  03
35CC:  MOVWF  xE1
35CE:  CALL   1858
35D2:  MOVLW  3A
35D4:  MOVWF  xF1
35D6:  CALL   1724
35DA:  MOVFF  3D,E0
35DE:  MOVLW  01
35E0:  MOVWF  xE1
35E2:  CALL   1858
35E6:  MOVLW  45
35E8:  MOVWF  FF6
35EA:  MOVLW  07
35EC:  MOVWF  FF7
35EE:  MOVLW  08
35F0:  MOVWF  xE4
35F2:  CALL   1812
....................        
....................       lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
35F6:  MOVLW  06
35F8:  ADDWF  41,W
35FA:  MOVWF  xE0
35FC:  MOVWF  xF2
35FE:  MOVLW  04
3600:  MOVWF  xF3
3602:  CALL   16BA
....................       lcd_putc(t[2]); 
3606:  MOVFF  4A,F1
360A:  CALL   1724
....................        
....................       Cambio=OFF; 
360E:  BCF    2A.7
.................... //   } 
....................     
....................    if(UP) 
3610:  BSF    F92.5
3612:  BTFSC  F80.5
3614:  BRA    3662
....................    { 
....................       delay_ms(20); 
3616:  MOVLW  14
3618:  MOVWF  xF7
361A:  CALL   0BDA
....................       if(UP){ 
361E:  BSF    F92.5
3620:  BTFSC  F80.5
3622:  BRA    3662
....................          if(unidad2==1) 
3624:  DECFSZ 41,W
3626:  BRA    3642
....................          { 
....................             if(tempo_minutos_pro<240) 
3628:  MOVF   3C,W
362A:  SUBLW  EF
362C:  BNC   3642
....................             { 
....................                tempo_minutos_pro+=5;delay_ms(300); 
362E:  MOVLW  05
3630:  ADDWF  3C,F
3632:  MOVLW  02
3634:  MOVWF  xE0
3636:  MOVLW  96
3638:  MOVWF  xF7
363A:  CALL   0BDA
363E:  DECFSZ xE0,F
3640:  BRA    3636
....................             } 
....................          } 
....................           
....................          if(unidad2==4) 
3642:  MOVF   41,W
3644:  SUBLW  04
3646:  BNZ   3660
....................          { 
....................             if(tempo_segundos_pro<59) 
3648:  MOVF   3D,W
364A:  SUBLW  3A
364C:  BNC   3660
....................             { 
....................                tempo_segundos_pro++;delay_ms(300); 
364E:  INCF   3D,F
3650:  MOVLW  02
3652:  MOVWF  xE0
3654:  MOVLW  96
3656:  MOVWF  xF7
3658:  CALL   0BDA
365C:  DECFSZ xE0,F
365E:  BRA    3654
....................             } 
....................          }      
....................       Cambio=ON; 
3660:  BSF    2A.7
....................       } 
....................    } 
....................     
....................    if(DOWN) 
3662:  BSF    F96.0
3664:  BTFSC  F84.0
3666:  BRA    36B0
....................    { 
....................       delay_ms(20); 
3668:  MOVLW  14
366A:  MOVWF  xF7
366C:  CALL   0BDA
....................       if(DOWN){ 
3670:  BSF    F96.0
3672:  BTFSC  F84.0
3674:  BRA    36B0
....................          if(unidad2==1) 
3676:  DECFSZ 41,W
3678:  BRA    3692
....................          { 
....................             if(tempo_minutos_pro>0) 
367A:  MOVF   3C,F
367C:  BZ    3692
....................             { 
....................                tempo_minutos_pro-=5;delay_ms(300); 
367E:  MOVLW  05
3680:  SUBWF  3C,F
3682:  MOVLW  02
3684:  MOVWF  xE0
3686:  MOVLW  96
3688:  MOVWF  xF7
368A:  CALL   0BDA
368E:  DECFSZ xE0,F
3690:  BRA    3686
....................             }  
....................          } 
....................           
....................          if(unidad2==4) 
3692:  MOVF   41,W
3694:  SUBLW  04
3696:  BNZ   36AE
....................          { 
....................             if(tempo_segundos_pro>0) 
3698:  MOVF   3D,F
369A:  BZ    36AE
....................             { 
....................                tempo_segundos_pro--;delay_ms(300); 
369C:  DECF   3D,F
369E:  MOVLW  02
36A0:  MOVWF  xE0
36A2:  MOVLW  96
36A4:  MOVWF  xF7
36A6:  CALL   0BDA
36AA:  DECFSZ xE0,F
36AC:  BRA    36A2
....................             }    
....................          } 
....................       Cambio=ON; 
36AE:  BSF    2A.7
....................       } 
....................    } 
....................     
....................    if(RIGHT) 
36B0:  BSF    F96.1
36B2:  BTFSC  F84.1
36B4:  BRA    36F2
....................    { 
....................       delay_ms(20); 
36B6:  MOVLW  14
36B8:  MOVWF  xF7
36BA:  CALL   0BDA
....................       if(RIGHT){ 
36BE:  BSF    F96.1
36C0:  BTFSC  F84.1
36C2:  BRA    36F2
....................          if(unidad2==1) 
36C4:  DECFSZ 41,W
36C6:  BRA    36CE
....................          { 
....................             unidad2=4; 
36C8:  MOVLW  04
36CA:  MOVWF  41
....................          } 
....................          else 
36CC:  BRA    36D8
....................          { 
....................             if(unidad2==4) 
36CE:  MOVF   41,W
36D0:  SUBLW  04
36D2:  BNZ   36D8
....................             { 
....................                unidad2=1; 
36D4:  MOVLW  01
36D6:  MOVWF  41
....................             } 
....................          } 
....................       delay_ms(500); 
36D8:  MOVLW  02
36DA:  MOVWF  xE0
36DC:  MOVLW  FA
36DE:  MOVWF  xF7
36E0:  CALL   0BDA
36E4:  DECFSZ xE0,F
36E6:  BRA    36DC
....................       printf(lcd_putc,"\f"); 
36E8:  MOVLW  0C
36EA:  MOVWF  xF1
36EC:  CALL   1724
....................       Cambio=ON; 
36F0:  BSF    2A.7
....................       } 
....................    } 
....................     
....................    if(IZQU) 
36F2:  BSF    F96.2
36F4:  BTFSC  F84.2
36F6:  BRA    37E0
....................    { 
....................       if(IZQU){ 
36F8:  BSF    F96.2
36FA:  BTFSC  F84.2
36FC:  BRA    37E0
....................          delay_ms(200); 
36FE:  MOVLW  C8
3700:  MOVWF  xF7
3702:  CALL   0BDA
....................          printf(lcd_putc,"\f"); 
3706:  MOVLW  0C
3708:  MOVWF  xF1
370A:  CALL   1724
....................          lcd_gotoxy(1,2); 
370E:  MOVLW  01
3710:  MOVWF  xF2
3712:  MOVLW  02
3714:  MOVWF  xF3
3716:  CALL   16BA
....................          printf(lcd_putc,"Tiempo Almacenado"); 
371A:  MOVLW  4E
371C:  MOVWF  FF6
371E:  MOVLW  07
3720:  MOVWF  FF7
3722:  CALL   178A
....................          lcd_gotoxy(1,3); 
3726:  MOVLW  01
3728:  MOVWF  xF2
372A:  MOVLW  03
372C:  MOVWF  xF3
372E:  CALL   16BA
....................          printf(lcd_putc,"  Correctamente  "); 
3732:  MOVLW  60
3734:  MOVWF  FF6
3736:  MOVLW  07
3738:  MOVWF  FF7
373A:  CALL   178A
....................          write_eeprom(5,tempo_minutos_pro); 
373E:  MOVLW  05
3740:  MOVWF  FA9
3742:  MOVFF  3C,FA8
3746:  BCF    FA6.6
3748:  BCF    FA6.7
374A:  BSF    FA6.2
374C:  MOVF   FF2,W
374E:  MOVWF  00
3750:  BCF    FF2.6
3752:  BCF    FF2.7
3754:  MOVLB  F
3756:  MOVLW  55
3758:  MOVWF  FA7
375A:  MOVLW  AA
375C:  MOVWF  FA7
375E:  BSF    FA6.1
3760:  BTFSC  FA6.1
3762:  BRA    3760
3764:  BCF    FA6.2
3766:  MOVF   00,W
3768:  IORWF  FF2,F
....................          delay_ms(20); 
376A:  MOVLW  14
376C:  MOVLB  0
376E:  MOVWF  xF7
3770:  CALL   0BDA
....................          write_eeprom(6,tempo_segundos_pro); 
3774:  MOVLW  06
3776:  MOVWF  FA9
3778:  MOVFF  3D,FA8
377C:  BCF    FA6.6
377E:  BCF    FA6.7
3780:  BSF    FA6.2
3782:  MOVF   FF2,W
3784:  MOVWF  00
3786:  BCF    FF2.6
3788:  BCF    FF2.7
378A:  MOVLB  F
378C:  MOVLW  55
378E:  MOVWF  FA7
3790:  MOVLW  AA
3792:  MOVWF  FA7
3794:  BSF    FA6.1
3796:  BTFSC  FA6.1
3798:  BRA    3796
379A:  BCF    FA6.2
379C:  MOVF   00,W
379E:  IORWF  FF2,F
....................          delay_ms(20); 
37A0:  MOVLW  14
37A2:  MOVLB  0
37A4:  MOVWF  xF7
37A6:  CALL   0BDA
....................          tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
37AA:  MOVFF  3C,3A
37AE:  MOVFF  3D,3B
....................          delay_ms(700); 
37B2:  MOVLW  04
37B4:  MOVWF  xE0
37B6:  MOVLW  AF
37B8:  MOVWF  xF7
37BA:  CALL   0BDA
37BE:  DECFSZ xE0,F
37C0:  BRA    37B6
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
37C2:  MOVLW  1E
37C4:  MOVWF  xF7
37C6:  CALL   0BDA
37CA:  MOVLW  01
37CC:  MOVWF  2B
37CE:  CLRF   47
37D0:  MOVLW  02
37D2:  MOVWF  2F
37D4:  MOVWF  31
37D6:  MOVLW  0C
37D8:  MOVWF  xF1
37DA:  CALL   1724
....................          Cambio=ON; 
37DE:  BSF    2A.7
....................       } 
....................    }   
....................   } 
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................  
.................... //----------------Menu3--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu para Cambio de Contraseña 
37E0:  MOVF   2B,W
37E2:  SUBLW  03
37E4:  BTFSS  FD8.2
37E6:  BRA    3B32
....................       EliminaRuido(); 
37E8:  CALL   0004
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
37EC:  MOVLW  01
37EE:  MOVWF  xF2
37F0:  MOVWF  xF3
37F2:  CALL   16BA
....................          printf(lcd_putc,"     Ingrese        "); 
37F6:  MOVLW  72
37F8:  MOVWF  FF6
37FA:  MOVLW  07
37FC:  MOVWF  FF7
37FE:  CALL   178A
....................          lcd_gotoxy(1,2); 
3802:  MOVLW  01
3804:  MOVWF  xF2
3806:  MOVLW  02
3808:  MOVWF  xF3
380A:  CALL   16BA
....................          printf(lcd_putc,"    Contraseña      "); 
380E:  MOVLW  88
3810:  MOVWF  FF6
3812:  MOVLW  07
3814:  MOVWF  FF7
3816:  CALL   178A
....................          lcd_gotoxy(1,3); 
381A:  MOVLW  01
381C:  MOVWF  xF2
381E:  MOVLW  03
3820:  MOVWF  xF3
3822:  CALL   16BA
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
3826:  MOVLW  9E
3828:  MOVWF  FF6
382A:  MOVLW  07
382C:  MOVWF  FF7
382E:  MOVLW  0A
3830:  MOVWF  xE4
3832:  CALL   1812
3836:  MOVFF  4B,E0
383A:  MOVLW  1F
383C:  MOVWF  xE1
383E:  CALL   1B1C
3842:  MOVFF  4C,E0
3846:  MOVLW  1F
3848:  MOVWF  xE1
384A:  CALL   1B1C
384E:  MOVFF  4D,E0
3852:  MOVLW  1F
3854:  MOVWF  xE1
3856:  CALL   1B1C
385A:  MOVFF  4E,E0
385E:  MOVLW  1F
3860:  MOVWF  xE1
3862:  CALL   1B1C
3866:  MOVLW  20
3868:  MOVWF  xF1
386A:  CALL   1724
386E:  MOVLW  20
3870:  MOVWF  xF1
3872:  CALL   1724
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
3876:  MOVFF  2E,F2
387A:  MOVLW  04
387C:  MOVWF  xF3
387E:  CALL   16BA
....................          lcd_putc(t[2]); 
3882:  MOVFF  4A,F1
3886:  CALL   1724
....................           
....................          if(unidad>11&&unidad<14){ 
388A:  MOVF   2E,W
388C:  SUBLW  0B
388E:  BC    38AE
3890:  MOVF   2E,W
3892:  SUBLW  0D
3894:  BNC   38AE
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
3896:  MOVLW  01
3898:  SUBWF  2E,W
389A:  MOVWF  xE0
389C:  MOVWF  xF2
389E:  MOVLW  04
38A0:  MOVWF  xF3
38A2:  CALL   16BA
....................             lcd_putc(t[1]); 
38A6:  MOVFF  49,F1
38AA:  CALL   1724
....................          } 
....................           
....................          Cambio=OFF; 
38AE:  BCF    2A.7
....................       //} 
....................        
....................       if(UP){//Si oprime hacia arriba 
38B0:  BSF    F92.5
38B2:  BTFSC  F80.5
38B4:  BRA    38E8
....................          delay_ms(20); 
38B6:  MOVLW  14
38B8:  MOVWF  xF7
38BA:  CALL   0BDA
....................          if(UP){ 
38BE:  BSF    F92.5
38C0:  BTFSC  F80.5
38C2:  BRA    38E6
....................             if(Flanco == 0) { 
38C4:  BTFSC  29.3
38C6:  BRA    38E6
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
38C8:  MOVLW  0B
38CA:  SUBWF  2E,W
38CC:  CLRF   03
38CE:  ADDLW  4B
38D0:  MOVWF  FE9
38D2:  MOVLW  00
38D4:  ADDWFC 03,W
38D6:  MOVWF  FEA
38D8:  INCF   FEF,F
38DA:  BSF    29.3
38DC:  MOVLW  1E
38DE:  MOVWF  xF7
38E0:  CALL   0BDA
38E4:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
38E6:  BRA    38EA
....................          Flanco = 0; 
38E8:  BCF    29.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
38EA:  BSF    F96.0
38EC:  BTFSC  F84.0
38EE:  BRA    3922
....................          delay_ms(20); 
38F0:  MOVLW  14
38F2:  MOVWF  xF7
38F4:  CALL   0BDA
....................          if(DOWN){ 
38F8:  BSF    F96.0
38FA:  BTFSC  F84.0
38FC:  BRA    3920
....................             if(Flanco2 == 0) { 
38FE:  BTFSC  29.5
3900:  BRA    3920
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
3902:  MOVLW  0B
3904:  SUBWF  2E,W
3906:  CLRF   03
3908:  ADDLW  4B
390A:  MOVWF  FE9
390C:  MOVLW  00
390E:  ADDWFC 03,W
3910:  MOVWF  FEA
3912:  DECF   FEF,F
3914:  BSF    29.5
3916:  MOVLW  1E
3918:  MOVWF  xF7
391A:  CALL   0BDA
391E:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
3920:  BRA    3924
....................          Flanco2 = 0; 
3922:  BCF    29.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
3924:  BSF    F96.1
3926:  BTFSC  F84.1
3928:  BRA    3954
....................          delay_ms(20); 
392A:  MOVLW  14
392C:  MOVWF  xF7
392E:  CALL   0BDA
....................          if(RIGHT){ 
3932:  BSF    F96.1
3934:  BTFSC  F84.1
3936:  BRA    3952
....................             if(Flanco1 == 0) { 
3938:  BTFSC  29.4
393A:  BRA    3952
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
393C:  BSF    29.4
393E:  INCF   2E,F
3940:  MOVLW  1E
3942:  MOVWF  xF7
3944:  CALL   0BDA
3948:  MOVLW  0C
394A:  MOVWF  xF1
394C:  CALL   1724
3950:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
3952:  BRA    3956
....................          Flanco1 = 0; 
3954:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
3956:  BSF    F96.2
3958:  BTFSC  F84.2
395A:  BRA    3986
....................          delay_ms(150); 
395C:  MOVLW  96
395E:  MOVWF  xF7
3960:  CALL   0BDA
....................          if(IZQU){ 
3964:  BSF    F96.2
3966:  BTFSC  F84.2
3968:  BRA    3984
....................             if(Flanco3 == 0){ 
396A:  BTFSC  29.6
396C:  BRA    3984
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
396E:  BSF    29.6
3970:  DECF   2E,F
3972:  MOVLW  1E
3974:  MOVWF  xF7
3976:  CALL   0BDA
397A:  MOVLW  0C
397C:  MOVWF  xF1
397E:  CALL   1724
3982:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
3984:  BRA    3988
....................         Flanco3 = 0; 
3986:  BCF    29.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
3988:  MOVLW  0B
398A:  SUBWF  2E,W
398C:  CLRF   03
398E:  ADDLW  4B
3990:  MOVWF  FE9
3992:  MOVLW  00
3994:  ADDWFC 03,W
3996:  MOVWF  FEA
3998:  BTFSC  FEF.7
399A:  BRA    399E
399C:  BRA    39B2
....................          clave[unidad-11]=9; 
399E:  MOVLW  0B
39A0:  SUBWF  2E,W
39A2:  CLRF   03
39A4:  ADDLW  4B
39A6:  MOVWF  FE9
39A8:  MOVLW  00
39AA:  ADDWFC 03,W
39AC:  MOVWF  FEA
39AE:  MOVLW  09
39B0:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
39B2:  MOVLW  0B
39B4:  SUBWF  2E,W
39B6:  CLRF   03
39B8:  ADDLW  4B
39BA:  MOVWF  FE9
39BC:  MOVLW  00
39BE:  ADDWFC 03,W
39C0:  MOVWF  FEA
39C2:  BTFSC  FEF.7
39C4:  BRA    39DE
39C6:  MOVF   FEF,W
39C8:  SUBLW  09
39CA:  BC    39DE
....................          clave[unidad-11]=0; 
39CC:  MOVLW  0B
39CE:  SUBWF  2E,W
39D0:  CLRF   03
39D2:  ADDLW  4B
39D4:  MOVWF  FE9
39D6:  MOVLW  00
39D8:  ADDWFC 03,W
39DA:  MOVWF  FEA
39DC:  CLRF   FEF
....................         
....................       if(unidad<11){             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
39DE:  MOVF   2E,W
39E0:  SUBLW  0A
39E2:  BNC   3A04
....................          unidad=11; 
39E4:  MOVLW  0B
39E6:  MOVWF  2E
....................          Menu=1; 
39E8:  MOVLW  01
39EA:  MOVWF  2B
....................          paso=0; 
39EC:  CLRF   47
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
39EE:  CLRF   4B
39F0:  CLRF   4C
39F2:  CLRF   4D
39F4:  CLRF   4E
39F6:  BSF    2A.7
....................          unidad=11;printf(lcd_putc,"\f"); 
39F8:  MOVLW  0B
39FA:  MOVWF  2E
39FC:  MOVLW  0C
39FE:  MOVWF  xF1
3A00:  CALL   1724
....................       } 
....................         
....................       if(unidad>14){// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
3A04:  MOVF   2E,W
3A06:  SUBLW  0E
3A08:  BTFSC  FD8.0
3A0A:  BRA    3B32
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]){ 
3A0C:  MOVF   4F,W
3A0E:  SUBWF  4B,W
3A10:  BNZ   3AAE
3A12:  MOVF   50,W
3A14:  SUBWF  4C,W
3A16:  BNZ   3AAE
3A18:  MOVF   51,W
3A1A:  SUBWF  4D,W
3A1C:  BNZ   3AAE
3A1E:  MOVF   52,W
3A20:  SUBWF  4E,W
3A22:  BNZ   3AAE
....................             lcd_gotoxy(1,1); 
3A24:  MOVLW  01
3A26:  MOVWF  xF2
3A28:  MOVWF  xF3
3A2A:  CALL   16BA
....................             printf(lcd_putc,"                    "); 
3A2E:  MOVLW  B4
3A30:  MOVWF  FF6
3A32:  MOVLW  07
3A34:  MOVWF  FF7
3A36:  CALL   178A
....................             lcd_gotoxy(1,2); 
3A3A:  MOVLW  01
3A3C:  MOVWF  xF2
3A3E:  MOVLW  02
3A40:  MOVWF  xF3
3A42:  CALL   16BA
....................             printf(lcd_putc,"     Contraseña     "); 
3A46:  MOVLW  CA
3A48:  MOVWF  FF6
3A4A:  MOVLW  07
3A4C:  MOVWF  FF7
3A4E:  CALL   178A
....................             lcd_gotoxy(1,3); 
3A52:  MOVLW  01
3A54:  MOVWF  xF2
3A56:  MOVLW  03
3A58:  MOVWF  xF3
3A5A:  CALL   16BA
....................             printf(lcd_putc,"      Correcta      "); 
3A5E:  MOVLW  E0
3A60:  MOVWF  FF6
3A62:  MOVLW  07
3A64:  MOVWF  FF7
3A66:  CALL   178A
....................             lcd_gotoxy(1,4); 
3A6A:  MOVLW  01
3A6C:  MOVWF  xF2
3A6E:  MOVLW  04
3A70:  MOVWF  xF3
3A72:  CALL   16BA
....................             printf(lcd_putc,"                    "); 
3A76:  MOVLW  F6
3A78:  MOVWF  FF6
3A7A:  MOVLW  07
3A7C:  MOVWF  FF7
3A7E:  CALL   178A
....................             delay_ms(500);Menu=61;unidad=11;printf(lcd_putc,"\f"); 
3A82:  MOVLW  02
3A84:  MOVWF  xE0
3A86:  MOVLW  FA
3A88:  MOVWF  xF7
3A8A:  CALL   0BDA
3A8E:  DECFSZ xE0,F
3A90:  BRA    3A86
3A92:  MOVLW  3D
3A94:  MOVWF  2B
3A96:  MOVLW  0B
3A98:  MOVWF  2E
3A9A:  MOVLW  0C
3A9C:  MOVWF  xF1
3A9E:  CALL   1724
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
3AA2:  CLRF   4B
3AA4:  CLRF   4C
3AA6:  CLRF   4D
3AA8:  CLRF   4E
3AAA:  BSF    2A.7
....................          }else{ 
3AAC:  BRA    3B32
....................             lcd_gotoxy(1,1); 
3AAE:  MOVLW  01
3AB0:  MOVWF  xF2
3AB2:  MOVWF  xF3
3AB4:  CALL   16BA
....................             printf(lcd_putc,"                    "); 
3AB8:  MOVLW  0C
3ABA:  MOVWF  FF6
3ABC:  MOVLW  08
3ABE:  MOVWF  FF7
3AC0:  CALL   178A
....................             lcd_gotoxy(1,2); 
3AC4:  MOVLW  01
3AC6:  MOVWF  xF2
3AC8:  MOVLW  02
3ACA:  MOVWF  xF3
3ACC:  CALL   16BA
....................             printf(lcd_putc,"     Contraseña     "); 
3AD0:  MOVLW  22
3AD2:  MOVWF  FF6
3AD4:  MOVLW  08
3AD6:  MOVWF  FF7
3AD8:  CALL   178A
....................             lcd_gotoxy(1,3); 
3ADC:  MOVLW  01
3ADE:  MOVWF  xF2
3AE0:  MOVLW  03
3AE2:  MOVWF  xF3
3AE4:  CALL   16BA
....................             printf(lcd_putc,"     Incorrecta     "); 
3AE8:  MOVLW  38
3AEA:  MOVWF  FF6
3AEC:  MOVLW  08
3AEE:  MOVWF  FF7
3AF0:  CALL   178A
....................             lcd_gotoxy(1,4); 
3AF4:  MOVLW  01
3AF6:  MOVWF  xF2
3AF8:  MOVLW  04
3AFA:  MOVWF  xF3
3AFC:  CALL   16BA
....................             printf(lcd_putc,"                    "); 
3B00:  MOVLW  4E
3B02:  MOVWF  FF6
3B04:  MOVLW  08
3B06:  MOVWF  FF7
3B08:  CALL   178A
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
3B0C:  MOVLW  02
3B0E:  MOVWF  xE0
3B10:  MOVLW  FA
3B12:  MOVWF  xF7
3B14:  CALL   0BDA
3B18:  DECFSZ xE0,F
3B1A:  BRA    3B10
3B1C:  MOVLW  0B
3B1E:  MOVWF  2E
3B20:  MOVLW  0C
3B22:  MOVWF  xF1
3B24:  CALL   1724
3B28:  BSF    2A.7
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
3B2A:  CLRF   4B
3B2C:  CLRF   4C
3B2E:  CLRF   4D
3B30:  CLRF   4E
....................          } 
....................       } 
....................    }       
.................... //----------------Fin-Menu3--------------------------------------------------------------- 
....................  
.................... //----------------Menu6.1--------------------------------------------------------------- 
....................    if(Menu == 61){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
3B32:  MOVF   2B,W
3B34:  SUBLW  3D
3B36:  BTFSS  FD8.2
3B38:  BRA    3ECA
....................       EliminaRuido(); 
3B3A:  CALL   0004
.................... //      if(Cambio){ 
....................          lcd_gotoxy(1,1); 
3B3E:  MOVLW  01
3B40:  MOVWF  xF2
3B42:  MOVWF  xF3
3B44:  CALL   16BA
....................          printf(lcd_putc,"   Ingrese Nueva    "); 
3B48:  MOVLW  64
3B4A:  MOVWF  FF6
3B4C:  MOVLW  08
3B4E:  MOVWF  FF7
3B50:  CALL   178A
....................          lcd_gotoxy(1,2); 
3B54:  MOVLW  01
3B56:  MOVWF  xF2
3B58:  MOVLW  02
3B5A:  MOVWF  xF3
3B5C:  CALL   16BA
....................          printf(lcd_putc,"     Contraseña     "); 
3B60:  MOVLW  7A
3B62:  MOVWF  FF6
3B64:  MOVLW  08
3B66:  MOVWF  FF7
3B68:  CALL   178A
....................          lcd_gotoxy(1,3); 
3B6C:  MOVLW  01
3B6E:  MOVWF  xF2
3B70:  MOVLW  03
3B72:  MOVWF  xF3
3B74:  CALL   16BA
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
3B78:  MOVLW  90
3B7A:  MOVWF  FF6
3B7C:  MOVLW  08
3B7E:  MOVWF  FF7
3B80:  MOVLW  0A
3B82:  MOVWF  xE4
3B84:  CALL   1812
3B88:  MOVFF  4B,E0
3B8C:  MOVLW  1F
3B8E:  MOVWF  xE1
3B90:  CALL   1B1C
3B94:  MOVFF  4C,E0
3B98:  MOVLW  1F
3B9A:  MOVWF  xE1
3B9C:  CALL   1B1C
3BA0:  MOVFF  4D,E0
3BA4:  MOVLW  1F
3BA6:  MOVWF  xE1
3BA8:  CALL   1B1C
3BAC:  MOVFF  4E,E0
3BB0:  MOVLW  1F
3BB2:  MOVWF  xE1
3BB4:  CALL   1B1C
3BB8:  MOVLW  20
3BBA:  MOVWF  xF1
3BBC:  CALL   1724
3BC0:  MOVLW  20
3BC2:  MOVWF  xF1
3BC4:  CALL   1724
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
3BC8:  MOVFF  2E,F2
3BCC:  MOVLW  04
3BCE:  MOVWF  xF3
3BD0:  CALL   16BA
....................          lcd_putc(t[2]); 
3BD4:  MOVFF  4A,F1
3BD8:  CALL   1724
....................           
....................          if(unidad>11&&unidad<14){ 
3BDC:  MOVF   2E,W
3BDE:  SUBLW  0B
3BE0:  BC    3C00
3BE2:  MOVF   2E,W
3BE4:  SUBLW  0D
3BE6:  BNC   3C00
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
3BE8:  MOVLW  01
3BEA:  SUBWF  2E,W
3BEC:  MOVWF  xE0
3BEE:  MOVWF  xF2
3BF0:  MOVLW  04
3BF2:  MOVWF  xF3
3BF4:  CALL   16BA
....................             lcd_putc(t[1]); 
3BF8:  MOVFF  49,F1
3BFC:  CALL   1724
....................          } 
....................           
....................          Cambio=OFF; 
3C00:  BCF    2A.7
.................... //      } 
....................        
....................       if(UP){//Si oprime hacia arriba 
3C02:  BSF    F92.5
3C04:  BTFSC  F80.5
3C06:  BRA    3C3A
....................          delay_ms(20); 
3C08:  MOVLW  14
3C0A:  MOVWF  xF7
3C0C:  CALL   0BDA
....................          if(UP){ 
3C10:  BSF    F92.5
3C12:  BTFSC  F80.5
3C14:  BRA    3C38
....................             if(Flanco == 0) { 
3C16:  BTFSC  29.3
3C18:  BRA    3C38
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
3C1A:  MOVLW  0B
3C1C:  SUBWF  2E,W
3C1E:  CLRF   03
3C20:  ADDLW  4B
3C22:  MOVWF  FE9
3C24:  MOVLW  00
3C26:  ADDWFC 03,W
3C28:  MOVWF  FEA
3C2A:  INCF   FEF,F
3C2C:  BSF    29.3
3C2E:  MOVLW  1E
3C30:  MOVWF  xF7
3C32:  CALL   0BDA
3C36:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
3C38:  BRA    3C3C
....................          Flanco = 0; 
3C3A:  BCF    29.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
3C3C:  BSF    F96.0
3C3E:  BTFSC  F84.0
3C40:  BRA    3C74
....................          delay_ms(20); 
3C42:  MOVLW  14
3C44:  MOVWF  xF7
3C46:  CALL   0BDA
....................          if(DOWN){ 
3C4A:  BSF    F96.0
3C4C:  BTFSC  F84.0
3C4E:  BRA    3C72
....................             if(Flanco2 == 0) { 
3C50:  BTFSC  29.5
3C52:  BRA    3C72
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
3C54:  MOVLW  0B
3C56:  SUBWF  2E,W
3C58:  CLRF   03
3C5A:  ADDLW  4B
3C5C:  MOVWF  FE9
3C5E:  MOVLW  00
3C60:  ADDWFC 03,W
3C62:  MOVWF  FEA
3C64:  DECF   FEF,F
3C66:  BSF    29.5
3C68:  MOVLW  1E
3C6A:  MOVWF  xF7
3C6C:  CALL   0BDA
3C70:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
3C72:  BRA    3C76
....................          Flanco2 = 0; 
3C74:  BCF    29.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
3C76:  BSF    F96.1
3C78:  BTFSC  F84.1
3C7A:  BRA    3C9E
....................          if(RIGHT){ 
3C7C:  BSF    F96.1
3C7E:  BTFSC  F84.1
3C80:  BRA    3C9C
....................             if(Flanco1 == 0) { 
3C82:  BTFSC  29.4
3C84:  BRA    3C9C
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
3C86:  BSF    29.4
3C88:  INCF   2E,F
3C8A:  MOVLW  1E
3C8C:  MOVWF  xF7
3C8E:  CALL   0BDA
3C92:  MOVLW  0C
3C94:  MOVWF  xF1
3C96:  CALL   1724
3C9A:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
3C9C:  BRA    3CA0
....................          Flanco1 = 0; 
3C9E:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
3CA0:  BSF    F96.2
3CA2:  BTFSC  F84.2
3CA4:  BRA    3CD0
....................          delay_ms(150); 
3CA6:  MOVLW  96
3CA8:  MOVWF  xF7
3CAA:  CALL   0BDA
....................          if(IZQU){ 
3CAE:  BSF    F96.2
3CB0:  BTFSC  F84.2
3CB2:  BRA    3CCE
....................             if(Flanco3 == 0){ 
3CB4:  BTFSC  29.6
3CB6:  BRA    3CCE
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
3CB8:  BSF    29.6
3CBA:  DECF   2E,F
3CBC:  MOVLW  1E
3CBE:  MOVWF  xF7
3CC0:  CALL   0BDA
3CC4:  MOVLW  0C
3CC6:  MOVWF  xF1
3CC8:  CALL   1724
3CCC:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
3CCE:  BRA    3CD2
....................         Flanco3 = 0; 
3CD0:  BCF    29.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
3CD2:  MOVLW  0B
3CD4:  SUBWF  2E,W
3CD6:  CLRF   03
3CD8:  ADDLW  4B
3CDA:  MOVWF  FE9
3CDC:  MOVLW  00
3CDE:  ADDWFC 03,W
3CE0:  MOVWF  FEA
3CE2:  BTFSC  FEF.7
3CE4:  BRA    3CE8
3CE6:  BRA    3CFC
....................          clave[unidad-11]=9; 
3CE8:  MOVLW  0B
3CEA:  SUBWF  2E,W
3CEC:  CLRF   03
3CEE:  ADDLW  4B
3CF0:  MOVWF  FE9
3CF2:  MOVLW  00
3CF4:  ADDWFC 03,W
3CF6:  MOVWF  FEA
3CF8:  MOVLW  09
3CFA:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
3CFC:  MOVLW  0B
3CFE:  SUBWF  2E,W
3D00:  CLRF   03
3D02:  ADDLW  4B
3D04:  MOVWF  FE9
3D06:  MOVLW  00
3D08:  ADDWFC 03,W
3D0A:  MOVWF  FEA
3D0C:  BTFSC  FEF.7
3D0E:  BRA    3D28
3D10:  MOVF   FEF,W
3D12:  SUBLW  09
3D14:  BC    3D28
....................          clave[unidad-11]=0; 
3D16:  MOVLW  0B
3D18:  SUBWF  2E,W
3D1A:  CLRF   03
3D1C:  ADDLW  4B
3D1E:  MOVWF  FE9
3D20:  MOVLW  00
3D22:  ADDWFC 03,W
3D24:  MOVWF  FEA
3D26:  CLRF   FEF
....................         
....................       if(unidad<11){             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
3D28:  MOVF   2E,W
3D2A:  SUBLW  0A
3D2C:  BNC   3D4C
....................          unidad=11; 
3D2E:  MOVLW  0B
3D30:  MOVWF  2E
....................          Menu=1; 
3D32:  MOVLW  01
3D34:  MOVWF  2B
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
3D36:  CLRF   4B
3D38:  CLRF   4C
3D3A:  CLRF   4D
3D3C:  CLRF   4E
3D3E:  BSF    2A.7
....................          unidad=11;printf(lcd_putc,"\f"); 
3D40:  MOVLW  0B
3D42:  MOVWF  2E
3D44:  MOVLW  0C
3D46:  MOVWF  xF1
3D48:  CALL   1724
....................       } 
....................         
....................       if(unidad>14){// Si ya ingreso la nueva contraseña.      
3D4C:  MOVF   2E,W
3D4E:  SUBLW  0E
3D50:  BTFSC  FD8.0
3D52:  BRA    3ECA
....................          lcd_gotoxy(1,1); 
3D54:  MOVLW  01
3D56:  MOVWF  xF2
3D58:  MOVWF  xF3
3D5A:  CALL   16BA
....................          printf(lcd_putc,"                    "); 
3D5E:  MOVLW  A6
3D60:  MOVWF  FF6
3D62:  MOVLW  08
3D64:  MOVWF  FF7
3D66:  CALL   178A
....................          lcd_gotoxy(1,2); 
3D6A:  MOVLW  01
3D6C:  MOVWF  xF2
3D6E:  MOVLW  02
3D70:  MOVWF  xF3
3D72:  CALL   16BA
....................          printf(lcd_putc,"     Contraseña     "); 
3D76:  MOVLW  BC
3D78:  MOVWF  FF6
3D7A:  MOVLW  08
3D7C:  MOVWF  FF7
3D7E:  CALL   178A
....................          lcd_gotoxy(1,3); 
3D82:  MOVLW  01
3D84:  MOVWF  xF2
3D86:  MOVLW  03
3D88:  MOVWF  xF3
3D8A:  CALL   16BA
....................          printf(lcd_putc,"     Almacenada     "); 
3D8E:  MOVLW  D2
3D90:  MOVWF  FF6
3D92:  MOVLW  08
3D94:  MOVWF  FF7
3D96:  CALL   178A
....................          lcd_gotoxy(1,4); 
3D9A:  MOVLW  01
3D9C:  MOVWF  xF2
3D9E:  MOVLW  04
3DA0:  MOVWF  xF3
3DA2:  CALL   16BA
....................          printf(lcd_putc,"                    "); 
3DA6:  MOVLW  E8
3DA8:  MOVWF  FF6
3DAA:  MOVLW  08
3DAC:  MOVWF  FF7
3DAE:  CALL   178A
....................          write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
3DB2:  CLRF   FA9
3DB4:  MOVFF  4B,FA8
3DB8:  BCF    FA6.6
3DBA:  BCF    FA6.7
3DBC:  BSF    FA6.2
3DBE:  MOVF   FF2,W
3DC0:  MOVWF  00
3DC2:  BCF    FF2.6
3DC4:  BCF    FF2.7
3DC6:  MOVLB  F
3DC8:  MOVLW  55
3DCA:  MOVWF  FA7
3DCC:  MOVLW  AA
3DCE:  MOVWF  FA7
3DD0:  BSF    FA6.1
3DD2:  BTFSC  FA6.1
3DD4:  BRA    3DD2
3DD6:  BCF    FA6.2
3DD8:  MOVF   00,W
3DDA:  IORWF  FF2,F
3DDC:  MOVLW  14
3DDE:  MOVLB  0
3DE0:  MOVWF  xF7
3DE2:  CALL   0BDA
3DE6:  MOVLW  01
3DE8:  MOVWF  FA9
3DEA:  MOVFF  4C,FA8
3DEE:  BCF    FA6.6
3DF0:  BCF    FA6.7
3DF2:  BSF    FA6.2
3DF4:  MOVF   FF2,W
3DF6:  MOVWF  00
3DF8:  BCF    FF2.6
3DFA:  BCF    FF2.7
3DFC:  MOVLB  F
3DFE:  MOVLW  55
3E00:  MOVWF  FA7
3E02:  MOVLW  AA
3E04:  MOVWF  FA7
3E06:  BSF    FA6.1
3E08:  BTFSC  FA6.1
3E0A:  BRA    3E08
3E0C:  BCF    FA6.2
3E0E:  MOVF   00,W
3E10:  IORWF  FF2,F
3E12:  MOVLW  14
3E14:  MOVLB  0
3E16:  MOVWF  xF7
3E18:  CALL   0BDA
....................          write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
3E1C:  MOVLW  02
3E1E:  MOVWF  FA9
3E20:  MOVFF  4D,FA8
3E24:  BCF    FA6.6
3E26:  BCF    FA6.7
3E28:  BSF    FA6.2
3E2A:  MOVF   FF2,W
3E2C:  MOVWF  00
3E2E:  BCF    FF2.6
3E30:  BCF    FF2.7
3E32:  MOVLB  F
3E34:  MOVLW  55
3E36:  MOVWF  FA7
3E38:  MOVLW  AA
3E3A:  MOVWF  FA7
3E3C:  BSF    FA6.1
3E3E:  BTFSC  FA6.1
3E40:  BRA    3E3E
3E42:  BCF    FA6.2
3E44:  MOVF   00,W
3E46:  IORWF  FF2,F
3E48:  MOVLW  14
3E4A:  MOVLB  0
3E4C:  MOVWF  xF7
3E4E:  CALL   0BDA
3E52:  MOVLW  03
3E54:  MOVWF  FA9
3E56:  MOVFF  4E,FA8
3E5A:  BCF    FA6.6
3E5C:  BCF    FA6.7
3E5E:  BSF    FA6.2
3E60:  MOVF   FF2,W
3E62:  MOVWF  00
3E64:  BCF    FF2.6
3E66:  BCF    FF2.7
3E68:  MOVLB  F
3E6A:  MOVLW  55
3E6C:  MOVWF  FA7
3E6E:  MOVLW  AA
3E70:  MOVWF  FA7
3E72:  BSF    FA6.1
3E74:  BTFSC  FA6.1
3E76:  BRA    3E74
3E78:  BCF    FA6.2
3E7A:  MOVF   00,W
3E7C:  IORWF  FF2,F
3E7E:  MOVLW  14
3E80:  MOVLB  0
3E82:  MOVWF  xF7
3E84:  CALL   0BDA
....................          delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
3E88:  MOVLW  02
3E8A:  MOVWF  xE0
3E8C:  MOVLW  FA
3E8E:  MOVWF  xF7
3E90:  CALL   0BDA
3E94:  DECFSZ xE0,F
3E96:  BRA    3E8C
3E98:  MOVLW  01
3E9A:  MOVWF  2B
3E9C:  CLRF   47
3E9E:  MOVLW  02
3EA0:  MOVWF  2F
3EA2:  MOVWF  31
....................          contrasena[0]=clave[0];contrasena[1]=clave[1];contrasena[2]=clave[2];contrasena[3]=clave[3]; 
3EA4:  MOVFF  4B,4F
3EA8:  MOVFF  4C,50
3EAC:  MOVFF  4D,51
3EB0:  MOVFF  4E,52
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
3EB4:  CLRF   4B
3EB6:  CLRF   4C
3EB8:  CLRF   4D
3EBA:  CLRF   4E
3EBC:  BSF    2A.7
....................          unidad=11;printf(lcd_putc,"\f");          
3EBE:  MOVLW  0B
3EC0:  MOVWF  2E
3EC2:  MOVLW  0C
3EC4:  MOVWF  xF1
3EC6:  CALL   1724
....................       } 
....................    }       
.................... //----------------Fin-Menu6.1--------------------------------------------------------------- 
....................     
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu de tiempo de trabajo de Luz UV 
3ECA:  MOVF   2B,W
3ECC:  SUBLW  04
3ECE:  BTFSS  FD8.2
3ED0:  BRA    40EC
....................    EliminaRuido(); 
3ED2:  CALL   0004
.................... //   if(Cambio){ 
....................       lcd_gotoxy(1,1); 
3ED6:  MOVLW  01
3ED8:  MOVWF  xF2
3EDA:  MOVWF  xF3
3EDC:  CALL   16BA
....................       printf(lcd_putc,"  Duracion Actual   "); 
3EE0:  MOVLW  FE
3EE2:  MOVWF  FF6
3EE4:  MOVLW  08
3EE6:  MOVWF  FF7
3EE8:  CALL   178A
....................       lcd_gotoxy(1,2); 
3EEC:  MOVLW  01
3EEE:  MOVWF  xF2
3EF0:  MOVLW  02
3EF2:  MOVWF  xF3
3EF4:  CALL   16BA
....................       printf(lcd_putc,"   Tiempo= %05Lu   ",horas); 
3EF8:  MOVLW  14
3EFA:  MOVWF  FF6
3EFC:  MOVLW  09
3EFE:  MOVWF  FF7
3F00:  MOVLW  0B
3F02:  MOVWF  xE4
3F04:  CALL   1812
3F08:  MOVLW  08
3F0A:  MOVWF  FE9
3F0C:  MOVFF  5B,E1
3F10:  MOVFF  5A,E0
3F14:  CALL   18BE
3F18:  MOVLW  20
3F1A:  MOVWF  xF1
3F1C:  CALL   1724
3F20:  MOVLW  20
3F22:  MOVWF  xF1
3F24:  CALL   1724
3F28:  MOVLW  20
3F2A:  MOVWF  xF1
3F2C:  CALL   1724
....................       lcd_gotoxy(1,4); 
3F30:  MOVLW  01
3F32:  MOVWF  xF2
3F34:  MOVLW  04
3F36:  MOVWF  xF3
3F38:  CALL   16BA
....................       printf(lcd_putc," RESET= Oprima ^ y > "); 
3F3C:  MOVLW  28
3F3E:  MOVWF  FF6
3F40:  MOVLW  09
3F42:  MOVWF  FF7
3F44:  CALL   178A
....................        
....................       Cambio=OFF; 
3F48:  BCF    2A.7
.................... //   } 
....................     
....................       if(UP && RIGHT){//Si oprime hacia arriba 
3F4A:  BSF    F92.5
3F4C:  BTFSC  F80.5
3F4E:  BRA    40A8
3F50:  BSF    F96.1
3F52:  BTFSC  F84.1
3F54:  BRA    40A8
....................          delay_ms(20); 
3F56:  MOVLW  14
3F58:  MOVWF  xF7
3F5A:  CALL   0BDA
....................          if(UP && RIGHT){ 
3F5E:  BSF    F92.5
3F60:  BTFSC  F80.5
3F62:  BRA    40A8
3F64:  BSF    F96.1
3F66:  BTFSC  F84.1
3F68:  BRA    40A8
....................             delay_ms(200); 
3F6A:  MOVLW  C8
3F6C:  MOVWF  xF7
3F6E:  CALL   0BDA
....................             printf(lcd_putc,"\f"); 
3F72:  MOVLW  0C
3F74:  MOVWF  xF1
3F76:  CALL   1724
....................             lcd_gotoxy(1,2); 
3F7A:  MOVLW  01
3F7C:  MOVWF  xF2
3F7E:  MOVLW  02
3F80:  MOVWF  xF3
3F82:  CALL   16BA
....................             printf(lcd_putc," Reset de tiempo "); 
3F86:  MOVLW  3E
3F88:  MOVWF  FF6
3F8A:  MOVLW  09
3F8C:  MOVWF  FF7
3F8E:  CALL   178A
....................             lcd_gotoxy(1,3); 
3F92:  MOVLW  01
3F94:  MOVWF  xF2
3F96:  MOVLW  03
3F98:  MOVWF  xF3
3F9A:  CALL   16BA
....................             printf(lcd_putc,"     Exitoso     "); 
3F9E:  MOVLW  50
3FA0:  MOVWF  FF6
3FA2:  MOVLW  09
3FA4:  MOVWF  FF7
3FA6:  CALL   178A
....................             write_eeprom(7,0); 
3FAA:  MOVLW  07
3FAC:  MOVWF  FA9
3FAE:  CLRF   FA8
3FB0:  BCF    FA6.6
3FB2:  BCF    FA6.7
3FB4:  BSF    FA6.2
3FB6:  MOVF   FF2,W
3FB8:  MOVWF  00
3FBA:  BCF    FF2.6
3FBC:  BCF    FF2.7
3FBE:  MOVLB  F
3FC0:  MOVLW  55
3FC2:  MOVWF  FA7
3FC4:  MOVLW  AA
3FC6:  MOVWF  FA7
3FC8:  BSF    FA6.1
3FCA:  BTFSC  FA6.1
3FCC:  BRA    3FCA
3FCE:  BCF    FA6.2
3FD0:  MOVF   00,W
3FD2:  IORWF  FF2,F
....................             delay_ms(20); 
3FD4:  MOVLW  14
3FD6:  MOVLB  0
3FD8:  MOVWF  xF7
3FDA:  CALL   0BDA
....................             write_eeprom(8,0); 
3FDE:  MOVLW  08
3FE0:  MOVWF  FA9
3FE2:  CLRF   FA8
3FE4:  BCF    FA6.6
3FE6:  BCF    FA6.7
3FE8:  BSF    FA6.2
3FEA:  MOVF   FF2,W
3FEC:  MOVWF  00
3FEE:  BCF    FF2.6
3FF0:  BCF    FF2.7
3FF2:  MOVLB  F
3FF4:  MOVLW  55
3FF6:  MOVWF  FA7
3FF8:  MOVLW  AA
3FFA:  MOVWF  FA7
3FFC:  BSF    FA6.1
3FFE:  BTFSC  FA6.1
4000:  BRA    3FFE
4002:  BCF    FA6.2
4004:  MOVF   00,W
4006:  IORWF  FF2,F
....................             delay_ms(20); 
4008:  MOVLW  14
400A:  MOVLB  0
400C:  MOVWF  xF7
400E:  CALL   0BDA
....................             write_eeprom(9,0); 
4012:  MOVLW  09
4014:  MOVWF  FA9
4016:  CLRF   FA8
4018:  BCF    FA6.6
401A:  BCF    FA6.7
401C:  BSF    FA6.2
401E:  MOVF   FF2,W
4020:  MOVWF  00
4022:  BCF    FF2.6
4024:  BCF    FF2.7
4026:  MOVLB  F
4028:  MOVLW  55
402A:  MOVWF  FA7
402C:  MOVLW  AA
402E:  MOVWF  FA7
4030:  BSF    FA6.1
4032:  BTFSC  FA6.1
4034:  BRA    4032
4036:  BCF    FA6.2
4038:  MOVF   00,W
403A:  IORWF  FF2,F
....................             delay_ms(20); 
403C:  MOVLW  14
403E:  MOVLB  0
4040:  MOVWF  xF7
4042:  CALL   0BDA
....................             write_eeprom(10,0); 
4046:  MOVLW  0A
4048:  MOVWF  FA9
404A:  CLRF   FA8
404C:  BCF    FA6.6
404E:  BCF    FA6.7
4050:  BSF    FA6.2
4052:  MOVF   FF2,W
4054:  MOVWF  00
4056:  BCF    FF2.6
4058:  BCF    FF2.7
405A:  MOVLB  F
405C:  MOVLW  55
405E:  MOVWF  FA7
4060:  MOVLW  AA
4062:  MOVWF  FA7
4064:  BSF    FA6.1
4066:  BTFSC  FA6.1
4068:  BRA    4066
406A:  BCF    FA6.2
406C:  MOVF   00,W
406E:  IORWF  FF2,F
....................             delay_ms(700); 
4070:  MOVLW  04
4072:  MOVLB  0
4074:  MOVWF  xE0
4076:  MOVLW  AF
4078:  MOVWF  xF7
407A:  CALL   0BDA
407E:  DECFSZ xE0,F
4080:  BRA    4076
....................             segundos=0;minutos=0;horas=0; 
4082:  CLRF   34
4084:  CLRF   35
4086:  CLRF   5B
4088:  CLRF   5A
....................             delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
408A:  MOVLW  1E
408C:  MOVWF  xF7
408E:  CALL   0BDA
4092:  MOVLW  01
4094:  MOVWF  2B
4096:  CLRF   47
4098:  MOVLW  02
409A:  MOVWF  2F
409C:  MOVWF  31
409E:  MOVLW  0C
40A0:  MOVWF  xF1
40A2:  CALL   1724
....................             Cambio=ON; 
40A6:  BSF    2A.7
....................          } 
....................       } 
....................              
....................       if(IZQU){// Si oprime Izquierda 
40A8:  BSF    F96.2
40AA:  BTFSC  F84.2
40AC:  BRA    40EA
....................          delay_ms(20); 
40AE:  MOVLW  14
40B0:  MOVWF  xF7
40B2:  CALL   0BDA
....................          if(IZQU){ 
40B6:  BSF    F96.2
40B8:  BTFSC  F84.2
40BA:  BRA    40E8
....................             if(Flanco3 == 0){ 
40BC:  BTFSC  29.6
40BE:  BRA    40E8
....................                Flanco3 = 1;delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f");Cambio=ON; 
40C0:  BSF    29.6
40C2:  MOVLW  02
40C4:  MOVWF  xE0
40C6:  MOVLW  FA
40C8:  MOVWF  xF7
40CA:  CALL   0BDA
40CE:  DECFSZ xE0,F
40D0:  BRA    40C6
40D2:  MOVLW  01
40D4:  MOVWF  2B
40D6:  CLRF   47
40D8:  MOVLW  02
40DA:  MOVWF  2F
40DC:  MOVWF  31
40DE:  MOVLW  0C
40E0:  MOVWF  xF1
40E2:  CALL   1724
40E6:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
40E8:  BRA    40EC
....................          Flanco3 = 0; 
40EA:  BCF    29.6
....................       } 
....................    } 
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5){ // Menu de Punto Cero 
40EC:  MOVF   2B,W
40EE:  SUBLW  05
40F0:  BTFSS  FD8.2
40F2:  BRA    434C
....................       EliminaRuido(); 
40F4:  CALL   0004
.................... //      if(Cambio){ 
....................          lcd_gotoxy(1,1); 
40F8:  MOVLW  01
40FA:  MOVWF  xF2
40FC:  MOVWF  xF3
40FE:  CALL   16BA
....................          printf(lcd_putc,"  Zero Point Config "); 
4102:  MOVLW  62
4104:  MOVWF  FF6
4106:  MOVLW  09
4108:  MOVWF  FF7
410A:  CALL   178A
....................          lcd_gotoxy(1,2); 
410E:  MOVLW  01
4110:  MOVWF  xF2
4112:  MOVLW  02
4114:  MOVWF  xF3
4116:  CALL   16BA
....................          printf(lcd_putc,"Presion= %3.2f inH2O ",(Leer_Sensor_Presion(5)*4.02)); 
411A:  MOVLW  05
411C:  MOVWF  xE0
411E:  CALL   220E
4122:  MOVFF  00,E0
4126:  MOVFF  01,E1
412A:  MOVFF  02,E2
412E:  MOVFF  03,E3
4132:  MOVFF  03,F7
4136:  MOVFF  02,F6
413A:  MOVFF  01,F5
413E:  MOVFF  00,F4
4142:  MOVLW  D7
4144:  MOVWF  xFB
4146:  MOVLW  A3
4148:  MOVWF  xFA
414A:  CLRF   xF9
414C:  MOVLW  81
414E:  MOVWF  xF8
4150:  CALL   211C
4154:  MOVFF  00,E0
4158:  MOVFF  01,E1
415C:  MOVFF  02,E2
4160:  MOVFF  03,E3
4164:  MOVLW  78
4166:  MOVWF  FF6
4168:  MOVLW  09
416A:  MOVWF  FF7
416C:  MOVLW  09
416E:  MOVWF  xE4
4170:  CALL   1812
4174:  MOVLW  02
4176:  MOVWF  FE9
4178:  MOVFF  E3,E7
417C:  MOVFF  E2,E6
4180:  MOVFF  E1,E5
4184:  MOVFF  E0,E4
4188:  MOVWF  xE8
418A:  CALL   24C2
418E:  MOVLW  86
4190:  MOVWF  FF6
4192:  MOVLW  09
4194:  MOVWF  FF7
4196:  MOVLW  07
4198:  MOVWF  xE4
419A:  CALL   1812
....................          lcd_gotoxy(1,3); 
419E:  MOVLW  01
41A0:  MOVWF  xF2
41A2:  MOVLW  03
41A4:  MOVWF  xF3
41A6:  CALL   16BA
....................          printf(lcd_putc,"    ADC=%2.0f",sensores(0)); 
41AA:  CLRF   xF1
41AC:  CALL   1C9C
41B0:  MOVFF  00,E0
41B4:  MOVFF  01,E1
41B8:  MOVFF  02,E2
41BC:  MOVFF  03,E3
41C0:  MOVLW  8E
41C2:  MOVWF  FF6
41C4:  MOVLW  09
41C6:  MOVWF  FF7
41C8:  MOVLW  08
41CA:  MOVWF  xE4
41CC:  CALL   1812
41D0:  MOVLW  01
41D2:  MOVWF  FE9
41D4:  MOVFF  E3,E7
41D8:  MOVFF  E2,E6
41DC:  MOVFF  E1,E5
41E0:  MOVFF  E0,E4
41E4:  CLRF   xE8
41E6:  CALL   24C2
....................          lcd_gotoxy(1,4); 
41EA:  MOVLW  01
41EC:  MOVWF  xF2
41EE:  MOVLW  04
41F0:  MOVWF  xF3
41F2:  CALL   16BA
....................          printf(lcd_putc,"    ZF=%2.0f",G); 
41F6:  MOVLW  9C
41F8:  MOVWF  FF6
41FA:  MOVLW  09
41FC:  MOVWF  FF7
41FE:  MOVLW  07
4200:  MOVWF  xE4
4202:  CALL   1812
4206:  MOVLW  01
4208:  MOVWF  FE9
420A:  MOVFF  C1,E7
420E:  MOVFF  C0,E6
4212:  MOVFF  BF,E5
4216:  MOVFF  BE,E4
421A:  CLRF   xE8
421C:  CALL   24C2
....................           
....................          Cambio=OFF; 
4220:  BCF    2A.7
.................... //      } 
....................      
....................       if(RIGHT){// Si oprime derecha 
4222:  BSF    F96.1
4224:  BTFSC  F84.1
4226:  BRA    430C
....................          delay_ms(20); 
4228:  MOVLW  14
422A:  MOVWF  xF7
422C:  CALL   0BDA
....................          if(RIGHT){ 
4230:  BSF    F96.1
4232:  BTFSC  F84.1
4234:  BRA    430A
....................             if(Flanco1 == 0){ 
4236:  BTFSC  29.4
4238:  BRA    430A
....................                /*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
423A:  MOVLW  01
423C:  MOVWF  2B
423E:  CLRF   47
4240:  MOVLW  02
4242:  MOVWF  2F
4244:  MOVWF  31
4246:  MOVLW  0B
4248:  MOVWF  2E
424A:  MOVLW  02
424C:  MOVWF  xE0
424E:  MOVLW  FA
4250:  MOVWF  xF7
4252:  CALL   0BDA
4256:  DECFSZ xE0,F
4258:  BRA    424E
425A:  MOVLW  0C
425C:  MOVWF  xF1
425E:  CALL   1724
....................                G=sensores(0); 
4262:  CLRF   xF1
4264:  CALL   1C9C
4268:  MOVFF  03,C1
426C:  MOVFF  02,C0
4270:  MOVFF  01,BF
4274:  MOVFF  00,BE
....................                G16=(int16)G; 
4278:  MOVFF  C1,F7
427C:  MOVFF  C0,F6
4280:  MOVFF  BF,F5
4284:  MOVFF  BE,F4
4288:  CALL   2648
428C:  MOVFF  02,5D
4290:  MOVFF  01,5C
....................                G_l=G16; G_h=(G16>>8); 
4294:  MOVFF  5C,38
4298:  MOVFF  5D,39
....................                 
....................                write_eeprom(11,G_l); 
429C:  MOVLW  0B
429E:  MOVWF  FA9
42A0:  MOVFF  38,FA8
42A4:  BCF    FA6.6
42A6:  BCF    FA6.7
42A8:  BSF    FA6.2
42AA:  MOVF   FF2,W
42AC:  MOVWF  00
42AE:  BCF    FF2.6
42B0:  BCF    FF2.7
42B2:  MOVLB  F
42B4:  MOVLW  55
42B6:  MOVWF  FA7
42B8:  MOVLW  AA
42BA:  MOVWF  FA7
42BC:  BSF    FA6.1
42BE:  BTFSC  FA6.1
42C0:  BRA    42BE
42C2:  BCF    FA6.2
42C4:  MOVF   00,W
42C6:  IORWF  FF2,F
....................                delay_ms(20); 
42C8:  MOVLW  14
42CA:  MOVLB  0
42CC:  MOVWF  xF7
42CE:  CALL   0BDA
....................                write_eeprom(12,G_h);//Guardar valor de Setpoint en eeprom 
42D2:  MOVLW  0C
42D4:  MOVWF  FA9
42D6:  MOVFF  39,FA8
42DA:  BCF    FA6.6
42DC:  BCF    FA6.7
42DE:  BSF    FA6.2
42E0:  MOVF   FF2,W
42E2:  MOVWF  00
42E4:  BCF    FF2.6
42E6:  BCF    FF2.7
42E8:  MOVLB  F
42EA:  MOVLW  55
42EC:  MOVWF  FA7
42EE:  MOVLW  AA
42F0:  MOVWF  FA7
42F2:  BSF    FA6.1
42F4:  BTFSC  FA6.1
42F6:  BRA    42F4
42F8:  BCF    FA6.2
42FA:  MOVF   00,W
42FC:  IORWF  FF2,F
....................                delay_ms(20); 
42FE:  MOVLW  14
4300:  MOVLB  0
4302:  MOVWF  xF7
4304:  CALL   0BDA
....................                Cambio=ON; 
4308:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
430A:  BRA    430E
....................          Flanco1 = 0; 
430C:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){// Si oprime Izquierda 
430E:  BSF    F96.2
4310:  BTFSC  F84.2
4312:  BRA    434A
....................          delay_ms(20); 
4314:  MOVLW  14
4316:  MOVWF  xF7
4318:  CALL   0BDA
....................          if(IZQU){ 
431C:  BSF    F96.2
431E:  BTFSC  F84.2
4320:  BRA    4348
....................             if(Flanco3 == 0){ 
4322:  BTFSC  29.6
4324:  BRA    4348
....................                /*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f"); 
4326:  MOVLW  01
4328:  MOVWF  2B
432A:  CLRF   47
432C:  MOVLW  02
432E:  MOVWF  2F
4330:  MOVWF  31
4332:  MOVLW  0B
4334:  MOVWF  2E
4336:  MOVLW  1E
4338:  MOVWF  xF7
433A:  CALL   0BDA
433E:  MOVLW  0C
4340:  MOVWF  xF1
4342:  CALL   1724
....................                Cambio=ON; 
4346:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
4348:  BRA    434C
....................          Flanco3 = 0; 
434A:  BCF    29.6
....................       } 
....................    } 
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6){ // Menu de seleccion de estado de Alarma 
434C:  MOVF   2B,W
434E:  SUBLW  06
4350:  BTFSS  FD8.2
4352:  BRA    447C
....................    estadoalarma=!estadoalarma;Flanco1 = 1;Menu=1; paso=0; 
4354:  BTG    2A.4
4356:  BSF    29.4
4358:  MOVLW  01
435A:  MOVWF  2B
435C:  CLRF   47
....................                        
....................             if(estadoalarma==1) 
435E:  BTFSS  2A.4
4360:  BRA    43C2
....................             {estadoalarma=1; 
4362:  BSF    2A.4
....................                lcd_gotoxy(1,1); 
4364:  MOVLW  01
4366:  MOVWF  xF2
4368:  MOVWF  xF3
436A:  CALL   16BA
....................                printf(lcd_putc,"                    "); 
436E:  MOVLW  AA
4370:  MOVWF  FF6
4372:  MOVLW  09
4374:  MOVWF  FF7
4376:  CALL   178A
....................                lcd_gotoxy(1,2); 
437A:  MOVLW  01
437C:  MOVWF  xF2
437E:  MOVLW  02
4380:  MOVWF  xF3
4382:  CALL   16BA
....................                printf(lcd_putc,"        Activo      "); 
4386:  MOVLW  C0
4388:  MOVWF  FF6
438A:  MOVLW  09
438C:  MOVWF  FF7
438E:  CALL   178A
....................                lcd_gotoxy(1,3); 
4392:  MOVLW  01
4394:  MOVWF  xF2
4396:  MOVLW  03
4398:  MOVWF  xF3
439A:  CALL   16BA
....................                printf(lcd_putc,"        Alarma      "); 
439E:  MOVLW  D6
43A0:  MOVWF  FF6
43A2:  MOVLW  09
43A4:  MOVWF  FF7
43A6:  CALL   178A
....................                lcd_gotoxy(1,4); 
43AA:  MOVLW  01
43AC:  MOVWF  xF2
43AE:  MOVLW  04
43B0:  MOVWF  xF3
43B2:  CALL   16BA
....................                printf(lcd_putc,"                    ");} 
43B6:  MOVLW  EC
43B8:  MOVWF  FF6
43BA:  MOVLW  09
43BC:  MOVWF  FF7
43BE:  CALL   178A
....................                 
....................             if(estadoalarma==0) 
43C2:  BTFSC  2A.4
43C4:  BRA    4426
....................             {estadoalarma=0; 
43C6:  BCF    2A.4
....................                lcd_gotoxy(1,1); 
43C8:  MOVLW  01
43CA:  MOVWF  xF2
43CC:  MOVWF  xF3
43CE:  CALL   16BA
....................                printf(lcd_putc,"                    "); 
43D2:  MOVLW  02
43D4:  MOVWF  FF6
43D6:  MOVLW  0A
43D8:  MOVWF  FF7
43DA:  CALL   178A
....................                lcd_gotoxy(1,2); 
43DE:  MOVLW  01
43E0:  MOVWF  xF2
43E2:  MOVLW  02
43E4:  MOVWF  xF3
43E6:  CALL   16BA
....................                printf(lcd_putc,"      Desactivo     "); 
43EA:  MOVLW  18
43EC:  MOVWF  FF6
43EE:  MOVLW  0A
43F0:  MOVWF  FF7
43F2:  CALL   178A
....................                lcd_gotoxy(1,3); 
43F6:  MOVLW  01
43F8:  MOVWF  xF2
43FA:  MOVLW  03
43FC:  MOVWF  xF3
43FE:  CALL   16BA
....................                printf(lcd_putc,"       Alarma       "); 
4402:  MOVLW  2E
4404:  MOVWF  FF6
4406:  MOVLW  0A
4408:  MOVWF  FF7
440A:  CALL   178A
....................                lcd_gotoxy(1,4); 
440E:  MOVLW  01
4410:  MOVWF  xF2
4412:  MOVLW  04
4414:  MOVWF  xF3
4416:  CALL   16BA
....................                printf(lcd_putc,"                    ");} 
441A:  MOVLW  44
441C:  MOVWF  FF6
441E:  MOVLW  0A
4420:  MOVWF  FF7
4422:  CALL   178A
....................               
....................             write_eeprom(4,estadoalarma);delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
4426:  MOVLW  00
4428:  BTFSC  2A.4
442A:  MOVLW  01
442C:  MOVWF  xE0
442E:  MOVLW  04
4430:  MOVWF  FA9
4432:  MOVFF  E0,FA8
4436:  BCF    FA6.6
4438:  BCF    FA6.7
443A:  BSF    FA6.2
443C:  MOVF   FF2,W
443E:  MOVWF  00
4440:  BCF    FF2.6
4442:  BCF    FF2.7
4444:  MOVLB  F
4446:  MOVLW  55
4448:  MOVWF  FA7
444A:  MOVLW  AA
444C:  MOVWF  FA7
444E:  BSF    FA6.1
4450:  BTFSC  FA6.1
4452:  BRA    4450
4454:  BCF    FA6.2
4456:  MOVF   00,W
4458:  IORWF  FF2,F
445A:  MOVLW  04
445C:  MOVLB  0
445E:  MOVWF  xE0
4460:  MOVLW  FA
4462:  MOVWF  xF7
4464:  CALL   0BDA
4468:  DECFSZ xE0,F
446A:  BRA    4460
446C:  MOVLW  02
446E:  MOVWF  2F
4470:  MOVWF  31
4472:  MOVLW  0C
4474:  MOVWF  xF1
4476:  CALL   1724
....................             Cambio=ON; 
447A:  BSF    2A.7
....................    }       
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu7--------------------------------------------------------------- 
....................    if(Menu == 7){ // Menu de seleccion de Velocidad 
447C:  MOVF   2B,W
447E:  SUBLW  07
4480:  BTFSS  FD8.2
4482:  BRA    461A
....................       if(Vel1>20) 
4484:  MOVF   57,W
4486:  SUBLW  14
4488:  BC    448E
....................          Vel1=20; 
448A:  MOVLW  14
448C:  MOVWF  57
....................       if(Vel1<1) 
448E:  MOVF   57,F
4490:  BNZ   4496
....................          Vel1=1; 
4492:  MOVLW  01
4494:  MOVWF  57
....................        
....................       lcd_gotoxy(1,1); 
4496:  MOVLW  01
4498:  MOVWF  xF2
449A:  MOVWF  xF3
449C:  CALL   16BA
....................       printf(lcd_putc,"Seleccione Velocidad"); 
44A0:  MOVLW  5A
44A2:  MOVWF  FF6
44A4:  MOVLW  0A
44A6:  MOVWF  FF7
44A8:  CALL   178A
....................       lcd_gotoxy(1,2); 
44AC:  MOVLW  01
44AE:  MOVWF  xF2
44B0:  MOVLW  02
44B2:  MOVWF  xF3
44B4:  CALL   16BA
....................       printf(lcd_putc,"   del Ventilador   "); 
44B8:  MOVLW  70
44BA:  MOVWF  FF6
44BC:  MOVLW  0A
44BE:  MOVWF  FF7
44C0:  CALL   178A
....................       lcd_gotoxy(1,3); 
44C4:  MOVLW  01
44C6:  MOVWF  xF2
44C8:  MOVLW  03
44CA:  MOVWF  xF3
44CC:  CALL   16BA
....................       printf(lcd_putc,"     Vel: %02u       ",Vel1); 
44D0:  MOVLW  86
44D2:  MOVWF  FF6
44D4:  MOVLW  0A
44D6:  MOVWF  FF7
44D8:  MOVLW  0A
44DA:  MOVWF  xE4
44DC:  CALL   1812
44E0:  MOVFF  57,E0
44E4:  MOVLW  01
44E6:  MOVWF  xE1
44E8:  CALL   1858
44EC:  MOVLW  94
44EE:  MOVWF  FF6
44F0:  MOVLW  0A
44F2:  MOVWF  FF7
44F4:  MOVLW  07
44F6:  MOVWF  xE4
44F8:  CALL   1812
....................       lcd_gotoxy(1,4); 
44FC:  MOVLW  01
44FE:  MOVWF  xF2
4500:  MOVLW  04
4502:  MOVWF  xF3
4504:  CALL   16BA
....................       printf(lcd_putc,"                    ");       
4508:  MOVLW  9C
450A:  MOVWF  FF6
450C:  MOVLW  0A
450E:  MOVWF  FF7
4510:  CALL   178A
....................        
....................       if(UP && Vel1<20)//Si oprime hacia arriba 
4514:  BSF    F92.5
4516:  BTFSC  F80.5
4518:  BRA    452A
451A:  MOVF   57,W
451C:  SUBLW  13
451E:  BNC   452A
....................       {   
....................          delay_ms(200);Vel1++; 
4520:  MOVLW  C8
4522:  MOVWF  xF7
4524:  CALL   0BDA
4528:  INCF   57,F
....................       } 
....................              
....................       if(DOWN && Vel1>0)//Si oprime hacia abajo 
452A:  BSF    F96.0
452C:  BTFSC  F84.0
452E:  BRA    453E
4530:  MOVF   57,F
4532:  BZ    453E
....................       {   
....................          delay_ms(200);Vel1--; 
4534:  MOVLW  C8
4536:  MOVWF  xF7
4538:  CALL   0BDA
453C:  DECF   57,F
....................       } 
....................              
....................       if(RIGHT)//Si oprime SET 
453E:  BSF    F96.1
4540:  BTFSC  F84.1
4542:  BRA    4548
....................       {            
....................          VelMotor=Vel1; 
4544:  MOVFF  57,D1
....................       }  
....................              
....................       if(IZQU)//Si oprime boton de Toma. 
4548:  BSF    F96.2
454A:  BTFSC  F84.2
454C:  BRA    461A
....................       {                   
....................          delay_ms(100);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
454E:  MOVLW  64
4550:  MOVWF  xF7
4552:  CALL   0BDA
4556:  MOVLW  02
4558:  MOVWF  2F
455A:  MOVWF  31
455C:  MOVLW  0C
455E:  MOVWF  xF1
4560:  CALL   1724
....................          write_eeprom(13,Vel1);//Guardar valor de Setpoint en eeprom 
4564:  MOVLW  0D
4566:  MOVWF  FA9
4568:  MOVFF  57,FA8
456C:  BCF    FA6.6
456E:  BCF    FA6.7
4570:  BSF    FA6.2
4572:  MOVF   FF2,W
4574:  MOVWF  00
4576:  BCF    FF2.6
4578:  BCF    FF2.7
457A:  MOVLB  F
457C:  MOVLW  55
457E:  MOVWF  FA7
4580:  MOVLW  AA
4582:  MOVWF  FA7
4584:  BSF    FA6.1
4586:  BTFSC  FA6.1
4588:  BRA    4586
458A:  BCF    FA6.2
458C:  MOVF   00,W
458E:  IORWF  FF2,F
....................          delay_ms(20); 
4590:  MOVLW  14
4592:  MOVLB  0
4594:  MOVWF  xF7
4596:  CALL   0BDA
....................          lcd_gotoxy(1,1); 
459A:  MOVLW  01
459C:  MOVWF  xF2
459E:  MOVWF  xF3
45A0:  CALL   16BA
....................          printf(lcd_putc,"                    "); 
45A4:  MOVLW  B2
45A6:  MOVWF  FF6
45A8:  MOVLW  0A
45AA:  MOVWF  FF7
45AC:  CALL   178A
....................          lcd_gotoxy(1,2); 
45B0:  MOVLW  01
45B2:  MOVWF  xF2
45B4:  MOVLW  02
45B6:  MOVWF  xF3
45B8:  CALL   16BA
....................          printf(lcd_putc,"     Velocidad      "); 
45BC:  MOVLW  C8
45BE:  MOVWF  FF6
45C0:  MOVLW  0A
45C2:  MOVWF  FF7
45C4:  CALL   178A
....................          lcd_gotoxy(1,3); 
45C8:  MOVLW  01
45CA:  MOVWF  xF2
45CC:  MOVLW  03
45CE:  MOVWF  xF3
45D0:  CALL   16BA
....................          printf(lcd_putc,"      Almacenada    "); 
45D4:  MOVLW  DE
45D6:  MOVWF  FF6
45D8:  MOVLW  0A
45DA:  MOVWF  FF7
45DC:  CALL   178A
....................          lcd_gotoxy(1,4); 
45E0:  MOVLW  01
45E2:  MOVWF  xF2
45E4:  MOVLW  04
45E6:  MOVWF  xF3
45E8:  CALL   16BA
....................          printf(lcd_putc,"                    ");  
45EC:  MOVLW  F4
45EE:  MOVWF  FF6
45F0:  MOVLW  0A
45F2:  MOVWF  FF7
45F4:  CALL   178A
....................          delay_ms(1000); 
45F8:  MOVLW  04
45FA:  MOVWF  xE0
45FC:  MOVLW  FA
45FE:  MOVWF  xF7
4600:  CALL   0BDA
4604:  DECFSZ xE0,F
4606:  BRA    45FC
....................          printf(lcd_putc,"\f"); 
4608:  MOVLW  0C
460A:  MOVWF  xF1
460C:  CALL   1724
....................          lcd_init(); 
4610:  CALL   0C6A
....................          Menu=1; paso=0; 
4614:  MOVLW  01
4616:  MOVWF  2B
4618:  CLRF   47
....................       } 
....................    }       
.................... //----------------Fin-Menu7--------------------------------------------------------------- 
....................  
.................... //----------------Menu100--------------------------------------------------------------- 
....................    if(Menu == 50){ // Menu de seleccion de Estado de Luz UV    
461A:  MOVF   2B,W
461C:  SUBLW  32
461E:  BTFSS  FD8.2
4620:  GOTO   4DBE
....................    if(Lectura==1){ 
4624:  BTFSS  2A.0
4626:  BRA    4988
....................       Lectura=0; 
4628:  BCF    2A.0
....................       CaidaPresion=Leer_Sensor_Presion(8); 
462A:  MOVLW  08
462C:  MOVWF  xE0
462E:  CALL   220E
4632:  MOVFF  03,BD
4636:  MOVFF  02,BC
463A:  MOVFF  01,BB
463E:  MOVFF  00,BA
....................       CaidaPresion=CaidaPresion*4.02; 
4642:  MOVFF  BD,F7
4646:  MOVFF  BC,F6
464A:  MOVFF  BB,F5
464E:  MOVFF  BA,F4
4652:  MOVLW  D7
4654:  MOVWF  xFB
4656:  MOVLW  A3
4658:  MOVWF  xFA
465A:  CLRF   xF9
465C:  MOVLW  81
465E:  MOVWF  xF8
4660:  CALL   211C
4664:  MOVFF  03,BD
4668:  MOVFF  02,BC
466C:  MOVFF  01,BB
4670:  MOVFF  00,BA
....................       if(Saturacion>=10){ 
4674:  CLRF   xF7
4676:  CLRF   xF6
4678:  MOVLW  20
467A:  MOVWF  xF5
467C:  MOVLW  82
467E:  MOVWF  xF4
4680:  MOVFF  B9,FB
4684:  MOVFF  B8,FA
4688:  MOVFF  B7,F9
468C:  MOVFF  B6,F8
4690:  CALL   10D8
4694:  BC    4698
4696:  BNZ   46B4
....................          lcd_gotoxy(1,1); 
4698:  MOVLW  01
469A:  MOVWF  xF2
469C:  MOVWF  xF3
469E:  CALL   16BA
....................          printf(lcd_putc,"!Verifique Filtro!  ");  
46A2:  MOVLW  0A
46A4:  MOVWF  FF6
46A6:  MOVLW  0B
46A8:  MOVWF  FF7
46AA:  CALL   178A
....................          ActivaBuzzer=1; 
46AE:  MOVLW  01
46B0:  MOVWF  53
....................       }else{ 
46B2:  BRA    46F4
....................          lcd_gotoxy(1,1); 
46B4:  MOVLW  01
46B6:  MOVWF  xF2
46B8:  MOVWF  xF3
46BA:  CALL   16BA
....................          printf(lcd_putc,"JPCR HT:%05Lu horas ",horasTrabajo);        
46BE:  MOVLW  20
46C0:  MOVWF  FF6
46C2:  MOVLW  0B
46C4:  MOVWF  FF7
46C6:  MOVLW  08
46C8:  MOVWF  xE4
46CA:  CALL   1812
46CE:  MOVLW  08
46D0:  MOVWF  FE9
46D2:  MOVFF  D0,E1
46D6:  MOVFF  CF,E0
46DA:  CALL   18BE
46DE:  MOVLW  2D
46E0:  MOVWF  FF6
46E2:  MOVLW  0B
46E4:  MOVWF  FF7
46E6:  MOVLW  07
46E8:  MOVWF  xE4
46EA:  CALL   1812
....................          Buzzer_off; 
46EE:  BCF    F8B.0
46F0:  BCF    F94.0
....................          ActivaBuzzer=0; 
46F2:  CLRF   53
....................       } 
....................       Saturacion=11*(((float)Vel1-(float)velocidadInicial)/(20.0-(float)velocidadInicial)); 
46F4:  CLRF   xF9
46F6:  MOVFF  57,F8
46FA:  CALL   0D04
46FE:  MOVFF  00,E0
4702:  MOVFF  01,E1
4706:  MOVFF  02,E2
470A:  MOVFF  03,E3
470E:  CLRF   xF9
4710:  MOVFF  46,F8
4714:  CALL   0D04
4718:  BSF    FD8.1
471A:  MOVFF  E3,FB
471E:  MOVFF  E2,FA
4722:  MOVFF  E1,F9
4726:  MOVFF  E0,F8
472A:  MOVFF  03,FF
472E:  MOVFF  02,FE
4732:  MOVFF  01,FD
4736:  MOVFF  00,FC
473A:  CALL   1E9A
473E:  MOVFF  00,E0
4742:  MOVFF  01,E1
4746:  MOVFF  02,E2
474A:  MOVFF  03,E3
474E:  CLRF   xF9
4750:  MOVFF  46,F8
4754:  CALL   0D04
4758:  BSF    FD8.1
475A:  CLRF   xFB
475C:  CLRF   xFA
475E:  MOVLW  20
4760:  MOVWF  xF9
4762:  MOVLW  83
4764:  MOVWF  xF8
4766:  MOVFF  03,FF
476A:  MOVFF  02,FE
476E:  MOVFF  01,FD
4772:  MOVFF  00,FC
4776:  CALL   1E9A
477A:  MOVFF  E3,F7
477E:  MOVFF  E2,F6
4782:  MOVFF  E1,F5
4786:  MOVFF  E0,F4
478A:  MOVFF  03,FB
478E:  MOVFF  02,FA
4792:  MOVFF  01,F9
4796:  MOVFF  00,F8
479A:  CALL   1CF2
479E:  CLRF   xF7
47A0:  CLRF   xF6
47A2:  MOVLW  30
47A4:  MOVWF  xF5
47A6:  MOVLW  82
47A8:  MOVWF  xF4
47AA:  MOVFF  03,FB
47AE:  MOVFF  02,FA
47B2:  MOVFF  01,F9
47B6:  MOVFF  00,F8
47BA:  CALL   211C
47BE:  MOVFF  03,B9
47C2:  MOVFF  02,B8
47C6:  MOVFF  01,B7
47CA:  MOVFF  00,B6
....................       //Saturacion=(CaidaPresion/1.0)*11; 
....................        
....................       for(i=0;i<floor(Saturacion);i++) 
47CE:  CLRF   40
47D0:  MOVFF  B9,E3
47D4:  MOVFF  B8,E2
47D8:  MOVFF  B7,E1
47DC:  MOVFF  B6,E0
47E0:  CALL   29BA
47E4:  MOVFF  00,E0
47E8:  MOVFF  01,E1
47EC:  MOVFF  02,E2
47F0:  MOVFF  03,E3
47F4:  CLRF   xF9
47F6:  MOVFF  40,F8
47FA:  CALL   0D04
47FE:  MOVFF  03,F7
4802:  MOVFF  02,F6
4806:  MOVFF  01,F5
480A:  MOVFF  00,F4
480E:  MOVFF  E3,FB
4812:  MOVFF  E2,FA
4816:  MOVFF  E1,F9
481A:  MOVFF  E0,F8
481E:  CALL   10D8
4822:  BNC   4840
....................       { 
....................          lcd_gotoxy(i+8,2); 
4824:  MOVLW  08
4826:  ADDWF  40,W
4828:  MOVWF  xE0
482A:  MOVWF  xF2
482C:  MOVLW  02
482E:  MOVWF  xF3
4830:  CALL   16BA
....................          printf(lcd_putc,"Ñ"); 
4834:  MOVLW  D1
4836:  MOVWF  xF1
4838:  CALL   1724
....................       } 
483C:  INCF   40,F
483E:  BRA    47D0
....................        
....................       for(i=floor(Saturacion);i<11;i++){ 
4840:  MOVFF  B9,E3
4844:  MOVFF  B8,E2
4848:  MOVFF  B7,E1
484C:  MOVFF  B6,E0
4850:  CALL   29BA
4854:  MOVFF  03,F7
4858:  MOVFF  02,F6
485C:  MOVFF  01,F5
4860:  MOVFF  00,F4
4864:  CALL   2648
4868:  MOVFF  01,40
486C:  MOVF   40,W
486E:  SUBLW  0A
4870:  BNC   488E
....................          lcd_gotoxy(i+8,2); 
4872:  MOVLW  08
4874:  ADDWF  40,W
4876:  MOVWF  xE0
4878:  MOVWF  xF2
487A:  MOVLW  02
487C:  MOVWF  xF3
487E:  CALL   16BA
....................          printf(lcd_putc," "); 
4882:  MOVLW  20
4884:  MOVWF  xF1
4886:  CALL   1724
....................       } 
488A:  INCF   40,F
488C:  BRA    486C
....................        
....................       lcd_gotoxy(9,3); 
488E:  MOVLW  09
4890:  MOVWF  xF2
4892:  MOVLW  03
4894:  MOVWF  xF3
4896:  CALL   16BA
....................       printf(lcd_putc,"Tempo:%03u:%02u",tempo_minutos,tempo_segundos); 
489A:  MOVLW  36
489C:  MOVWF  FF6
489E:  MOVLW  0B
48A0:  MOVWF  FF7
48A2:  MOVLW  06
48A4:  MOVWF  xE4
48A6:  CALL   1812
48AA:  MOVFF  3A,E0
48AE:  MOVLW  03
48B0:  MOVWF  xE1
48B2:  CALL   1858
48B6:  MOVLW  3A
48B8:  MOVWF  xF1
48BA:  CALL   1724
48BE:  MOVFF  3B,E0
48C2:  MOVLW  01
48C4:  MOVWF  xE1
48C6:  CALL   1858
....................       EliminaRuido(); 
48CA:  CALL   0004
....................     
....................       lcd_gotoxy(1,2); 
48CE:  MOVLW  01
48D0:  MOVWF  xF2
48D2:  MOVLW  02
48D4:  MOVWF  xF3
48D6:  CALL   16BA
....................       printf(lcd_putc,"Filtro:"); 
48DA:  MOVLW  46
48DC:  MOVWF  FF6
48DE:  MOVLW  0B
48E0:  MOVWF  FF7
48E2:  CALL   178A
....................        
....................       if(estadomv==1){ 
48E6:  BTFSS  29.2
48E8:  BRA    4904
....................          lcd_gotoxy(1,4); 
48EA:  MOVLW  01
48EC:  MOVWF  xF2
48EE:  MOVLW  04
48F0:  MOVWF  xF3
48F2:  CALL   16BA
....................          printf(lcd_putc,"Motor:ON ");       
48F6:  MOVLW  4E
48F8:  MOVWF  FF6
48FA:  MOVLW  0B
48FC:  MOVWF  FF7
48FE:  CALL   178A
....................       }else{ 
4902:  BRA    491C
....................          lcd_gotoxy(1,4); 
4904:  MOVLW  01
4906:  MOVWF  xF2
4908:  MOVLW  04
490A:  MOVWF  xF3
490C:  CALL   16BA
....................          printf(lcd_putc,"Motor:OFF"); 
4910:  MOVLW  58
4912:  MOVWF  FF6
4914:  MOVLW  0B
4916:  MOVWF  FF7
4918:  CALL   178A
....................       } 
....................        
....................       if(estadofl==1){ 
491C:  BTFSS  29.1
491E:  BRA    493A
....................          lcd_gotoxy(1,3); 
4920:  MOVLW  01
4922:  MOVWF  xF2
4924:  MOVLW  03
4926:  MOVWF  xF3
4928:  CALL   16BA
....................          printf(lcd_putc,"Luz:ON "); 
492C:  MOVLW  62
492E:  MOVWF  FF6
4930:  MOVLW  0B
4932:  MOVWF  FF7
4934:  CALL   178A
....................       }else{ 
4938:  BRA    4952
....................          lcd_gotoxy(1,3); 
493A:  MOVLW  01
493C:  MOVWF  xF2
493E:  MOVLW  03
4940:  MOVWF  xF3
4942:  CALL   16BA
....................          printf(lcd_putc,"Luz:OFF"); 
4946:  MOVLW  6A
4948:  MOVWF  FF6
494A:  MOVLW  0B
494C:  MOVWF  FF7
494E:  CALL   178A
....................       }  
....................        
....................       if(estadouv==1) 
4952:  BTFSS  29.0
4954:  BRA    4970
....................       { 
....................          lcd_gotoxy(13,4); 
4956:  MOVLW  0D
4958:  MOVWF  xF2
495A:  MOVLW  04
495C:  MOVWF  xF3
495E:  CALL   16BA
....................          printf(lcd_putc,"UV:ON "); 
4962:  MOVLW  72
4964:  MOVWF  FF6
4966:  MOVLW  0B
4968:  MOVWF  FF7
496A:  CALL   178A
....................       } 
....................       else 
496E:  BRA    4988
....................       {          
....................          lcd_gotoxy(13,4); 
4970:  MOVLW  0D
4972:  MOVWF  xF2
4974:  MOVLW  04
4976:  MOVWF  xF3
4978:  CALL   16BA
....................          printf(lcd_putc,"UV:OFF"); 
497C:  MOVLW  7A
497E:  MOVWF  FF6
4980:  MOVLW  0B
4982:  MOVWF  FF7
4984:  CALL   178A
....................       } 
....................    } 
....................      
....................    if(tiempo_cumplido==1){ 
4988:  BTFSS  29.7
498A:  BRA    4A24
....................       if(estadoalarma==1){ 
498C:  BTFSS  2A.4
498E:  BRA    4A1A
....................          printf(lcd_putc,"\f"); 
4990:  MOVLW  0C
4992:  MOVWF  xF1
4994:  CALL   1724
....................          lcd_gotoxy(1,2); 
4998:  MOVLW  01
499A:  MOVWF  xF2
499C:  MOVLW  02
499E:  MOVWF  xF3
49A0:  CALL   16BA
....................          printf(lcd_putc,"  Temporizador  de  "); 
49A4:  MOVLW  82
49A6:  MOVWF  FF6
49A8:  MOVLW  0B
49AA:  MOVWF  FF7
49AC:  CALL   178A
....................          lcd_gotoxy(1,3); 
49B0:  MOVLW  01
49B2:  MOVWF  xF2
49B4:  MOVLW  03
49B6:  MOVWF  xF3
49B8:  CALL   16BA
....................          printf(lcd_putc," Luz UV  Finalizado "); 
49BC:  MOVLW  98
49BE:  MOVWF  FF6
49C0:  MOVLW  0B
49C2:  MOVWF  FF7
49C4:  CALL   178A
....................          lcd_gotoxy(1,4); 
49C8:  MOVLW  01
49CA:  MOVWF  xF2
49CC:  MOVLW  04
49CE:  MOVWF  xF3
49D0:  CALL   16BA
....................          printf(lcd_putc,"                    "); 
49D4:  MOVLW  AE
49D6:  MOVWF  FF6
49D8:  MOVLW  0B
49DA:  MOVWF  FF7
49DC:  CALL   178A
....................          lcd_gotoxy(1,1); 
49E0:  MOVLW  01
49E2:  MOVWF  xF2
49E4:  MOVWF  xF3
49E6:  CALL   16BA
....................          printf(lcd_putc,"                    "); 
49EA:  MOVLW  C4
49EC:  MOVWF  FF6
49EE:  MOVLW  0B
49F0:  MOVWF  FF7
49F2:  CALL   178A
....................          for(i=0;i<5;i++) 
49F6:  CLRF   40
49F8:  MOVF   40,W
49FA:  SUBLW  04
49FC:  BNC   4A1A
....................          { 
....................             Buzzer_on; 
49FE:  BSF    F8B.0
4A00:  BCF    F94.0
....................             delay_ms(200); 
4A02:  MOVLW  C8
4A04:  MOVWF  xF7
4A06:  CALL   0BDA
....................             Buzzer_off; 
4A0A:  BCF    F8B.0
4A0C:  BCF    F94.0
....................             delay_ms(200); 
4A0E:  MOVLW  C8
4A10:  MOVWF  xF7
4A12:  CALL   0BDA
....................          } 
4A16:  INCF   40,F
4A18:  BRA    49F8
....................       } 
....................       tiempo_cumplido=0; 
4A1A:  BCF    29.7
....................       printf(lcd_putc,"\f"); 
4A1C:  MOVLW  0C
4A1E:  MOVWF  xF1
4A20:  CALL   1724
....................    }    
....................        
....................    if(estadofl==1){ 
4A24:  BTFSS  29.1
4A26:  BRA    4A46
....................       Luz_Blanca_on; 
4A28:  BCF    F8A.3
4A2A:  BCF    F93.3
....................       if(flagfl==0){ 
4A2C:  BTFSC  2A.2
4A2E:  BRA    4A44
....................          lcd_init();delay_ms(200);lcd_init(); 
4A30:  CALL   0C6A
4A34:  MOVLW  C8
4A36:  MOVWF  xF7
4A38:  CALL   0BDA
4A3C:  CALL   0C6A
....................          flagfl=1;Cambio=ON; 
4A40:  BSF    2A.2
4A42:  BSF    2A.7
....................       } 
....................    }else{ 
4A44:  BRA    4A62
....................       Luz_Blanca_off; 
4A46:  BSF    F8A.3
4A48:  BCF    F93.3
....................       if(flagfl==1){ 
4A4A:  BTFSS  2A.2
4A4C:  BRA    4A62
....................          lcd_init();delay_ms(200);lcd_init(); 
4A4E:  CALL   0C6A
4A52:  MOVLW  C8
4A54:  MOVWF  xF7
4A56:  CALL   0BDA
4A5A:  CALL   0C6A
....................          flagfl=0;Cambio=ON; 
4A5E:  BCF    2A.2
4A60:  BSF    2A.7
....................       } 
....................    } 
....................       Cambio=OFF; 
4A62:  BCF    2A.7
....................     
....................    if(estadomv==1){  
4A64:  BTFSS  29.2
4A66:  BRA    4A92
....................       if(flagmv==0){ 
4A68:  BTFSC  xC2.0
4A6A:  BRA    4A8C
....................          VelMotor=6; 
4A6C:  MOVLW  06
4A6E:  MOVWF  xD1
....................          lcd_init();delay_ms(200);lcd_init(); 
4A70:  CALL   0C6A
4A74:  MOVLW  C8
4A76:  MOVWF  xF7
4A78:  CALL   0BDA
4A7C:  CALL   0C6A
....................          flagmv=1;Cambio=ON;delay_ms(200); 
4A80:  BSF    xC2.0
4A82:  BSF    2A.7
4A84:  MOVLW  C8
4A86:  MOVWF  xF7
4A88:  CALL   0BDA
....................       } 
....................       VelMotor=Vel1; 
4A8C:  MOVFF  57,D1
....................    }else{ 
4A90:  BRA    4AAC
....................       VelMotor=0; 
4A92:  CLRF   xD1
....................       if(flagmv==1){ 
4A94:  BTFSS  xC2.0
4A96:  BRA    4AAC
....................          lcd_init();delay_ms(200);lcd_init(); 
4A98:  CALL   0C6A
4A9C:  MOVLW  C8
4A9E:  MOVWF  xF7
4AA0:  CALL   0BDA
4AA4:  CALL   0C6A
....................          flagmv=0;Cambio=ON; 
4AA8:  BCF    xC2.0
4AAA:  BSF    2A.7
....................       } 
....................    } 
....................     
....................    if(estadofl==1) 
4AAC:  BTFSS  29.1
4AAE:  BRA    4ACE
....................    { 
....................       Luz_Blanca_on; 
4AB0:  BCF    F8A.3
4AB2:  BCF    F93.3
....................       if(flagfl==0) 
4AB4:  BTFSC  2A.2
4AB6:  BRA    4ACC
....................       { 
....................          lcd_init();delay_ms(200);lcd_init(); 
4AB8:  CALL   0C6A
4ABC:  MOVLW  C8
4ABE:  MOVWF  xF7
4AC0:  CALL   0BDA
4AC4:  CALL   0C6A
....................          flagfl=1;Cambio=ON; 
4AC8:  BSF    2A.2
4ACA:  BSF    2A.7
....................       } 
....................    } 
....................    else 
4ACC:  BRA    4AEA
....................    { 
....................       Luz_Blanca_off; 
4ACE:  BSF    F8A.3
4AD0:  BCF    F93.3
....................       if(flagfl==1) 
4AD2:  BTFSS  2A.2
4AD4:  BRA    4AEA
....................       { 
....................          lcd_init();delay_ms(200);lcd_init(); 
4AD6:  CALL   0C6A
4ADA:  MOVLW  C8
4ADC:  MOVWF  xF7
4ADE:  CALL   0BDA
4AE2:  CALL   0C6A
....................          flagfl=0;Cambio=ON; 
4AE6:  BCF    2A.2
4AE8:  BSF    2A.7
....................       } 
....................    } 
....................     
....................    if(estadouv==1){ 
4AEA:  BTFSS  29.0
4AEC:  BRA    4B98
....................       Luz_UV_on; 
4AEE:  BCF    F8A.4
4AF0:  BCF    F93.4
....................       tiempo_cumplido=0;       
4AF2:  BCF    29.7
....................       estadomv=0; 
4AF4:  BCF    29.2
....................       VelMotor=0; 
4AF6:  CLRF   xD1
....................       estadofl=0; 
4AF8:  BCF    29.1
....................       Luz_Blanca_off; 
4AFA:  BSF    F8A.3
4AFC:  BCF    F93.3
....................       if(flaguv==0){ 
4AFE:  BTFSC  2A.1
4B00:  BRA    4B96
....................          lcd_init();delay_ms(200);lcd_init(); 
4B02:  CALL   0C6A
4B06:  MOVLW  C8
4B08:  MOVWF  xF7
4B0A:  CALL   0BDA
4B0E:  CALL   0C6A
....................          flaguv=1;guardaruv=1;Cambio=ON; 
4B12:  BSF    2A.1
4B14:  MOVLW  01
4B16:  MOVWF  43
4B18:  BSF    2A.7
....................          write_eeprom(22,estadomv);delay_ms(20); 
4B1A:  MOVLW  00
4B1C:  BTFSC  29.2
4B1E:  MOVLW  01
4B20:  MOVWF  xE0
4B22:  MOVLW  16
4B24:  MOVWF  FA9
4B26:  MOVFF  E0,FA8
4B2A:  BCF    FA6.6
4B2C:  BCF    FA6.7
4B2E:  BSF    FA6.2
4B30:  MOVF   FF2,W
4B32:  MOVWF  00
4B34:  BCF    FF2.6
4B36:  BCF    FF2.7
4B38:  MOVLB  F
4B3A:  MOVLW  55
4B3C:  MOVWF  FA7
4B3E:  MOVLW  AA
4B40:  MOVWF  FA7
4B42:  BSF    FA6.1
4B44:  BTFSC  FA6.1
4B46:  BRA    4B44
4B48:  BCF    FA6.2
4B4A:  MOVF   00,W
4B4C:  IORWF  FF2,F
4B4E:  MOVLW  14
4B50:  MOVLB  0
4B52:  MOVWF  xF7
4B54:  CALL   0BDA
....................          write_eeprom(23,estadofl);delay_ms(20); 
4B58:  MOVLW  00
4B5A:  BTFSC  29.1
4B5C:  MOVLW  01
4B5E:  MOVWF  xE0
4B60:  MOVLW  17
4B62:  MOVWF  FA9
4B64:  MOVFF  E0,FA8
4B68:  BCF    FA6.6
4B6A:  BCF    FA6.7
4B6C:  BSF    FA6.2
4B6E:  MOVF   FF2,W
4B70:  MOVWF  00
4B72:  BCF    FF2.6
4B74:  BCF    FF2.7
4B76:  MOVLB  F
4B78:  MOVLW  55
4B7A:  MOVWF  FA7
4B7C:  MOVLW  AA
4B7E:  MOVWF  FA7
4B80:  BSF    FA6.1
4B82:  BTFSC  FA6.1
4B84:  BRA    4B82
4B86:  BCF    FA6.2
4B88:  MOVF   00,W
4B8A:  IORWF  FF2,F
4B8C:  MOVLW  14
4B8E:  MOVLB  0
4B90:  MOVWF  xF7
4B92:  CALL   0BDA
....................       } 
....................    }else{ 
4B96:  BRA    4BBA
....................       estadouv=0; 
4B98:  BCF    29.0
....................       Luz_UV_off; 
4B9A:  BSF    F8A.4
4B9C:  BCF    F93.4
....................       if(flaguv==1){ 
4B9E:  BTFSS  2A.1
4BA0:  BRA    4BBA
....................          lcd_init();delay_ms(200);lcd_init(); 
4BA2:  CALL   0C6A
4BA6:  MOVLW  C8
4BA8:  MOVWF  xF7
4BAA:  CALL   0BDA
4BAE:  CALL   0C6A
....................          flaguv=0;guardaruv=1;Cambio=ON; 
4BB2:  BCF    2A.1
4BB4:  MOVLW  01
4BB6:  MOVWF  43
4BB8:  BSF    2A.7
....................       } 
....................    } 
....................        
....................    if(tdown>=60){ //Si oprimio tecla abajo por 300ms o mas 
4BBA:  MOVF   xC8,F
4BBC:  BNZ   4BC4
4BBE:  MOVF   xC7,W
4BC0:  SUBLW  3B
4BC2:  BC    4C16
....................       if(!Flanco){ 
4BC4:  BTFSC  29.3
4BC6:  BRA    4C14
....................          estadofl=!estadofl;Flanco = 1;write_eeprom(23,estadofl);delay_ms(300);Cambio=ON; 
4BC8:  BTG    29.1
4BCA:  BSF    29.3
4BCC:  MOVLW  00
4BCE:  BTFSC  29.1
4BD0:  MOVLW  01
4BD2:  MOVWF  xE0
4BD4:  MOVLW  17
4BD6:  MOVWF  FA9
4BD8:  MOVFF  E0,FA8
4BDC:  BCF    FA6.6
4BDE:  BCF    FA6.7
4BE0:  BSF    FA6.2
4BE2:  MOVF   FF2,W
4BE4:  MOVWF  00
4BE6:  BCF    FF2.6
4BE8:  BCF    FF2.7
4BEA:  MOVLB  F
4BEC:  MOVLW  55
4BEE:  MOVWF  FA7
4BF0:  MOVLW  AA
4BF2:  MOVWF  FA7
4BF4:  BSF    FA6.1
4BF6:  BTFSC  FA6.1
4BF8:  BRA    4BF6
4BFA:  BCF    FA6.2
4BFC:  MOVF   00,W
4BFE:  IORWF  FF2,F
4C00:  MOVLW  02
4C02:  MOVLB  0
4C04:  MOVWF  xE0
4C06:  MOVLW  96
4C08:  MOVWF  xF7
4C0A:  CALL   0BDA
4C0E:  DECFSZ xE0,F
4C10:  BRA    4C06
4C12:  BSF    2A.7
....................       } 
....................    }else{ 
4C14:  BRA    4C18
....................       Flanco=0; 
4C16:  BCF    29.3
....................    } 
....................     
....................    if(tright>=60){ //Si oprimio tecla derecha por 300ms o mas 
4C18:  MOVF   xCA,F
4C1A:  BNZ   4C22
4C1C:  MOVF   xC9,W
4C1E:  SUBLW  3B
4C20:  BC    4C74
....................       if(!Flanco2){ 
4C22:  BTFSC  29.5
4C24:  BRA    4C72
....................          estadomv=!estadomv;Flanco2 = 1;write_eeprom(22,estadomv);delay_ms(300);Cambio=ON; 
4C26:  BTG    29.2
4C28:  BSF    29.5
4C2A:  MOVLW  00
4C2C:  BTFSC  29.2
4C2E:  MOVLW  01
4C30:  MOVWF  xE0
4C32:  MOVLW  16
4C34:  MOVWF  FA9
4C36:  MOVFF  E0,FA8
4C3A:  BCF    FA6.6
4C3C:  BCF    FA6.7
4C3E:  BSF    FA6.2
4C40:  MOVF   FF2,W
4C42:  MOVWF  00
4C44:  BCF    FF2.6
4C46:  BCF    FF2.7
4C48:  MOVLB  F
4C4A:  MOVLW  55
4C4C:  MOVWF  FA7
4C4E:  MOVLW  AA
4C50:  MOVWF  FA7
4C52:  BSF    FA6.1
4C54:  BTFSC  FA6.1
4C56:  BRA    4C54
4C58:  BCF    FA6.2
4C5A:  MOVF   00,W
4C5C:  IORWF  FF2,F
4C5E:  MOVLW  02
4C60:  MOVLB  0
4C62:  MOVWF  xE0
4C64:  MOVLW  96
4C66:  MOVWF  xF7
4C68:  CALL   0BDA
4C6C:  DECFSZ xE0,F
4C6E:  BRA    4C64
4C70:  BSF    2A.7
....................       } 
....................    }else{ 
4C72:  BRA    4C76
....................       Flanco2=0; 
4C74:  BCF    29.5
....................    } 
....................     
....................    if(tleft>=60){ //Si oprimio tecla izquierda por 300ms o mas 
4C76:  MOVF   xCC,F
4C78:  BNZ   4C80
4C7A:  MOVF   xCB,W
4C7C:  SUBLW  3B
4C7E:  BC    4C94
....................       if(!Flanco3){ 
4C80:  BTFSC  29.6
4C82:  BRA    4C92
....................          delay_ms(150);  
4C84:  MOVLW  96
4C86:  MOVWF  xF7
4C88:  CALL   0BDA
....................          estadouv=!estadouv; 
4C8C:  BTG    29.0
....................          Cambio=ON; 
4C8E:  BSF    2A.7
....................          Flanco3=1; 
4C90:  BSF    29.6
....................       } 
....................    }else{ 
4C92:  BRA    4C96
....................       Flanco3=0; 
4C94:  BCF    29.6
....................    } 
....................     
....................    if(tup>=60){ //Si oprimio tecla arriba por 300ms o mas 
4C96:  MOVF   xC6,F
4C98:  BNZ   4CA0
4C9A:  MOVF   xC5,W
4C9C:  SUBLW  3B
4C9E:  BC    4CD6
....................       if(!Flanco1){ 
4CA0:  BTFSC  29.4
4CA2:  BRA    4CD4
....................          delay_ms(200); 
4CA4:  MOVLW  C8
4CA6:  MOVWF  xF7
4CA8:  CALL   0BDA
....................          printf(lcd_putc,"\f"); 
4CAC:  MOVLW  0C
4CAE:  MOVWF  xF1
4CB0:  CALL   1724
....................          delay_ms(300); 
4CB4:  MOVLW  02
4CB6:  MOVWF  xE0
4CB8:  MOVLW  96
4CBA:  MOVWF  xF7
4CBC:  CALL   0BDA
4CC0:  DECFSZ xE0,F
4CC2:  BRA    4CB8
....................          Menu=1;  
4CC4:  MOVLW  01
4CC6:  MOVWF  2B
....................          paso=0; 
4CC8:  CLRF   47
....................          Flecha=2; 
4CCA:  MOVLW  02
4CCC:  MOVWF  2F
....................          Flecha2=2; 
4CCE:  MOVWF  31
....................          Cambio=ON; 
4CD0:  BSF    2A.7
....................          Flanco1=1; 
4CD2:  BSF    29.4
....................       } 
....................    }else{ 
4CD4:  BRA    4CD8
....................       Flanco1=0; 
4CD6:  BCF    29.4
....................    } 
....................        
....................    if(guardaruv==1) 
4CD8:  DECFSZ 43,W
4CDA:  BRA    4DA6
....................    { 
....................       write_eeprom(7,segundos);write_eeprom(8,minutos); 
4CDC:  MOVLW  07
4CDE:  MOVWF  FA9
4CE0:  MOVFF  34,FA8
4CE4:  BCF    FA6.6
4CE6:  BCF    FA6.7
4CE8:  BSF    FA6.2
4CEA:  MOVF   FF2,W
4CEC:  MOVWF  00
4CEE:  BCF    FF2.6
4CF0:  BCF    FF2.7
4CF2:  MOVLB  F
4CF4:  MOVLW  55
4CF6:  MOVWF  FA7
4CF8:  MOVLW  AA
4CFA:  MOVWF  FA7
4CFC:  BSF    FA6.1
4CFE:  BTFSC  FA6.1
4D00:  BRA    4CFE
4D02:  BCF    FA6.2
4D04:  MOVF   00,W
4D06:  IORWF  FF2,F
4D08:  MOVLW  08
4D0A:  MOVWF  FA9
4D0C:  MOVFF  35,FA8
4D10:  BCF    FA6.6
4D12:  BCF    FA6.7
4D14:  BSF    FA6.2
4D16:  MOVF   FF2,W
4D18:  MOVWF  00
4D1A:  BCF    FF2.6
4D1C:  BCF    FF2.7
4D1E:  MOVLW  55
4D20:  MOVWF  FA7
4D22:  MOVLW  AA
4D24:  MOVWF  FA7
4D26:  BSF    FA6.1
4D28:  BTFSC  FA6.1
4D2A:  BRA    4D28
4D2C:  BCF    FA6.2
4D2E:  MOVF   00,W
4D30:  IORWF  FF2,F
....................       horasL=make8(horas,0); 
4D32:  MOVFF  5A,36
....................       horasH=make8(horas,1); 
4D36:  MOVFF  5B,37
....................       write_eeprom(9,horasL); 
4D3A:  MOVLW  09
4D3C:  MOVWF  FA9
4D3E:  MOVFF  36,FA8
4D42:  BCF    FA6.6
4D44:  BCF    FA6.7
4D46:  BSF    FA6.2
4D48:  MOVFF  FF2,00
4D4C:  BCF    FF2.6
4D4E:  BCF    FF2.7
4D50:  MOVLW  55
4D52:  MOVWF  FA7
4D54:  MOVLW  AA
4D56:  MOVWF  FA7
4D58:  BSF    FA6.1
4D5A:  BTFSC  FA6.1
4D5C:  BRA    4D5A
4D5E:  BCF    FA6.2
4D60:  MOVF   00,W
4D62:  IORWF  FF2,F
....................       delay_ms(20); 
4D64:  MOVLW  14
4D66:  MOVLB  0
4D68:  MOVWF  xF7
4D6A:  CALL   0BDA
....................       write_eeprom(10,horasH); 
4D6E:  MOVLW  0A
4D70:  MOVWF  FA9
4D72:  MOVFF  37,FA8
4D76:  BCF    FA6.6
4D78:  BCF    FA6.7
4D7A:  BSF    FA6.2
4D7C:  MOVF   FF2,W
4D7E:  MOVWF  00
4D80:  BCF    FF2.6
4D82:  BCF    FF2.7
4D84:  MOVLB  F
4D86:  MOVLW  55
4D88:  MOVWF  FA7
4D8A:  MOVLW  AA
4D8C:  MOVWF  FA7
4D8E:  BSF    FA6.1
4D90:  BTFSC  FA6.1
4D92:  BRA    4D90
4D94:  BCF    FA6.2
4D96:  MOVF   00,W
4D98:  IORWF  FF2,F
....................       delay_ms(20); 
4D9A:  MOVLW  14
4D9C:  MOVLB  0
4D9E:  MOVWF  xF7
4DA0:  CALL   0BDA
....................       guardaruv=0; 
4DA4:  CLRF   43
....................    } 
....................     
....................    if(segundos>=60) 
4DA6:  MOVF   34,W
4DA8:  SUBLW  3B
4DAA:  BC    4DB0
....................    { 
....................       segundos=0;minutos++; 
4DAC:  CLRF   34
4DAE:  INCF   35,F
....................    } 
....................    if(minutos==60) 
4DB0:  MOVF   35,W
4DB2:  SUBLW  3C
4DB4:  BNZ   4DBE
....................    { 
....................       minutos=0;horas++; 
4DB6:  CLRF   35
4DB8:  INCF   5A,F
4DBA:  BTFSC  FD8.2
4DBC:  INCF   5B,F
....................    }   
....................      
....................    } 
.................... //----------------Fin-Menu100--------------------------------------------------------------   
....................    if(tiemporeset>=60) 
4DBE:  MOVF   42,W
4DC0:  SUBLW  3B
4DC2:  BC    4DDC
....................    { 
....................       printf(lcd_putc,"\f"); 
4DC4:  MOVLW  0C
4DC6:  MOVWF  xF1
4DC8:  CALL   1724
....................       lcd_init(); 
4DCC:  CALL   0C6A
....................       delay_ms(200); 
4DD0:  MOVLW  C8
4DD2:  MOVWF  xF7
4DD4:  CALL   0BDA
....................       tiemporeset=0; 
4DD8:  CLRF   42
....................       Cambio=ON; 
4DDA:  BSF    2A.7
....................    }    
....................    } 
4DDC:  GOTO   2F10
.................... } 
....................  
.................... int8 BIT_BYTE(int1 D0, int1 D1, int1 D2, int1 D3, int1 D4, int1 D5, int1 D6, int1 D7){ 
....................    int8 dato; 
4DE0:  SLEEP 
....................    dato= D7*128 + D6*64 + D5*32 + D4*16 + D3*8 + D2*4 + D1*2 +D0*1; // 0 al 255  
....................    return dato;  
.................... } 

Configuration Fuses:
   Word  1: 0E3C   NOIESO NOFCMEN HSPLL PLL5 CPUDIV4 USBDIV
   Word  2: 1E39   NOBROWNOUT NOWDT BORV20 NOPUT WDT32768 VREGEN
   Word  3: 0100   NOPBADEN CCP2C1 NOMCLR NOLPT1OSC
   Word  4: 0080   NOSTVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
