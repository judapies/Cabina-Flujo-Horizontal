CCS PCH C Compiler, Version 4.104, 5967               28-abr.-21 07:45

               Filename: D:\Laboratorio\Cabina de Flujo Laminar Horizontal\2021\CFLH 120 Artilab #0045885XX OP202166\Firmware 2.1.2 - Con Presion-MPXV5004GV-SinVelocidad\CabinaCFLH.lst

               ROM used: 19092 bytes (58%)
                         Largest free fragment is 13674
               RAM used: 210 (10%) at main() level
                         247 (12%) worst case
               Stack:    7 worst case (6 in main + 1 for interrupts)

*
0000:  GOTO   26CC
*
0008:  NOP   
000A:  NOP   
000C:  NOP   
000E:  NOP   
0010:  NOP   
0012:  NOP   
0014:  NOP   
0016:  NOP   
0018:  MOVWF  04
001A:  MOVFF  FD8,05
001E:  MOVFF  FE0,06
0022:  MOVLB  0
0024:  MOVFF  FE9,0C
0028:  MOVFF  FEA,07
002C:  MOVFF  FE1,08
0030:  MOVFF  FE2,09
0034:  MOVFF  FD9,0A
0038:  MOVFF  FDA,0B
003C:  MOVFF  FF3,12
0040:  MOVFF  FF4,13
0044:  MOVFF  FFA,14
0048:  MOVFF  00,0E
004C:  MOVFF  01,0F
0050:  MOVFF  02,10
0054:  MOVFF  03,11
0058:  BTFSS  F9D.0
005A:  GOTO   0064
005E:  BTFSC  F9E.0
0060:  GOTO   019A
0064:  MOVFF  0E,00
0068:  MOVFF  0F,01
006C:  MOVFF  10,02
0070:  MOVFF  11,03
0074:  MOVFF  0C,FE9
0078:  MOVFF  07,FEA
007C:  BSF    07.7
007E:  MOVFF  08,FE1
0082:  MOVFF  09,FE2
0086:  MOVFF  0A,FD9
008A:  MOVFF  0B,FDA
008E:  MOVFF  12,FF3
0092:  MOVFF  13,FF4
0096:  MOVFF  14,FFA
009A:  MOVF   04,W
009C:  MOVFF  06,FE0
00A0:  MOVFF  05,FD8
00A4:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina de PCR. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz UV, Luz Blanca, Motor Ventilador y Cambio de Contraseña. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... #device HIGH_INTS=TRUE //Activamos niveles de prioridad 
.................... //#priority TIMER2 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL5,CPUDIV4,VREGEN,NOMCLR,NOBROWNOUT,NOPUT,NOCPD,NOSTVREN,NOWRT,NOWRTD,NOIESO,NOFCMEN,NOPBADEN,NOWRTC,NOWRTB,NOEBTR,NOEBTRB,NOCPB,NOLPT1OSC,NOXINST,NOICPRT// PLL1 para 4 MHz 
.................... #use delay(clock=16000000) 
*
0960:  CLRF   FEA
0962:  MOVLW  E5
0964:  MOVWF  FE9
0966:  MOVF   FEF,W
0968:  BZ    0986
096A:  MOVLW  05
096C:  MOVWF  01
096E:  CLRF   00
0970:  DECFSZ 00,F
0972:  BRA    0970
0974:  DECFSZ 01,F
0976:  BRA    096E
0978:  MOVLW  2E
097A:  MOVWF  00
097C:  DECFSZ 00,F
097E:  BRA    097C
0980:  BRA    0982
0982:  DECFSZ FEF,F
0984:  BRA    096A
0986:  RETLW  00
.................... //#fuses HS,WDT8192,NOPROTECT,NOLVP,NODEBUG,NOSTVREN,NOPUT,NOCPD,NOWRT,NOIESO,NOFCMEN,NOPBADEN,NOWRTC,NOWRTB,NOEBTR,NOEBTRB,NOCPB,NOXINST,NOLPT1OSC,NOMCLR 
.................... //#use delay(clock=20000000) 
.................... #include <MATH.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
*
237C:  BCF    xE1.0
....................    y = x; 
237E:  MOVFF  D5,DA
2382:  MOVFF  D4,D9
2386:  MOVFF  D3,D8
238A:  MOVFF  D2,D7
....................  
....................    if (x < 0) 
238E:  MOVFF  D5,E5
2392:  MOVFF  D4,E4
2396:  MOVFF  D3,E3
239A:  MOVFF  D2,E2
239E:  CLRF   xE9
23A0:  CLRF   xE8
23A2:  CLRF   xE7
23A4:  CLRF   xE6
23A6:  CALL   0E54
23AA:  BNC   23B4
....................    { 
....................       s = 1; 
23AC:  BSF    xE1.0
....................       y = -y; 
23AE:  MOVF   xD8,W
23B0:  XORLW  80
23B2:  MOVWF  xD8
....................    } 
....................  
....................    if (y <= 32768.0) 
23B4:  MOVFF  DA,E5
23B8:  MOVFF  D9,E4
23BC:  MOVFF  D8,E3
23C0:  MOVFF  D7,E2
23C4:  CLRF   xE9
23C6:  CLRF   xE8
23C8:  CLRF   xE7
23CA:  MOVLW  8E
23CC:  MOVWF  xE6
23CE:  CALL   0E54
23D2:  BC    23D6
23D4:  BNZ   2406
....................   res = (float32)(unsigned int16)y; 
23D6:  MOVFF  DA,E5
23DA:  MOVFF  D9,E4
23DE:  MOVFF  D8,E3
23E2:  MOVFF  D7,E2
23E6:  RCALL  2344
23E8:  MOVFF  02,E7
23EC:  MOVFF  01,E6
23F0:  CALL   0A80
23F4:  MOVFF  03,DE
23F8:  MOVFF  02,DD
23FC:  MOVFF  01,DC
2400:  MOVFF  00,DB
....................  
....................  else if (y < 10000000.0) 
2404:  BRA    2590
2406:  MOVFF  DA,E5
240A:  MOVFF  D9,E4
240E:  MOVFF  D8,E3
2412:  MOVFF  D7,E2
2416:  MOVLW  80
2418:  MOVWF  xE9
241A:  MOVLW  96
241C:  MOVWF  xE8
241E:  MOVLW  18
2420:  MOVWF  xE7
2422:  MOVLW  96
2424:  MOVWF  xE6
2426:  CALL   0E54
242A:  BTFSS  FD8.0
242C:  BRA    2580
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
242E:  MOVFF  DA,E5
2432:  MOVFF  D9,E4
2436:  MOVFF  D8,E3
243A:  MOVFF  D7,E2
243E:  CLRF   xE9
2440:  CLRF   xE8
2442:  CLRF   xE7
2444:  MOVLW  8E
2446:  MOVWF  xE6
2448:  CALL   1A54
244C:  MOVFF  03,E5
2450:  MOVFF  02,E4
2454:  MOVFF  01,E3
2458:  MOVFF  00,E2
245C:  RCALL  2344
245E:  MOVFF  02,E0
2462:  MOVFF  01,DF
....................       y = 32768.0*(y/32768.0 - (float32)l); 
2466:  MOVFF  DA,E5
246A:  MOVFF  D9,E4
246E:  MOVFF  D8,E3
2472:  MOVFF  D7,E2
2476:  CLRF   xE9
2478:  CLRF   xE8
247A:  CLRF   xE7
247C:  MOVLW  8E
247E:  MOVWF  xE6
2480:  CALL   1A54
2484:  MOVFF  00,E2
2488:  MOVFF  01,E3
248C:  MOVFF  02,E4
2490:  MOVFF  03,E5
2494:  MOVFF  E0,E7
2498:  MOVFF  DF,E6
249C:  CALL   0A80
24A0:  BSF    FD8.1
24A2:  MOVFF  E5,E9
24A6:  MOVFF  E4,E8
24AA:  MOVFF  E3,E7
24AE:  MOVFF  E2,E6
24B2:  MOVFF  03,ED
24B6:  MOVFF  02,EC
24BA:  MOVFF  01,EB
24BE:  MOVFF  00,EA
24C2:  CALL   1BAE
24C6:  CLRF   xE5
24C8:  CLRF   xE4
24CA:  CLRF   xE3
24CC:  MOVLW  8E
24CE:  MOVWF  xE2
24D0:  MOVFF  03,E9
24D4:  MOVFF  02,E8
24D8:  MOVFF  01,E7
24DC:  MOVFF  00,E6
24E0:  RCALL  1E18
24E2:  MOVFF  03,DA
24E6:  MOVFF  02,D9
24EA:  MOVFF  01,D8
24EE:  MOVFF  00,D7
....................   res = 32768.0*(float32)l; 
24F2:  MOVFF  E0,E7
24F6:  MOVFF  DF,E6
24FA:  CALL   0A80
24FE:  CLRF   xE5
2500:  CLRF   xE4
2502:  CLRF   xE3
2504:  MOVLW  8E
2506:  MOVWF  xE2
2508:  MOVFF  03,E9
250C:  MOVFF  02,E8
2510:  MOVFF  01,E7
2514:  MOVFF  00,E6
2518:  RCALL  1E18
251A:  MOVFF  03,DE
251E:  MOVFF  02,DD
2522:  MOVFF  01,DC
2526:  MOVFF  00,DB
....................   res += (float32)(unsigned int16)y; 
252A:  MOVFF  DA,E5
252E:  MOVFF  D9,E4
2532:  MOVFF  D8,E3
2536:  MOVFF  D7,E2
253A:  RCALL  2344
253C:  MOVFF  02,E7
2540:  MOVFF  01,E6
2544:  CALL   0A80
2548:  BCF    FD8.1
254A:  MOVFF  DE,E9
254E:  MOVFF  DD,E8
2552:  MOVFF  DC,E7
2556:  MOVFF  DB,E6
255A:  MOVFF  03,ED
255E:  MOVFF  02,EC
2562:  MOVFF  01,EB
2566:  MOVFF  00,EA
256A:  CALL   1BAE
256E:  MOVFF  03,DE
2572:  MOVFF  02,DD
2576:  MOVFF  01,DC
257A:  MOVFF  00,DB
....................  } 
....................  
....................  else 
257E:  BRA    2590
....................   res = y; 
2580:  MOVFF  DA,DE
2584:  MOVFF  D9,DD
2588:  MOVFF  D8,DC
258C:  MOVFF  D7,DB
....................  
....................  y = y - (float32)(unsigned int16)y; 
2590:  MOVFF  DA,E5
2594:  MOVFF  D9,E4
2598:  MOVFF  D8,E3
259C:  MOVFF  D7,E2
25A0:  RCALL  2344
25A2:  MOVFF  02,E7
25A6:  MOVFF  01,E6
25AA:  CALL   0A80
25AE:  BSF    FD8.1
25B0:  MOVFF  DA,E9
25B4:  MOVFF  D9,E8
25B8:  MOVFF  D8,E7
25BC:  MOVFF  D7,E6
25C0:  MOVFF  03,ED
25C4:  MOVFF  02,EC
25C8:  MOVFF  01,EB
25CC:  MOVFF  00,EA
25D0:  CALL   1BAE
25D4:  MOVFF  03,DA
25D8:  MOVFF  02,D9
25DC:  MOVFF  01,D8
25E0:  MOVFF  00,D7
....................  
....................  if (s) 
25E4:  BTFSS  xE1.0
25E6:  BRA    25EE
....................   res = -res; 
25E8:  MOVF   xDC,W
25EA:  XORLW  80
25EC:  MOVWF  xDC
....................  
....................  if (y != 0) 
25EE:  MOVFF  DA,E5
25F2:  MOVFF  D9,E4
25F6:  MOVFF  D8,E3
25FA:  MOVFF  D7,E2
25FE:  CLRF   xE9
2600:  CLRF   xE8
2602:  CLRF   xE7
2604:  CLRF   xE6
2606:  CALL   0E54
260A:  BZ    267C
....................  { 
....................   if (s == 1 && n == 0) 
260C:  BTFSS  xE1.0
260E:  BRA    2644
2610:  MOVF   xD6,F
2612:  BNZ   2644
....................    res -= 1.0; 
2614:  BSF    FD8.1
2616:  MOVFF  DE,E9
261A:  MOVFF  DD,E8
261E:  MOVFF  DC,E7
2622:  MOVFF  DB,E6
2626:  CLRF   xED
2628:  CLRF   xEC
262A:  CLRF   xEB
262C:  MOVLW  7F
262E:  MOVWF  xEA
2630:  CALL   1BAE
2634:  MOVFF  03,DE
2638:  MOVFF  02,DD
263C:  MOVFF  01,DC
2640:  MOVFF  00,DB
....................  
....................   if (s == 0 && n == 1) 
2644:  BTFSC  xE1.0
2646:  BRA    267C
2648:  DECFSZ xD6,W
264A:  BRA    267C
....................    res += 1.0; 
264C:  BCF    FD8.1
264E:  MOVFF  DE,E9
2652:  MOVFF  DD,E8
2656:  MOVFF  DC,E7
265A:  MOVFF  DB,E6
265E:  CLRF   xED
2660:  CLRF   xEC
2662:  CLRF   xEB
2664:  MOVLW  7F
2666:  MOVWF  xEA
2668:  CALL   1BAE
266C:  MOVFF  03,DE
2670:  MOVFF  02,DD
2674:  MOVFF  01,DC
2678:  MOVFF  00,DB
....................  } 
....................  if (x == 0) 
267C:  MOVFF  D5,E5
2680:  MOVFF  D4,E4
2684:  MOVFF  D3,E3
2688:  MOVFF  D2,E2
268C:  CLRF   xE9
268E:  CLRF   xE8
2690:  CLRF   xE7
2692:  CLRF   xE6
2694:  CALL   0E54
2698:  BNZ   26A2
....................     res = 0; 
269A:  CLRF   xDE
269C:  CLRF   xDD
269E:  CLRF   xDC
26A0:  CLRF   xDB
....................  
....................  return (res); 
26A2:  MOVFF  DB,00
26A6:  MOVFF  DC,01
26AA:  MOVFF  DD,02
26AE:  MOVFF  DE,03
.................... } 
26B2:  GOTO   26CA (RETURN)
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
26B6:  MOVFF  D1,D5
26BA:  MOVFF  D0,D4
26BE:  MOVFF  CF,D3
26C2:  MOVFF  CE,D2
26C6:  CLRF   xD6
26C8:  BRA    237C
.................... } 
26CA:  RETLW  00
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN unused;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN enable;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTD")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_d(LCD_READ); 
....................       lcd.rw = 1; 
....................       delay_cycles(30);//30 
....................       lcd.enable = 1; 
....................       delay_cycles(30);//30 
....................       high = lcd.data; 
....................       lcd.enable = 0; 
....................       delay_cycles(30);//30 
....................       lcd.enable = 1; 
....................       delay_us(30);//30 
....................       low = lcd.data; 
....................       lcd.enable = 0; 
....................       set_tris_d(LCD_WRITE); 
....................       return( (high<<4) | low); 
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
0988:  SWAPF  xE6,W
098A:  ANDLW  F0
098C:  MOVWF  00
098E:  MOVLW  0F
0990:  ANDWF  F83,W
0992:  IORWF  00,W
0994:  MOVWF  F83
....................       delay_cycles(30);//30 
0996:  MOVLW  09
0998:  MOVWF  00
099A:  DECFSZ 00,F
099C:  BRA    099A
099E:  BRA    09A0
....................       lcd.enable = 1; 
09A0:  BSF    F83.3
....................       delay_us(55);//55 
09A2:  MOVLW  49
09A4:  MOVWF  00
09A6:  DECFSZ 00,F
09A8:  BRA    09A6
....................       lcd.enable = 0; 
09AA:  BCF    F83.3
.................... } 
09AC:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
09AE:  BCF    F83.1
....................       //while ( bit_test(lcd_read_byte(),7)); 
....................       delay_ms(1); 
09B0:  MOVLW  01
09B2:  MOVWF  xE5
09B4:  RCALL  0960
....................       lcd.rs = address; 
09B6:  BTFSS  xE3.0
09B8:  BCF    F83.1
09BA:  BTFSC  xE3.0
09BC:  BSF    F83.1
....................       delay_cycles(30);//30 
09BE:  MOVLW  09
09C0:  MOVWF  00
09C2:  DECFSZ 00,F
09C4:  BRA    09C2
09C6:  BRA    09C8
....................       lcd.rw = 0; 
09C8:  BCF    F83.2
....................       delay_cycles(30);//30 
09CA:  MOVLW  09
09CC:  MOVWF  00
09CE:  DECFSZ 00,F
09D0:  BRA    09CE
09D2:  BRA    09D4
....................       lcd.enable = 0; 
09D4:  BCF    F83.3
....................       lcd_send_nibble(n >> 4); 
09D6:  SWAPF  xE4,W
09D8:  MOVWF  xE5
09DA:  MOVLW  0F
09DC:  ANDWF  xE5,F
09DE:  MOVFF  E5,E6
09E2:  RCALL  0988
....................       lcd_send_nibble(n & 0xf); 
09E4:  MOVF   xE4,W
09E6:  ANDLW  0F
09E8:  MOVWF  xE5
09EA:  MOVWF  xE6
09EC:  RCALL  0988
.................... } 
09EE:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_d(LCD_WRITE); 
09F0:  MOVLW  00
09F2:  MOVWF  F95
....................     lcd.rs = 0; 
09F4:  BCF    F83.1
....................     lcd.rw = 0; 
09F6:  BCF    F83.2
....................     lcd.enable = 0; 
09F8:  BCF    F83.3
....................     delay_ms(15); 
09FA:  MOVLW  0F
09FC:  MOVWF  xE5
09FE:  RCALL  0960
....................     for(i=1;i<=3;++i) { 
0A00:  MOVLW  01
0A02:  MOVWF  xCE
0A04:  MOVF   xCE,W
0A06:  SUBLW  03
0A08:  BNC   0A1A
....................        lcd_send_nibble(3); 
0A0A:  MOVLW  03
0A0C:  MOVWF  xE6
0A0E:  RCALL  0988
....................        delay_ms(5); 
0A10:  MOVLW  05
0A12:  MOVWF  xE5
0A14:  RCALL  0960
....................     } 
0A16:  INCF   xCE,F
0A18:  BRA    0A04
....................     lcd_send_nibble(2); 
0A1A:  MOVLW  02
0A1C:  MOVWF  xE6
0A1E:  RCALL  0988
....................     for(i=0;i<=3;++i) 
0A20:  CLRF   xCE
0A22:  MOVF   xCE,W
0A24:  SUBLW  03
0A26:  BNC   0A4C
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
0A28:  CLRF   03
0A2A:  MOVF   xCE,W
0A2C:  MOVFF  FF2,CF
0A30:  BCF    FF2.6
0A32:  BCF    FF2.7
0A34:  CALL   00A6
0A38:  BTFSC  xCF.6
0A3A:  BSF    FF2.6
0A3C:  BTFSC  xCF.7
0A3E:  BSF    FF2.7
0A40:  MOVWF  xCF
0A42:  CLRF   xE3
0A44:  MOVWF  xE4
0A46:  RCALL  09AE
0A48:  INCF   xCE,F
0A4A:  BRA    0A22
.................... } 
0A4C:  RETLW  00
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
*
1436:  MOVLW  01
1438:  SUBWF  xE1,W
143A:  ADDLW  FC
143C:  BC    145C
143E:  ADDLW  04
1440:  GOTO   146E
....................      case 1 : address=0x80;break; 
1444:  MOVLW  80
1446:  MOVWF  xE2
1448:  BRA    145C
....................      case 2 : address=0xc0;break; 
144A:  MOVLW  C0
144C:  MOVWF  xE2
144E:  BRA    145C
....................      case 3 : address=0x94;break; 
1450:  MOVLW  94
1452:  MOVWF  xE2
1454:  BRA    145C
....................      case 4 : address=0xd4;break; 
1456:  MOVLW  D4
1458:  MOVWF  xE2
145A:  BRA    145C
....................    } 
....................    address+=x-1; 
145C:  MOVLW  01
145E:  SUBWF  xE0,W
1460:  ADDWF  xE2,F
....................    lcd_send_byte(0,address); 
1462:  CLRF   xE3
1464:  MOVFF  E2,E4
1468:  CALL   09AE
.................... } 
146C:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
....................    if(c=='ñ') 
*
14A0:  MOVF   xDF,W
14A2:  SUBLW  F1
14A4:  BNZ   14AA
....................    { 
....................       c=238; 
14A6:  MOVLW  EE
14A8:  MOVWF  xDF
....................    } 
....................    if(c=='Ñ') 
14AA:  MOVF   xDF,W
14AC:  SUBLW  D1
14AE:  BNZ   14B4
....................    { 
....................       c=255; 
14B0:  MOVLW  FF
14B2:  MOVWF  xDF
....................    } 
....................     
....................    switch (c) { 
14B4:  MOVF   xDF,W
14B6:  XORLW  0C
14B8:  BZ    14C4
14BA:  XORLW  06
14BC:  BZ    14DC
14BE:  XORLW  02
14C0:  BZ    14EA
14C2:  BRA    14F6
....................      case '\f'   : lcd_send_byte(0,1); 
14C4:  CLRF   xE3
14C6:  MOVLW  01
14C8:  MOVWF  xE4
14CA:  CALL   09AE
....................                    lcdline=1; 
14CE:  MOVLW  01
14D0:  MOVWF  16
....................                    delay_ms(2); 
14D2:  MOVLW  02
14D4:  MOVWF  xE5
14D6:  CALL   0960
....................                                            break; 
14DA:  BRA    1504
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
14DC:  INCF   16,F
14DE:  MOVLW  01
14E0:  MOVWF  xE0
14E2:  MOVFF  16,E1
14E6:  RCALL  1436
14E8:  BRA    1504
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
14EA:  CLRF   xE3
14EC:  MOVLW  10
14EE:  MOVWF  xE4
14F0:  CALL   09AE
14F4:  BRA    1504
....................      default     : lcd_send_byte(1,c);     break; 
14F6:  MOVLW  01
14F8:  MOVWF  xE3
14FA:  MOVFF  DF,E4
14FE:  CALL   09AE
1502:  BRA    1504
....................    } 
.................... } 
1504:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   UP            !input(PIN_A5) 
.................... #define   DOWN          !input(PIN_E0) 
.................... #define   RIGHT         !input(PIN_E1) 
.................... #define   IZQU          !input(PIN_E2) 
.................... #define   VIDRIOUUP     !input(PIN_A1) 
.................... #define   VIDRIODN      !input(PIN_A2) 
....................  
.................... // Definición de otros puertos 
.................... #define   Luz_UV_on         output_bit(PIN_B3,0) 
.................... #define   Luz_UV_off        output_bit(PIN_B3,1) 
.................... #define   Luz_Blanca_on     output_bit(PIN_B4,0) 
.................... #define   Luz_Blanca_off    output_bit(PIN_B4,1) 
.................... #define   Motor_on          output_bit(PIN_C2,1) 
.................... #define   Motor_off         output_bit(PIN_C2,0) 
.................... #define   Motor2_on         output_bit(PIN_C1,1) 
.................... #define   Motor2_off        output_bit(PIN_C1,0) 
.................... #define   Buzzer_on         output_bit(PIN_C0,1) 
.................... #define   Buzzer_off        output_bit(PIN_C0,0) 
.................... #define   O1_on             output_bit(PIN_B6,1) 
.................... #define   O1_off            output_bit(PIN_B6,0) 
.................... #define   O2_on             output_bit(PIN_B7,1) 
.................... #define   O2_off            output_bit(PIN_B7,0) 
.................... #define   ON  1 
.................... #define   OFF 0 
....................  
.................... short estadouv=0,estadofl=0,estadomv=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,tiempo_cumplido=0,Lectura=0,flaguv=0,flagfl=0,estadobuzzer=0,estadoalarma=0,pulsoSubir=OFF,pulsoBajar=OFF; 
.................... int8 Menu=0, n_opcionH=6,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,segundos=0,minutos=0,horasL=0,horasH=0,G_l=0,G_h=0; 
.................... int8 tempo_minutos=0,tempo_segundos=0,tempo_minutos_pro=0,tempo_segundos_pro=0,r=0,q=0,i=0,unidad2=1,tiemporeset=0,guardaruv=0,motor=0,luz=0,velocidadInicial=10; 
.................... signed int8   paso=0; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... signed  int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 ActivaBuzzer=0,codigoSubir=0,codigoBajar=0,codigoDetener=0,Vel1=4; 
.................... int16 tiempos,horas=0,G16=0; 
.................... float PromPresion[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float V1=0.0,Presion=0.0,Saturacion=0.0,CaidaPresion=0.0; 
.................... float G=2; 
.................... short Cambio=ON,flagmv=0; 
....................  
.................... int16 pulsos=0,tup=0,tdown=0,tright=0,tleft=0,segundosTrabajo=0,horasTrabajo=0; 
.................... short Cruce=OFF; 
....................  
.................... int8 VelMotor=0; 
....................  
.................... int1 BITS[32]; 
.................... int16 Ta,Tb,TICK=0; 
.................... Int1 BIT_START, NUEVO_DATO; 
.................... int BYTE_IR[4]; 
.................... int8 BIT_BYTE(int1 D7, int1 D6, int1 D5, int1 D4, int1 D3, int1 D2, int1 D1, int1 D0); 
....................  
.................... #include <Funciones.h> 
.................... int8 BIT_BYTE(int1 D7, int1 D6, int1 D5, int1 D4, int1 D3, int1 D2, int1 D1, int1 D0); 
....................  
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {   
....................    if(x==1) 
*
1960:  DECFSZ xCF,W
1962:  BRA    1978
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Temporizador UV    ");} 
1964:  MOVLW  02
1966:  MOVWF  xE0
1968:  MOVFF  D0,E1
196C:  RCALL  1436
196E:  MOVLW  CA
1970:  MOVWF  FF6
1972:  MOVLW  00
1974:  MOVWF  FF7
1976:  RCALL  1506
....................    if(x==2) 
1978:  MOVF   xCF,W
197A:  SUBLW  02
197C:  BNZ   1992
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
197E:  MOVLW  02
1980:  MOVWF  xE0
1982:  MOVFF  D0,E1
1986:  RCALL  1436
1988:  MOVLW  DE
198A:  MOVWF  FF6
198C:  MOVLW  00
198E:  MOVWF  FF7
1990:  RCALL  1506
....................    if(x==3) 
1992:  MOVF   xCF,W
1994:  SUBLW  03
1996:  BNZ   19AC
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo Trabajo UV  ");} 
1998:  MOVLW  02
199A:  MOVWF  xE0
199C:  MOVFF  D0,E1
19A0:  RCALL  1436
19A2:  MOVLW  F2
19A4:  MOVWF  FF6
19A6:  MOVLW  00
19A8:  MOVWF  FF7
19AA:  RCALL  1506
....................    if(x==4) 
19AC:  MOVF   xCF,W
19AE:  SUBLW  04
19B0:  BNZ   19C6
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Punto Cero         ");} 
19B2:  MOVLW  02
19B4:  MOVWF  xE0
19B6:  MOVFF  D0,E1
19BA:  RCALL  1436
19BC:  MOVLW  06
19BE:  MOVWF  FF6
19C0:  MOVLW  01
19C2:  MOVWF  FF7
19C4:  RCALL  1506
....................     
....................    if(x==5) 
19C6:  MOVF   xCF,W
19C8:  SUBLW  05
19CA:  BNZ   19FC
....................    {if(estadoalarma==0) 
19CC:  BTFSC  18.4
19CE:  BRA    19E4
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma          OFF");} 
19D0:  MOVLW  02
19D2:  MOVWF  xE0
19D4:  MOVFF  D0,E1
19D8:  RCALL  1436
19DA:  MOVLW  1A
19DC:  MOVWF  FF6
19DE:  MOVLW  01
19E0:  MOVWF  FF7
19E2:  RCALL  1506
....................    if(estadoalarma==1) 
19E4:  BTFSS  18.4
19E6:  BRA    19FC
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma           ON");} 
19E8:  MOVLW  02
19EA:  MOVWF  xE0
19EC:  MOVFF  D0,E1
19F0:  RCALL  1436
19F2:  MOVLW  2E
19F4:  MOVWF  FF6
19F6:  MOVLW  01
19F8:  MOVWF  FF7
19FA:  RCALL  1506
....................    } 
....................     
....................    //if(x==6) 
....................    //{lcd_gotoxy(2,y);printf(lcd_putc,"Velocidad          ");} 
.................... } 
19FC:  RETLW  00
....................  
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
19FE:  RLCF   xDF,W
1A00:  MOVWF  00
1A02:  RLCF   00,F
1A04:  MOVLW  FC
1A06:  ANDWF  00,F
1A08:  MOVFF  00,01
1A0C:  MOVF   FC2,W
1A0E:  ANDLW  C3
1A10:  IORWF  00,W
1A12:  MOVWF  FC2
1A14:  MOVLW  0A
1A16:  MOVWF  xE5
1A18:  CALL   0960
1A1C:  BSF    FC2.1
1A1E:  BTFSC  FC2.1
1A20:  BRA    1A1E
1A22:  MOVFF  FC4,03
1A26:  MOVFF  FC3,E6
1A2A:  MOVFF  FC4,E7
1A2E:  CALL   0A80
1A32:  MOVFF  03,E3
1A36:  MOVFF  02,E2
1A3A:  MOVFF  01,E1
1A3E:  MOVFF  00,E0
1A42:  MOVFF  E0,00
1A46:  MOVFF  E1,01
1A4A:  MOVFF  E2,02
1A4E:  MOVFF  E3,03
.................... } 
1A52:  RETLW  00
....................  
.................... float Leer_Sensor_Presion(int media){ 
*
1F0A:  CLRF   xD2
1F0C:  CLRF   xD1
1F0E:  CLRF   xD0
1F10:  CLRF   xCF
1F12:  CLRF   xD6
1F14:  CLRF   xD5
1F16:  CLRF   xD4
1F18:  CLRF   xD3
1F1A:  CLRF   xDA
1F1C:  CLRF   xD9
1F1E:  CLRF   xD8
1F20:  CLRF   xD7
1F22:  CLRF   xDE
1F24:  CLRF   xDD
1F26:  CLRF   xDC
1F28:  CLRF   xDB
....................    float promediopresion=0.0; 
....................    float VG=0.0,VS=0.0,G2=0.0; 
....................     
....................    V1=sensores(0);  
1F2A:  CLRF   xDF
1F2C:  RCALL  19FE
1F2E:  MOVFF  03,9F
1F32:  MOVFF  02,9E
1F36:  MOVFF  01,9D
1F3A:  MOVFF  00,9C
....................    //V1 = (x_uno*5.0)/1023.0;   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
....................    Presion=(V1/G)-1.0;// Presion=(Voltaje/Ganancia)-1 
1F3E:  MOVFF  9F,E5
1F42:  MOVFF  9E,E4
1F46:  MOVFF  9D,E3
1F4A:  MOVFF  9C,E2
1F4E:  MOVFF  AF,E9
1F52:  MOVFF  AE,E8
1F56:  MOVFF  AD,E7
1F5A:  MOVFF  AC,E6
1F5E:  RCALL  1A54
1F60:  MOVFF  00,DF
1F64:  MOVFF  01,E0
1F68:  MOVFF  02,E1
1F6C:  MOVFF  03,E2
1F70:  BSF    FD8.1
1F72:  MOVFF  03,E9
1F76:  MOVFF  02,E8
1F7A:  MOVFF  01,E7
1F7E:  MOVFF  00,E6
1F82:  CLRF   xED
1F84:  CLRF   xEC
1F86:  CLRF   xEB
1F88:  MOVLW  7F
1F8A:  MOVWF  xEA
1F8C:  RCALL  1BAE
1F8E:  MOVFF  03,A3
1F92:  MOVFF  02,A2
1F96:  MOVFF  01,A1
1F9A:  MOVFF  00,A0
....................    //VS = (V1*5.0)/1023.0;   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
....................    //G2=G; 
....................    //VG = (G2*5.0)/1023.0; 
....................    //Presion=(VS-VG);// Presion=(Voltaje/Ganancia)-1 
....................     
....................    if(Presion>0) 
1F9E:  CLRF   xE5
1FA0:  CLRF   xE4
1FA2:  CLRF   xE3
1FA4:  CLRF   xE2
1FA6:  MOVFF  A3,E9
1FAA:  MOVFF  A2,E8
1FAE:  MOVFF  A1,E7
1FB2:  MOVFF  A0,E6
1FB6:  CALL   0E54
1FBA:  BNC   1FC4
....................       Presion=0.0; 
1FBC:  CLRF   xA3
1FBE:  CLRF   xA2
1FC0:  CLRF   xA1
1FC2:  CLRF   xA0
....................    
....................    if(Presion<0.0){ 
1FC4:  MOVFF  A3,E5
1FC8:  MOVFF  A2,E4
1FCC:  MOVFF  A1,E3
1FD0:  MOVFF  A0,E2
1FD4:  CLRF   xE9
1FD6:  CLRF   xE8
1FD8:  CLRF   xE7
1FDA:  CLRF   xE6
1FDC:  CALL   0E54
1FE0:  BNC   2010
....................       Presion=Presion*-1; 
1FE2:  MOVFF  A3,E5
1FE6:  MOVFF  A2,E4
1FEA:  MOVFF  A1,E3
1FEE:  MOVFF  A0,E2
1FF2:  CLRF   xE9
1FF4:  CLRF   xE8
1FF6:  MOVLW  80
1FF8:  MOVWF  xE7
1FFA:  MOVLW  7F
1FFC:  MOVWF  xE6
1FFE:  RCALL  1E18
2000:  MOVFF  03,A3
2004:  MOVFF  02,A2
2008:  MOVFF  01,A1
200C:  MOVFF  00,A0
....................    } 
....................  
....................    if(r>media-1) 
2010:  MOVLW  01
2012:  SUBWF  xCE,W
2014:  SUBWF  2C,W
2016:  BZ    201C
2018:  BNC   201C
....................    {r=0;} 
201A:  CLRF   2C
....................    PromPresion[r]=Presion;r++; 
201C:  MOVF   2C,W
201E:  MULLW  04
2020:  MOVF   FF3,W
2022:  CLRF   03
2024:  ADDLW  4C
2026:  MOVWF  FE9
2028:  MOVLW  00
202A:  ADDWFC 03,W
202C:  MOVWF  FEA
202E:  MOVFF  A0,FEF
2032:  MOVFF  A1,FEC
2036:  MOVFF  A2,FEC
203A:  MOVFF  A3,FEC
203E:  INCF   2C,F
....................           
....................    for(q=0;q<=(media-1);q++) 
2040:  CLRF   2D
2042:  MOVLW  01
2044:  SUBWF  xCE,W
2046:  SUBWF  2D,W
2048:  BZ    204C
204A:  BC    20B6
....................    { 
....................       promediopresion+=PromPresion[q]; 
204C:  MOVF   2D,W
204E:  MULLW  04
2050:  MOVF   FF3,W
2052:  CLRF   03
2054:  ADDLW  4C
2056:  MOVWF  FE9
2058:  MOVLW  00
205A:  ADDWFC 03,W
205C:  MOVWF  FEA
205E:  MOVFF  FEF,00
2062:  MOVFF  FEC,01
2066:  MOVFF  FEC,02
206A:  MOVFF  FEC,03
206E:  MOVFF  FEA,E0
2072:  MOVFF  FE9,DF
2076:  BCF    FD8.1
2078:  MOVFF  D2,E9
207C:  MOVFF  D1,E8
2080:  MOVFF  D0,E7
2084:  MOVFF  CF,E6
2088:  MOVFF  03,ED
208C:  MOVFF  02,EC
2090:  MOVFF  01,EB
2094:  MOVFF  00,EA
2098:  RCALL  1BAE
209A:  MOVFF  E0,FEA
209E:  MOVFF  DF,FE9
20A2:  MOVFF  03,D2
20A6:  MOVFF  02,D1
20AA:  MOVFF  01,D0
20AE:  MOVFF  00,CF
....................    }  
20B2:  INCF   2D,F
20B4:  BRA    2042
....................    promediopresion=promediopresion/media;    
20B6:  CLRF   xE7
20B8:  MOVFF  CE,E6
20BC:  CALL   0A80
20C0:  MOVFF  D2,E5
20C4:  MOVFF  D1,E4
20C8:  MOVFF  D0,E3
20CC:  MOVFF  CF,E2
20D0:  MOVFF  03,E9
20D4:  MOVFF  02,E8
20D8:  MOVFF  01,E7
20DC:  MOVFF  00,E6
20E0:  RCALL  1A54
20E2:  MOVFF  03,D2
20E6:  MOVFF  02,D1
20EA:  MOVFF  01,D0
20EE:  MOVFF  00,CF
....................     
....................    return promediopresion; 
20F2:  MOVFF  CF,00
20F6:  MOVFF  D0,01
20FA:  MOVFF  D1,02
20FE:  MOVFF  D2,03
.................... } 
2102:  RETLW  00
....................  
.................... void EliminaRuido(void){ 
....................    /*if(Menu==50){ 
....................       dato[0]=lcd_getc(1,2); 
....................       dato[1]=lcd_getc(2,2); 
....................       dato[2]=lcd_getc(3,2); 
....................       if(dato[0]!=70 || dato[1]!=105 || dato[2]!=108){ 
....................          lcd_init();delay_ms(200);lcd_init(); 
....................          Cambio=ON; 
....................       } 
....................    }*/ 
.................... } 
*
0004:  RETLW  00
....................  
.................... void ConfigInterrupciones (void){ 
....................    delay_ms(200); 
*
0A4E:  MOVLW  C8
0A50:  MOVWF  xE5
0A52:  RCALL  0960
....................    lcd_init(); 
0A54:  RCALL  09F0
....................    set_tris_a(0XFF); 
0A56:  MOVLW  FF
0A58:  MOVWF  F92
....................    set_tris_e(0XFF); 
0A5A:  MOVWF  F96
....................    enable_interrupts(global); 
0A5C:  MOVLW  C0
0A5E:  IORWF  FF2,F
....................    //enable_interrupts(INT_EXT_L2H); 
....................    //enable_interrupts(INT_EXT1_H2L); 
....................    //setup_timer_0(RTCC_8_BIT|RTCC_DIV_256); 
....................    //enable_interrupts(INT_TIMER0); 
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
0A60:  MOVLW  85
0A62:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
0A64:  BSF    F9D.0
....................    //setup_timer_2(T2_DIV_BY_16,0xfd,1); 
....................    //enable_interrupts(INT_TIMER2); 
....................    setup_adc_ports(AN0); 
0A66:  MOVF   FC1,W
0A68:  ANDLW  C0
0A6A:  IORLW  0E
0A6C:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
0A6E:  BCF    FC0.0
0A70:  BSF    FC0.1
0A72:  BCF    FC0.2
0A74:  BSF    FC0.7
0A76:  BSF    FC2.0
....................    enable_interrupts(global); 
0A78:  MOVLW  C0
0A7A:  IORWF  FF2,F
.................... } 
0A7C:  GOTO   287C (RETURN)
....................  
.................... void MensajeBienvenida (void){ 
....................    lcd_gotoxy(1,1); 
*
1526:  MOVLW  01
1528:  MOVWF  xE0
152A:  MOVWF  xE1
152C:  RCALL  1436
....................    printf(lcd_putc,"CABINA FLUJO LAMINAR"); 
152E:  MOVLW  42
1530:  MOVWF  FF6
1532:  MOVLW  01
1534:  MOVWF  FF7
1536:  RCALL  1506
....................    lcd_gotoxy(1,2); 
1538:  MOVLW  01
153A:  MOVWF  xE0
153C:  MOVLW  02
153E:  MOVWF  xE1
1540:  RCALL  1436
....................    printf(lcd_putc,"     HORIZONTAL     "); 
1542:  MOVLW  58
1544:  MOVWF  FF6
1546:  MOVLW  01
1548:  MOVWF  FF7
154A:  RCALL  1506
....................    lcd_gotoxy(1,3); 
154C:  MOVLW  01
154E:  MOVWF  xE0
1550:  MOVLW  03
1552:  MOVWF  xE1
1554:  RCALL  1436
....................    printf(lcd_putc,"    JP  INGLOBAL    "); 
1556:  MOVLW  6E
1558:  MOVWF  FF6
155A:  MOVLW  01
155C:  MOVWF  FF7
155E:  RCALL  1506
....................    lcd_gotoxy(1,4); 
1560:  MOVLW  01
1562:  MOVWF  xE0
1564:  MOVLW  04
1566:  MOVWF  xE1
1568:  RCALL  1436
....................    printf(lcd_putc,"     REF:JPCH48     "); 
156A:  MOVLW  84
156C:  MOVWF  FF6
156E:  MOVLW  01
1570:  MOVWF  FF7
1572:  RCALL  1506
....................    delay_ms(2000); 
1574:  MOVLW  08
1576:  MOVWF  xCE
1578:  MOVLW  FA
157A:  MOVWF  xE5
157C:  CALL   0960
1580:  DECFSZ xCE,F
1582:  BRA    1578
....................    printf(lcd_putc,"\f"); 
1584:  MOVLW  0C
1586:  MOVWF  xDF
1588:  RCALL  14A0
.................... } 
158A:  GOTO   288E (RETURN)
....................  
.................... void LeeEEPROM (void){ 
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0); 
*
0AB6:  MOVFF  FF2,CE
0ABA:  BCF    FF2.6
0ABC:  BCF    FF2.7
0ABE:  CLRF   FA9
0AC0:  BCF    FA6.6
0AC2:  BCF    FA6.7
0AC4:  BSF    FA6.0
0AC6:  MOVF   FA8,W
0AC8:  BTFSC  xCE.6
0ACA:  BSF    FF2.6
0ACC:  BTFSC  xCE.7
0ACE:  BSF    FF2.7
0AD0:  MOVWF  3D
....................    delay_ms(20);  
0AD2:  MOVLW  14
0AD4:  MOVWF  xE5
0AD6:  RCALL  0960
....................    contrasena[1]=read_eeprom(1); 
0AD8:  MOVFF  FF2,CE
0ADC:  BCF    FF2.6
0ADE:  BCF    FF2.7
0AE0:  MOVLW  01
0AE2:  MOVWF  FA9
0AE4:  BCF    FA6.6
0AE6:  BCF    FA6.7
0AE8:  BSF    FA6.0
0AEA:  MOVF   FA8,W
0AEC:  BTFSC  xCE.6
0AEE:  BSF    FF2.6
0AF0:  BTFSC  xCE.7
0AF2:  BSF    FF2.7
0AF4:  MOVWF  3E
....................    delay_ms(20); 
0AF6:  MOVLW  14
0AF8:  MOVWF  xE5
0AFA:  RCALL  0960
....................    contrasena[2]=read_eeprom(2); 
0AFC:  MOVFF  FF2,CE
0B00:  BCF    FF2.6
0B02:  BCF    FF2.7
0B04:  MOVLW  02
0B06:  MOVWF  FA9
0B08:  BCF    FA6.6
0B0A:  BCF    FA6.7
0B0C:  BSF    FA6.0
0B0E:  MOVF   FA8,W
0B10:  BTFSC  xCE.6
0B12:  BSF    FF2.6
0B14:  BTFSC  xCE.7
0B16:  BSF    FF2.7
0B18:  MOVWF  3F
....................    delay_ms(20);  
0B1A:  MOVLW  14
0B1C:  MOVWF  xE5
0B1E:  RCALL  0960
....................    contrasena[3]=read_eeprom(3); 
0B20:  MOVFF  FF2,CE
0B24:  BCF    FF2.6
0B26:  BCF    FF2.7
0B28:  MOVLW  03
0B2A:  MOVWF  FA9
0B2C:  BCF    FA6.6
0B2E:  BCF    FA6.7
0B30:  BSF    FA6.0
0B32:  MOVF   FA8,W
0B34:  BTFSC  xCE.6
0B36:  BSF    FF2.6
0B38:  BTFSC  xCE.7
0B3A:  BSF    FF2.7
0B3C:  MOVWF  40
....................    delay_ms(20); 
0B3E:  MOVLW  14
0B40:  MOVWF  xE5
0B42:  RCALL  0960
....................    estadoalarma=read_eeprom(4); 
0B44:  MOVFF  FF2,CE
0B48:  BCF    FF2.6
0B4A:  BCF    FF2.7
0B4C:  MOVLW  04
0B4E:  MOVWF  FA9
0B50:  BCF    FA6.6
0B52:  BCF    FA6.7
0B54:  BSF    FA6.0
0B56:  MOVF   FA8,W
0B58:  BTFSC  xCE.6
0B5A:  BSF    FF2.6
0B5C:  BTFSC  xCE.7
0B5E:  BSF    FF2.7
0B60:  MOVWF  01
0B62:  BCF    18.4
0B64:  BTFSC  01.0
0B66:  BSF    18.4
....................    delay_ms(20); 
0B68:  MOVLW  14
0B6A:  MOVWF  xE5
0B6C:  RCALL  0960
....................    tempo_minutos=read_eeprom(5); 
0B6E:  MOVFF  FF2,CE
0B72:  BCF    FF2.6
0B74:  BCF    FF2.7
0B76:  MOVLW  05
0B78:  MOVWF  FA9
0B7A:  BCF    FA6.6
0B7C:  BCF    FA6.7
0B7E:  BSF    FA6.0
0B80:  MOVF   FA8,W
0B82:  BTFSC  xCE.6
0B84:  BSF    FF2.6
0B86:  BTFSC  xCE.7
0B88:  BSF    FF2.7
0B8A:  MOVWF  28
....................    delay_ms(20); 
0B8C:  MOVLW  14
0B8E:  MOVWF  xE5
0B90:  RCALL  0960
....................    tempo_segundos=read_eeprom(6); 
0B92:  MOVFF  FF2,CE
0B96:  BCF    FF2.6
0B98:  BCF    FF2.7
0B9A:  MOVLW  06
0B9C:  MOVWF  FA9
0B9E:  BCF    FA6.6
0BA0:  BCF    FA6.7
0BA2:  BSF    FA6.0
0BA4:  MOVF   FA8,W
0BA6:  BTFSC  xCE.6
0BA8:  BSF    FF2.6
0BAA:  BTFSC  xCE.7
0BAC:  BSF    FF2.7
0BAE:  MOVWF  29
....................    delay_ms(20); 
0BB0:  MOVLW  14
0BB2:  MOVWF  xE5
0BB4:  RCALL  0960
....................    segundos=read_eeprom(7); 
0BB6:  MOVFF  FF2,CE
0BBA:  BCF    FF2.6
0BBC:  BCF    FF2.7
0BBE:  MOVLW  07
0BC0:  MOVWF  FA9
0BC2:  BCF    FA6.6
0BC4:  BCF    FA6.7
0BC6:  BSF    FA6.0
0BC8:  MOVF   FA8,W
0BCA:  BTFSC  xCE.6
0BCC:  BSF    FF2.6
0BCE:  BTFSC  xCE.7
0BD0:  BSF    FF2.7
0BD2:  MOVWF  22
....................    delay_ms(20); 
0BD4:  MOVLW  14
0BD6:  MOVWF  xE5
0BD8:  RCALL  0960
....................    minutos=read_eeprom(8); 
0BDA:  MOVFF  FF2,CE
0BDE:  BCF    FF2.6
0BE0:  BCF    FF2.7
0BE2:  MOVLW  08
0BE4:  MOVWF  FA9
0BE6:  BCF    FA6.6
0BE8:  BCF    FA6.7
0BEA:  BSF    FA6.0
0BEC:  MOVF   FA8,W
0BEE:  BTFSC  xCE.6
0BF0:  BSF    FF2.6
0BF2:  BTFSC  xCE.7
0BF4:  BSF    FF2.7
0BF6:  MOVWF  23
....................    delay_ms(20); 
0BF8:  MOVLW  14
0BFA:  MOVWF  xE5
0BFC:  RCALL  0960
....................    horasL=read_eeprom(9); 
0BFE:  MOVFF  FF2,CE
0C02:  BCF    FF2.6
0C04:  BCF    FF2.7
0C06:  MOVLW  09
0C08:  MOVWF  FA9
0C0A:  BCF    FA6.6
0C0C:  BCF    FA6.7
0C0E:  BSF    FA6.0
0C10:  MOVF   FA8,W
0C12:  BTFSC  xCE.6
0C14:  BSF    FF2.6
0C16:  BTFSC  xCE.7
0C18:  BSF    FF2.7
0C1A:  MOVWF  24
....................    delay_ms(20); 
0C1C:  MOVLW  14
0C1E:  MOVWF  xE5
0C20:  RCALL  0960
....................    horasH=read_eeprom(10); 
0C22:  MOVFF  FF2,CE
0C26:  BCF    FF2.6
0C28:  BCF    FF2.7
0C2A:  MOVLW  0A
0C2C:  MOVWF  FA9
0C2E:  BCF    FA6.6
0C30:  BCF    FA6.7
0C32:  BSF    FA6.0
0C34:  MOVF   FA8,W
0C36:  BTFSC  xCE.6
0C38:  BSF    FF2.6
0C3A:  BTFSC  xCE.7
0C3C:  BSF    FF2.7
0C3E:  MOVWF  25
....................    delay_ms(20); 
0C40:  MOVLW  14
0C42:  MOVWF  xE5
0C44:  RCALL  0960
....................    G_l=read_eeprom(11); 
0C46:  MOVFF  FF2,CE
0C4A:  BCF    FF2.6
0C4C:  BCF    FF2.7
0C4E:  MOVLW  0B
0C50:  MOVWF  FA9
0C52:  BCF    FA6.6
0C54:  BCF    FA6.7
0C56:  BSF    FA6.0
0C58:  MOVF   FA8,W
0C5A:  BTFSC  xCE.6
0C5C:  BSF    FF2.6
0C5E:  BTFSC  xCE.7
0C60:  BSF    FF2.7
0C62:  MOVWF  26
....................    delay_ms(20); 
0C64:  MOVLW  14
0C66:  MOVWF  xE5
0C68:  RCALL  0960
....................    G_h=read_eeprom(12); 
0C6A:  MOVFF  FF2,CE
0C6E:  BCF    FF2.6
0C70:  BCF    FF2.7
0C72:  MOVLW  0C
0C74:  MOVWF  FA9
0C76:  BCF    FA6.6
0C78:  BCF    FA6.7
0C7A:  BSF    FA6.0
0C7C:  MOVF   FA8,W
0C7E:  BTFSC  xCE.6
0C80:  BSF    FF2.6
0C82:  BTFSC  xCE.7
0C84:  BSF    FF2.7
0C86:  MOVWF  27
....................    delay_ms(20); 
0C88:  MOVLW  14
0C8A:  MOVWF  xE5
0C8C:  RCALL  0960
....................    Vel1=read_eeprom(13); 
0C8E:  MOVFF  FF2,CE
0C92:  BCF    FF2.6
0C94:  BCF    FF2.7
0C96:  MOVLW  0D
0C98:  MOVWF  FA9
0C9A:  BCF    FA6.6
0C9C:  BCF    FA6.7
0C9E:  BSF    FA6.0
0CA0:  MOVF   FA8,W
0CA2:  BTFSC  xCE.6
0CA4:  BSF    FF2.6
0CA6:  BTFSC  xCE.7
0CA8:  BSF    FF2.7
0CAA:  MOVWF  45
....................    delay_ms(20); 
0CAC:  MOVLW  14
0CAE:  MOVWF  xE5
0CB0:  RCALL  0960
....................    codigoSubir=read_eeprom(15); 
0CB2:  MOVFF  FF2,CE
0CB6:  BCF    FF2.6
0CB8:  BCF    FF2.7
0CBA:  MOVLW  0F
0CBC:  MOVWF  FA9
0CBE:  BCF    FA6.6
0CC0:  BCF    FA6.7
0CC2:  BSF    FA6.0
0CC4:  MOVF   FA8,W
0CC6:  BTFSC  xCE.6
0CC8:  BSF    FF2.6
0CCA:  BTFSC  xCE.7
0CCC:  BSF    FF2.7
0CCE:  MOVWF  42
....................    delay_ms(20); 
0CD0:  MOVLW  14
0CD2:  MOVWF  xE5
0CD4:  RCALL  0960
....................    codigoBajar=read_eeprom(16); 
0CD6:  MOVFF  FF2,CE
0CDA:  BCF    FF2.6
0CDC:  BCF    FF2.7
0CDE:  MOVLW  10
0CE0:  MOVWF  FA9
0CE2:  BCF    FA6.6
0CE4:  BCF    FA6.7
0CE6:  BSF    FA6.0
0CE8:  MOVF   FA8,W
0CEA:  BTFSC  xCE.6
0CEC:  BSF    FF2.6
0CEE:  BTFSC  xCE.7
0CF0:  BSF    FF2.7
0CF2:  MOVWF  43
....................    delay_ms(20); 
0CF4:  MOVLW  14
0CF6:  MOVWF  xE5
0CF8:  RCALL  0960
....................    codigoDetener=read_eeprom(17); 
0CFA:  MOVFF  FF2,CE
0CFE:  BCF    FF2.6
0D00:  BCF    FF2.7
0D02:  MOVLW  11
0D04:  MOVWF  FA9
0D06:  BCF    FA6.6
0D08:  BCF    FA6.7
0D0A:  BSF    FA6.0
0D0C:  MOVF   FA8,W
0D0E:  BTFSC  xCE.6
0D10:  BSF    FF2.6
0D12:  BTFSC  xCE.7
0D14:  BSF    FF2.7
0D16:  MOVWF  44
....................    delay_ms(20); 
0D18:  MOVLW  14
0D1A:  MOVWF  xE5
0D1C:  RCALL  0960
....................    G16=make16(G_h,G_l); 
0D1E:  MOVFF  27,4B
0D22:  MOVFF  26,4A
....................    G=G16; 
0D26:  MOVFF  4B,E7
0D2A:  MOVFF  4A,E6
0D2E:  RCALL  0A80
0D30:  MOVFF  03,AF
0D34:  MOVFF  02,AE
0D38:  MOVFF  01,AD
0D3C:  MOVFF  00,AC
....................    horasTrabajo=make16(read_eeprom(19),read_eeprom(18)); 
0D40:  MOVFF  FF2,CE
0D44:  BCF    FF2.6
0D46:  BCF    FF2.7
0D48:  MOVLW  13
0D4A:  MOVWF  FA9
0D4C:  BCF    FA6.6
0D4E:  BCF    FA6.7
0D50:  BSF    FA6.0
0D52:  MOVF   FA8,W
0D54:  BTFSC  xCE.6
0D56:  BSF    FF2.6
0D58:  BTFSC  xCE.7
0D5A:  BSF    FF2.7
0D5C:  MOVWF  xCF
0D5E:  MOVFF  FF2,D0
0D62:  BCF    FF2.6
0D64:  BCF    FF2.7
0D66:  MOVLW  12
0D68:  MOVWF  FA9
0D6A:  BCF    FA6.6
0D6C:  BCF    FA6.7
0D6E:  BSF    FA6.0
0D70:  MOVF   FA8,W
0D72:  BTFSC  xD0.6
0D74:  BSF    FF2.6
0D76:  BTFSC  xD0.7
0D78:  BSF    FF2.7
0D7A:  MOVWF  xD1
0D7C:  MOVFF  CF,BE
0D80:  MOVFF  D1,BD
....................    delay_ms(20); 
0D84:  MOVLW  14
0D86:  MOVWF  xE5
0D88:  RCALL  0960
....................    segundosTrabajo=make16(read_eeprom(21),read_eeprom(20)); 
0D8A:  MOVFF  FF2,CE
0D8E:  BCF    FF2.6
0D90:  BCF    FF2.7
0D92:  MOVLW  15
0D94:  MOVWF  FA9
0D96:  BCF    FA6.6
0D98:  BCF    FA6.7
0D9A:  BSF    FA6.0
0D9C:  MOVF   FA8,W
0D9E:  BTFSC  xCE.6
0DA0:  BSF    FF2.6
0DA2:  BTFSC  xCE.7
0DA4:  BSF    FF2.7
0DA6:  MOVWF  xCF
0DA8:  MOVFF  FF2,D0
0DAC:  BCF    FF2.6
0DAE:  BCF    FF2.7
0DB0:  MOVLW  14
0DB2:  MOVWF  FA9
0DB4:  BCF    FA6.6
0DB6:  BCF    FA6.7
0DB8:  BSF    FA6.0
0DBA:  MOVF   FA8,W
0DBC:  BTFSC  xD0.6
0DBE:  BSF    FF2.6
0DC0:  BTFSC  xD0.7
0DC2:  BSF    FF2.7
0DC4:  MOVWF  xD1
0DC6:  MOVFF  CF,BC
0DCA:  MOVFF  D1,BB
....................    delay_ms(20); 
0DCE:  MOVLW  14
0DD0:  MOVWF  xE5
0DD2:  RCALL  0960
....................    motor=read_eeprom(22); 
0DD4:  MOVFF  FF2,CE
0DD8:  BCF    FF2.6
0DDA:  BCF    FF2.7
0DDC:  MOVLW  16
0DDE:  MOVWF  FA9
0DE0:  BCF    FA6.6
0DE2:  BCF    FA6.7
0DE4:  BSF    FA6.0
0DE6:  MOVF   FA8,W
0DE8:  BTFSC  xCE.6
0DEA:  BSF    FF2.6
0DEC:  BTFSC  xCE.7
0DEE:  BSF    FF2.7
0DF0:  MOVWF  32
....................    delay_ms(20); 
0DF2:  MOVLW  14
0DF4:  MOVWF  xE5
0DF6:  RCALL  0960
....................    luz=read_eeprom(23); 
0DF8:  MOVFF  FF2,CE
0DFC:  BCF    FF2.6
0DFE:  BCF    FF2.7
0E00:  MOVLW  17
0E02:  MOVWF  FA9
0E04:  BCF    FA6.6
0E06:  BCF    FA6.7
0E08:  BSF    FA6.0
0E0A:  MOVF   FA8,W
0E0C:  BTFSC  xCE.6
0E0E:  BSF    FF2.6
0E10:  BTFSC  xCE.7
0E12:  BSF    FF2.7
0E14:  MOVWF  33
....................    delay_ms(20); 
0E16:  MOVLW  14
0E18:  MOVWF  xE5
0E1A:  RCALL  0960
....................    velocidadInicial=read_eeprom(24); 
0E1C:  MOVFF  FF2,CE
0E20:  BCF    FF2.6
0E22:  BCF    FF2.7
0E24:  MOVLW  18
0E26:  MOVWF  FA9
0E28:  BCF    FA6.6
0E2A:  BCF    FA6.7
0E2C:  BSF    FA6.0
0E2E:  MOVF   FA8,W
0E30:  BTFSC  xCE.6
0E32:  BSF    FF2.6
0E34:  BTFSC  xCE.7
0E36:  BSF    FF2.7
0E38:  MOVWF  34
....................    delay_ms(20); 
0E3A:  MOVLW  14
0E3C:  MOVWF  xE5
0E3E:  RCALL  0960
....................    horas=make16(horasH,horasL); 
0E40:  MOVFF  25,49
0E44:  MOVFF  24,48
....................    tempo_minutos_pro=tempo_minutos;tempo_segundos_pro=tempo_segundos; 
0E48:  MOVFF  28,2A
0E4C:  MOVFF  29,2B
.................... } 
0E50:  GOTO   2880 (RETURN)
....................  
.................... void LimitaValores(void){ 
....................     
....................    if(Contrasena[0]>9 || Contrasena[0]<0){ 
*
0ECA:  BTFSC  3D.7
0ECC:  BRA    0ED4
0ECE:  MOVF   3D,W
0ED0:  SUBLW  09
0ED2:  BNC   0EDA
0ED4:  BTFSC  3D.7
0ED6:  BRA    0EDA
0ED8:  BRA    0F0C
....................       Contrasena[0]=0;write_eeprom(0,0);delay_ms(20); 
0EDA:  CLRF   3D
0EDC:  CLRF   FA9
0EDE:  CLRF   FA8
0EE0:  BCF    FA6.6
0EE2:  BCF    FA6.7
0EE4:  BSF    FA6.2
0EE6:  MOVF   FF2,W
0EE8:  MOVWF  00
0EEA:  BCF    FF2.6
0EEC:  BCF    FF2.7
0EEE:  MOVLB  F
0EF0:  MOVLW  55
0EF2:  MOVWF  FA7
0EF4:  MOVLW  AA
0EF6:  MOVWF  FA7
0EF8:  BSF    FA6.1
0EFA:  BTFSC  FA6.1
0EFC:  BRA    0EFA
0EFE:  BCF    FA6.2
0F00:  MOVF   00,W
0F02:  IORWF  FF2,F
0F04:  MOVLW  14
0F06:  MOVLB  0
0F08:  MOVWF  xE5
0F0A:  RCALL  0960
....................    } 
....................    if(Contrasena[1]>9 || Contrasena[1]<0){ 
0F0C:  BTFSC  3E.7
0F0E:  BRA    0F16
0F10:  MOVF   3E,W
0F12:  SUBLW  09
0F14:  BNC   0F1C
0F16:  BTFSC  3E.7
0F18:  BRA    0F1C
0F1A:  BRA    0F50
....................       Contrasena[1]=0;write_eeprom(1,0);delay_ms(20); 
0F1C:  CLRF   3E
0F1E:  MOVLW  01
0F20:  MOVWF  FA9
0F22:  CLRF   FA8
0F24:  BCF    FA6.6
0F26:  BCF    FA6.7
0F28:  BSF    FA6.2
0F2A:  MOVF   FF2,W
0F2C:  MOVWF  00
0F2E:  BCF    FF2.6
0F30:  BCF    FF2.7
0F32:  MOVLB  F
0F34:  MOVLW  55
0F36:  MOVWF  FA7
0F38:  MOVLW  AA
0F3A:  MOVWF  FA7
0F3C:  BSF    FA6.1
0F3E:  BTFSC  FA6.1
0F40:  BRA    0F3E
0F42:  BCF    FA6.2
0F44:  MOVF   00,W
0F46:  IORWF  FF2,F
0F48:  MOVLW  14
0F4A:  MOVLB  0
0F4C:  MOVWF  xE5
0F4E:  RCALL  0960
....................    } 
....................    if(Contrasena[2]>9 || Contrasena[2]<0){ 
0F50:  BTFSC  3F.7
0F52:  BRA    0F5A
0F54:  MOVF   3F,W
0F56:  SUBLW  09
0F58:  BNC   0F60
0F5A:  BTFSC  3F.7
0F5C:  BRA    0F60
0F5E:  BRA    0F94
....................       Contrasena[2]=0;write_eeprom(2,0);delay_ms(20); 
0F60:  CLRF   3F
0F62:  MOVLW  02
0F64:  MOVWF  FA9
0F66:  CLRF   FA8
0F68:  BCF    FA6.6
0F6A:  BCF    FA6.7
0F6C:  BSF    FA6.2
0F6E:  MOVF   FF2,W
0F70:  MOVWF  00
0F72:  BCF    FF2.6
0F74:  BCF    FF2.7
0F76:  MOVLB  F
0F78:  MOVLW  55
0F7A:  MOVWF  FA7
0F7C:  MOVLW  AA
0F7E:  MOVWF  FA7
0F80:  BSF    FA6.1
0F82:  BTFSC  FA6.1
0F84:  BRA    0F82
0F86:  BCF    FA6.2
0F88:  MOVF   00,W
0F8A:  IORWF  FF2,F
0F8C:  MOVLW  14
0F8E:  MOVLB  0
0F90:  MOVWF  xE5
0F92:  RCALL  0960
....................    } 
....................    if(Contrasena[3]>9 || Contrasena[3]<0){ 
0F94:  BTFSC  40.7
0F96:  BRA    0F9E
0F98:  MOVF   40,W
0F9A:  SUBLW  09
0F9C:  BNC   0FA4
0F9E:  BTFSC  40.7
0FA0:  BRA    0FA4
0FA2:  BRA    0FD8
....................       Contrasena[3]=0;write_eeprom(3,0);delay_ms(20); 
0FA4:  CLRF   40
0FA6:  MOVLW  03
0FA8:  MOVWF  FA9
0FAA:  CLRF   FA8
0FAC:  BCF    FA6.6
0FAE:  BCF    FA6.7
0FB0:  BSF    FA6.2
0FB2:  MOVF   FF2,W
0FB4:  MOVWF  00
0FB6:  BCF    FF2.6
0FB8:  BCF    FF2.7
0FBA:  MOVLB  F
0FBC:  MOVLW  55
0FBE:  MOVWF  FA7
0FC0:  MOVLW  AA
0FC2:  MOVWF  FA7
0FC4:  BSF    FA6.1
0FC6:  BTFSC  FA6.1
0FC8:  BRA    0FC6
0FCA:  BCF    FA6.2
0FCC:  MOVF   00,W
0FCE:  IORWF  FF2,F
0FD0:  MOVLW  14
0FD2:  MOVLB  0
0FD4:  MOVWF  xE5
0FD6:  RCALL  0960
....................    } 
....................    if(estadoalarma>1){ 
0FD8:  MOVLW  00
0FDA:  BTFSC  18.4
0FDC:  MOVLW  01
0FDE:  SUBLW  01
0FE0:  BC    1018
....................       estadoalarma=1;write_eeprom(4,1);delay_ms(20); 
0FE2:  BSF    18.4
0FE4:  MOVLW  04
0FE6:  MOVWF  FA9
0FE8:  MOVLW  01
0FEA:  MOVWF  FA8
0FEC:  BCF    FA6.6
0FEE:  BCF    FA6.7
0FF0:  BSF    FA6.2
0FF2:  MOVF   FF2,W
0FF4:  MOVWF  00
0FF6:  BCF    FF2.6
0FF8:  BCF    FF2.7
0FFA:  MOVLB  F
0FFC:  MOVLW  55
0FFE:  MOVWF  FA7
1000:  MOVLW  AA
1002:  MOVWF  FA7
1004:  BSF    FA6.1
1006:  BTFSC  FA6.1
1008:  BRA    1006
100A:  BCF    FA6.2
100C:  MOVF   00,W
100E:  IORWF  FF2,F
1010:  MOVLW  14
1012:  MOVLB  0
1014:  MOVWF  xE5
1016:  RCALL  0960
....................    } 
....................    if(tempo_minutos>200){ 
1018:  MOVF   28,W
101A:  SUBLW  C8
101C:  BC    1056
....................       tempo_minutos=20;write_eeprom(5,20);delay_ms(20); 
101E:  MOVLW  14
1020:  MOVWF  28
1022:  MOVLW  05
1024:  MOVWF  FA9
1026:  MOVLW  14
1028:  MOVWF  FA8
102A:  BCF    FA6.6
102C:  BCF    FA6.7
102E:  BSF    FA6.2
1030:  MOVF   FF2,W
1032:  MOVWF  00
1034:  BCF    FF2.6
1036:  BCF    FF2.7
1038:  MOVLB  F
103A:  MOVLW  55
103C:  MOVWF  FA7
103E:  MOVLW  AA
1040:  MOVWF  FA7
1042:  BSF    FA6.1
1044:  BTFSC  FA6.1
1046:  BRA    1044
1048:  BCF    FA6.2
104A:  MOVF   00,W
104C:  IORWF  FF2,F
104E:  MOVLW  14
1050:  MOVLB  0
1052:  MOVWF  xE5
1054:  RCALL  0960
....................    } 
....................    if(tempo_segundos>59){ 
1056:  MOVF   29,W
1058:  SUBLW  3B
105A:  BC    1090
....................       tempo_segundos=0;write_eeprom(6,0);delay_ms(20); 
105C:  CLRF   29
105E:  MOVLW  06
1060:  MOVWF  FA9
1062:  CLRF   FA8
1064:  BCF    FA6.6
1066:  BCF    FA6.7
1068:  BSF    FA6.2
106A:  MOVF   FF2,W
106C:  MOVWF  00
106E:  BCF    FF2.6
1070:  BCF    FF2.7
1072:  MOVLB  F
1074:  MOVLW  55
1076:  MOVWF  FA7
1078:  MOVLW  AA
107A:  MOVWF  FA7
107C:  BSF    FA6.1
107E:  BTFSC  FA6.1
1080:  BRA    107E
1082:  BCF    FA6.2
1084:  MOVF   00,W
1086:  IORWF  FF2,F
1088:  MOVLW  14
108A:  MOVLB  0
108C:  MOVWF  xE5
108E:  RCALL  0960
....................    } 
....................    if(segundos>60){ 
1090:  MOVF   22,W
1092:  SUBLW  3C
1094:  BC    10CA
....................       segundos=0;write_eeprom(7,0);delay_ms(20); 
1096:  CLRF   22
1098:  MOVLW  07
109A:  MOVWF  FA9
109C:  CLRF   FA8
109E:  BCF    FA6.6
10A0:  BCF    FA6.7
10A2:  BSF    FA6.2
10A4:  MOVF   FF2,W
10A6:  MOVWF  00
10A8:  BCF    FF2.6
10AA:  BCF    FF2.7
10AC:  MOVLB  F
10AE:  MOVLW  55
10B0:  MOVWF  FA7
10B2:  MOVLW  AA
10B4:  MOVWF  FA7
10B6:  BSF    FA6.1
10B8:  BTFSC  FA6.1
10BA:  BRA    10B8
10BC:  BCF    FA6.2
10BE:  MOVF   00,W
10C0:  IORWF  FF2,F
10C2:  MOVLW  14
10C4:  MOVLB  0
10C6:  MOVWF  xE5
10C8:  RCALL  0960
....................    } 
....................    if(minutos>60){ 
10CA:  MOVF   23,W
10CC:  SUBLW  3C
10CE:  BC    1104
....................       minutos=0;write_eeprom(8,0);delay_ms(20); 
10D0:  CLRF   23
10D2:  MOVLW  08
10D4:  MOVWF  FA9
10D6:  CLRF   FA8
10D8:  BCF    FA6.6
10DA:  BCF    FA6.7
10DC:  BSF    FA6.2
10DE:  MOVF   FF2,W
10E0:  MOVWF  00
10E2:  BCF    FF2.6
10E4:  BCF    FF2.7
10E6:  MOVLB  F
10E8:  MOVLW  55
10EA:  MOVWF  FA7
10EC:  MOVLW  AA
10EE:  MOVWF  FA7
10F0:  BSF    FA6.1
10F2:  BTFSC  FA6.1
10F4:  BRA    10F2
10F6:  BCF    FA6.2
10F8:  MOVF   00,W
10FA:  IORWF  FF2,F
10FC:  MOVLW  14
10FE:  MOVLB  0
1100:  MOVWF  xE5
1102:  RCALL  0960
....................    } 
....................    if(horas>10000){ 
1104:  MOVF   49,W
1106:  SUBLW  26
1108:  BC    1180
110A:  XORLW  FF
110C:  BNZ   1114
110E:  MOVF   48,W
1110:  SUBLW  10
1112:  BC    1180
....................       horas=0;write_eeprom(9,10);delay_ms(20);write_eeprom(10,0);delay_ms(20); 
1114:  CLRF   49
1116:  CLRF   48
1118:  MOVLW  09
111A:  MOVWF  FA9
111C:  MOVLW  0A
111E:  MOVWF  FA8
1120:  BCF    FA6.6
1122:  BCF    FA6.7
1124:  BSF    FA6.2
1126:  MOVF   FF2,W
1128:  MOVWF  00
112A:  BCF    FF2.6
112C:  BCF    FF2.7
112E:  MOVLB  F
1130:  MOVLW  55
1132:  MOVWF  FA7
1134:  MOVLW  AA
1136:  MOVWF  FA7
1138:  BSF    FA6.1
113A:  BTFSC  FA6.1
113C:  BRA    113A
113E:  BCF    FA6.2
1140:  MOVF   00,W
1142:  IORWF  FF2,F
1144:  MOVLW  14
1146:  MOVLB  0
1148:  MOVWF  xE5
114A:  RCALL  0960
114C:  MOVLW  0A
114E:  MOVWF  FA9
1150:  CLRF   FA8
1152:  BCF    FA6.6
1154:  BCF    FA6.7
1156:  BSF    FA6.2
1158:  MOVF   FF2,W
115A:  MOVWF  00
115C:  BCF    FF2.6
115E:  BCF    FF2.7
1160:  MOVLB  F
1162:  MOVLW  55
1164:  MOVWF  FA7
1166:  MOVLW  AA
1168:  MOVWF  FA7
116A:  BSF    FA6.1
116C:  BTFSC  FA6.1
116E:  BRA    116C
1170:  BCF    FA6.2
1172:  MOVF   00,W
1174:  IORWF  FF2,F
1176:  MOVLW  14
1178:  MOVLB  0
117A:  MOVWF  xE5
117C:  CALL   0960
....................    } 
....................    if(G<150 || G>300){ 
1180:  MOVFF  AF,E5
1184:  MOVFF  AE,E4
1188:  MOVFF  AD,E3
118C:  MOVFF  AC,E2
1190:  CLRF   xE9
1192:  CLRF   xE8
1194:  MOVLW  16
1196:  MOVWF  xE7
1198:  MOVLW  86
119A:  MOVWF  xE6
119C:  RCALL  0E54
119E:  BC    11C0
11A0:  CLRF   xE5
11A2:  CLRF   xE4
11A4:  MOVLW  16
11A6:  MOVWF  xE3
11A8:  MOVLW  87
11AA:  MOVWF  xE2
11AC:  MOVFF  AF,E9
11B0:  MOVFF  AE,E8
11B4:  MOVFF  AD,E7
11B8:  MOVFF  AC,E6
11BC:  RCALL  0E54
11BE:  BNC   1236
....................       G=220;write_eeprom(11,220);delay_ms(20);write_eeprom(12,0);delay_ms(20); 
11C0:  CLRF   xAF
11C2:  CLRF   xAE
11C4:  MOVLW  5C
11C6:  MOVWF  xAD
11C8:  MOVLW  86
11CA:  MOVWF  xAC
11CC:  MOVLW  0B
11CE:  MOVWF  FA9
11D0:  MOVLW  DC
11D2:  MOVWF  FA8
11D4:  BCF    FA6.6
11D6:  BCF    FA6.7
11D8:  BSF    FA6.2
11DA:  MOVF   FF2,W
11DC:  MOVWF  00
11DE:  BCF    FF2.6
11E0:  BCF    FF2.7
11E2:  MOVLB  F
11E4:  MOVLW  55
11E6:  MOVWF  FA7
11E8:  MOVLW  AA
11EA:  MOVWF  FA7
11EC:  BSF    FA6.1
11EE:  BTFSC  FA6.1
11F0:  BRA    11EE
11F2:  BCF    FA6.2
11F4:  MOVF   00,W
11F6:  IORWF  FF2,F
11F8:  MOVLW  14
11FA:  MOVLB  0
11FC:  MOVWF  xE5
11FE:  CALL   0960
1202:  MOVLW  0C
1204:  MOVWF  FA9
1206:  CLRF   FA8
1208:  BCF    FA6.6
120A:  BCF    FA6.7
120C:  BSF    FA6.2
120E:  MOVF   FF2,W
1210:  MOVWF  00
1212:  BCF    FF2.6
1214:  BCF    FF2.7
1216:  MOVLB  F
1218:  MOVLW  55
121A:  MOVWF  FA7
121C:  MOVLW  AA
121E:  MOVWF  FA7
1220:  BSF    FA6.1
1222:  BTFSC  FA6.1
1224:  BRA    1222
1226:  BCF    FA6.2
1228:  MOVF   00,W
122A:  IORWF  FF2,F
122C:  MOVLW  14
122E:  MOVLB  0
1230:  MOVWF  xE5
1232:  CALL   0960
....................    } 
....................    if(Vel1>20 || Vel1<1){ 
1236:  MOVF   45,W
1238:  SUBLW  14
123A:  BNC   1240
123C:  MOVF   45,F
123E:  BNZ   127A
....................       Vel1=10;write_eeprom(13,10);delay_ms(20); 
1240:  MOVLW  0A
1242:  MOVWF  45
1244:  MOVLW  0D
1246:  MOVWF  FA9
1248:  MOVLW  0A
124A:  MOVWF  FA8
124C:  BCF    FA6.6
124E:  BCF    FA6.7
1250:  BSF    FA6.2
1252:  MOVF   FF2,W
1254:  MOVWF  00
1256:  BCF    FF2.6
1258:  BCF    FF2.7
125A:  MOVLB  F
125C:  MOVLW  55
125E:  MOVWF  FA7
1260:  MOVLW  AA
1262:  MOVWF  FA7
1264:  BSF    FA6.1
1266:  BTFSC  FA6.1
1268:  BRA    1266
126A:  BCF    FA6.2
126C:  MOVF   00,W
126E:  IORWF  FF2,F
1270:  MOVLW  14
1272:  MOVLB  0
1274:  MOVWF  xE5
1276:  CALL   0960
....................    } 
....................    if(horasTrabajo>60000){ 
127A:  MOVF   xBE,W
127C:  SUBLW  E9
127E:  BC    12F6
1280:  XORLW  FF
1282:  BNZ   128A
1284:  MOVF   xBD,W
1286:  SUBLW  60
1288:  BC    12F6
....................       horasTrabajo=0;write_eeprom(19,0);delay_ms(20);write_eeprom(18,0);delay_ms(20); 
128A:  CLRF   xBE
128C:  CLRF   xBD
128E:  MOVLW  13
1290:  MOVWF  FA9
1292:  CLRF   FA8
1294:  BCF    FA6.6
1296:  BCF    FA6.7
1298:  BSF    FA6.2
129A:  MOVF   FF2,W
129C:  MOVWF  00
129E:  BCF    FF2.6
12A0:  BCF    FF2.7
12A2:  MOVLB  F
12A4:  MOVLW  55
12A6:  MOVWF  FA7
12A8:  MOVLW  AA
12AA:  MOVWF  FA7
12AC:  BSF    FA6.1
12AE:  BTFSC  FA6.1
12B0:  BRA    12AE
12B2:  BCF    FA6.2
12B4:  MOVF   00,W
12B6:  IORWF  FF2,F
12B8:  MOVLW  14
12BA:  MOVLB  0
12BC:  MOVWF  xE5
12BE:  CALL   0960
12C2:  MOVLW  12
12C4:  MOVWF  FA9
12C6:  CLRF   FA8
12C8:  BCF    FA6.6
12CA:  BCF    FA6.7
12CC:  BSF    FA6.2
12CE:  MOVF   FF2,W
12D0:  MOVWF  00
12D2:  BCF    FF2.6
12D4:  BCF    FF2.7
12D6:  MOVLB  F
12D8:  MOVLW  55
12DA:  MOVWF  FA7
12DC:  MOVLW  AA
12DE:  MOVWF  FA7
12E0:  BSF    FA6.1
12E2:  BTFSC  FA6.1
12E4:  BRA    12E2
12E6:  BCF    FA6.2
12E8:  MOVF   00,W
12EA:  IORWF  FF2,F
12EC:  MOVLW  14
12EE:  MOVLB  0
12F0:  MOVWF  xE5
12F2:  CALL   0960
....................    } 
....................    if(segundosTrabajo>3600){ 
12F6:  MOVF   xBC,W
12F8:  SUBLW  0D
12FA:  BC    1372
12FC:  XORLW  FF
12FE:  BNZ   1306
1300:  MOVF   xBB,W
1302:  SUBLW  10
1304:  BC    1372
....................       segundosTrabajo=0;write_eeprom(20,0);delay_ms(20);write_eeprom(21,0);delay_ms(20); 
1306:  CLRF   xBC
1308:  CLRF   xBB
130A:  MOVLW  14
130C:  MOVWF  FA9
130E:  CLRF   FA8
1310:  BCF    FA6.6
1312:  BCF    FA6.7
1314:  BSF    FA6.2
1316:  MOVF   FF2,W
1318:  MOVWF  00
131A:  BCF    FF2.6
131C:  BCF    FF2.7
131E:  MOVLB  F
1320:  MOVLW  55
1322:  MOVWF  FA7
1324:  MOVLW  AA
1326:  MOVWF  FA7
1328:  BSF    FA6.1
132A:  BTFSC  FA6.1
132C:  BRA    132A
132E:  BCF    FA6.2
1330:  MOVF   00,W
1332:  IORWF  FF2,F
1334:  MOVLW  14
1336:  MOVLB  0
1338:  MOVWF  xE5
133A:  CALL   0960
133E:  MOVLW  15
1340:  MOVWF  FA9
1342:  CLRF   FA8
1344:  BCF    FA6.6
1346:  BCF    FA6.7
1348:  BSF    FA6.2
134A:  MOVF   FF2,W
134C:  MOVWF  00
134E:  BCF    FF2.6
1350:  BCF    FF2.7
1352:  MOVLB  F
1354:  MOVLW  55
1356:  MOVWF  FA7
1358:  MOVLW  AA
135A:  MOVWF  FA7
135C:  BSF    FA6.1
135E:  BTFSC  FA6.1
1360:  BRA    135E
1362:  BCF    FA6.2
1364:  MOVF   00,W
1366:  IORWF  FF2,F
1368:  MOVLW  14
136A:  MOVLB  0
136C:  MOVWF  xE5
136E:  CALL   0960
....................    } 
....................    if(motor>1){ 
1372:  MOVF   32,W
1374:  SUBLW  01
1376:  BC    13B2
....................       motor=1;write_eeprom(22,1);delay_ms(20); 
1378:  MOVLW  01
137A:  MOVWF  32
137C:  MOVLW  16
137E:  MOVWF  FA9
1380:  MOVLW  01
1382:  MOVWF  FA8
1384:  BCF    FA6.6
1386:  BCF    FA6.7
1388:  BSF    FA6.2
138A:  MOVF   FF2,W
138C:  MOVWF  00
138E:  BCF    FF2.6
1390:  BCF    FF2.7
1392:  MOVLB  F
1394:  MOVLW  55
1396:  MOVWF  FA7
1398:  MOVLW  AA
139A:  MOVWF  FA7
139C:  BSF    FA6.1
139E:  BTFSC  FA6.1
13A0:  BRA    139E
13A2:  BCF    FA6.2
13A4:  MOVF   00,W
13A6:  IORWF  FF2,F
13A8:  MOVLW  14
13AA:  MOVLB  0
13AC:  MOVWF  xE5
13AE:  CALL   0960
....................    } 
....................    if(luz>1){ 
13B2:  MOVF   33,W
13B4:  SUBLW  01
13B6:  BC    13F2
....................       luz=1;write_eeprom(23,1);delay_ms(20); 
13B8:  MOVLW  01
13BA:  MOVWF  33
13BC:  MOVLW  17
13BE:  MOVWF  FA9
13C0:  MOVLW  01
13C2:  MOVWF  FA8
13C4:  BCF    FA6.6
13C6:  BCF    FA6.7
13C8:  BSF    FA6.2
13CA:  MOVF   FF2,W
13CC:  MOVWF  00
13CE:  BCF    FF2.6
13D0:  BCF    FF2.7
13D2:  MOVLB  F
13D4:  MOVLW  55
13D6:  MOVWF  FA7
13D8:  MOVLW  AA
13DA:  MOVWF  FA7
13DC:  BSF    FA6.1
13DE:  BTFSC  FA6.1
13E0:  BRA    13DE
13E2:  BCF    FA6.2
13E4:  MOVF   00,W
13E6:  IORWF  FF2,F
13E8:  MOVLW  14
13EA:  MOVLB  0
13EC:  MOVWF  xE5
13EE:  CALL   0960
....................    } 
....................    if(velocidadInicial>15){ 
13F2:  MOVF   34,W
13F4:  SUBLW  0F
13F6:  BC    1432
....................       velocidadInicial=10;write_eeprom(24,10);delay_ms(20); 
13F8:  MOVLW  0A
13FA:  MOVWF  34
13FC:  MOVLW  18
13FE:  MOVWF  FA9
1400:  MOVLW  0A
1402:  MOVWF  FA8
1404:  BCF    FA6.6
1406:  BCF    FA6.7
1408:  BSF    FA6.2
140A:  MOVF   FF2,W
140C:  MOVWF  00
140E:  BCF    FF2.6
1410:  BCF    FF2.7
1412:  MOVLB  F
1414:  MOVLW  55
1416:  MOVWF  FA7
1418:  MOVLW  AA
141A:  MOVWF  FA7
141C:  BSF    FA6.1
141E:  BTFSC  FA6.1
1420:  BRA    141E
1422:  BCF    FA6.2
1424:  MOVF   00,W
1426:  IORWF  FF2,F
1428:  MOVLW  14
142A:  MOVLB  0
142C:  MOVWF  xE5
142E:  CALL   0960
....................    } 
.................... } 
1432:  GOTO   2884 (RETURN)
....................  
.................... void bajarVidrio(){ 
....................    pulsoSubir=OFF; 
....................    if(VIDRIOUUP || !VIDRIODN){ 
....................       O1_on;O2_off; 
....................    }else{ 
....................       O1_off;O2_off; 
....................       pulsoBajar=OFF; 
....................    } 
.................... } 
....................  
.................... void subirVidrio(){ 
....................    pulsoBajar=OFF; 
....................    if(!VIDRIOUUP || VIDRIODN){ 
....................       O1_off;O2_on; 
....................    }else{ 
....................       O1_off;O2_off; 
....................       pulsoSubir=OFF; 
....................    } 
.................... } 
....................  
.................... void detenerVidrio(){ 
....................    O1_off;O2_off; 
.................... } 
....................  
.................... void leeControlRemoto(){ 
....................    if(NUEVO_DATO==1){ 
....................       NUEVO_DATO=0; 
....................       BYTE_IR[0]=BIT_BYTE(BITS[0],BITS[1],BITS[2],BITS[3],BITS[4],BITS[5],BITS[6],BITS[7]); 
....................       BYTE_IR[1]=BIT_BYTE(BITS[8],BITS[9],BITS[10],BITS[11],BITS[12],BITS[13],BITS[14],BITS[15]); 
....................       BYTE_IR[2]=BIT_BYTE(BITS[16],BITS[17],BITS[18],BITS[19],BITS[20],BITS[21],BITS[22],BITS[23]); 
....................       BYTE_IR[3]=BIT_BYTE(BITS[24],BITS[25],BITS[26],BITS[27],BITS[28],BITS[29],BITS[30],BITS[31]); 
....................     
....................       if(BYTE_IR[3]==codigoBajar){ //Bajar Vidrio  //AD 
....................          pulsoBajar=ON; 
....................       } 
....................        
....................       if(BYTE_IR[3]==codigoSubir){ // Subir Vidrio //E7 
....................          pulsoSubir=ON; 
....................       } 
....................       
....................       if(BYTE_IR[3]==codigoDetener){ //F7 E3 A5 
....................          O1_off;O2_off; 
....................          pulsoSubir=OFF; 
....................          pulsoBajar=OFF; 
....................       } 
....................    } 
....................     
....................    if(pulsoBajar) 
....................       bajarVidrio(); 
....................        
....................    if(pulsoSubir) 
....................       subirVidrio();     
....................       
.................... } 
....................  
.................... void cuentaTiempoTrabajoFiltro(){ 
....................    //**Contador de Tiempo de Trabajo del filtro**// 
....................    if(segundosTrabajo>=3600){ // Tiempo de Trabajo 
*
16EC:  MOVF   xBC,W
16EE:  SUBLW  0D
16F0:  BTFSC  FD8.0
16F2:  BRA    17FC
16F4:  XORLW  FF
16F6:  BNZ   1700
16F8:  MOVF   xBB,W
16FA:  SUBLW  0F
16FC:  BTFSC  FD8.0
16FE:  BRA    17FC
....................       segundosTrabajo=0; //Minutos Trabajo realmente son segundos. 
1700:  CLRF   xBC
1702:  CLRF   xBB
....................       write_eeprom(20,make8(segundosTrabajo,0)); 
1704:  MOVFF  BB,CE
1708:  MOVLW  14
170A:  MOVWF  FA9
170C:  MOVFF  CE,FA8
1710:  BCF    FA6.6
1712:  BCF    FA6.7
1714:  BSF    FA6.2
1716:  MOVF   FF2,W
1718:  MOVWF  00
171A:  BCF    FF2.6
171C:  BCF    FF2.7
171E:  MOVLB  F
1720:  MOVLW  55
1722:  MOVWF  FA7
1724:  MOVLW  AA
1726:  MOVWF  FA7
1728:  BSF    FA6.1
172A:  BTFSC  FA6.1
172C:  BRA    172A
172E:  BCF    FA6.2
1730:  MOVF   00,W
1732:  IORWF  FF2,F
....................       delay_ms(20); 
1734:  MOVLW  14
1736:  MOVLB  0
1738:  MOVWF  xE5
173A:  CALL   0960
....................       write_eeprom(21,make8(segundosTrabajo,1)); 
173E:  MOVFF  BC,CE
1742:  MOVLW  15
1744:  MOVWF  FA9
1746:  MOVFF  CE,FA8
174A:  BCF    FA6.6
174C:  BCF    FA6.7
174E:  BSF    FA6.2
1750:  MOVF   FF2,W
1752:  MOVWF  00
1754:  BCF    FF2.6
1756:  BCF    FF2.7
1758:  MOVLB  F
175A:  MOVLW  55
175C:  MOVWF  FA7
175E:  MOVLW  AA
1760:  MOVWF  FA7
1762:  BSF    FA6.1
1764:  BTFSC  FA6.1
1766:  BRA    1764
1768:  BCF    FA6.2
176A:  MOVF   00,W
176C:  IORWF  FF2,F
....................       delay_ms(20); 
176E:  MOVLW  14
1770:  MOVLB  0
1772:  MOVWF  xE5
1774:  CALL   0960
....................       horasTrabajo++; 
1778:  INCF   xBD,F
177A:  BTFSC  FD8.2
177C:  INCF   xBE,F
....................       write_eeprom(18,make8(horasTrabajo,0)); 
177E:  MOVFF  BD,CE
1782:  MOVLW  12
1784:  MOVWF  FA9
1786:  MOVFF  CE,FA8
178A:  BCF    FA6.6
178C:  BCF    FA6.7
178E:  BSF    FA6.2
1790:  MOVF   FF2,W
1792:  MOVWF  00
1794:  BCF    FF2.6
1796:  BCF    FF2.7
1798:  MOVLB  F
179A:  MOVLW  55
179C:  MOVWF  FA7
179E:  MOVLW  AA
17A0:  MOVWF  FA7
17A2:  BSF    FA6.1
17A4:  BTFSC  FA6.1
17A6:  BRA    17A4
17A8:  BCF    FA6.2
17AA:  MOVF   00,W
17AC:  IORWF  FF2,F
....................       delay_ms(20); 
17AE:  MOVLW  14
17B0:  MOVLB  0
17B2:  MOVWF  xE5
17B4:  CALL   0960
....................       write_eeprom(19,make8(horasTrabajo,1)); 
17B8:  MOVFF  BE,CE
17BC:  MOVLW  13
17BE:  MOVWF  FA9
17C0:  MOVFF  CE,FA8
17C4:  BCF    FA6.6
17C6:  BCF    FA6.7
17C8:  BSF    FA6.2
17CA:  MOVF   FF2,W
17CC:  MOVWF  00
17CE:  BCF    FF2.6
17D0:  BCF    FF2.7
17D2:  MOVLB  F
17D4:  MOVLW  55
17D6:  MOVWF  FA7
17D8:  MOVLW  AA
17DA:  MOVWF  FA7
17DC:  BSF    FA6.1
17DE:  BTFSC  FA6.1
17E0:  BRA    17DE
17E2:  BCF    FA6.2
17E4:  MOVF   00,W
17E6:  IORWF  FF2,F
....................       delay_ms(20); 
17E8:  MOVLW  14
17EA:  MOVLB  0
17EC:  MOVWF  xE5
17EE:  CALL   0960
....................       delay_ms(20); 
17F2:  MOVLW  14
17F4:  MOVWF  xE5
17F6:  CALL   0960
....................    }else if(segundosTrabajo==900 || segundosTrabajo==1800 || segundosTrabajo==2700 ){ 
17FA:  BRA    1894
17FC:  MOVF   xBB,W
17FE:  SUBLW  84
1800:  BNZ   1808
1802:  MOVF   xBC,W
1804:  SUBLW  03
1806:  BZ    1820
1808:  MOVF   xBB,W
180A:  SUBLW  08
180C:  BNZ   1814
180E:  MOVF   xBC,W
1810:  SUBLW  07
1812:  BZ    1820
1814:  MOVF   xBB,W
1816:  SUBLW  8C
1818:  BNZ   1894
181A:  MOVF   xBC,W
181C:  SUBLW  0A
181E:  BNZ   1894
....................       write_eeprom(20,make8(segundosTrabajo,0)); 
1820:  MOVFF  BB,CE
1824:  MOVLW  14
1826:  MOVWF  FA9
1828:  MOVFF  CE,FA8
182C:  BCF    FA6.6
182E:  BCF    FA6.7
1830:  BSF    FA6.2
1832:  MOVF   FF2,W
1834:  MOVWF  00
1836:  BCF    FF2.6
1838:  BCF    FF2.7
183A:  MOVLB  F
183C:  MOVLW  55
183E:  MOVWF  FA7
1840:  MOVLW  AA
1842:  MOVWF  FA7
1844:  BSF    FA6.1
1846:  BTFSC  FA6.1
1848:  BRA    1846
184A:  BCF    FA6.2
184C:  MOVF   00,W
184E:  IORWF  FF2,F
....................       delay_ms(20); 
1850:  MOVLW  14
1852:  MOVLB  0
1854:  MOVWF  xE5
1856:  CALL   0960
....................       write_eeprom(21,make8(segundosTrabajo,1)); 
185A:  MOVFF  BC,CE
185E:  MOVLW  15
1860:  MOVWF  FA9
1862:  MOVFF  CE,FA8
1866:  BCF    FA6.6
1868:  BCF    FA6.7
186A:  BSF    FA6.2
186C:  MOVF   FF2,W
186E:  MOVWF  00
1870:  BCF    FF2.6
1872:  BCF    FF2.7
1874:  MOVLB  F
1876:  MOVLW  55
1878:  MOVWF  FA7
187A:  MOVLW  AA
187C:  MOVWF  FA7
187E:  BSF    FA6.1
1880:  BTFSC  FA6.1
1882:  BRA    1880
1884:  BCF    FA6.2
1886:  MOVF   00,W
1888:  IORWF  FF2,F
....................       delay_ms(20); 
188A:  MOVLW  14
188C:  MOVLB  0
188E:  MOVWF  xE5
1890:  CALL   0960
....................    } 
.................... //----------------------------------------// 
.................... } 
1894:  GOTO   2C0E (RETURN)
....................  
.................... void clearSalidasSinUsar(){ 
....................    output_bit(PIN_A3,0); 
....................    //output_bit(PIN_C3,0);//Solo para PIC Diferente a 18F4550 
....................    //output_bit(PIN_C4,0); 
....................    //output_bit(PIN_C5,0); 
....................    output_bit(PIN_C6,0); 
....................    output_bit(PIN_C7,0); 
....................    output_bit(PIN_B5,0); 
.................... }  
....................  
.................... /* 
.................... #int_EXT HIGH 
.................... void ext0() {   
....................    Cruce=ON; 
....................     
....................    if(VelMotor==19){ 
....................       set_timer0(232);       
....................       Motor_off;  
....................       Motor2_off;  
....................    }else if(VelMotor==18){ 
....................       set_timer0(228);       
....................       Motor_off;  
....................       Motor2_off;  
....................    }else if(VelMotor==17){ 
....................       set_timer0(224);       
....................       Motor_off;  
....................       Motor2_off;  
....................    }else if(VelMotor==16){ 
....................       set_timer0(220); // Cada cuenta del timer0 es 51.2us y timer1 es 1.59us 
....................       Motor_off;  
....................       Motor2_off;  
....................    }else if(VelMotor==15){ 
....................       set_timer0(216);       
....................       Motor_off;  
....................       Motor2_off;  
....................    }else if(VelMotor==14){ 
....................       set_timer0(212);       
....................       Motor_off;  
....................       Motor2_off;  
....................    }else if(VelMotor==13){ 
....................       set_timer0(208);       
....................       Motor_off;  
....................       Motor2_off;  
....................    }else if(VelMotor==12){ 
....................       set_timer0(204);       
....................       Motor_off;  
....................       Motor2_off;  
....................    }else if(VelMotor==11){ 
....................       set_timer0(200);       
....................       Motor_off;  
....................       Motor2_off;  
....................    }else if(VelMotor==10){ 
....................       set_timer0(196);       
....................       Motor_off;  
....................       Motor2_off;  
....................    }else if(VelMotor==9){ 
....................       set_timer0(192);       
....................       Motor_off;  
....................       Motor2_off;  
....................    }else if(VelMotor==8){ 
....................       set_timer0(188);       
....................       Motor_off;  
....................       Motor2_off;  
....................    }else if(VelMotor==7){ 
....................       set_timer0(184);       
....................       Motor_off;  
....................       Motor2_off;  
....................    }else if(VelMotor==6){ 
....................       set_timer0(180);       
....................       Motor_off;  
....................       Motor2_off;  
....................    }else if(VelMotor==5){ 
....................       set_timer0(176);       
....................       Motor_off;  
....................       Motor2_off;  
....................    }else if(VelMotor==4){ 
....................       set_timer0(172);       
....................       Motor_off;  
....................       Motor2_off;  
....................    }else if(VelMotor==3){ 
....................       set_timer0(168); 
....................       Motor_off;  
....................       Motor2_off;  
....................    }else if(VelMotor==2){ 
....................       set_timer0(164); 
....................       Motor_off;  
....................       Motor2_off;  
....................    }else if(VelMotor==1){ 
....................       set_timer0(160); 
....................       Motor_off;  
....................       Motor2_off;  
....................    } 
....................    pulsos++;    
.................... } 
....................  
.................... #int_TIMER0 HIGH 
.................... void temp0s(void){ 
....................    if(VelMotor>0 && VelMotor<20){ 
....................    if(Cruce){         //If the triac pin is low we change the state and prepare the timer 
....................       Motor_on; 
....................       Motor2_on;  
....................       set_timer0(253);         // Next timer overflow will clear the triac pin 
....................       Cruce=OFF;         // Flag now signals that we need to turn off the triac output pin 
....................    } else {            //The triac has been triggered, cut the pulse 
....................       Motor_off; 
....................       Motor2_off;  
....................       set_timer0(0);         //Set timer period to maximum, timer should not overflow untill next zero cross interrupt 
....................    } 
....................    } 
.................... } 
.................... */ 
.................... //#int_TIMER2 
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    //set_timer2(231);//100.25uS 
....................    set_timer1(45536);//5ms 
*
019A:  MOVLW  B1
019C:  MOVWF  FCF
019E:  MOVLW  E0
01A0:  MOVWF  FCE
....................    tiempos++; 
01A2:  INCF   46,F
01A4:  BTFSC  FD8.2
01A6:  INCF   47,F
....................    if(UP) 
01A8:  BSF    F92.5
01AA:  BTFSC  F80.5
01AC:  BRA    01B6
....................          tup++; 
01AE:  INCF   xB3,F
01B0:  BTFSC  FD8.2
01B2:  INCF   xB4,F
....................       else 
01B4:  BRA    01BA
....................          tup=0; 
01B6:  CLRF   xB4
01B8:  CLRF   xB3
....................           
....................       if(DOWN) 
01BA:  BSF    F96.0
01BC:  BTFSC  F84.0
01BE:  BRA    01C8
....................          tdown++; 
01C0:  INCF   xB5,F
01C2:  BTFSC  FD8.2
01C4:  INCF   xB6,F
....................       else 
01C6:  BRA    01CC
....................          tdown=0; 
01C8:  CLRF   xB6
01CA:  CLRF   xB5
....................           
....................       if(RIGHT) 
01CC:  BSF    F96.1
01CE:  BTFSC  F84.1
01D0:  BRA    01DA
....................          tright++; 
01D2:  INCF   xB7,F
01D4:  BTFSC  FD8.2
01D6:  INCF   xB8,F
....................       else 
01D8:  BRA    01DE
....................          tright=0; 
01DA:  CLRF   xB8
01DC:  CLRF   xB7
....................        
....................       if(IZQU) 
01DE:  BSF    F96.2
01E0:  BTFSC  F84.2
01E2:  BRA    01EC
....................          tleft++; 
01E4:  INCF   xB9,F
01E6:  BTFSC  FD8.2
01E8:  INCF   xBA,F
....................       else 
01EA:  BRA    01F0
....................          tleft=0; 
01EC:  CLRF   xBA
01EE:  CLRF   xB9
....................      
....................    //if(tiempos>=10000){ 
....................    //if(tiempos>=9710){//1s 
....................    if(tiempos>=200){//1s 
01F0:  MOVF   47,F
01F2:  BNZ   01FA
01F4:  MOVF   46,W
01F6:  SUBLW  C7
01F8:  BC    0256
....................       output_toggle(PIN_A3); 
01FA:  BCF    F92.3
01FC:  BTG    F89.3
....................       tiempos=0;tiemporeset++;Lectura=1; 
01FE:  CLRF   47
0200:  CLRF   46
0202:  INCF   30,F
0204:  BSF    18.0
....................     
....................       if(ActivaBuzzer==1){ 
0206:  DECFSZ 41,W
0208:  BRA    021E
....................          if(estadobuzzer==0){ 
020A:  BTFSC  18.3
020C:  BRA    0214
....................             Buzzer_off; 
020E:  BCF    F8B.0
0210:  BCF    F94.0
....................          }else{ 
0212:  BRA    021C
....................             if(estadoalarma==1) 
0214:  BTFSS  18.4
0216:  BRA    021C
....................                Buzzer_on; 
0218:  BSF    F8B.0
021A:  BCF    F94.0
....................          } 
....................          estadobuzzer=!estadobuzzer; 
021C:  BTG    18.3
....................       } 
....................       if(estadomv==1) 
021E:  BTFSS  17.2
0220:  BRA    0228
....................          segundosTrabajo++; 
0222:  INCF   xBB,F
0224:  BTFSC  FD8.2
0226:  INCF   xBC,F
....................    //----------------------------- Tiempo Total-----------------------------// 
....................       if(estadouv==1){ 
0228:  BTFSS  17.0
022A:  BRA    0256
....................          segundos++; 
022C:  INCF   22,F
....................          if(tiempo_cumplido==0){ 
022E:  BTFSC  17.7
0230:  BRA    0256
....................             if(tempo_segundos>0){ 
0232:  MOVF   29,F
0234:  BZ    023A
....................                tempo_segundos--; 
0236:  DECF   29,F
....................             }else{ 
0238:  BRA    0256
....................                if(tempo_minutos>0){ 
023A:  MOVF   28,F
023C:  BZ    0246
....................                   tempo_minutos--; 
023E:  DECF   28,F
....................                   tempo_segundos=59; 
0240:  MOVLW  3B
0242:  MOVWF  29
....................                }else{ 
0244:  BRA    0256
....................                   tiempo_cumplido=1; 
0246:  BSF    17.7
....................                   estadouv=0;Luz_UV_off; 
0248:  BCF    17.0
024A:  BSF    F8A.3
024C:  BCF    F93.3
....................                   tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
024E:  MOVFF  2A,28
0252:  MOVFF  2B,29
....................                } 
....................             } 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
0256:  BCF    F9E.0
0258:  GOTO   0064
.................... void main () 
.................... { 
*
26CC:  CLRF   FF8
26CE:  BCF    F9F.0
26D0:  BSF    FD0.7
26D2:  BSF    07.7
26D4:  CLRF   FEA
26D6:  CLRF   FE9
26D8:  BCF    17.0
26DA:  BCF    17.1
26DC:  BCF    17.2
26DE:  BCF    17.3
26E0:  BCF    17.4
26E2:  BCF    17.5
26E4:  BCF    17.6
26E6:  BCF    17.7
26E8:  BCF    18.0
26EA:  BCF    18.1
26EC:  BCF    18.2
26EE:  BCF    18.3
26F0:  BCF    18.4
26F2:  BCF    18.5
26F4:  BCF    18.6
26F6:  CLRF   19
26F8:  MOVLW  06
26FA:  MOVWF  1A
26FC:  MOVLW  02
26FE:  MOVWF  1B
2700:  MOVLW  0B
2702:  MOVWF  1C
2704:  MOVLW  02
2706:  MOVWF  1D
2708:  MOVLW  03
270A:  MOVWF  1E
270C:  MOVLW  02
270E:  MOVWF  1F
2710:  MOVWF  20
2712:  MOVLW  04
2714:  MOVWF  21
2716:  CLRF   22
2718:  CLRF   23
271A:  CLRF   24
271C:  CLRF   25
271E:  CLRF   26
2720:  CLRF   27
2722:  CLRF   28
2724:  CLRF   29
2726:  CLRF   2A
2728:  CLRF   2B
272A:  CLRF   2C
272C:  CLRF   2D
272E:  CLRF   2E
2730:  MOVLW  01
2732:  MOVWF  2F
2734:  CLRF   30
2736:  CLRF   31
2738:  CLRF   32
273A:  CLRF   33
273C:  MOVLW  0A
273E:  MOVWF  34
2740:  CLRF   35
2742:  CLRF   41
2744:  CLRF   42
2746:  CLRF   43
2748:  CLRF   44
274A:  MOVLW  04
274C:  MOVWF  45
274E:  CLRF   49
2750:  CLRF   48
2752:  CLRF   4B
2754:  CLRF   4A
2756:  CLRF   x9F
2758:  CLRF   x9E
275A:  CLRF   x9D
275C:  CLRF   x9C
275E:  CLRF   xA3
2760:  CLRF   xA2
2762:  CLRF   xA1
2764:  CLRF   xA0
2766:  CLRF   xA7
2768:  CLRF   xA6
276A:  CLRF   xA5
276C:  CLRF   xA4
276E:  CLRF   xAB
2770:  CLRF   xAA
2772:  CLRF   xA9
2774:  CLRF   xA8
2776:  CLRF   xAF
2778:  CLRF   xAE
277A:  CLRF   xAD
277C:  MOVLW  80
277E:  MOVWF  xAC
2780:  BSF    18.7
2782:  BCF    xB0.0
2784:  CLRF   xB2
2786:  CLRF   xB1
2788:  CLRF   xB4
278A:  CLRF   xB3
278C:  CLRF   xB6
278E:  CLRF   xB5
2790:  CLRF   xB8
2792:  CLRF   xB7
2794:  CLRF   xBA
2796:  CLRF   xB9
2798:  CLRF   xBC
279A:  CLRF   xBB
279C:  CLRF   xBE
279E:  CLRF   xBD
27A0:  BCF    xB0.1
27A2:  CLRF   xBF
27A4:  CLRF   xC9
27A6:  CLRF   xC8
27A8:  MOVF   FC1,W
27AA:  ANDLW  C0
27AC:  IORLW  0F
27AE:  MOVWF  FC1
27B0:  MOVLW  07
27B2:  MOVWF  FB4
27B4:  MOVLW  3E
27B6:  MOVWF  36
27B8:  MOVLW  20
27BA:  MOVWF  37
27BC:  MOVLW  5E
27BE:  MOVWF  38
27C0:  CLRF   39
27C2:  CLRF   3A
27C4:  CLRF   3B
27C6:  CLRF   3C
27C8:  CLRF   3D
27CA:  CLRF   3E
27CC:  CLRF   3F
27CE:  CLRF   40
27D0:  CLRF   4C
27D2:  CLRF   4D
27D4:  CLRF   4E
27D6:  CLRF   4F
27D8:  CLRF   50
27DA:  CLRF   51
27DC:  CLRF   52
27DE:  CLRF   53
27E0:  CLRF   54
27E2:  CLRF   55
27E4:  CLRF   56
27E6:  CLRF   57
27E8:  CLRF   58
27EA:  CLRF   59
27EC:  CLRF   5A
27EE:  CLRF   5B
27F0:  CLRF   5C
27F2:  CLRF   5D
27F4:  CLRF   5E
27F6:  CLRF   5F
27F8:  CLRF   x60
27FA:  CLRF   x61
27FC:  CLRF   x62
27FE:  CLRF   x63
2800:  CLRF   x64
2802:  CLRF   x65
2804:  CLRF   x66
2806:  CLRF   x67
2808:  CLRF   x68
280A:  CLRF   x69
280C:  CLRF   x6A
280E:  CLRF   x6B
2810:  CLRF   x6C
2812:  CLRF   x6D
2814:  CLRF   x6E
2816:  CLRF   x6F
2818:  CLRF   x70
281A:  CLRF   x71
281C:  CLRF   x72
281E:  CLRF   x73
2820:  CLRF   x74
2822:  CLRF   x75
2824:  CLRF   x76
2826:  CLRF   x77
2828:  CLRF   x78
282A:  CLRF   x79
282C:  CLRF   x7A
282E:  CLRF   x7B
2830:  CLRF   x7C
2832:  CLRF   x7D
2834:  CLRF   x7E
2836:  CLRF   x7F
2838:  CLRF   x80
283A:  CLRF   x81
283C:  CLRF   x82
283E:  CLRF   x83
2840:  CLRF   x84
2842:  CLRF   x85
2844:  CLRF   x86
2846:  CLRF   x87
2848:  CLRF   x88
284A:  CLRF   x89
284C:  CLRF   x8A
284E:  CLRF   x8B
2850:  CLRF   x8C
2852:  CLRF   x8D
2854:  CLRF   x8E
2856:  CLRF   x8F
2858:  CLRF   x90
285A:  CLRF   x91
285C:  CLRF   x92
285E:  CLRF   x93
2860:  CLRF   x94
2862:  CLRF   x95
2864:  CLRF   x96
2866:  CLRF   x97
2868:  CLRF   x98
286A:  CLRF   x99
286C:  CLRF   x9A
286E:  CLRF   x9B
....................    Motor_off; 
2870:  BCF    F8B.2
2872:  BCF    F94.2
....................    Motor2_off; 
2874:  BCF    F8B.1
2876:  BCF    F94.1
....................    ConfigInterrupciones(); 
2878:  GOTO   0A4E
....................    //MensajeBienvenida(); 
....................    LeeEEPROM();  
287C:  GOTO   0AB6
....................    LimitaValores(); 
2880:  GOTO   0ECA
....................    if(motor!=1){ 
2884:  DECFSZ 32,W
2886:  BRA    288A
2888:  BRA    2890
....................       MensajeBienvenida();  
288A:  GOTO   1526
....................    }else{ 
288E:  BRA    28A2
....................       if(luz==1) 
2890:  DECFSZ 33,W
2892:  BRA    2896
....................          estadofl=1; 
2894:  BSF    17.1
....................       if(luz==0) 
2896:  MOVF   33,F
2898:  BNZ   289C
....................          estadofl=0; 
289A:  BCF    17.1
....................       estadomv=1; 
289C:  BSF    17.2
....................       Menu=50; 
289E:  MOVLW  32
28A0:  MOVWF  19
....................    } 
....................    Motor_off; 
28A2:  BCF    F8B.2
28A4:  BCF    F94.2
....................    Motor2_off; 
28A6:  BCF    F8B.1
28A8:  BCF    F94.1
....................     
....................    if(UP && DOWN && RIGHT){ 
28AA:  BSF    F92.5
28AC:  BTFSC  F80.5
28AE:  BRA    2A2A
28B0:  BSF    F96.0
28B2:  BTFSC  F84.0
28B4:  BRA    2A2A
28B6:  BSF    F96.1
28B8:  BTFSC  F84.1
28BA:  BRA    2A2A
....................       for(;;){ 
....................          if(velocidadInicial>15) 
28BC:  MOVF   34,W
28BE:  SUBLW  0F
28C0:  BC    28C6
....................             velocidadInicial=15; 
28C2:  MOVLW  0F
28C4:  MOVWF  34
....................          if(velocidadInicial<1) 
28C6:  MOVF   34,F
28C8:  BNZ   28CE
....................             velocidadInicial=1; 
28CA:  MOVLW  01
28CC:  MOVWF  34
....................         
....................          lcd_gotoxy(1,1); 
28CE:  MOVLW  01
28D0:  MOVWF  xE0
28D2:  MOVWF  xE1
28D4:  CALL   1436
....................          printf(lcd_putc,"Seleccione Velocidad"); 
28D8:  MOVLW  5C
28DA:  MOVWF  FF6
28DC:  MOVLW  02
28DE:  MOVWF  FF7
28E0:  CALL   1506
....................          lcd_gotoxy(1,2); 
28E4:  MOVLW  01
28E6:  MOVWF  xE0
28E8:  MOVLW  02
28EA:  MOVWF  xE1
28EC:  CALL   1436
....................          printf(lcd_putc,"Inicial   Ventilador"); 
28F0:  MOVLW  72
28F2:  MOVWF  FF6
28F4:  MOVLW  02
28F6:  MOVWF  FF7
28F8:  CALL   1506
....................          lcd_gotoxy(1,3); 
28FC:  MOVLW  01
28FE:  MOVWF  xE0
2900:  MOVLW  03
2902:  MOVWF  xE1
2904:  CALL   1436
....................          printf(lcd_putc,"     Vel: %02u       ",velocidadInicial); 
2908:  MOVLW  88
290A:  MOVWF  FF6
290C:  MOVLW  02
290E:  MOVWF  FF7
2910:  MOVLW  0A
2912:  MOVWF  xD2
2914:  CALL   158E
2918:  MOVFF  34,CE
291C:  MOVLW  01
291E:  MOVWF  xCF
2920:  CALL   15D4
2924:  MOVLW  96
2926:  MOVWF  FF6
2928:  MOVLW  02
292A:  MOVWF  FF7
292C:  MOVLW  07
292E:  MOVWF  xD2
2930:  CALL   158E
....................          lcd_gotoxy(1,4); 
2934:  MOVLW  01
2936:  MOVWF  xE0
2938:  MOVLW  04
293A:  MOVWF  xE1
293C:  CALL   1436
....................          printf(lcd_putc,"                    ");       
2940:  MOVLW  9E
2942:  MOVWF  FF6
2944:  MOVLW  02
2946:  MOVWF  FF7
2948:  CALL   1506
....................           
....................          if(UP){   
294C:  BSF    F92.5
294E:  BTFSC  F80.5
2950:  BRA    295C
....................             delay_ms(200);velocidadInicial++; 
2952:  MOVLW  C8
2954:  MOVWF  xE5
2956:  CALL   0960
295A:  INCF   34,F
....................          } 
....................                 
....................          if(DOWN && Vel1>0)//Si oprime hacia abajo 
295C:  BSF    F96.0
295E:  BTFSC  F84.0
2960:  BRA    2970
2962:  MOVF   45,F
2964:  BZ    2970
....................          {   
....................             delay_ms(200);velocidadInicial--; 
2966:  MOVLW  C8
2968:  MOVWF  xE5
296A:  CALL   0960
296E:  DECF   34,F
....................          } 
....................           
....................          if(IZQU)//Si oprime boton de Toma. 
2970:  BSF    F96.2
2972:  BTFSC  F84.2
2974:  BRA    2A28
....................          {                   
....................             write_eeprom(24,velocidadInicial);//Guardar valor de Setpoint en eeprom 
2976:  MOVLW  18
2978:  MOVWF  FA9
297A:  MOVFF  34,FA8
297E:  BCF    FA6.6
2980:  BCF    FA6.7
2982:  BSF    FA6.2
2984:  MOVF   FF2,W
2986:  MOVWF  00
2988:  BCF    FF2.6
298A:  BCF    FF2.7
298C:  MOVLB  F
298E:  MOVLW  55
2990:  MOVWF  FA7
2992:  MOVLW  AA
2994:  MOVWF  FA7
2996:  BSF    FA6.1
2998:  BTFSC  FA6.1
299A:  BRA    2998
299C:  BCF    FA6.2
299E:  MOVF   00,W
29A0:  IORWF  FF2,F
....................             delay_ms(20); 
29A2:  MOVLW  14
29A4:  MOVLB  0
29A6:  MOVWF  xE5
29A8:  CALL   0960
....................             lcd_gotoxy(1,1); 
29AC:  MOVLW  01
29AE:  MOVWF  xE0
29B0:  MOVWF  xE1
29B2:  CALL   1436
....................             printf(lcd_putc,"                    "); 
29B6:  MOVLW  B4
29B8:  MOVWF  FF6
29BA:  MOVLW  02
29BC:  MOVWF  FF7
29BE:  CALL   1506
....................             lcd_gotoxy(1,2); 
29C2:  MOVLW  01
29C4:  MOVWF  xE0
29C6:  MOVLW  02
29C8:  MOVWF  xE1
29CA:  CALL   1436
....................             printf(lcd_putc,"     Velocidad      "); 
29CE:  MOVLW  CA
29D0:  MOVWF  FF6
29D2:  MOVLW  02
29D4:  MOVWF  FF7
29D6:  CALL   1506
....................             lcd_gotoxy(1,3); 
29DA:  MOVLW  01
29DC:  MOVWF  xE0
29DE:  MOVLW  03
29E0:  MOVWF  xE1
29E2:  CALL   1436
....................             printf(lcd_putc,"      Almacenada    "); 
29E6:  MOVLW  E0
29E8:  MOVWF  FF6
29EA:  MOVLW  02
29EC:  MOVWF  FF7
29EE:  CALL   1506
....................             lcd_gotoxy(1,4); 
29F2:  MOVLW  01
29F4:  MOVWF  xE0
29F6:  MOVLW  04
29F8:  MOVWF  xE1
29FA:  CALL   1436
....................             printf(lcd_putc,"                    ");  
29FE:  MOVLW  F6
2A00:  MOVWF  FF6
2A02:  MOVLW  02
2A04:  MOVWF  FF7
2A06:  CALL   1506
....................             delay_ms(1000); 
2A0A:  MOVLW  04
2A0C:  MOVWF  xCE
2A0E:  MOVLW  FA
2A10:  MOVWF  xE5
2A12:  CALL   0960
2A16:  DECFSZ xCE,F
2A18:  BRA    2A0E
....................             printf(lcd_putc,"\f"); 
2A1A:  MOVLW  0C
2A1C:  MOVWF  xDF
2A1E:  CALL   14A0
....................             lcd_init(); 
2A22:  CALL   09F0
....................             reset_cpu(); 
2A26:  RESET
....................          } 
....................       } 
2A28:  BRA    28BC
....................    } 
....................     
....................    if(UP && RIGHT){ 
2A2A:  BSF    F92.5
2A2C:  BTFSC  F80.5
2A2E:  BRA    2C0A
2A30:  BSF    F96.1
2A32:  BTFSC  F84.1
2A34:  BRA    2C0A
....................       for(;;){ 
....................          lcd_gotoxy(1,1); 
2A36:  MOVLW  01
2A38:  MOVWF  xE0
2A3A:  MOVWF  xE1
2A3C:  CALL   1436
....................          printf(lcd_putc,"  Tiempo de Trabajo  "); 
2A40:  MOVLW  0C
2A42:  MOVWF  FF6
2A44:  MOVLW  03
2A46:  MOVWF  FF7
2A48:  CALL   1506
....................          lcd_gotoxy(1,2); 
2A4C:  MOVLW  01
2A4E:  MOVWF  xE0
2A50:  MOVLW  02
2A52:  MOVWF  xE1
2A54:  CALL   1436
....................          printf(lcd_putc,"   Tiempo= %05Lu   ",horas); 
2A58:  MOVLW  22
2A5A:  MOVWF  FF6
2A5C:  MOVLW  03
2A5E:  MOVWF  FF7
2A60:  MOVLW  0B
2A62:  MOVWF  xD2
2A64:  CALL   158E
2A68:  MOVLW  08
2A6A:  MOVWF  FE9
2A6C:  MOVFF  49,CF
2A70:  MOVFF  48,CE
2A74:  CALL   163A
2A78:  MOVLW  20
2A7A:  MOVWF  xDF
2A7C:  CALL   14A0
2A80:  MOVLW  20
2A82:  MOVWF  xDF
2A84:  CALL   14A0
2A88:  MOVLW  20
2A8A:  MOVWF  xDF
2A8C:  CALL   14A0
....................          lcd_gotoxy(1,4); 
2A90:  MOVLW  01
2A92:  MOVWF  xE0
2A94:  MOVLW  04
2A96:  MOVWF  xE1
2A98:  CALL   1436
....................          printf(lcd_putc," RESET= Oprima < "); 
2A9C:  MOVLW  36
2A9E:  MOVWF  FF6
2AA0:  MOVLW  03
2AA2:  MOVWF  FF7
2AA4:  CALL   1506
....................           
....................          if(IZQU){ 
2AA8:  BSF    F96.2
2AAA:  BTFSC  F84.2
2AAC:  BRA    2C08
....................          delay_ms(100); 
2AAE:  MOVLW  64
2AB0:  MOVWF  xE5
2AB2:  CALL   0960
....................             if(IZQU){ 
2AB6:  BSF    F96.2
2AB8:  BTFSC  F84.2
2ABA:  BRA    2C08
....................                write_eeprom(20,0); 
2ABC:  MOVLW  14
2ABE:  MOVWF  FA9
2AC0:  CLRF   FA8
2AC2:  BCF    FA6.6
2AC4:  BCF    FA6.7
2AC6:  BSF    FA6.2
2AC8:  MOVF   FF2,W
2ACA:  MOVWF  00
2ACC:  BCF    FF2.6
2ACE:  BCF    FF2.7
2AD0:  MOVLB  F
2AD2:  MOVLW  55
2AD4:  MOVWF  FA7
2AD6:  MOVLW  AA
2AD8:  MOVWF  FA7
2ADA:  BSF    FA6.1
2ADC:  BTFSC  FA6.1
2ADE:  BRA    2ADC
2AE0:  BCF    FA6.2
2AE2:  MOVF   00,W
2AE4:  IORWF  FF2,F
....................                delay_ms(20); 
2AE6:  MOVLW  14
2AE8:  MOVLB  0
2AEA:  MOVWF  xE5
2AEC:  CALL   0960
....................                write_eeprom(21,0); 
2AF0:  MOVLW  15
2AF2:  MOVWF  FA9
2AF4:  CLRF   FA8
2AF6:  BCF    FA6.6
2AF8:  BCF    FA6.7
2AFA:  BSF    FA6.2
2AFC:  MOVF   FF2,W
2AFE:  MOVWF  00
2B00:  BCF    FF2.6
2B02:  BCF    FF2.7
2B04:  MOVLB  F
2B06:  MOVLW  55
2B08:  MOVWF  FA7
2B0A:  MOVLW  AA
2B0C:  MOVWF  FA7
2B0E:  BSF    FA6.1
2B10:  BTFSC  FA6.1
2B12:  BRA    2B10
2B14:  BCF    FA6.2
2B16:  MOVF   00,W
2B18:  IORWF  FF2,F
....................                delay_ms(20); 
2B1A:  MOVLW  14
2B1C:  MOVLB  0
2B1E:  MOVWF  xE5
2B20:  CALL   0960
....................                write_eeprom(18,0); 
2B24:  MOVLW  12
2B26:  MOVWF  FA9
2B28:  CLRF   FA8
2B2A:  BCF    FA6.6
2B2C:  BCF    FA6.7
2B2E:  BSF    FA6.2
2B30:  MOVF   FF2,W
2B32:  MOVWF  00
2B34:  BCF    FF2.6
2B36:  BCF    FF2.7
2B38:  MOVLB  F
2B3A:  MOVLW  55
2B3C:  MOVWF  FA7
2B3E:  MOVLW  AA
2B40:  MOVWF  FA7
2B42:  BSF    FA6.1
2B44:  BTFSC  FA6.1
2B46:  BRA    2B44
2B48:  BCF    FA6.2
2B4A:  MOVF   00,W
2B4C:  IORWF  FF2,F
....................                delay_ms(20); 
2B4E:  MOVLW  14
2B50:  MOVLB  0
2B52:  MOVWF  xE5
2B54:  CALL   0960
....................                write_eeprom(19,0); 
2B58:  MOVLW  13
2B5A:  MOVWF  FA9
2B5C:  CLRF   FA8
2B5E:  BCF    FA6.6
2B60:  BCF    FA6.7
2B62:  BSF    FA6.2
2B64:  MOVF   FF2,W
2B66:  MOVWF  00
2B68:  BCF    FF2.6
2B6A:  BCF    FF2.7
2B6C:  MOVLB  F
2B6E:  MOVLW  55
2B70:  MOVWF  FA7
2B72:  MOVLW  AA
2B74:  MOVWF  FA7
2B76:  BSF    FA6.1
2B78:  BTFSC  FA6.1
2B7A:  BRA    2B78
2B7C:  BCF    FA6.2
2B7E:  MOVF   00,W
2B80:  IORWF  FF2,F
....................                delay_ms(20); 
2B82:  MOVLW  14
2B84:  MOVLB  0
2B86:  MOVWF  xE5
2B88:  CALL   0960
....................                lcd_gotoxy(1,1); 
2B8C:  MOVLW  01
2B8E:  MOVWF  xE0
2B90:  MOVWF  xE1
2B92:  CALL   1436
....................                printf(lcd_putc,"                    "); 
2B96:  MOVLW  48
2B98:  MOVWF  FF6
2B9A:  MOVLW  03
2B9C:  MOVWF  FF7
2B9E:  CALL   1506
....................                lcd_gotoxy(1,2); 
2BA2:  MOVLW  01
2BA4:  MOVWF  xE0
2BA6:  MOVLW  02
2BA8:  MOVWF  xE1
2BAA:  CALL   1436
....................                printf(lcd_putc,"  Borrando  Tiempo  "); 
2BAE:  MOVLW  5E
2BB0:  MOVWF  FF6
2BB2:  MOVLW  03
2BB4:  MOVWF  FF7
2BB6:  CALL   1506
....................                lcd_gotoxy(1,3); 
2BBA:  MOVLW  01
2BBC:  MOVWF  xE0
2BBE:  MOVLW  03
2BC0:  MOVWF  xE1
2BC2:  CALL   1436
....................                printf(lcd_putc,"    de Trabajo      "); 
2BC6:  MOVLW  74
2BC8:  MOVWF  FF6
2BCA:  MOVLW  03
2BCC:  MOVWF  FF7
2BCE:  CALL   1506
....................                lcd_gotoxy(1,4); 
2BD2:  MOVLW  01
2BD4:  MOVWF  xE0
2BD6:  MOVLW  04
2BD8:  MOVWF  xE1
2BDA:  CALL   1436
....................                printf(lcd_putc,"                    ");  
2BDE:  MOVLW  8A
2BE0:  MOVWF  FF6
2BE2:  MOVLW  03
2BE4:  MOVWF  FF7
2BE6:  CALL   1506
....................                delay_ms(1000); 
2BEA:  MOVLW  04
2BEC:  MOVWF  xCE
2BEE:  MOVLW  FA
2BF0:  MOVWF  xE5
2BF2:  CALL   0960
2BF6:  DECFSZ xCE,F
2BF8:  BRA    2BEE
....................                printf(lcd_putc,"\f"); 
2BFA:  MOVLW  0C
2BFC:  MOVWF  xDF
2BFE:  CALL   14A0
....................                lcd_init(); 
2C02:  CALL   09F0
....................                reset_cpu(); 
2C06:  RESET
....................             } 
....................          } 
....................       } 
2C08:  BRA    2A36
....................    } 
....................  
....................    while(true){ 
....................    //leeControlRemoto(); 
....................    cuentaTiempoTrabajoFiltro(); 
2C0A:  GOTO   16EC
....................    //if(VelMotor==20){ 
....................    //   Motor_on; 
....................    //   Motor2_on;  
....................    //   set_timer0(0); 
....................    //} 
....................     
....................    //if(VelMotor==0){ 
....................    //   Motor_off; 
....................    //   Motor2_off;  
....................    //   set_timer0(0); 
....................    //} 
.................... //------------Menu0------------------------------------------------------------------    
....................    if(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
2C0E:  MOVF   19,F
2C10:  BTFSS  FD8.2
2C12:  BRA    301E
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
2C14:  MOVLW  01
2C16:  MOVWF  xE0
2C18:  MOVWF  xE1
2C1A:  CALL   1436
....................          printf(lcd_putc,"     Ingrese        "); 
2C1E:  MOVLW  A0
2C20:  MOVWF  FF6
2C22:  MOVLW  03
2C24:  MOVWF  FF7
2C26:  CALL   1506
....................          lcd_gotoxy(1,2); 
2C2A:  MOVLW  01
2C2C:  MOVWF  xE0
2C2E:  MOVLW  02
2C30:  MOVWF  xE1
2C32:  CALL   1436
....................          printf(lcd_putc,"    Contraseña      "); 
2C36:  MOVLW  B6
2C38:  MOVWF  FF6
2C3A:  MOVLW  03
2C3C:  MOVWF  FF7
2C3E:  CALL   1506
....................          lcd_gotoxy(1,3); 
2C42:  MOVLW  01
2C44:  MOVWF  xE0
2C46:  MOVLW  03
2C48:  MOVWF  xE1
2C4A:  CALL   1436
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2C4E:  MOVLW  CC
2C50:  MOVWF  FF6
2C52:  MOVLW  03
2C54:  MOVWF  FF7
2C56:  MOVLW  0A
2C58:  MOVWF  xD2
2C5A:  CALL   158E
2C5E:  MOVFF  39,CE
2C62:  MOVLW  1F
2C64:  MOVWF  xCF
2C66:  CALL   1898
2C6A:  MOVFF  3A,CE
2C6E:  MOVLW  1F
2C70:  MOVWF  xCF
2C72:  CALL   1898
2C76:  MOVFF  3B,CE
2C7A:  MOVLW  1F
2C7C:  MOVWF  xCF
2C7E:  CALL   1898
2C82:  MOVFF  3C,CE
2C86:  MOVLW  1F
2C88:  MOVWF  xCF
2C8A:  CALL   1898
2C8E:  MOVLW  20
2C90:  MOVWF  xDF
2C92:  CALL   14A0
2C96:  MOVLW  20
2C98:  MOVWF  xDF
2C9A:  CALL   14A0
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
2C9E:  MOVFF  1C,E0
2CA2:  MOVLW  04
2CA4:  MOVWF  xE1
2CA6:  CALL   1436
....................          lcd_putc(t[2]); 
2CAA:  MOVFF  38,DF
2CAE:  CALL   14A0
....................           
....................          if(unidad>11&&unidad<14){ 
2CB2:  MOVF   1C,W
2CB4:  SUBLW  0B
2CB6:  BC    2CD6
2CB8:  MOVF   1C,W
2CBA:  SUBLW  0D
2CBC:  BNC   2CD6
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2CBE:  MOVLW  01
2CC0:  SUBWF  1C,W
2CC2:  MOVWF  xCE
2CC4:  MOVWF  xE0
2CC6:  MOVLW  04
2CC8:  MOVWF  xE1
2CCA:  CALL   1436
....................             lcd_putc(t[1]); 
2CCE:  MOVFF  37,DF
2CD2:  CALL   14A0
....................          } 
....................           
....................          Cambio=OFF; 
2CD6:  BCF    18.7
....................       //} 
....................        
....................       if(UP){//Si oprime hacia arriba 
2CD8:  BSF    F92.5
2CDA:  BTFSC  F80.5
2CDC:  BRA    2D10
....................          delay_ms(20); 
2CDE:  MOVLW  14
2CE0:  MOVWF  xE5
2CE2:  CALL   0960
....................          if(UP){ 
2CE6:  BSF    F92.5
2CE8:  BTFSC  F80.5
2CEA:  BRA    2D0E
....................             if(Flanco == 0) { 
2CEC:  BTFSC  17.3
2CEE:  BRA    2D0E
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
2CF0:  MOVLW  0B
2CF2:  SUBWF  1C,W
2CF4:  CLRF   03
2CF6:  ADDLW  39
2CF8:  MOVWF  FE9
2CFA:  MOVLW  00
2CFC:  ADDWFC 03,W
2CFE:  MOVWF  FEA
2D00:  INCF   FEF,F
2D02:  BSF    17.3
2D04:  MOVLW  1E
2D06:  MOVWF  xE5
2D08:  CALL   0960
2D0C:  BSF    18.7
....................             } 
....................          } 
....................       }else{ 
2D0E:  BRA    2D12
....................          Flanco = 0; 
2D10:  BCF    17.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
2D12:  BSF    F96.0
2D14:  BTFSC  F84.0
2D16:  BRA    2D4A
....................          delay_ms(20); 
2D18:  MOVLW  14
2D1A:  MOVWF  xE5
2D1C:  CALL   0960
....................          if(DOWN){ 
2D20:  BSF    F96.0
2D22:  BTFSC  F84.0
2D24:  BRA    2D48
....................             if(Flanco2 == 0) { 
2D26:  BTFSC  17.5
2D28:  BRA    2D48
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
2D2A:  MOVLW  0B
2D2C:  SUBWF  1C,W
2D2E:  CLRF   03
2D30:  ADDLW  39
2D32:  MOVWF  FE9
2D34:  MOVLW  00
2D36:  ADDWFC 03,W
2D38:  MOVWF  FEA
2D3A:  DECF   FEF,F
2D3C:  BSF    17.5
2D3E:  MOVLW  1E
2D40:  MOVWF  xE5
2D42:  CALL   0960
2D46:  BSF    18.7
....................             } 
....................          } 
....................       }else{ 
2D48:  BRA    2D4C
....................          Flanco2 = 0; 
2D4A:  BCF    17.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
2D4C:  BSF    F96.1
2D4E:  BTFSC  F84.1
2D50:  BRA    2D7C
....................          delay_ms(20); 
2D52:  MOVLW  14
2D54:  MOVWF  xE5
2D56:  CALL   0960
....................          if(RIGHT){ 
2D5A:  BSF    F96.1
2D5C:  BTFSC  F84.1
2D5E:  BRA    2D7A
....................             if(Flanco1 == 0) { 
2D60:  BTFSC  17.4
2D62:  BRA    2D7A
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2D64:  BSF    17.4
2D66:  INCF   1C,F
2D68:  MOVLW  1E
2D6A:  MOVWF  xE5
2D6C:  CALL   0960
2D70:  MOVLW  0C
2D72:  MOVWF  xDF
2D74:  CALL   14A0
2D78:  BSF    18.7
....................             } 
....................          } 
....................       }else{ 
2D7A:  BRA    2D7E
....................          Flanco1 = 0; 
2D7C:  BCF    17.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
2D7E:  BSF    F96.2
2D80:  BTFSC  F84.2
2D82:  BRA    2DAE
....................          delay_ms(150); 
2D84:  MOVLW  96
2D86:  MOVWF  xE5
2D88:  CALL   0960
....................          if(IZQU){ 
2D8C:  BSF    F96.2
2D8E:  BTFSC  F84.2
2D90:  BRA    2DAC
....................             if(Flanco3 == 0){ 
2D92:  BTFSC  17.6
2D94:  BRA    2DAC
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2D96:  BSF    17.6
2D98:  DECF   1C,F
2D9A:  MOVLW  1E
2D9C:  MOVWF  xE5
2D9E:  CALL   0960
2DA2:  MOVLW  0C
2DA4:  MOVWF  xDF
2DA6:  CALL   14A0
2DAA:  BSF    18.7
....................             } 
....................          } 
....................       }else{ 
2DAC:  BRA    2DB0
....................         Flanco3 = 0; 
2DAE:  BCF    17.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
2DB0:  MOVLW  0B
2DB2:  SUBWF  1C,W
2DB4:  CLRF   03
2DB6:  ADDLW  39
2DB8:  MOVWF  FE9
2DBA:  MOVLW  00
2DBC:  ADDWFC 03,W
2DBE:  MOVWF  FEA
2DC0:  BTFSC  FEF.7
2DC2:  BRA    2DC6
2DC4:  BRA    2DDA
....................          clave[unidad-11]=9; 
2DC6:  MOVLW  0B
2DC8:  SUBWF  1C,W
2DCA:  CLRF   03
2DCC:  ADDLW  39
2DCE:  MOVWF  FE9
2DD0:  MOVLW  00
2DD2:  ADDWFC 03,W
2DD4:  MOVWF  FEA
2DD6:  MOVLW  09
2DD8:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
2DDA:  MOVLW  0B
2DDC:  SUBWF  1C,W
2DDE:  CLRF   03
2DE0:  ADDLW  39
2DE2:  MOVWF  FE9
2DE4:  MOVLW  00
2DE6:  ADDWFC 03,W
2DE8:  MOVWF  FEA
2DEA:  BTFSC  FEF.7
2DEC:  BRA    2E06
2DEE:  MOVF   FEF,W
2DF0:  SUBLW  09
2DF2:  BC    2E06
....................          clave[unidad-11]=0; 
2DF4:  MOVLW  0B
2DF6:  SUBWF  1C,W
2DF8:  CLRF   03
2DFA:  ADDLW  39
2DFC:  MOVWF  FE9
2DFE:  MOVLW  00
2E00:  ADDWFC 03,W
2E02:  MOVWF  FEA
2E04:  CLRF   FEF
....................         
....................       if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
2E06:  MOVF   1C,W
2E08:  SUBLW  0A
2E0A:  BNC   2E10
....................          unidad=11; 
2E0C:  MOVLW  0B
2E0E:  MOVWF  1C
....................              
....................       if(unidad>14){             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
2E10:  MOVF   1C,W
2E12:  SUBLW  0E
2E14:  BTFSC  FD8.0
2E16:  BRA    301E
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2){ // Si Ingresa clave para reset general del sistema. 
2E18:  MOVF   39,W
2E1A:  SUBLW  03
2E1C:  BNZ   2F00
2E1E:  MOVF   3A,W
2E20:  SUBLW  08
2E22:  BNZ   2F00
2E24:  MOVF   3B,W
2E26:  SUBLW  09
2E28:  BNZ   2F00
2E2A:  MOVF   3C,W
2E2C:  SUBLW  02
2E2E:  BNZ   2F00
....................             write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
2E30:  CLRF   FA9
2E32:  CLRF   FA8
2E34:  BCF    FA6.6
2E36:  BCF    FA6.7
2E38:  BSF    FA6.2
2E3A:  MOVF   FF2,W
2E3C:  MOVWF  00
2E3E:  BCF    FF2.6
2E40:  BCF    FF2.7
2E42:  MOVLB  F
2E44:  MOVLW  55
2E46:  MOVWF  FA7
2E48:  MOVLW  AA
2E4A:  MOVWF  FA7
2E4C:  BSF    FA6.1
2E4E:  BTFSC  FA6.1
2E50:  BRA    2E4E
2E52:  BCF    FA6.2
2E54:  MOVF   00,W
2E56:  IORWF  FF2,F
2E58:  MOVLW  14
2E5A:  MOVLB  0
2E5C:  MOVWF  xE5
2E5E:  CALL   0960
2E62:  MOVLW  01
2E64:  MOVWF  FA9
2E66:  CLRF   FA8
2E68:  BCF    FA6.6
2E6A:  BCF    FA6.7
2E6C:  BSF    FA6.2
2E6E:  MOVF   FF2,W
2E70:  MOVWF  00
2E72:  BCF    FF2.6
2E74:  BCF    FF2.7
2E76:  MOVLB  F
2E78:  MOVLW  55
2E7A:  MOVWF  FA7
2E7C:  MOVLW  AA
2E7E:  MOVWF  FA7
2E80:  BSF    FA6.1
2E82:  BTFSC  FA6.1
2E84:  BRA    2E82
2E86:  BCF    FA6.2
2E88:  MOVF   00,W
2E8A:  IORWF  FF2,F
2E8C:  MOVLW  14
2E8E:  MOVLB  0
2E90:  MOVWF  xE5
2E92:  CALL   0960
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
2E96:  MOVLW  02
2E98:  MOVWF  FA9
2E9A:  CLRF   FA8
2E9C:  BCF    FA6.6
2E9E:  BCF    FA6.7
2EA0:  BSF    FA6.2
2EA2:  MOVF   FF2,W
2EA4:  MOVWF  00
2EA6:  BCF    FF2.6
2EA8:  BCF    FF2.7
2EAA:  MOVLB  F
2EAC:  MOVLW  55
2EAE:  MOVWF  FA7
2EB0:  MOVLW  AA
2EB2:  MOVWF  FA7
2EB4:  BSF    FA6.1
2EB6:  BTFSC  FA6.1
2EB8:  BRA    2EB6
2EBA:  BCF    FA6.2
2EBC:  MOVF   00,W
2EBE:  IORWF  FF2,F
2EC0:  MOVLW  14
2EC2:  MOVLB  0
2EC4:  MOVWF  xE5
2EC6:  CALL   0960
2ECA:  MOVLW  03
2ECC:  MOVWF  FA9
2ECE:  CLRF   FA8
2ED0:  BCF    FA6.6
2ED2:  BCF    FA6.7
2ED4:  BSF    FA6.2
2ED6:  MOVF   FF2,W
2ED8:  MOVWF  00
2EDA:  BCF    FF2.6
2EDC:  BCF    FF2.7
2EDE:  MOVLB  F
2EE0:  MOVLW  55
2EE2:  MOVWF  FA7
2EE4:  MOVLW  AA
2EE6:  MOVWF  FA7
2EE8:  BSF    FA6.1
2EEA:  BTFSC  FA6.1
2EEC:  BRA    2EEA
2EEE:  BCF    FA6.2
2EF0:  MOVF   00,W
2EF2:  IORWF  FF2,F
2EF4:  MOVLW  14
2EF6:  MOVLB  0
2EF8:  MOVWF  xE5
2EFA:  CALL   0960
....................              reset_cpu(); 
2EFE:  RESET
....................          } 
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]){ // Si las claves coinciden pasa a Menu Principal. 
2F00:  MOVF   3D,W
2F02:  SUBWF  39,W
2F04:  BNZ   2FA4
2F06:  MOVF   3E,W
2F08:  SUBWF  3A,W
2F0A:  BNZ   2FA4
2F0C:  MOVF   3F,W
2F0E:  SUBWF  3B,W
2F10:  BNZ   2FA4
2F12:  MOVF   40,W
2F14:  SUBWF  3C,W
2F16:  BNZ   2FA4
....................             lcd_gotoxy(1,1); 
2F18:  MOVLW  01
2F1A:  MOVWF  xE0
2F1C:  MOVWF  xE1
2F1E:  CALL   1436
....................             printf(lcd_putc,"                   "); 
2F22:  MOVLW  E2
2F24:  MOVWF  FF6
2F26:  MOVLW  03
2F28:  MOVWF  FF7
2F2A:  CALL   1506
....................             lcd_gotoxy(1,2); 
2F2E:  MOVLW  01
2F30:  MOVWF  xE0
2F32:  MOVLW  02
2F34:  MOVWF  xE1
2F36:  CALL   1436
....................             printf(lcd_putc,"     Contraseña    "); 
2F3A:  MOVLW  F6
2F3C:  MOVWF  FF6
2F3E:  MOVLW  03
2F40:  MOVWF  FF7
2F42:  CALL   1506
....................             lcd_gotoxy(1,3); 
2F46:  MOVLW  01
2F48:  MOVWF  xE0
2F4A:  MOVLW  03
2F4C:  MOVWF  xE1
2F4E:  CALL   1436
....................             printf(lcd_putc,"      Correcta     "); 
2F52:  MOVLW  0A
2F54:  MOVWF  FF6
2F56:  MOVLW  04
2F58:  MOVWF  FF7
2F5A:  CALL   1506
....................             lcd_gotoxy(1,4); 
2F5E:  MOVLW  01
2F60:  MOVWF  xE0
2F62:  MOVLW  04
2F64:  MOVWF  xE1
2F66:  CALL   1436
....................             printf(lcd_putc,"                   "); 
2F6A:  MOVLW  1E
2F6C:  MOVWF  FF6
2F6E:  MOVLW  04
2F70:  MOVWF  FF7
2F72:  CALL   1506
....................             delay_ms(1000);Menu=50;unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
2F76:  MOVLW  04
2F78:  MOVWF  xCE
2F7A:  MOVLW  FA
2F7C:  MOVWF  xE5
2F7E:  CALL   0960
2F82:  DECFSZ xCE,F
2F84:  BRA    2F7A
2F86:  MOVLW  32
2F88:  MOVWF  19
2F8A:  MOVLW  0B
2F8C:  MOVWF  1C
2F8E:  MOVLW  0C
2F90:  MOVWF  xDF
2F92:  CALL   14A0
2F96:  BSF    18.7
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
2F98:  CLRF   39
2F9A:  CLRF   3A
2F9C:  CLRF   3B
2F9E:  CLRF   3C
2FA0:  BSF    18.7
....................          } 
....................          else{                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
2FA2:  BRA    301E
....................             lcd_gotoxy(1,1); 
2FA4:  MOVLW  01
2FA6:  MOVWF  xE0
2FA8:  MOVWF  xE1
2FAA:  CALL   1436
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
2FAE:  MOVLW  01
2FB0:  MOVWF  xE0
2FB2:  MOVLW  02
2FB4:  MOVWF  xE1
2FB6:  CALL   1436
....................             printf(lcd_putc,"     Contraseña    "); 
2FBA:  MOVLW  32
2FBC:  MOVWF  FF6
2FBE:  MOVLW  04
2FC0:  MOVWF  FF7
2FC2:  CALL   1506
....................             lcd_gotoxy(1,3); 
2FC6:  MOVLW  01
2FC8:  MOVWF  xE0
2FCA:  MOVLW  03
2FCC:  MOVWF  xE1
2FCE:  CALL   1436
....................             printf(lcd_putc,"     Incorrecta    "); 
2FD2:  MOVLW  46
2FD4:  MOVWF  FF6
2FD6:  MOVLW  04
2FD8:  MOVWF  FF7
2FDA:  CALL   1506
....................             lcd_gotoxy(1,4); 
2FDE:  MOVLW  01
2FE0:  MOVWF  xE0
2FE2:  MOVLW  04
2FE4:  MOVWF  xE1
2FE6:  CALL   1436
....................             printf(lcd_putc,"                   "); 
2FEA:  MOVLW  5A
2FEC:  MOVWF  FF6
2FEE:  MOVLW  04
2FF0:  MOVWF  FF7
2FF2:  CALL   1506
....................             delay_ms(1000);unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
2FF6:  MOVLW  04
2FF8:  MOVWF  xCE
2FFA:  MOVLW  FA
2FFC:  MOVWF  xE5
2FFE:  CALL   0960
3002:  DECFSZ xCE,F
3004:  BRA    2FFA
3006:  MOVLW  0B
3008:  MOVWF  1C
300A:  MOVLW  0C
300C:  MOVWF  xDF
300E:  CALL   14A0
3012:  BSF    18.7
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
3014:  CLRF   39
3016:  CLRF   3A
3018:  CLRF   3B
301A:  CLRF   3C
301C:  BSF    18.7
....................          } 
....................       } 
....................    } 
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
301E:  DECFSZ 19,W
3020:  BRA    3258
....................       EliminaRuido(); 
3022:  CALL   0004
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
3026:  MOVLW  01
3028:  MOVWF  xE0
302A:  MOVWF  xE1
302C:  CALL   1436
....................          printf(lcd_putc,"---MENU PRINCIPAL---"); 
3030:  MOVLW  6E
3032:  MOVWF  FF6
3034:  MOVLW  04
3036:  MOVWF  FF7
3038:  CALL   1506
....................          mensajes(1+paso,2); 
303C:  MOVLW  01
303E:  ADDWF  35,W
3040:  MOVWF  xCE
3042:  MOVWF  xCF
3044:  MOVLW  02
3046:  MOVWF  xD0
3048:  CALL   1960
....................          mensajes(2+paso,3); 
304C:  MOVLW  02
304E:  ADDWF  35,W
3050:  MOVWF  xCE
3052:  MOVWF  xCF
3054:  MOVLW  03
3056:  MOVWF  xD0
3058:  CALL   1960
....................          mensajes(3+paso,4); 
305C:  MOVLW  03
305E:  ADDWF  35,W
3060:  MOVWF  xCE
3062:  MOVWF  xCF
3064:  MOVLW  04
3066:  MOVWF  xD0
3068:  CALL   1960
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
306C:  MOVLW  01
306E:  MOVWF  xE0
3070:  MOVFF  1D,E1
3074:  CALL   1436
....................         lcd_putc(t[0]); 
3078:  MOVFF  36,DF
307C:  CALL   14A0
....................  
....................         if(Flecha==2) 
3080:  MOVF   1D,W
3082:  SUBLW  02
3084:  BNZ   30AE
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
3086:  MOVLW  01
3088:  MOVWF  xE0
308A:  MOVLW  04
308C:  MOVWF  xE1
308E:  CALL   1436
....................             lcd_putc(t[1]); 
3092:  MOVFF  37,DF
3096:  CALL   14A0
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
309A:  MOVLW  01
309C:  MOVWF  xE0
309E:  MOVLW  03
30A0:  MOVWF  xE1
30A2:  CALL   1436
....................             lcd_putc(t[1]); 
30A6:  MOVFF  37,DF
30AA:  CALL   14A0
....................           } 
....................          
....................         if(Flecha==4) 
30AE:  MOVF   1D,W
30B0:  SUBLW  04
30B2:  BNZ   30DC
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
30B4:  MOVLW  01
30B6:  MOVWF  xE0
30B8:  MOVLW  02
30BA:  MOVWF  xE1
30BC:  CALL   1436
....................             lcd_putc(t[1]); 
30C0:  MOVFF  37,DF
30C4:  CALL   14A0
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
30C8:  MOVLW  01
30CA:  MOVWF  xE0
30CC:  MOVLW  03
30CE:  MOVWF  xE1
30D0:  CALL   1436
....................             lcd_putc(t[1]); 
30D4:  MOVFF  37,DF
30D8:  CALL   14A0
....................           } 
....................          
....................         if(Flecha==3) 
30DC:  MOVF   1D,W
30DE:  SUBLW  03
30E0:  BNZ   310A
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
30E2:  MOVLW  01
30E4:  MOVWF  xE0
30E6:  MOVLW  04
30E8:  MOVWF  xE1
30EA:  CALL   1436
....................             lcd_putc(t[1]); 
30EE:  MOVFF  37,DF
30F2:  CALL   14A0
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
30F6:  MOVLW  01
30F8:  MOVWF  xE0
30FA:  MOVLW  02
30FC:  MOVWF  xE1
30FE:  CALL   1436
....................             lcd_putc(t[1]); 
3102:  MOVFF  37,DF
3106:  CALL   14A0
....................           } 
....................          Cambio=OFF; 
310A:  BCF    18.7
....................      // } 
....................          
....................       if(UP){//Si oprime hacia arriba 
310C:  BSF    F92.5
310E:  BTFSC  F80.5
3110:  BRA    313C
....................          delay_ms(20); 
3112:  MOVLW  14
3114:  MOVWF  xE5
3116:  CALL   0960
....................          if(UP){ 
311A:  BSF    F92.5
311C:  BTFSC  F80.5
311E:  BRA    313A
....................             if(Flanco == 0){ 
3120:  BTFSC  17.3
3122:  BRA    313A
....................                Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30);Cambio=ON; 
3124:  DECF   1F,F
3126:  DECF   1D,F
3128:  MOVLW  01
312A:  ADDWF  1D,W
312C:  MOVWF  1E
312E:  BSF    17.3
3130:  MOVLW  1E
3132:  MOVWF  xE5
3134:  CALL   0960
3138:  BSF    18.7
....................             } 
....................          } 
....................       }else{ 
313A:  BRA    313E
....................          Flanco = 0; 
313C:  BCF    17.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
313E:  BSF    F96.0
3140:  BTFSC  F84.0
3142:  BRA    316E
....................          delay_ms(20); 
3144:  MOVLW  14
3146:  MOVWF  xE5
3148:  CALL   0960
....................          if(DOWN){ 
314C:  BSF    F96.0
314E:  BTFSC  F84.0
3150:  BRA    316C
....................             if(Flanco2 == 0){ 
3152:  BTFSC  17.5
3154:  BRA    316C
....................                Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30);Cambio=ON; 
3156:  INCF   1F,F
3158:  INCF   1D,F
315A:  MOVLW  01
315C:  SUBWF  1D,W
315E:  MOVWF  1E
3160:  BSF    17.5
3162:  MOVLW  1E
3164:  MOVWF  xE5
3166:  CALL   0960
316A:  BSF    18.7
....................             } 
....................          } 
....................       }else{ 
316C:  BRA    3170
....................          Flanco2 = 0; 
316E:  BCF    17.5
....................       } 
....................     
....................          
....................       if(Flecha2>nMenuH){ 
3170:  MOVF   1F,W
3172:  SUBWF  21,W
3174:  BC    3186
....................          paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4; 
3176:  INCF   35,F
3178:  MOVFF  1F,21
317C:  MOVLW  02
317E:  SUBWF  21,W
3180:  MOVWF  20
3182:  MOVLW  04
3184:  MOVWF  1D
....................       } 
....................          
....................       if(Flecha2<nMenuL){ 
3186:  MOVF   20,W
3188:  SUBWF  1F,W
318A:  BC    319C
....................          paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2; 
318C:  DECF   35,F
318E:  MOVFF  1F,20
3192:  MOVLW  02
3194:  ADDWF  20,W
3196:  MOVWF  21
3198:  MOVLW  02
319A:  MOVWF  1D
....................       } 
....................          
....................       if(Flecha2>n_opcionH){ 
319C:  MOVF   1F,W
319E:  SUBWF  1A,W
31A0:  BC    31B4
....................          Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2; 
31A2:  MOVFF  1B,1F
31A6:  MOVLW  02
31A8:  MOVWF  1D
31AA:  CLRF   35
31AC:  MOVFF  1F,20
31B0:  ADDWF  20,W
31B2:  MOVWF  21
....................       } 
....................          
....................       if(Flecha2<n_opcionL){ 
31B4:  MOVF   1B,W
31B6:  SUBWF  1F,W
31B8:  BC    31D0
....................          Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2; 
31BA:  MOVFF  1A,1F
31BE:  MOVLW  04
31C0:  MOVWF  1D
31C2:  SUBWF  1A,W
31C4:  MOVWF  35
31C6:  MOVFF  1F,21
31CA:  MOVLW  02
31CC:  SUBWF  21,W
31CE:  MOVWF  20
....................       } 
....................          
....................       if(paso<0) 
31D0:  BTFSC  35.7
31D2:  BRA    31D6
31D4:  BRA    31D8
....................          paso=0; 
31D6:  CLRF   35
....................           
....................       if(RIGHT){// Si oprime derecha 
31D8:  BSF    F96.1
31DA:  BTFSC  F84.1
31DC:  BRA    3224
....................          delay_ms(20); 
31DE:  MOVLW  14
31E0:  MOVWF  xE5
31E2:  CALL   0960
....................          if(RIGHT){ 
31E6:  BSF    F96.1
31E8:  BTFSC  F84.1
31EA:  BRA    3220
....................             if(Flanco1 == 0){ 
31EC:  BTFSC  17.4
31EE:  BRA    3220
....................                Flanco1 = 1;Menu=Flecha2;Flecha=3;delay_ms(300);printf(lcd_putc,"\f"); 
31F0:  BSF    17.4
31F2:  MOVFF  1F,19
31F6:  MOVLW  03
31F8:  MOVWF  1D
31FA:  MOVLW  02
31FC:  MOVWF  xCE
31FE:  MOVLW  96
3200:  MOVWF  xE5
3202:  CALL   0960
3206:  DECFSZ xCE,F
3208:  BRA    31FE
320A:  MOVLW  0C
320C:  MOVWF  xDF
320E:  CALL   14A0
....................                if(Menu==6){ 
3212:  MOVF   19,W
3214:  SUBLW  06
3216:  BNZ   3220
....................                   clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
3218:  CLRF   39
321A:  CLRF   3A
321C:  CLRF   3B
321E:  CLRF   3C
....................                } 
....................             } 
....................          } 
....................          Cambio=ON; 
3220:  BSF    18.7
....................       }else{ 
3222:  BRA    3226
....................         Flanco1 = 0; 
3224:  BCF    17.4
....................       } 
....................              
....................       if(IZQU){ 
3226:  BSF    F96.2
3228:  BTFSC  F84.2
322A:  BRA    3258
....................          delay_ms(20); 
322C:  MOVLW  14
322E:  MOVWF  xE5
3230:  CALL   0960
....................          if(IZQU){ 
3234:  BSF    F96.2
3236:  BTFSC  F84.2
3238:  BRA    3258
....................             delay_ms(500);Menu=50;printf(lcd_putc,"\f");Cambio=ON; 
323A:  MOVLW  02
323C:  MOVWF  xCE
323E:  MOVLW  FA
3240:  MOVWF  xE5
3242:  CALL   0960
3246:  DECFSZ xCE,F
3248:  BRA    323E
324A:  MOVLW  32
324C:  MOVWF  19
324E:  MOVLW  0C
3250:  MOVWF  xDF
3252:  CALL   14A0
3256:  BSF    18.7
....................          } 
....................       } 
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de tiempo de trabajo de Luz UV    
3258:  MOVF   19,W
325A:  SUBLW  02
325C:  BTFSS  FD8.2
325E:  BRA    34B8
....................    EliminaRuido(); 
3260:  CALL   0004
....................    //if(Cambio){ 
....................       lcd_gotoxy(1,1); 
3264:  MOVLW  01
3266:  MOVWF  xE0
3268:  MOVWF  xE1
326A:  CALL   1436
....................       printf(lcd_putc,"    Temporizador     "); 
326E:  MOVLW  84
3270:  MOVWF  FF6
3272:  MOVLW  04
3274:  MOVWF  FF7
3276:  CALL   1506
....................       lcd_gotoxy(1,2); 
327A:  MOVLW  01
327C:  MOVWF  xE0
327E:  MOVLW  02
3280:  MOVWF  xE1
3282:  CALL   1436
....................       printf(lcd_putc,"       Luz UV        "); 
3286:  MOVLW  9A
3288:  MOVWF  FF6
328A:  MOVLW  04
328C:  MOVWF  FF7
328E:  CALL   1506
....................       lcd_gotoxy(6,3); 
3292:  MOVLW  06
3294:  MOVWF  xE0
3296:  MOVLW  03
3298:  MOVWF  xE1
329A:  CALL   1436
....................       printf(lcd_putc,"%03u:%02u (M:S)  ",tempo_minutos_pro,tempo_segundos_pro);  
329E:  MOVFF  2A,CE
32A2:  MOVLW  03
32A4:  MOVWF  xCF
32A6:  CALL   15D4
32AA:  MOVLW  3A
32AC:  MOVWF  xDF
32AE:  CALL   14A0
32B2:  MOVFF  2B,CE
32B6:  MOVLW  01
32B8:  MOVWF  xCF
32BA:  CALL   15D4
32BE:  MOVLW  B9
32C0:  MOVWF  FF6
32C2:  MOVLW  04
32C4:  MOVWF  FF7
32C6:  MOVLW  08
32C8:  MOVWF  xD2
32CA:  CALL   158E
....................        
....................       lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
32CE:  MOVLW  06
32D0:  ADDWF  2F,W
32D2:  MOVWF  xCE
32D4:  MOVWF  xE0
32D6:  MOVLW  04
32D8:  MOVWF  xE1
32DA:  CALL   1436
....................       lcd_putc(t[2]); 
32DE:  MOVFF  38,DF
32E2:  CALL   14A0
....................        
....................       Cambio=OFF; 
32E6:  BCF    18.7
.................... //   } 
....................     
....................    if(UP) 
32E8:  BSF    F92.5
32EA:  BTFSC  F80.5
32EC:  BRA    333A
....................    { 
....................       delay_ms(20); 
32EE:  MOVLW  14
32F0:  MOVWF  xE5
32F2:  CALL   0960
....................       if(UP){ 
32F6:  BSF    F92.5
32F8:  BTFSC  F80.5
32FA:  BRA    333A
....................          if(unidad2==1) 
32FC:  DECFSZ 2F,W
32FE:  BRA    331A
....................          { 
....................             if(tempo_minutos_pro<240) 
3300:  MOVF   2A,W
3302:  SUBLW  EF
3304:  BNC   331A
....................             { 
....................                tempo_minutos_pro+=5;delay_ms(300); 
3306:  MOVLW  05
3308:  ADDWF  2A,F
330A:  MOVLW  02
330C:  MOVWF  xCE
330E:  MOVLW  96
3310:  MOVWF  xE5
3312:  CALL   0960
3316:  DECFSZ xCE,F
3318:  BRA    330E
....................             } 
....................          } 
....................           
....................          if(unidad2==4) 
331A:  MOVF   2F,W
331C:  SUBLW  04
331E:  BNZ   3338
....................          { 
....................             if(tempo_segundos_pro<59) 
3320:  MOVF   2B,W
3322:  SUBLW  3A
3324:  BNC   3338
....................             { 
....................                tempo_segundos_pro++;delay_ms(300); 
3326:  INCF   2B,F
3328:  MOVLW  02
332A:  MOVWF  xCE
332C:  MOVLW  96
332E:  MOVWF  xE5
3330:  CALL   0960
3334:  DECFSZ xCE,F
3336:  BRA    332C
....................             } 
....................          }      
....................       Cambio=ON; 
3338:  BSF    18.7
....................       } 
....................    } 
....................     
....................    if(DOWN) 
333A:  BSF    F96.0
333C:  BTFSC  F84.0
333E:  BRA    3388
....................    { 
....................       delay_ms(20); 
3340:  MOVLW  14
3342:  MOVWF  xE5
3344:  CALL   0960
....................       if(DOWN){ 
3348:  BSF    F96.0
334A:  BTFSC  F84.0
334C:  BRA    3388
....................          if(unidad2==1) 
334E:  DECFSZ 2F,W
3350:  BRA    336A
....................          { 
....................             if(tempo_minutos_pro>0) 
3352:  MOVF   2A,F
3354:  BZ    336A
....................             { 
....................                tempo_minutos_pro-=5;delay_ms(300); 
3356:  MOVLW  05
3358:  SUBWF  2A,F
335A:  MOVLW  02
335C:  MOVWF  xCE
335E:  MOVLW  96
3360:  MOVWF  xE5
3362:  CALL   0960
3366:  DECFSZ xCE,F
3368:  BRA    335E
....................             }  
....................          } 
....................           
....................          if(unidad2==4) 
336A:  MOVF   2F,W
336C:  SUBLW  04
336E:  BNZ   3386
....................          { 
....................             if(tempo_segundos_pro>0) 
3370:  MOVF   2B,F
3372:  BZ    3386
....................             { 
....................                tempo_segundos_pro--;delay_ms(300); 
3374:  DECF   2B,F
3376:  MOVLW  02
3378:  MOVWF  xCE
337A:  MOVLW  96
337C:  MOVWF  xE5
337E:  CALL   0960
3382:  DECFSZ xCE,F
3384:  BRA    337A
....................             }    
....................          } 
....................       Cambio=ON; 
3386:  BSF    18.7
....................       } 
....................    } 
....................     
....................    if(RIGHT) 
3388:  BSF    F96.1
338A:  BTFSC  F84.1
338C:  BRA    33CA
....................    { 
....................       delay_ms(20); 
338E:  MOVLW  14
3390:  MOVWF  xE5
3392:  CALL   0960
....................       if(RIGHT){ 
3396:  BSF    F96.1
3398:  BTFSC  F84.1
339A:  BRA    33CA
....................          if(unidad2==1) 
339C:  DECFSZ 2F,W
339E:  BRA    33A6
....................          { 
....................             unidad2=4; 
33A0:  MOVLW  04
33A2:  MOVWF  2F
....................          } 
....................          else 
33A4:  BRA    33B0
....................          { 
....................             if(unidad2==4) 
33A6:  MOVF   2F,W
33A8:  SUBLW  04
33AA:  BNZ   33B0
....................             { 
....................                unidad2=1; 
33AC:  MOVLW  01
33AE:  MOVWF  2F
....................             } 
....................          } 
....................       delay_ms(500); 
33B0:  MOVLW  02
33B2:  MOVWF  xCE
33B4:  MOVLW  FA
33B6:  MOVWF  xE5
33B8:  CALL   0960
33BC:  DECFSZ xCE,F
33BE:  BRA    33B4
....................       printf(lcd_putc,"\f"); 
33C0:  MOVLW  0C
33C2:  MOVWF  xDF
33C4:  CALL   14A0
....................       Cambio=ON; 
33C8:  BSF    18.7
....................       } 
....................    } 
....................     
....................    if(IZQU) 
33CA:  BSF    F96.2
33CC:  BTFSC  F84.2
33CE:  BRA    34B8
....................    { 
....................       if(IZQU){ 
33D0:  BSF    F96.2
33D2:  BTFSC  F84.2
33D4:  BRA    34B8
....................          delay_ms(200); 
33D6:  MOVLW  C8
33D8:  MOVWF  xE5
33DA:  CALL   0960
....................          printf(lcd_putc,"\f"); 
33DE:  MOVLW  0C
33E0:  MOVWF  xDF
33E2:  CALL   14A0
....................          lcd_gotoxy(1,2); 
33E6:  MOVLW  01
33E8:  MOVWF  xE0
33EA:  MOVLW  02
33EC:  MOVWF  xE1
33EE:  CALL   1436
....................          printf(lcd_putc,"Tiempo Almacenado"); 
33F2:  MOVLW  C2
33F4:  MOVWF  FF6
33F6:  MOVLW  04
33F8:  MOVWF  FF7
33FA:  CALL   1506
....................          lcd_gotoxy(1,3); 
33FE:  MOVLW  01
3400:  MOVWF  xE0
3402:  MOVLW  03
3404:  MOVWF  xE1
3406:  CALL   1436
....................          printf(lcd_putc,"  Correctamente  "); 
340A:  MOVLW  D4
340C:  MOVWF  FF6
340E:  MOVLW  04
3410:  MOVWF  FF7
3412:  CALL   1506
....................          write_eeprom(5,tempo_minutos_pro); 
3416:  MOVLW  05
3418:  MOVWF  FA9
341A:  MOVFF  2A,FA8
341E:  BCF    FA6.6
3420:  BCF    FA6.7
3422:  BSF    FA6.2
3424:  MOVF   FF2,W
3426:  MOVWF  00
3428:  BCF    FF2.6
342A:  BCF    FF2.7
342C:  MOVLB  F
342E:  MOVLW  55
3430:  MOVWF  FA7
3432:  MOVLW  AA
3434:  MOVWF  FA7
3436:  BSF    FA6.1
3438:  BTFSC  FA6.1
343A:  BRA    3438
343C:  BCF    FA6.2
343E:  MOVF   00,W
3440:  IORWF  FF2,F
....................          delay_ms(20); 
3442:  MOVLW  14
3444:  MOVLB  0
3446:  MOVWF  xE5
3448:  CALL   0960
....................          write_eeprom(6,tempo_segundos_pro); 
344C:  MOVLW  06
344E:  MOVWF  FA9
3450:  MOVFF  2B,FA8
3454:  BCF    FA6.6
3456:  BCF    FA6.7
3458:  BSF    FA6.2
345A:  MOVF   FF2,W
345C:  MOVWF  00
345E:  BCF    FF2.6
3460:  BCF    FF2.7
3462:  MOVLB  F
3464:  MOVLW  55
3466:  MOVWF  FA7
3468:  MOVLW  AA
346A:  MOVWF  FA7
346C:  BSF    FA6.1
346E:  BTFSC  FA6.1
3470:  BRA    346E
3472:  BCF    FA6.2
3474:  MOVF   00,W
3476:  IORWF  FF2,F
....................          delay_ms(20); 
3478:  MOVLW  14
347A:  MOVLB  0
347C:  MOVWF  xE5
347E:  CALL   0960
....................          tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
3482:  MOVFF  2A,28
3486:  MOVFF  2B,29
....................          delay_ms(700); 
348A:  MOVLW  04
348C:  MOVWF  xCE
348E:  MOVLW  AF
3490:  MOVWF  xE5
3492:  CALL   0960
3496:  DECFSZ xCE,F
3498:  BRA    348E
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
349A:  MOVLW  1E
349C:  MOVWF  xE5
349E:  CALL   0960
34A2:  MOVLW  01
34A4:  MOVWF  19
34A6:  CLRF   35
34A8:  MOVLW  02
34AA:  MOVWF  1D
34AC:  MOVWF  1F
34AE:  MOVLW  0C
34B0:  MOVWF  xDF
34B2:  CALL   14A0
....................          Cambio=ON; 
34B6:  BSF    18.7
....................       } 
....................    }   
....................   } 
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................  
.................... //----------------Menu3--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu para Cambio de Contraseña 
34B8:  MOVF   19,W
34BA:  SUBLW  03
34BC:  BTFSS  FD8.2
34BE:  BRA    380A
....................       EliminaRuido(); 
34C0:  CALL   0004
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
34C4:  MOVLW  01
34C6:  MOVWF  xE0
34C8:  MOVWF  xE1
34CA:  CALL   1436
....................          printf(lcd_putc,"     Ingrese        "); 
34CE:  MOVLW  E6
34D0:  MOVWF  FF6
34D2:  MOVLW  04
34D4:  MOVWF  FF7
34D6:  CALL   1506
....................          lcd_gotoxy(1,2); 
34DA:  MOVLW  01
34DC:  MOVWF  xE0
34DE:  MOVLW  02
34E0:  MOVWF  xE1
34E2:  CALL   1436
....................          printf(lcd_putc,"    Contraseña      "); 
34E6:  MOVLW  FC
34E8:  MOVWF  FF6
34EA:  MOVLW  04
34EC:  MOVWF  FF7
34EE:  CALL   1506
....................          lcd_gotoxy(1,3); 
34F2:  MOVLW  01
34F4:  MOVWF  xE0
34F6:  MOVLW  03
34F8:  MOVWF  xE1
34FA:  CALL   1436
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
34FE:  MOVLW  12
3500:  MOVWF  FF6
3502:  MOVLW  05
3504:  MOVWF  FF7
3506:  MOVLW  0A
3508:  MOVWF  xD2
350A:  CALL   158E
350E:  MOVFF  39,CE
3512:  MOVLW  1F
3514:  MOVWF  xCF
3516:  CALL   1898
351A:  MOVFF  3A,CE
351E:  MOVLW  1F
3520:  MOVWF  xCF
3522:  CALL   1898
3526:  MOVFF  3B,CE
352A:  MOVLW  1F
352C:  MOVWF  xCF
352E:  CALL   1898
3532:  MOVFF  3C,CE
3536:  MOVLW  1F
3538:  MOVWF  xCF
353A:  CALL   1898
353E:  MOVLW  20
3540:  MOVWF  xDF
3542:  CALL   14A0
3546:  MOVLW  20
3548:  MOVWF  xDF
354A:  CALL   14A0
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
354E:  MOVFF  1C,E0
3552:  MOVLW  04
3554:  MOVWF  xE1
3556:  CALL   1436
....................          lcd_putc(t[2]); 
355A:  MOVFF  38,DF
355E:  CALL   14A0
....................           
....................          if(unidad>11&&unidad<14){ 
3562:  MOVF   1C,W
3564:  SUBLW  0B
3566:  BC    3586
3568:  MOVF   1C,W
356A:  SUBLW  0D
356C:  BNC   3586
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
356E:  MOVLW  01
3570:  SUBWF  1C,W
3572:  MOVWF  xCE
3574:  MOVWF  xE0
3576:  MOVLW  04
3578:  MOVWF  xE1
357A:  CALL   1436
....................             lcd_putc(t[1]); 
357E:  MOVFF  37,DF
3582:  CALL   14A0
....................          } 
....................           
....................          Cambio=OFF; 
3586:  BCF    18.7
....................       //} 
....................        
....................       if(UP){//Si oprime hacia arriba 
3588:  BSF    F92.5
358A:  BTFSC  F80.5
358C:  BRA    35C0
....................          delay_ms(20); 
358E:  MOVLW  14
3590:  MOVWF  xE5
3592:  CALL   0960
....................          if(UP){ 
3596:  BSF    F92.5
3598:  BTFSC  F80.5
359A:  BRA    35BE
....................             if(Flanco == 0) { 
359C:  BTFSC  17.3
359E:  BRA    35BE
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
35A0:  MOVLW  0B
35A2:  SUBWF  1C,W
35A4:  CLRF   03
35A6:  ADDLW  39
35A8:  MOVWF  FE9
35AA:  MOVLW  00
35AC:  ADDWFC 03,W
35AE:  MOVWF  FEA
35B0:  INCF   FEF,F
35B2:  BSF    17.3
35B4:  MOVLW  1E
35B6:  MOVWF  xE5
35B8:  CALL   0960
35BC:  BSF    18.7
....................             } 
....................          } 
....................       }else{ 
35BE:  BRA    35C2
....................          Flanco = 0; 
35C0:  BCF    17.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
35C2:  BSF    F96.0
35C4:  BTFSC  F84.0
35C6:  BRA    35FA
....................          delay_ms(20); 
35C8:  MOVLW  14
35CA:  MOVWF  xE5
35CC:  CALL   0960
....................          if(DOWN){ 
35D0:  BSF    F96.0
35D2:  BTFSC  F84.0
35D4:  BRA    35F8
....................             if(Flanco2 == 0) { 
35D6:  BTFSC  17.5
35D8:  BRA    35F8
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
35DA:  MOVLW  0B
35DC:  SUBWF  1C,W
35DE:  CLRF   03
35E0:  ADDLW  39
35E2:  MOVWF  FE9
35E4:  MOVLW  00
35E6:  ADDWFC 03,W
35E8:  MOVWF  FEA
35EA:  DECF   FEF,F
35EC:  BSF    17.5
35EE:  MOVLW  1E
35F0:  MOVWF  xE5
35F2:  CALL   0960
35F6:  BSF    18.7
....................             } 
....................          } 
....................       }else{ 
35F8:  BRA    35FC
....................          Flanco2 = 0; 
35FA:  BCF    17.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
35FC:  BSF    F96.1
35FE:  BTFSC  F84.1
3600:  BRA    362C
....................          delay_ms(20); 
3602:  MOVLW  14
3604:  MOVWF  xE5
3606:  CALL   0960
....................          if(RIGHT){ 
360A:  BSF    F96.1
360C:  BTFSC  F84.1
360E:  BRA    362A
....................             if(Flanco1 == 0) { 
3610:  BTFSC  17.4
3612:  BRA    362A
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
3614:  BSF    17.4
3616:  INCF   1C,F
3618:  MOVLW  1E
361A:  MOVWF  xE5
361C:  CALL   0960
3620:  MOVLW  0C
3622:  MOVWF  xDF
3624:  CALL   14A0
3628:  BSF    18.7
....................             } 
....................          } 
....................       }else{ 
362A:  BRA    362E
....................          Flanco1 = 0; 
362C:  BCF    17.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
362E:  BSF    F96.2
3630:  BTFSC  F84.2
3632:  BRA    365E
....................          delay_ms(150); 
3634:  MOVLW  96
3636:  MOVWF  xE5
3638:  CALL   0960
....................          if(IZQU){ 
363C:  BSF    F96.2
363E:  BTFSC  F84.2
3640:  BRA    365C
....................             if(Flanco3 == 0){ 
3642:  BTFSC  17.6
3644:  BRA    365C
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
3646:  BSF    17.6
3648:  DECF   1C,F
364A:  MOVLW  1E
364C:  MOVWF  xE5
364E:  CALL   0960
3652:  MOVLW  0C
3654:  MOVWF  xDF
3656:  CALL   14A0
365A:  BSF    18.7
....................             } 
....................          } 
....................       }else{ 
365C:  BRA    3660
....................         Flanco3 = 0; 
365E:  BCF    17.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
3660:  MOVLW  0B
3662:  SUBWF  1C,W
3664:  CLRF   03
3666:  ADDLW  39
3668:  MOVWF  FE9
366A:  MOVLW  00
366C:  ADDWFC 03,W
366E:  MOVWF  FEA
3670:  BTFSC  FEF.7
3672:  BRA    3676
3674:  BRA    368A
....................          clave[unidad-11]=9; 
3676:  MOVLW  0B
3678:  SUBWF  1C,W
367A:  CLRF   03
367C:  ADDLW  39
367E:  MOVWF  FE9
3680:  MOVLW  00
3682:  ADDWFC 03,W
3684:  MOVWF  FEA
3686:  MOVLW  09
3688:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
368A:  MOVLW  0B
368C:  SUBWF  1C,W
368E:  CLRF   03
3690:  ADDLW  39
3692:  MOVWF  FE9
3694:  MOVLW  00
3696:  ADDWFC 03,W
3698:  MOVWF  FEA
369A:  BTFSC  FEF.7
369C:  BRA    36B6
369E:  MOVF   FEF,W
36A0:  SUBLW  09
36A2:  BC    36B6
....................          clave[unidad-11]=0; 
36A4:  MOVLW  0B
36A6:  SUBWF  1C,W
36A8:  CLRF   03
36AA:  ADDLW  39
36AC:  MOVWF  FE9
36AE:  MOVLW  00
36B0:  ADDWFC 03,W
36B2:  MOVWF  FEA
36B4:  CLRF   FEF
....................         
....................       if(unidad<11){             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
36B6:  MOVF   1C,W
36B8:  SUBLW  0A
36BA:  BNC   36DC
....................          unidad=11; 
36BC:  MOVLW  0B
36BE:  MOVWF  1C
....................          Menu=1; 
36C0:  MOVLW  01
36C2:  MOVWF  19
....................          paso=0; 
36C4:  CLRF   35
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
36C6:  CLRF   39
36C8:  CLRF   3A
36CA:  CLRF   3B
36CC:  CLRF   3C
36CE:  BSF    18.7
....................          unidad=11;printf(lcd_putc,"\f"); 
36D0:  MOVLW  0B
36D2:  MOVWF  1C
36D4:  MOVLW  0C
36D6:  MOVWF  xDF
36D8:  CALL   14A0
....................       } 
....................         
....................       if(unidad>14){// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
36DC:  MOVF   1C,W
36DE:  SUBLW  0E
36E0:  BTFSC  FD8.0
36E2:  BRA    380A
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]){ 
36E4:  MOVF   3D,W
36E6:  SUBWF  39,W
36E8:  BNZ   3786
36EA:  MOVF   3E,W
36EC:  SUBWF  3A,W
36EE:  BNZ   3786
36F0:  MOVF   3F,W
36F2:  SUBWF  3B,W
36F4:  BNZ   3786
36F6:  MOVF   40,W
36F8:  SUBWF  3C,W
36FA:  BNZ   3786
....................             lcd_gotoxy(1,1); 
36FC:  MOVLW  01
36FE:  MOVWF  xE0
3700:  MOVWF  xE1
3702:  CALL   1436
....................             printf(lcd_putc,"                    "); 
3706:  MOVLW  28
3708:  MOVWF  FF6
370A:  MOVLW  05
370C:  MOVWF  FF7
370E:  CALL   1506
....................             lcd_gotoxy(1,2); 
3712:  MOVLW  01
3714:  MOVWF  xE0
3716:  MOVLW  02
3718:  MOVWF  xE1
371A:  CALL   1436
....................             printf(lcd_putc,"     Contraseña     "); 
371E:  MOVLW  3E
3720:  MOVWF  FF6
3722:  MOVLW  05
3724:  MOVWF  FF7
3726:  CALL   1506
....................             lcd_gotoxy(1,3); 
372A:  MOVLW  01
372C:  MOVWF  xE0
372E:  MOVLW  03
3730:  MOVWF  xE1
3732:  CALL   1436
....................             printf(lcd_putc,"      Correcta      "); 
3736:  MOVLW  54
3738:  MOVWF  FF6
373A:  MOVLW  05
373C:  MOVWF  FF7
373E:  CALL   1506
....................             lcd_gotoxy(1,4); 
3742:  MOVLW  01
3744:  MOVWF  xE0
3746:  MOVLW  04
3748:  MOVWF  xE1
374A:  CALL   1436
....................             printf(lcd_putc,"                    "); 
374E:  MOVLW  6A
3750:  MOVWF  FF6
3752:  MOVLW  05
3754:  MOVWF  FF7
3756:  CALL   1506
....................             delay_ms(500);Menu=61;unidad=11;printf(lcd_putc,"\f"); 
375A:  MOVLW  02
375C:  MOVWF  xCE
375E:  MOVLW  FA
3760:  MOVWF  xE5
3762:  CALL   0960
3766:  DECFSZ xCE,F
3768:  BRA    375E
376A:  MOVLW  3D
376C:  MOVWF  19
376E:  MOVLW  0B
3770:  MOVWF  1C
3772:  MOVLW  0C
3774:  MOVWF  xDF
3776:  CALL   14A0
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
377A:  CLRF   39
377C:  CLRF   3A
377E:  CLRF   3B
3780:  CLRF   3C
3782:  BSF    18.7
....................          }else{ 
3784:  BRA    380A
....................             lcd_gotoxy(1,1); 
3786:  MOVLW  01
3788:  MOVWF  xE0
378A:  MOVWF  xE1
378C:  CALL   1436
....................             printf(lcd_putc,"                    "); 
3790:  MOVLW  80
3792:  MOVWF  FF6
3794:  MOVLW  05
3796:  MOVWF  FF7
3798:  CALL   1506
....................             lcd_gotoxy(1,2); 
379C:  MOVLW  01
379E:  MOVWF  xE0
37A0:  MOVLW  02
37A2:  MOVWF  xE1
37A4:  CALL   1436
....................             printf(lcd_putc,"     Contraseña     "); 
37A8:  MOVLW  96
37AA:  MOVWF  FF6
37AC:  MOVLW  05
37AE:  MOVWF  FF7
37B0:  CALL   1506
....................             lcd_gotoxy(1,3); 
37B4:  MOVLW  01
37B6:  MOVWF  xE0
37B8:  MOVLW  03
37BA:  MOVWF  xE1
37BC:  CALL   1436
....................             printf(lcd_putc,"     Incorrecta     "); 
37C0:  MOVLW  AC
37C2:  MOVWF  FF6
37C4:  MOVLW  05
37C6:  MOVWF  FF7
37C8:  CALL   1506
....................             lcd_gotoxy(1,4); 
37CC:  MOVLW  01
37CE:  MOVWF  xE0
37D0:  MOVLW  04
37D2:  MOVWF  xE1
37D4:  CALL   1436
....................             printf(lcd_putc,"                    "); 
37D8:  MOVLW  C2
37DA:  MOVWF  FF6
37DC:  MOVLW  05
37DE:  MOVWF  FF7
37E0:  CALL   1506
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
37E4:  MOVLW  02
37E6:  MOVWF  xCE
37E8:  MOVLW  FA
37EA:  MOVWF  xE5
37EC:  CALL   0960
37F0:  DECFSZ xCE,F
37F2:  BRA    37E8
37F4:  MOVLW  0B
37F6:  MOVWF  1C
37F8:  MOVLW  0C
37FA:  MOVWF  xDF
37FC:  CALL   14A0
3800:  BSF    18.7
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
3802:  CLRF   39
3804:  CLRF   3A
3806:  CLRF   3B
3808:  CLRF   3C
....................          } 
....................       } 
....................    }       
.................... //----------------Fin-Menu3--------------------------------------------------------------- 
....................  
.................... //----------------Menu6.1--------------------------------------------------------------- 
....................    if(Menu == 61){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
380A:  MOVF   19,W
380C:  SUBLW  3D
380E:  BTFSS  FD8.2
3810:  BRA    3BA2
....................       EliminaRuido(); 
3812:  CALL   0004
.................... //      if(Cambio){ 
....................          lcd_gotoxy(1,1); 
3816:  MOVLW  01
3818:  MOVWF  xE0
381A:  MOVWF  xE1
381C:  CALL   1436
....................          printf(lcd_putc,"   Ingrese Nueva    "); 
3820:  MOVLW  D8
3822:  MOVWF  FF6
3824:  MOVLW  05
3826:  MOVWF  FF7
3828:  CALL   1506
....................          lcd_gotoxy(1,2); 
382C:  MOVLW  01
382E:  MOVWF  xE0
3830:  MOVLW  02
3832:  MOVWF  xE1
3834:  CALL   1436
....................          printf(lcd_putc,"     Contraseña     "); 
3838:  MOVLW  EE
383A:  MOVWF  FF6
383C:  MOVLW  05
383E:  MOVWF  FF7
3840:  CALL   1506
....................          lcd_gotoxy(1,3); 
3844:  MOVLW  01
3846:  MOVWF  xE0
3848:  MOVLW  03
384A:  MOVWF  xE1
384C:  CALL   1436
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
3850:  MOVLW  04
3852:  MOVWF  FF6
3854:  MOVLW  06
3856:  MOVWF  FF7
3858:  MOVLW  0A
385A:  MOVWF  xD2
385C:  CALL   158E
3860:  MOVFF  39,CE
3864:  MOVLW  1F
3866:  MOVWF  xCF
3868:  CALL   1898
386C:  MOVFF  3A,CE
3870:  MOVLW  1F
3872:  MOVWF  xCF
3874:  CALL   1898
3878:  MOVFF  3B,CE
387C:  MOVLW  1F
387E:  MOVWF  xCF
3880:  CALL   1898
3884:  MOVFF  3C,CE
3888:  MOVLW  1F
388A:  MOVWF  xCF
388C:  CALL   1898
3890:  MOVLW  20
3892:  MOVWF  xDF
3894:  CALL   14A0
3898:  MOVLW  20
389A:  MOVWF  xDF
389C:  CALL   14A0
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
38A0:  MOVFF  1C,E0
38A4:  MOVLW  04
38A6:  MOVWF  xE1
38A8:  CALL   1436
....................          lcd_putc(t[2]); 
38AC:  MOVFF  38,DF
38B0:  CALL   14A0
....................           
....................          if(unidad>11&&unidad<14){ 
38B4:  MOVF   1C,W
38B6:  SUBLW  0B
38B8:  BC    38D8
38BA:  MOVF   1C,W
38BC:  SUBLW  0D
38BE:  BNC   38D8
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
38C0:  MOVLW  01
38C2:  SUBWF  1C,W
38C4:  MOVWF  xCE
38C6:  MOVWF  xE0
38C8:  MOVLW  04
38CA:  MOVWF  xE1
38CC:  CALL   1436
....................             lcd_putc(t[1]); 
38D0:  MOVFF  37,DF
38D4:  CALL   14A0
....................          } 
....................           
....................          Cambio=OFF; 
38D8:  BCF    18.7
.................... //      } 
....................        
....................       if(UP){//Si oprime hacia arriba 
38DA:  BSF    F92.5
38DC:  BTFSC  F80.5
38DE:  BRA    3912
....................          delay_ms(20); 
38E0:  MOVLW  14
38E2:  MOVWF  xE5
38E4:  CALL   0960
....................          if(UP){ 
38E8:  BSF    F92.5
38EA:  BTFSC  F80.5
38EC:  BRA    3910
....................             if(Flanco == 0) { 
38EE:  BTFSC  17.3
38F0:  BRA    3910
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
38F2:  MOVLW  0B
38F4:  SUBWF  1C,W
38F6:  CLRF   03
38F8:  ADDLW  39
38FA:  MOVWF  FE9
38FC:  MOVLW  00
38FE:  ADDWFC 03,W
3900:  MOVWF  FEA
3902:  INCF   FEF,F
3904:  BSF    17.3
3906:  MOVLW  1E
3908:  MOVWF  xE5
390A:  CALL   0960
390E:  BSF    18.7
....................             } 
....................          } 
....................       }else{ 
3910:  BRA    3914
....................          Flanco = 0; 
3912:  BCF    17.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
3914:  BSF    F96.0
3916:  BTFSC  F84.0
3918:  BRA    394C
....................          delay_ms(20); 
391A:  MOVLW  14
391C:  MOVWF  xE5
391E:  CALL   0960
....................          if(DOWN){ 
3922:  BSF    F96.0
3924:  BTFSC  F84.0
3926:  BRA    394A
....................             if(Flanco2 == 0) { 
3928:  BTFSC  17.5
392A:  BRA    394A
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
392C:  MOVLW  0B
392E:  SUBWF  1C,W
3930:  CLRF   03
3932:  ADDLW  39
3934:  MOVWF  FE9
3936:  MOVLW  00
3938:  ADDWFC 03,W
393A:  MOVWF  FEA
393C:  DECF   FEF,F
393E:  BSF    17.5
3940:  MOVLW  1E
3942:  MOVWF  xE5
3944:  CALL   0960
3948:  BSF    18.7
....................             } 
....................          } 
....................       }else{ 
394A:  BRA    394E
....................          Flanco2 = 0; 
394C:  BCF    17.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
394E:  BSF    F96.1
3950:  BTFSC  F84.1
3952:  BRA    3976
....................          if(RIGHT){ 
3954:  BSF    F96.1
3956:  BTFSC  F84.1
3958:  BRA    3974
....................             if(Flanco1 == 0) { 
395A:  BTFSC  17.4
395C:  BRA    3974
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
395E:  BSF    17.4
3960:  INCF   1C,F
3962:  MOVLW  1E
3964:  MOVWF  xE5
3966:  CALL   0960
396A:  MOVLW  0C
396C:  MOVWF  xDF
396E:  CALL   14A0
3972:  BSF    18.7
....................             } 
....................          } 
....................       }else{ 
3974:  BRA    3978
....................          Flanco1 = 0; 
3976:  BCF    17.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
3978:  BSF    F96.2
397A:  BTFSC  F84.2
397C:  BRA    39A8
....................          delay_ms(150); 
397E:  MOVLW  96
3980:  MOVWF  xE5
3982:  CALL   0960
....................          if(IZQU){ 
3986:  BSF    F96.2
3988:  BTFSC  F84.2
398A:  BRA    39A6
....................             if(Flanco3 == 0){ 
398C:  BTFSC  17.6
398E:  BRA    39A6
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
3990:  BSF    17.6
3992:  DECF   1C,F
3994:  MOVLW  1E
3996:  MOVWF  xE5
3998:  CALL   0960
399C:  MOVLW  0C
399E:  MOVWF  xDF
39A0:  CALL   14A0
39A4:  BSF    18.7
....................             } 
....................          } 
....................       }else{ 
39A6:  BRA    39AA
....................         Flanco3 = 0; 
39A8:  BCF    17.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
39AA:  MOVLW  0B
39AC:  SUBWF  1C,W
39AE:  CLRF   03
39B0:  ADDLW  39
39B2:  MOVWF  FE9
39B4:  MOVLW  00
39B6:  ADDWFC 03,W
39B8:  MOVWF  FEA
39BA:  BTFSC  FEF.7
39BC:  BRA    39C0
39BE:  BRA    39D4
....................          clave[unidad-11]=9; 
39C0:  MOVLW  0B
39C2:  SUBWF  1C,W
39C4:  CLRF   03
39C6:  ADDLW  39
39C8:  MOVWF  FE9
39CA:  MOVLW  00
39CC:  ADDWFC 03,W
39CE:  MOVWF  FEA
39D0:  MOVLW  09
39D2:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
39D4:  MOVLW  0B
39D6:  SUBWF  1C,W
39D8:  CLRF   03
39DA:  ADDLW  39
39DC:  MOVWF  FE9
39DE:  MOVLW  00
39E0:  ADDWFC 03,W
39E2:  MOVWF  FEA
39E4:  BTFSC  FEF.7
39E6:  BRA    3A00
39E8:  MOVF   FEF,W
39EA:  SUBLW  09
39EC:  BC    3A00
....................          clave[unidad-11]=0; 
39EE:  MOVLW  0B
39F0:  SUBWF  1C,W
39F2:  CLRF   03
39F4:  ADDLW  39
39F6:  MOVWF  FE9
39F8:  MOVLW  00
39FA:  ADDWFC 03,W
39FC:  MOVWF  FEA
39FE:  CLRF   FEF
....................         
....................       if(unidad<11){             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
3A00:  MOVF   1C,W
3A02:  SUBLW  0A
3A04:  BNC   3A24
....................          unidad=11; 
3A06:  MOVLW  0B
3A08:  MOVWF  1C
....................          Menu=1; 
3A0A:  MOVLW  01
3A0C:  MOVWF  19
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
3A0E:  CLRF   39
3A10:  CLRF   3A
3A12:  CLRF   3B
3A14:  CLRF   3C
3A16:  BSF    18.7
....................          unidad=11;printf(lcd_putc,"\f"); 
3A18:  MOVLW  0B
3A1A:  MOVWF  1C
3A1C:  MOVLW  0C
3A1E:  MOVWF  xDF
3A20:  CALL   14A0
....................       } 
....................         
....................       if(unidad>14){// Si ya ingreso la nueva contraseña.      
3A24:  MOVF   1C,W
3A26:  SUBLW  0E
3A28:  BTFSC  FD8.0
3A2A:  BRA    3BA2
....................          lcd_gotoxy(1,1); 
3A2C:  MOVLW  01
3A2E:  MOVWF  xE0
3A30:  MOVWF  xE1
3A32:  CALL   1436
....................          printf(lcd_putc,"                    "); 
3A36:  MOVLW  1A
3A38:  MOVWF  FF6
3A3A:  MOVLW  06
3A3C:  MOVWF  FF7
3A3E:  CALL   1506
....................          lcd_gotoxy(1,2); 
3A42:  MOVLW  01
3A44:  MOVWF  xE0
3A46:  MOVLW  02
3A48:  MOVWF  xE1
3A4A:  CALL   1436
....................          printf(lcd_putc,"     Contraseña     "); 
3A4E:  MOVLW  30
3A50:  MOVWF  FF6
3A52:  MOVLW  06
3A54:  MOVWF  FF7
3A56:  CALL   1506
....................          lcd_gotoxy(1,3); 
3A5A:  MOVLW  01
3A5C:  MOVWF  xE0
3A5E:  MOVLW  03
3A60:  MOVWF  xE1
3A62:  CALL   1436
....................          printf(lcd_putc,"     Almacenada     "); 
3A66:  MOVLW  46
3A68:  MOVWF  FF6
3A6A:  MOVLW  06
3A6C:  MOVWF  FF7
3A6E:  CALL   1506
....................          lcd_gotoxy(1,4); 
3A72:  MOVLW  01
3A74:  MOVWF  xE0
3A76:  MOVLW  04
3A78:  MOVWF  xE1
3A7A:  CALL   1436
....................          printf(lcd_putc,"                    "); 
3A7E:  MOVLW  5C
3A80:  MOVWF  FF6
3A82:  MOVLW  06
3A84:  MOVWF  FF7
3A86:  CALL   1506
....................          write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
3A8A:  CLRF   FA9
3A8C:  MOVFF  39,FA8
3A90:  BCF    FA6.6
3A92:  BCF    FA6.7
3A94:  BSF    FA6.2
3A96:  MOVF   FF2,W
3A98:  MOVWF  00
3A9A:  BCF    FF2.6
3A9C:  BCF    FF2.7
3A9E:  MOVLB  F
3AA0:  MOVLW  55
3AA2:  MOVWF  FA7
3AA4:  MOVLW  AA
3AA6:  MOVWF  FA7
3AA8:  BSF    FA6.1
3AAA:  BTFSC  FA6.1
3AAC:  BRA    3AAA
3AAE:  BCF    FA6.2
3AB0:  MOVF   00,W
3AB2:  IORWF  FF2,F
3AB4:  MOVLW  14
3AB6:  MOVLB  0
3AB8:  MOVWF  xE5
3ABA:  CALL   0960
3ABE:  MOVLW  01
3AC0:  MOVWF  FA9
3AC2:  MOVFF  3A,FA8
3AC6:  BCF    FA6.6
3AC8:  BCF    FA6.7
3ACA:  BSF    FA6.2
3ACC:  MOVF   FF2,W
3ACE:  MOVWF  00
3AD0:  BCF    FF2.6
3AD2:  BCF    FF2.7
3AD4:  MOVLB  F
3AD6:  MOVLW  55
3AD8:  MOVWF  FA7
3ADA:  MOVLW  AA
3ADC:  MOVWF  FA7
3ADE:  BSF    FA6.1
3AE0:  BTFSC  FA6.1
3AE2:  BRA    3AE0
3AE4:  BCF    FA6.2
3AE6:  MOVF   00,W
3AE8:  IORWF  FF2,F
3AEA:  MOVLW  14
3AEC:  MOVLB  0
3AEE:  MOVWF  xE5
3AF0:  CALL   0960
....................          write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
3AF4:  MOVLW  02
3AF6:  MOVWF  FA9
3AF8:  MOVFF  3B,FA8
3AFC:  BCF    FA6.6
3AFE:  BCF    FA6.7
3B00:  BSF    FA6.2
3B02:  MOVF   FF2,W
3B04:  MOVWF  00
3B06:  BCF    FF2.6
3B08:  BCF    FF2.7
3B0A:  MOVLB  F
3B0C:  MOVLW  55
3B0E:  MOVWF  FA7
3B10:  MOVLW  AA
3B12:  MOVWF  FA7
3B14:  BSF    FA6.1
3B16:  BTFSC  FA6.1
3B18:  BRA    3B16
3B1A:  BCF    FA6.2
3B1C:  MOVF   00,W
3B1E:  IORWF  FF2,F
3B20:  MOVLW  14
3B22:  MOVLB  0
3B24:  MOVWF  xE5
3B26:  CALL   0960
3B2A:  MOVLW  03
3B2C:  MOVWF  FA9
3B2E:  MOVFF  3C,FA8
3B32:  BCF    FA6.6
3B34:  BCF    FA6.7
3B36:  BSF    FA6.2
3B38:  MOVF   FF2,W
3B3A:  MOVWF  00
3B3C:  BCF    FF2.6
3B3E:  BCF    FF2.7
3B40:  MOVLB  F
3B42:  MOVLW  55
3B44:  MOVWF  FA7
3B46:  MOVLW  AA
3B48:  MOVWF  FA7
3B4A:  BSF    FA6.1
3B4C:  BTFSC  FA6.1
3B4E:  BRA    3B4C
3B50:  BCF    FA6.2
3B52:  MOVF   00,W
3B54:  IORWF  FF2,F
3B56:  MOVLW  14
3B58:  MOVLB  0
3B5A:  MOVWF  xE5
3B5C:  CALL   0960
....................          delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
3B60:  MOVLW  02
3B62:  MOVWF  xCE
3B64:  MOVLW  FA
3B66:  MOVWF  xE5
3B68:  CALL   0960
3B6C:  DECFSZ xCE,F
3B6E:  BRA    3B64
3B70:  MOVLW  01
3B72:  MOVWF  19
3B74:  CLRF   35
3B76:  MOVLW  02
3B78:  MOVWF  1D
3B7A:  MOVWF  1F
....................          contrasena[0]=clave[0];contrasena[1]=clave[1];contrasena[2]=clave[2];contrasena[3]=clave[3]; 
3B7C:  MOVFF  39,3D
3B80:  MOVFF  3A,3E
3B84:  MOVFF  3B,3F
3B88:  MOVFF  3C,40
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
3B8C:  CLRF   39
3B8E:  CLRF   3A
3B90:  CLRF   3B
3B92:  CLRF   3C
3B94:  BSF    18.7
....................          unidad=11;printf(lcd_putc,"\f");          
3B96:  MOVLW  0B
3B98:  MOVWF  1C
3B9A:  MOVLW  0C
3B9C:  MOVWF  xDF
3B9E:  CALL   14A0
....................       } 
....................    }       
.................... //----------------Fin-Menu6.1--------------------------------------------------------------- 
....................     
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu de tiempo de trabajo de Luz UV 
3BA2:  MOVF   19,W
3BA4:  SUBLW  04
3BA6:  BTFSS  FD8.2
3BA8:  BRA    3DC4
....................    EliminaRuido(); 
3BAA:  CALL   0004
.................... //   if(Cambio){ 
....................       lcd_gotoxy(1,1); 
3BAE:  MOVLW  01
3BB0:  MOVWF  xE0
3BB2:  MOVWF  xE1
3BB4:  CALL   1436
....................       printf(lcd_putc,"  Duracion Actual   "); 
3BB8:  MOVLW  72
3BBA:  MOVWF  FF6
3BBC:  MOVLW  06
3BBE:  MOVWF  FF7
3BC0:  CALL   1506
....................       lcd_gotoxy(1,2); 
3BC4:  MOVLW  01
3BC6:  MOVWF  xE0
3BC8:  MOVLW  02
3BCA:  MOVWF  xE1
3BCC:  CALL   1436
....................       printf(lcd_putc,"   Tiempo= %05Lu   ",horas); 
3BD0:  MOVLW  88
3BD2:  MOVWF  FF6
3BD4:  MOVLW  06
3BD6:  MOVWF  FF7
3BD8:  MOVLW  0B
3BDA:  MOVWF  xD2
3BDC:  CALL   158E
3BE0:  MOVLW  08
3BE2:  MOVWF  FE9
3BE4:  MOVFF  49,CF
3BE8:  MOVFF  48,CE
3BEC:  CALL   163A
3BF0:  MOVLW  20
3BF2:  MOVWF  xDF
3BF4:  CALL   14A0
3BF8:  MOVLW  20
3BFA:  MOVWF  xDF
3BFC:  CALL   14A0
3C00:  MOVLW  20
3C02:  MOVWF  xDF
3C04:  CALL   14A0
....................       lcd_gotoxy(1,4); 
3C08:  MOVLW  01
3C0A:  MOVWF  xE0
3C0C:  MOVLW  04
3C0E:  MOVWF  xE1
3C10:  CALL   1436
....................       printf(lcd_putc," RESET= Oprima ^ y > "); 
3C14:  MOVLW  9C
3C16:  MOVWF  FF6
3C18:  MOVLW  06
3C1A:  MOVWF  FF7
3C1C:  CALL   1506
....................        
....................       Cambio=OFF; 
3C20:  BCF    18.7
.................... //   } 
....................     
....................       if(UP && RIGHT){//Si oprime hacia arriba 
3C22:  BSF    F92.5
3C24:  BTFSC  F80.5
3C26:  BRA    3D80
3C28:  BSF    F96.1
3C2A:  BTFSC  F84.1
3C2C:  BRA    3D80
....................          delay_ms(20); 
3C2E:  MOVLW  14
3C30:  MOVWF  xE5
3C32:  CALL   0960
....................          if(UP && RIGHT){ 
3C36:  BSF    F92.5
3C38:  BTFSC  F80.5
3C3A:  BRA    3D80
3C3C:  BSF    F96.1
3C3E:  BTFSC  F84.1
3C40:  BRA    3D80
....................             delay_ms(200); 
3C42:  MOVLW  C8
3C44:  MOVWF  xE5
3C46:  CALL   0960
....................             printf(lcd_putc,"\f"); 
3C4A:  MOVLW  0C
3C4C:  MOVWF  xDF
3C4E:  CALL   14A0
....................             lcd_gotoxy(1,2); 
3C52:  MOVLW  01
3C54:  MOVWF  xE0
3C56:  MOVLW  02
3C58:  MOVWF  xE1
3C5A:  CALL   1436
....................             printf(lcd_putc," Reset de tiempo "); 
3C5E:  MOVLW  B2
3C60:  MOVWF  FF6
3C62:  MOVLW  06
3C64:  MOVWF  FF7
3C66:  CALL   1506
....................             lcd_gotoxy(1,3); 
3C6A:  MOVLW  01
3C6C:  MOVWF  xE0
3C6E:  MOVLW  03
3C70:  MOVWF  xE1
3C72:  CALL   1436
....................             printf(lcd_putc,"     Exitoso     "); 
3C76:  MOVLW  C4
3C78:  MOVWF  FF6
3C7A:  MOVLW  06
3C7C:  MOVWF  FF7
3C7E:  CALL   1506
....................             write_eeprom(7,0); 
3C82:  MOVLW  07
3C84:  MOVWF  FA9
3C86:  CLRF   FA8
3C88:  BCF    FA6.6
3C8A:  BCF    FA6.7
3C8C:  BSF    FA6.2
3C8E:  MOVF   FF2,W
3C90:  MOVWF  00
3C92:  BCF    FF2.6
3C94:  BCF    FF2.7
3C96:  MOVLB  F
3C98:  MOVLW  55
3C9A:  MOVWF  FA7
3C9C:  MOVLW  AA
3C9E:  MOVWF  FA7
3CA0:  BSF    FA6.1
3CA2:  BTFSC  FA6.1
3CA4:  BRA    3CA2
3CA6:  BCF    FA6.2
3CA8:  MOVF   00,W
3CAA:  IORWF  FF2,F
....................             delay_ms(20); 
3CAC:  MOVLW  14
3CAE:  MOVLB  0
3CB0:  MOVWF  xE5
3CB2:  CALL   0960
....................             write_eeprom(8,0); 
3CB6:  MOVLW  08
3CB8:  MOVWF  FA9
3CBA:  CLRF   FA8
3CBC:  BCF    FA6.6
3CBE:  BCF    FA6.7
3CC0:  BSF    FA6.2
3CC2:  MOVF   FF2,W
3CC4:  MOVWF  00
3CC6:  BCF    FF2.6
3CC8:  BCF    FF2.7
3CCA:  MOVLB  F
3CCC:  MOVLW  55
3CCE:  MOVWF  FA7
3CD0:  MOVLW  AA
3CD2:  MOVWF  FA7
3CD4:  BSF    FA6.1
3CD6:  BTFSC  FA6.1
3CD8:  BRA    3CD6
3CDA:  BCF    FA6.2
3CDC:  MOVF   00,W
3CDE:  IORWF  FF2,F
....................             delay_ms(20); 
3CE0:  MOVLW  14
3CE2:  MOVLB  0
3CE4:  MOVWF  xE5
3CE6:  CALL   0960
....................             write_eeprom(9,0); 
3CEA:  MOVLW  09
3CEC:  MOVWF  FA9
3CEE:  CLRF   FA8
3CF0:  BCF    FA6.6
3CF2:  BCF    FA6.7
3CF4:  BSF    FA6.2
3CF6:  MOVF   FF2,W
3CF8:  MOVWF  00
3CFA:  BCF    FF2.6
3CFC:  BCF    FF2.7
3CFE:  MOVLB  F
3D00:  MOVLW  55
3D02:  MOVWF  FA7
3D04:  MOVLW  AA
3D06:  MOVWF  FA7
3D08:  BSF    FA6.1
3D0A:  BTFSC  FA6.1
3D0C:  BRA    3D0A
3D0E:  BCF    FA6.2
3D10:  MOVF   00,W
3D12:  IORWF  FF2,F
....................             delay_ms(20); 
3D14:  MOVLW  14
3D16:  MOVLB  0
3D18:  MOVWF  xE5
3D1A:  CALL   0960
....................             write_eeprom(10,0); 
3D1E:  MOVLW  0A
3D20:  MOVWF  FA9
3D22:  CLRF   FA8
3D24:  BCF    FA6.6
3D26:  BCF    FA6.7
3D28:  BSF    FA6.2
3D2A:  MOVF   FF2,W
3D2C:  MOVWF  00
3D2E:  BCF    FF2.6
3D30:  BCF    FF2.7
3D32:  MOVLB  F
3D34:  MOVLW  55
3D36:  MOVWF  FA7
3D38:  MOVLW  AA
3D3A:  MOVWF  FA7
3D3C:  BSF    FA6.1
3D3E:  BTFSC  FA6.1
3D40:  BRA    3D3E
3D42:  BCF    FA6.2
3D44:  MOVF   00,W
3D46:  IORWF  FF2,F
....................             delay_ms(700); 
3D48:  MOVLW  04
3D4A:  MOVLB  0
3D4C:  MOVWF  xCE
3D4E:  MOVLW  AF
3D50:  MOVWF  xE5
3D52:  CALL   0960
3D56:  DECFSZ xCE,F
3D58:  BRA    3D4E
....................             segundos=0;minutos=0;horas=0; 
3D5A:  CLRF   22
3D5C:  CLRF   23
3D5E:  CLRF   49
3D60:  CLRF   48
....................             delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
3D62:  MOVLW  1E
3D64:  MOVWF  xE5
3D66:  CALL   0960
3D6A:  MOVLW  01
3D6C:  MOVWF  19
3D6E:  CLRF   35
3D70:  MOVLW  02
3D72:  MOVWF  1D
3D74:  MOVWF  1F
3D76:  MOVLW  0C
3D78:  MOVWF  xDF
3D7A:  CALL   14A0
....................             Cambio=ON; 
3D7E:  BSF    18.7
....................          } 
....................       } 
....................              
....................       if(IZQU){// Si oprime Izquierda 
3D80:  BSF    F96.2
3D82:  BTFSC  F84.2
3D84:  BRA    3DC2
....................          delay_ms(20); 
3D86:  MOVLW  14
3D88:  MOVWF  xE5
3D8A:  CALL   0960
....................          if(IZQU){ 
3D8E:  BSF    F96.2
3D90:  BTFSC  F84.2
3D92:  BRA    3DC0
....................             if(Flanco3 == 0){ 
3D94:  BTFSC  17.6
3D96:  BRA    3DC0
....................                Flanco3 = 1;delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f");Cambio=ON; 
3D98:  BSF    17.6
3D9A:  MOVLW  02
3D9C:  MOVWF  xCE
3D9E:  MOVLW  FA
3DA0:  MOVWF  xE5
3DA2:  CALL   0960
3DA6:  DECFSZ xCE,F
3DA8:  BRA    3D9E
3DAA:  MOVLW  01
3DAC:  MOVWF  19
3DAE:  CLRF   35
3DB0:  MOVLW  02
3DB2:  MOVWF  1D
3DB4:  MOVWF  1F
3DB6:  MOVLW  0C
3DB8:  MOVWF  xDF
3DBA:  CALL   14A0
3DBE:  BSF    18.7
....................             } 
....................          } 
....................       }else{ 
3DC0:  BRA    3DC4
....................          Flanco3 = 0; 
3DC2:  BCF    17.6
....................       } 
....................    } 
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5){ // Menu de Punto Cero 
3DC4:  MOVF   19,W
3DC6:  SUBLW  05
3DC8:  BTFSS  FD8.2
3DCA:  BRA    4024
....................       EliminaRuido(); 
3DCC:  CALL   0004
.................... //      if(Cambio){ 
....................          lcd_gotoxy(1,1); 
3DD0:  MOVLW  01
3DD2:  MOVWF  xE0
3DD4:  MOVWF  xE1
3DD6:  CALL   1436
....................          printf(lcd_putc,"  Zero Point Config "); 
3DDA:  MOVLW  D6
3DDC:  MOVWF  FF6
3DDE:  MOVLW  06
3DE0:  MOVWF  FF7
3DE2:  CALL   1506
....................          lcd_gotoxy(1,2); 
3DE6:  MOVLW  01
3DE8:  MOVWF  xE0
3DEA:  MOVLW  02
3DEC:  MOVWF  xE1
3DEE:  CALL   1436
....................          printf(lcd_putc,"Presion= %3.2f inH2O ",(Leer_Sensor_Presion(5)*4.02)); 
3DF2:  MOVLW  05
3DF4:  MOVWF  xCE
3DF6:  CALL   1F0A
3DFA:  MOVFF  00,CE
3DFE:  MOVFF  01,CF
3E02:  MOVFF  02,D0
3E06:  MOVFF  03,D1
3E0A:  MOVFF  03,E5
3E0E:  MOVFF  02,E4
3E12:  MOVFF  01,E3
3E16:  MOVFF  00,E2
3E1A:  MOVLW  D7
3E1C:  MOVWF  xE9
3E1E:  MOVLW  A3
3E20:  MOVWF  xE8
3E22:  CLRF   xE7
3E24:  MOVLW  81
3E26:  MOVWF  xE6
3E28:  CALL   1E18
3E2C:  MOVFF  00,CE
3E30:  MOVFF  01,CF
3E34:  MOVFF  02,D0
3E38:  MOVFF  03,D1
3E3C:  MOVLW  EC
3E3E:  MOVWF  FF6
3E40:  MOVLW  06
3E42:  MOVWF  FF7
3E44:  MOVLW  09
3E46:  MOVWF  xD2
3E48:  CALL   158E
3E4C:  MOVLW  02
3E4E:  MOVWF  FE9
3E50:  MOVFF  D1,D5
3E54:  MOVFF  D0,D4
3E58:  MOVFF  CF,D3
3E5C:  MOVFF  CE,D2
3E60:  MOVWF  xD6
3E62:  CALL   21BE
3E66:  MOVLW  FA
3E68:  MOVWF  FF6
3E6A:  MOVLW  06
3E6C:  MOVWF  FF7
3E6E:  MOVLW  07
3E70:  MOVWF  xD2
3E72:  CALL   158E
....................          lcd_gotoxy(1,3); 
3E76:  MOVLW  01
3E78:  MOVWF  xE0
3E7A:  MOVLW  03
3E7C:  MOVWF  xE1
3E7E:  CALL   1436
....................          printf(lcd_putc,"    ADC=%2.0f",sensores(0)); 
3E82:  CLRF   xDF
3E84:  CALL   19FE
3E88:  MOVFF  00,CE
3E8C:  MOVFF  01,CF
3E90:  MOVFF  02,D0
3E94:  MOVFF  03,D1
3E98:  MOVLW  02
3E9A:  MOVWF  FF6
3E9C:  MOVLW  07
3E9E:  MOVWF  FF7
3EA0:  MOVLW  08
3EA2:  MOVWF  xD2
3EA4:  CALL   158E
3EA8:  MOVLW  01
3EAA:  MOVWF  FE9
3EAC:  MOVFF  D1,D5
3EB0:  MOVFF  D0,D4
3EB4:  MOVFF  CF,D3
3EB8:  MOVFF  CE,D2
3EBC:  CLRF   xD6
3EBE:  CALL   21BE
....................          lcd_gotoxy(1,4); 
3EC2:  MOVLW  01
3EC4:  MOVWF  xE0
3EC6:  MOVLW  04
3EC8:  MOVWF  xE1
3ECA:  CALL   1436
....................          printf(lcd_putc,"    ZF=%2.0f",G); 
3ECE:  MOVLW  10
3ED0:  MOVWF  FF6
3ED2:  MOVLW  07
3ED4:  MOVWF  FF7
3ED6:  MOVLW  07
3ED8:  MOVWF  xD2
3EDA:  CALL   158E
3EDE:  MOVLW  01
3EE0:  MOVWF  FE9
3EE2:  MOVFF  AF,D5
3EE6:  MOVFF  AE,D4
3EEA:  MOVFF  AD,D3
3EEE:  MOVFF  AC,D2
3EF2:  CLRF   xD6
3EF4:  CALL   21BE
....................           
....................          Cambio=OFF; 
3EF8:  BCF    18.7
.................... //      } 
....................      
....................       if(RIGHT){// Si oprime derecha 
3EFA:  BSF    F96.1
3EFC:  BTFSC  F84.1
3EFE:  BRA    3FE4
....................          delay_ms(20); 
3F00:  MOVLW  14
3F02:  MOVWF  xE5
3F04:  CALL   0960
....................          if(RIGHT){ 
3F08:  BSF    F96.1
3F0A:  BTFSC  F84.1
3F0C:  BRA    3FE2
....................             if(Flanco1 == 0){ 
3F0E:  BTFSC  17.4
3F10:  BRA    3FE2
....................                /*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
3F12:  MOVLW  01
3F14:  MOVWF  19
3F16:  CLRF   35
3F18:  MOVLW  02
3F1A:  MOVWF  1D
3F1C:  MOVWF  1F
3F1E:  MOVLW  0B
3F20:  MOVWF  1C
3F22:  MOVLW  02
3F24:  MOVWF  xCE
3F26:  MOVLW  FA
3F28:  MOVWF  xE5
3F2A:  CALL   0960
3F2E:  DECFSZ xCE,F
3F30:  BRA    3F26
3F32:  MOVLW  0C
3F34:  MOVWF  xDF
3F36:  CALL   14A0
....................                G=sensores(0); 
3F3A:  CLRF   xDF
3F3C:  CALL   19FE
3F40:  MOVFF  03,AF
3F44:  MOVFF  02,AE
3F48:  MOVFF  01,AD
3F4C:  MOVFF  00,AC
....................                G16=(int16)G; 
3F50:  MOVFF  AF,E5
3F54:  MOVFF  AE,E4
3F58:  MOVFF  AD,E3
3F5C:  MOVFF  AC,E2
3F60:  CALL   2344
3F64:  MOVFF  02,4B
3F68:  MOVFF  01,4A
....................                G_l=G16; G_h=(G16>>8); 
3F6C:  MOVFF  4A,26
3F70:  MOVFF  4B,27
....................                 
....................                write_eeprom(11,G_l); 
3F74:  MOVLW  0B
3F76:  MOVWF  FA9
3F78:  MOVFF  26,FA8
3F7C:  BCF    FA6.6
3F7E:  BCF    FA6.7
3F80:  BSF    FA6.2
3F82:  MOVF   FF2,W
3F84:  MOVWF  00
3F86:  BCF    FF2.6
3F88:  BCF    FF2.7
3F8A:  MOVLB  F
3F8C:  MOVLW  55
3F8E:  MOVWF  FA7
3F90:  MOVLW  AA
3F92:  MOVWF  FA7
3F94:  BSF    FA6.1
3F96:  BTFSC  FA6.1
3F98:  BRA    3F96
3F9A:  BCF    FA6.2
3F9C:  MOVF   00,W
3F9E:  IORWF  FF2,F
....................                delay_ms(20); 
3FA0:  MOVLW  14
3FA2:  MOVLB  0
3FA4:  MOVWF  xE5
3FA6:  CALL   0960
....................                write_eeprom(12,G_h);//Guardar valor de Setpoint en eeprom 
3FAA:  MOVLW  0C
3FAC:  MOVWF  FA9
3FAE:  MOVFF  27,FA8
3FB2:  BCF    FA6.6
3FB4:  BCF    FA6.7
3FB6:  BSF    FA6.2
3FB8:  MOVF   FF2,W
3FBA:  MOVWF  00
3FBC:  BCF    FF2.6
3FBE:  BCF    FF2.7
3FC0:  MOVLB  F
3FC2:  MOVLW  55
3FC4:  MOVWF  FA7
3FC6:  MOVLW  AA
3FC8:  MOVWF  FA7
3FCA:  BSF    FA6.1
3FCC:  BTFSC  FA6.1
3FCE:  BRA    3FCC
3FD0:  BCF    FA6.2
3FD2:  MOVF   00,W
3FD4:  IORWF  FF2,F
....................                delay_ms(20); 
3FD6:  MOVLW  14
3FD8:  MOVLB  0
3FDA:  MOVWF  xE5
3FDC:  CALL   0960
....................                Cambio=ON; 
3FE0:  BSF    18.7
....................             } 
....................          } 
....................       }else{ 
3FE2:  BRA    3FE6
....................          Flanco1 = 0; 
3FE4:  BCF    17.4
....................       } 
....................              
....................       if(IZQU){// Si oprime Izquierda 
3FE6:  BSF    F96.2
3FE8:  BTFSC  F84.2
3FEA:  BRA    4022
....................          delay_ms(20); 
3FEC:  MOVLW  14
3FEE:  MOVWF  xE5
3FF0:  CALL   0960
....................          if(IZQU){ 
3FF4:  BSF    F96.2
3FF6:  BTFSC  F84.2
3FF8:  BRA    4020
....................             if(Flanco3 == 0){ 
3FFA:  BTFSC  17.6
3FFC:  BRA    4020
....................                /*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f"); 
3FFE:  MOVLW  01
4000:  MOVWF  19
4002:  CLRF   35
4004:  MOVLW  02
4006:  MOVWF  1D
4008:  MOVWF  1F
400A:  MOVLW  0B
400C:  MOVWF  1C
400E:  MOVLW  1E
4010:  MOVWF  xE5
4012:  CALL   0960
4016:  MOVLW  0C
4018:  MOVWF  xDF
401A:  CALL   14A0
....................                Cambio=ON; 
401E:  BSF    18.7
....................             } 
....................          } 
....................       }else{ 
4020:  BRA    4024
....................          Flanco3 = 0; 
4022:  BCF    17.6
....................       } 
....................    } 
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6){ // Menu de seleccion de estado de Alarma 
4024:  MOVF   19,W
4026:  SUBLW  06
4028:  BTFSS  FD8.2
402A:  BRA    4154
....................    estadoalarma=!estadoalarma;Flanco1 = 1;Menu=1; paso=0; 
402C:  BTG    18.4
402E:  BSF    17.4
4030:  MOVLW  01
4032:  MOVWF  19
4034:  CLRF   35
....................                        
....................             if(estadoalarma==1) 
4036:  BTFSS  18.4
4038:  BRA    409A
....................             {estadoalarma=1; 
403A:  BSF    18.4
....................                lcd_gotoxy(1,1); 
403C:  MOVLW  01
403E:  MOVWF  xE0
4040:  MOVWF  xE1
4042:  CALL   1436
....................                printf(lcd_putc,"                    "); 
4046:  MOVLW  1E
4048:  MOVWF  FF6
404A:  MOVLW  07
404C:  MOVWF  FF7
404E:  CALL   1506
....................                lcd_gotoxy(1,2); 
4052:  MOVLW  01
4054:  MOVWF  xE0
4056:  MOVLW  02
4058:  MOVWF  xE1
405A:  CALL   1436
....................                printf(lcd_putc,"        Activo      "); 
405E:  MOVLW  34
4060:  MOVWF  FF6
4062:  MOVLW  07
4064:  MOVWF  FF7
4066:  CALL   1506
....................                lcd_gotoxy(1,3); 
406A:  MOVLW  01
406C:  MOVWF  xE0
406E:  MOVLW  03
4070:  MOVWF  xE1
4072:  CALL   1436
....................                printf(lcd_putc,"        Alarma      "); 
4076:  MOVLW  4A
4078:  MOVWF  FF6
407A:  MOVLW  07
407C:  MOVWF  FF7
407E:  CALL   1506
....................                lcd_gotoxy(1,4); 
4082:  MOVLW  01
4084:  MOVWF  xE0
4086:  MOVLW  04
4088:  MOVWF  xE1
408A:  CALL   1436
....................                printf(lcd_putc,"                    ");} 
408E:  MOVLW  60
4090:  MOVWF  FF6
4092:  MOVLW  07
4094:  MOVWF  FF7
4096:  CALL   1506
....................                 
....................             if(estadoalarma==0) 
409A:  BTFSC  18.4
409C:  BRA    40FE
....................             {estadoalarma=0; 
409E:  BCF    18.4
....................                lcd_gotoxy(1,1); 
40A0:  MOVLW  01
40A2:  MOVWF  xE0
40A4:  MOVWF  xE1
40A6:  CALL   1436
....................                printf(lcd_putc,"                    "); 
40AA:  MOVLW  76
40AC:  MOVWF  FF6
40AE:  MOVLW  07
40B0:  MOVWF  FF7
40B2:  CALL   1506
....................                lcd_gotoxy(1,2); 
40B6:  MOVLW  01
40B8:  MOVWF  xE0
40BA:  MOVLW  02
40BC:  MOVWF  xE1
40BE:  CALL   1436
....................                printf(lcd_putc,"      Desactivo     "); 
40C2:  MOVLW  8C
40C4:  MOVWF  FF6
40C6:  MOVLW  07
40C8:  MOVWF  FF7
40CA:  CALL   1506
....................                lcd_gotoxy(1,3); 
40CE:  MOVLW  01
40D0:  MOVWF  xE0
40D2:  MOVLW  03
40D4:  MOVWF  xE1
40D6:  CALL   1436
....................                printf(lcd_putc,"       Alarma       "); 
40DA:  MOVLW  A2
40DC:  MOVWF  FF6
40DE:  MOVLW  07
40E0:  MOVWF  FF7
40E2:  CALL   1506
....................                lcd_gotoxy(1,4); 
40E6:  MOVLW  01
40E8:  MOVWF  xE0
40EA:  MOVLW  04
40EC:  MOVWF  xE1
40EE:  CALL   1436
....................                printf(lcd_putc,"                    ");} 
40F2:  MOVLW  B8
40F4:  MOVWF  FF6
40F6:  MOVLW  07
40F8:  MOVWF  FF7
40FA:  CALL   1506
....................               
....................             write_eeprom(4,estadoalarma);delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
40FE:  MOVLW  00
4100:  BTFSC  18.4
4102:  MOVLW  01
4104:  MOVWF  xCE
4106:  MOVLW  04
4108:  MOVWF  FA9
410A:  MOVFF  CE,FA8
410E:  BCF    FA6.6
4110:  BCF    FA6.7
4112:  BSF    FA6.2
4114:  MOVF   FF2,W
4116:  MOVWF  00
4118:  BCF    FF2.6
411A:  BCF    FF2.7
411C:  MOVLB  F
411E:  MOVLW  55
4120:  MOVWF  FA7
4122:  MOVLW  AA
4124:  MOVWF  FA7
4126:  BSF    FA6.1
4128:  BTFSC  FA6.1
412A:  BRA    4128
412C:  BCF    FA6.2
412E:  MOVF   00,W
4130:  IORWF  FF2,F
4132:  MOVLW  04
4134:  MOVLB  0
4136:  MOVWF  xCE
4138:  MOVLW  FA
413A:  MOVWF  xE5
413C:  CALL   0960
4140:  DECFSZ xCE,F
4142:  BRA    4138
4144:  MOVLW  02
4146:  MOVWF  1D
4148:  MOVWF  1F
414A:  MOVLW  0C
414C:  MOVWF  xDF
414E:  CALL   14A0
....................             Cambio=ON; 
4152:  BSF    18.7
....................    }       
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu7--------------------------------------------------------------- 
....................    if(Menu == 7){ // Menu de seleccion de Velocidad 
4154:  MOVF   19,W
4156:  SUBLW  07
4158:  BTFSS  FD8.2
415A:  BRA    42F2
....................       if(Vel1>20) 
415C:  MOVF   45,W
415E:  SUBLW  14
4160:  BC    4166
....................          Vel1=20; 
4162:  MOVLW  14
4164:  MOVWF  45
....................       if(Vel1<1) 
4166:  MOVF   45,F
4168:  BNZ   416E
....................          Vel1=1; 
416A:  MOVLW  01
416C:  MOVWF  45
....................        
....................       lcd_gotoxy(1,1); 
416E:  MOVLW  01
4170:  MOVWF  xE0
4172:  MOVWF  xE1
4174:  CALL   1436
....................       printf(lcd_putc,"Seleccione Velocidad"); 
4178:  MOVLW  CE
417A:  MOVWF  FF6
417C:  MOVLW  07
417E:  MOVWF  FF7
4180:  CALL   1506
....................       lcd_gotoxy(1,2); 
4184:  MOVLW  01
4186:  MOVWF  xE0
4188:  MOVLW  02
418A:  MOVWF  xE1
418C:  CALL   1436
....................       printf(lcd_putc,"   del Ventilador   "); 
4190:  MOVLW  E4
4192:  MOVWF  FF6
4194:  MOVLW  07
4196:  MOVWF  FF7
4198:  CALL   1506
....................       lcd_gotoxy(1,3); 
419C:  MOVLW  01
419E:  MOVWF  xE0
41A0:  MOVLW  03
41A2:  MOVWF  xE1
41A4:  CALL   1436
....................       printf(lcd_putc,"     Vel: %02u       ",Vel1); 
41A8:  MOVLW  FA
41AA:  MOVWF  FF6
41AC:  MOVLW  07
41AE:  MOVWF  FF7
41B0:  MOVLW  0A
41B2:  MOVWF  xD2
41B4:  CALL   158E
41B8:  MOVFF  45,CE
41BC:  MOVLW  01
41BE:  MOVWF  xCF
41C0:  CALL   15D4
41C4:  MOVLW  08
41C6:  MOVWF  FF6
41C8:  MOVLW  08
41CA:  MOVWF  FF7
41CC:  MOVLW  07
41CE:  MOVWF  xD2
41D0:  CALL   158E
....................       lcd_gotoxy(1,4); 
41D4:  MOVLW  01
41D6:  MOVWF  xE0
41D8:  MOVLW  04
41DA:  MOVWF  xE1
41DC:  CALL   1436
....................       printf(lcd_putc,"                    ");       
41E0:  MOVLW  10
41E2:  MOVWF  FF6
41E4:  MOVLW  08
41E6:  MOVWF  FF7
41E8:  CALL   1506
....................        
....................       if(UP && Vel1<20)//Si oprime hacia arriba 
41EC:  BSF    F92.5
41EE:  BTFSC  F80.5
41F0:  BRA    4202
41F2:  MOVF   45,W
41F4:  SUBLW  13
41F6:  BNC   4202
....................       {   
....................          delay_ms(200);Vel1++; 
41F8:  MOVLW  C8
41FA:  MOVWF  xE5
41FC:  CALL   0960
4200:  INCF   45,F
....................       } 
....................              
....................       if(DOWN && Vel1>0)//Si oprime hacia abajo 
4202:  BSF    F96.0
4204:  BTFSC  F84.0
4206:  BRA    4216
4208:  MOVF   45,F
420A:  BZ    4216
....................       {   
....................          delay_ms(200);Vel1--; 
420C:  MOVLW  C8
420E:  MOVWF  xE5
4210:  CALL   0960
4214:  DECF   45,F
....................       } 
....................              
....................       if(RIGHT)//Si oprime SET 
4216:  BSF    F96.1
4218:  BTFSC  F84.1
421A:  BRA    4220
....................       {            
....................          VelMotor=Vel1; 
421C:  MOVFF  45,BF
....................       }  
....................              
....................       if(IZQU)//Si oprime boton de Toma. 
4220:  BSF    F96.2
4222:  BTFSC  F84.2
4224:  BRA    42F2
....................       {                   
....................          delay_ms(100);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
4226:  MOVLW  64
4228:  MOVWF  xE5
422A:  CALL   0960
422E:  MOVLW  02
4230:  MOVWF  1D
4232:  MOVWF  1F
4234:  MOVLW  0C
4236:  MOVWF  xDF
4238:  CALL   14A0
....................          write_eeprom(13,Vel1);//Guardar valor de Setpoint en eeprom 
423C:  MOVLW  0D
423E:  MOVWF  FA9
4240:  MOVFF  45,FA8
4244:  BCF    FA6.6
4246:  BCF    FA6.7
4248:  BSF    FA6.2
424A:  MOVF   FF2,W
424C:  MOVWF  00
424E:  BCF    FF2.6
4250:  BCF    FF2.7
4252:  MOVLB  F
4254:  MOVLW  55
4256:  MOVWF  FA7
4258:  MOVLW  AA
425A:  MOVWF  FA7
425C:  BSF    FA6.1
425E:  BTFSC  FA6.1
4260:  BRA    425E
4262:  BCF    FA6.2
4264:  MOVF   00,W
4266:  IORWF  FF2,F
....................          delay_ms(20); 
4268:  MOVLW  14
426A:  MOVLB  0
426C:  MOVWF  xE5
426E:  CALL   0960
....................          lcd_gotoxy(1,1); 
4272:  MOVLW  01
4274:  MOVWF  xE0
4276:  MOVWF  xE1
4278:  CALL   1436
....................          printf(lcd_putc,"                    "); 
427C:  MOVLW  26
427E:  MOVWF  FF6
4280:  MOVLW  08
4282:  MOVWF  FF7
4284:  CALL   1506
....................          lcd_gotoxy(1,2); 
4288:  MOVLW  01
428A:  MOVWF  xE0
428C:  MOVLW  02
428E:  MOVWF  xE1
4290:  CALL   1436
....................          printf(lcd_putc,"     Velocidad      "); 
4294:  MOVLW  3C
4296:  MOVWF  FF6
4298:  MOVLW  08
429A:  MOVWF  FF7
429C:  CALL   1506
....................          lcd_gotoxy(1,3); 
42A0:  MOVLW  01
42A2:  MOVWF  xE0
42A4:  MOVLW  03
42A6:  MOVWF  xE1
42A8:  CALL   1436
....................          printf(lcd_putc,"      Almacenada    "); 
42AC:  MOVLW  52
42AE:  MOVWF  FF6
42B0:  MOVLW  08
42B2:  MOVWF  FF7
42B4:  CALL   1506
....................          lcd_gotoxy(1,4); 
42B8:  MOVLW  01
42BA:  MOVWF  xE0
42BC:  MOVLW  04
42BE:  MOVWF  xE1
42C0:  CALL   1436
....................          printf(lcd_putc,"                    ");  
42C4:  MOVLW  68
42C6:  MOVWF  FF6
42C8:  MOVLW  08
42CA:  MOVWF  FF7
42CC:  CALL   1506
....................          delay_ms(1000); 
42D0:  MOVLW  04
42D2:  MOVWF  xCE
42D4:  MOVLW  FA
42D6:  MOVWF  xE5
42D8:  CALL   0960
42DC:  DECFSZ xCE,F
42DE:  BRA    42D4
....................          printf(lcd_putc,"\f"); 
42E0:  MOVLW  0C
42E2:  MOVWF  xDF
42E4:  CALL   14A0
....................          lcd_init(); 
42E8:  CALL   09F0
....................          Menu=1; paso=0; 
42EC:  MOVLW  01
42EE:  MOVWF  19
42F0:  CLRF   35
....................       } 
....................    }       
.................... //----------------Fin-Menu7--------------------------------------------------------------- 
....................  
.................... //----------------Menu100--------------------------------------------------------------- 
....................    if(Menu == 50){ // Menu de seleccion de Estado de Luz UV    
42F2:  MOVF   19,W
42F4:  SUBLW  32
42F6:  BTFSS  FD8.2
42F8:  GOTO   4A72
....................    if(Lectura==1){ 
42FC:  BTFSS  18.0
42FE:  BRA    4632
....................       Lectura=0; 
4300:  BCF    18.0
....................       CaidaPresion=Leer_Sensor_Presion(8); 
4302:  MOVLW  08
4304:  MOVWF  xCE
4306:  CALL   1F0A
430A:  MOVFF  03,AB
430E:  MOVFF  02,AA
4312:  MOVFF  01,A9
4316:  MOVFF  00,A8
....................       CaidaPresion=CaidaPresion*4.02; 
431A:  MOVFF  AB,E5
431E:  MOVFF  AA,E4
4322:  MOVFF  A9,E3
4326:  MOVFF  A8,E2
432A:  MOVLW  D7
432C:  MOVWF  xE9
432E:  MOVLW  A3
4330:  MOVWF  xE8
4332:  CLRF   xE7
4334:  MOVLW  81
4336:  MOVWF  xE6
4338:  CALL   1E18
433C:  MOVFF  03,AB
4340:  MOVFF  02,AA
4344:  MOVFF  01,A9
4348:  MOVFF  00,A8
....................       if(CaidaPresion<0.1 && estadomv==1){ 
434C:  MOVFF  AB,E5
4350:  MOVFF  AA,E4
4354:  MOVFF  A9,E3
4358:  MOVFF  A8,E2
435C:  MOVLW  CD
435E:  MOVWF  xE9
4360:  MOVLW  CC
4362:  MOVWF  xE8
4364:  MOVLW  4C
4366:  MOVWF  xE7
4368:  MOVLW  7B
436A:  MOVWF  xE6
436C:  CALL   0E54
4370:  BNC   4392
4372:  BTFSS  17.2
4374:  BRA    4392
....................          lcd_gotoxy(1,1); 
4376:  MOVLW  01
4378:  MOVWF  xE0
437A:  MOVWF  xE1
437C:  CALL   1436
....................          printf(lcd_putc,"!Verifique Flujo!  ");  
4380:  MOVLW  7E
4382:  MOVWF  FF6
4384:  MOVLW  08
4386:  MOVWF  FF7
4388:  CALL   1506
....................          ActivaBuzzer=1; 
438C:  MOVLW  01
438E:  MOVWF  41
....................       }else if(CaidaPresion>=1.0){ 
4390:  BRA    441A
4392:  CLRF   xE5
4394:  CLRF   xE4
4396:  CLRF   xE3
4398:  MOVLW  7F
439A:  MOVWF  xE2
439C:  MOVFF  AB,E9
43A0:  MOVFF  AA,E8
43A4:  MOVFF  A9,E7
43A8:  MOVFF  A8,E6
43AC:  CALL   0E54
43B0:  BC    43B4
43B2:  BNZ   43D0
....................          lcd_gotoxy(1,1); 
43B4:  MOVLW  01
43B6:  MOVWF  xE0
43B8:  MOVWF  xE1
43BA:  CALL   1436
....................          printf(lcd_putc,"!Verifique Filtro!");  
43BE:  MOVLW  92
43C0:  MOVWF  FF6
43C2:  MOVLW  08
43C4:  MOVWF  FF7
43C6:  CALL   1506
....................          ActivaBuzzer=1; 
43CA:  MOVLW  01
43CC:  MOVWF  41
....................       }else{ 
43CE:  BRA    441A
....................          lcd_gotoxy(1,1); 
43D0:  MOVLW  01
43D2:  MOVWF  xE0
43D4:  MOVWF  xE1
43D6:  CALL   1436
....................          printf(lcd_putc,"JPCR DP:%3.2f inH2O ",CaidaPresion);   
43DA:  MOVLW  A6
43DC:  MOVWF  FF6
43DE:  MOVLW  08
43E0:  MOVWF  FF7
43E2:  MOVLW  08
43E4:  MOVWF  xD2
43E6:  CALL   158E
43EA:  MOVLW  02
43EC:  MOVWF  FE9
43EE:  MOVFF  AB,D5
43F2:  MOVFF  AA,D4
43F6:  MOVFF  A9,D3
43FA:  MOVFF  A8,D2
43FE:  MOVWF  xD6
4400:  CALL   21BE
4404:  MOVLW  B3
4406:  MOVWF  FF6
4408:  MOVLW  08
440A:  MOVWF  FF7
440C:  MOVLW  07
440E:  MOVWF  xD2
4410:  CALL   158E
....................          Buzzer_off; 
4414:  BCF    F8B.0
4416:  BCF    F94.0
....................          ActivaBuzzer=0; 
4418:  CLRF   41
....................       } 
....................       //Saturacion=11*(((float)Vel1-(float)velocidadInicial)/(20.0-(float)velocidadInicial)); 
....................       Saturacion=(CaidaPresion/1.0)*11; 
441A:  MOVFF  AB,E5
441E:  MOVFF  AA,E4
4422:  MOVFF  A9,E3
4426:  MOVFF  A8,E2
442A:  CLRF   xE9
442C:  CLRF   xE8
442E:  CLRF   xE7
4430:  MOVLW  7F
4432:  MOVWF  xE6
4434:  CALL   1A54
4438:  MOVFF  00,CE
443C:  MOVFF  01,CF
4440:  MOVFF  02,D0
4444:  MOVFF  03,D1
4448:  MOVFF  03,E5
444C:  MOVFF  02,E4
4450:  MOVFF  01,E3
4454:  MOVFF  00,E2
4458:  CLRF   xE9
445A:  CLRF   xE8
445C:  MOVLW  30
445E:  MOVWF  xE7
4460:  MOVLW  82
4462:  MOVWF  xE6
4464:  CALL   1E18
4468:  MOVFF  03,A7
446C:  MOVFF  02,A6
4470:  MOVFF  01,A5
4474:  MOVFF  00,A4
....................        
....................       for(i=0;i<floor(Saturacion);i++) 
4478:  CLRF   2E
447A:  MOVFF  A7,D1
447E:  MOVFF  A6,D0
4482:  MOVFF  A5,CF
4486:  MOVFF  A4,CE
448A:  CALL   26B6
448E:  MOVFF  00,CE
4492:  MOVFF  01,CF
4496:  MOVFF  02,D0
449A:  MOVFF  03,D1
449E:  CLRF   xE7
44A0:  MOVFF  2E,E6
44A4:  CALL   0A80
44A8:  MOVFF  03,E5
44AC:  MOVFF  02,E4
44B0:  MOVFF  01,E3
44B4:  MOVFF  00,E2
44B8:  MOVFF  D1,E9
44BC:  MOVFF  D0,E8
44C0:  MOVFF  CF,E7
44C4:  MOVFF  CE,E6
44C8:  CALL   0E54
44CC:  BNC   44EA
....................       { 
....................          lcd_gotoxy(i+8,2); 
44CE:  MOVLW  08
44D0:  ADDWF  2E,W
44D2:  MOVWF  xCE
44D4:  MOVWF  xE0
44D6:  MOVLW  02
44D8:  MOVWF  xE1
44DA:  CALL   1436
....................          printf(lcd_putc,"Ñ"); 
44DE:  MOVLW  D1
44E0:  MOVWF  xDF
44E2:  CALL   14A0
....................       } 
44E6:  INCF   2E,F
44E8:  BRA    447A
....................        
....................       for(i=floor(Saturacion);i<11;i++){ 
44EA:  MOVFF  A7,D1
44EE:  MOVFF  A6,D0
44F2:  MOVFF  A5,CF
44F6:  MOVFF  A4,CE
44FA:  CALL   26B6
44FE:  MOVFF  03,E5
4502:  MOVFF  02,E4
4506:  MOVFF  01,E3
450A:  MOVFF  00,E2
450E:  CALL   2344
4512:  MOVFF  01,2E
4516:  MOVF   2E,W
4518:  SUBLW  0A
451A:  BNC   4538
....................          lcd_gotoxy(i+8,2); 
451C:  MOVLW  08
451E:  ADDWF  2E,W
4520:  MOVWF  xCE
4522:  MOVWF  xE0
4524:  MOVLW  02
4526:  MOVWF  xE1
4528:  CALL   1436
....................          printf(lcd_putc," "); 
452C:  MOVLW  20
452E:  MOVWF  xDF
4530:  CALL   14A0
....................       } 
4534:  INCF   2E,F
4536:  BRA    4516
....................        
....................       lcd_gotoxy(9,3); 
4538:  MOVLW  09
453A:  MOVWF  xE0
453C:  MOVLW  03
453E:  MOVWF  xE1
4540:  CALL   1436
....................       printf(lcd_putc,"Tempo:%03u:%02u",tempo_minutos,tempo_segundos); 
4544:  MOVLW  BC
4546:  MOVWF  FF6
4548:  MOVLW  08
454A:  MOVWF  FF7
454C:  MOVLW  06
454E:  MOVWF  xD2
4550:  CALL   158E
4554:  MOVFF  28,CE
4558:  MOVLW  03
455A:  MOVWF  xCF
455C:  CALL   15D4
4560:  MOVLW  3A
4562:  MOVWF  xDF
4564:  CALL   14A0
4568:  MOVFF  29,CE
456C:  MOVLW  01
456E:  MOVWF  xCF
4570:  CALL   15D4
....................       EliminaRuido(); 
4574:  CALL   0004
....................     
....................       lcd_gotoxy(1,2); 
4578:  MOVLW  01
457A:  MOVWF  xE0
457C:  MOVLW  02
457E:  MOVWF  xE1
4580:  CALL   1436
....................       printf(lcd_putc,"Filtro:"); 
4584:  MOVLW  CC
4586:  MOVWF  FF6
4588:  MOVLW  08
458A:  MOVWF  FF7
458C:  CALL   1506
....................        
....................       if(estadomv==1){ 
4590:  BTFSS  17.2
4592:  BRA    45AE
....................          lcd_gotoxy(1,4); 
4594:  MOVLW  01
4596:  MOVWF  xE0
4598:  MOVLW  04
459A:  MOVWF  xE1
459C:  CALL   1436
....................          printf(lcd_putc,"Motor:ON ");       
45A0:  MOVLW  D4
45A2:  MOVWF  FF6
45A4:  MOVLW  08
45A6:  MOVWF  FF7
45A8:  CALL   1506
....................       }else{ 
45AC:  BRA    45C6
....................          lcd_gotoxy(1,4); 
45AE:  MOVLW  01
45B0:  MOVWF  xE0
45B2:  MOVLW  04
45B4:  MOVWF  xE1
45B6:  CALL   1436
....................          printf(lcd_putc,"Motor:OFF"); 
45BA:  MOVLW  DE
45BC:  MOVWF  FF6
45BE:  MOVLW  08
45C0:  MOVWF  FF7
45C2:  CALL   1506
....................       } 
....................        
....................       if(estadofl==1){ 
45C6:  BTFSS  17.1
45C8:  BRA    45E4
....................          lcd_gotoxy(1,3); 
45CA:  MOVLW  01
45CC:  MOVWF  xE0
45CE:  MOVLW  03
45D0:  MOVWF  xE1
45D2:  CALL   1436
....................          printf(lcd_putc,"Luz:ON "); 
45D6:  MOVLW  E8
45D8:  MOVWF  FF6
45DA:  MOVLW  08
45DC:  MOVWF  FF7
45DE:  CALL   1506
....................       }else{ 
45E2:  BRA    45FC
....................          lcd_gotoxy(1,3); 
45E4:  MOVLW  01
45E6:  MOVWF  xE0
45E8:  MOVLW  03
45EA:  MOVWF  xE1
45EC:  CALL   1436
....................          printf(lcd_putc,"Luz:OFF"); 
45F0:  MOVLW  F0
45F2:  MOVWF  FF6
45F4:  MOVLW  08
45F6:  MOVWF  FF7
45F8:  CALL   1506
....................       }  
....................        
....................       if(estadouv==1) 
45FC:  BTFSS  17.0
45FE:  BRA    461A
....................       { 
....................          lcd_gotoxy(13,4); 
4600:  MOVLW  0D
4602:  MOVWF  xE0
4604:  MOVLW  04
4606:  MOVWF  xE1
4608:  CALL   1436
....................          printf(lcd_putc,"UV:ON "); 
460C:  MOVLW  F8
460E:  MOVWF  FF6
4610:  MOVLW  08
4612:  MOVWF  FF7
4614:  CALL   1506
....................       } 
....................       else 
4618:  BRA    4632
....................       {          
....................          lcd_gotoxy(13,4); 
461A:  MOVLW  0D
461C:  MOVWF  xE0
461E:  MOVLW  04
4620:  MOVWF  xE1
4622:  CALL   1436
....................          printf(lcd_putc,"UV:OFF"); 
4626:  MOVLW  00
4628:  MOVWF  FF6
462A:  MOVLW  09
462C:  MOVWF  FF7
462E:  CALL   1506
....................       } 
....................    } 
....................      
....................    if(tiempo_cumplido==1){ 
4632:  BTFSS  17.7
4634:  BRA    46CE
....................       if(estadoalarma==1){ 
4636:  BTFSS  18.4
4638:  BRA    46C4
....................          printf(lcd_putc,"\f"); 
463A:  MOVLW  0C
463C:  MOVWF  xDF
463E:  CALL   14A0
....................          lcd_gotoxy(1,2); 
4642:  MOVLW  01
4644:  MOVWF  xE0
4646:  MOVLW  02
4648:  MOVWF  xE1
464A:  CALL   1436
....................          printf(lcd_putc,"  Temporizador  de  "); 
464E:  MOVLW  08
4650:  MOVWF  FF6
4652:  MOVLW  09
4654:  MOVWF  FF7
4656:  CALL   1506
....................          lcd_gotoxy(1,3); 
465A:  MOVLW  01
465C:  MOVWF  xE0
465E:  MOVLW  03
4660:  MOVWF  xE1
4662:  CALL   1436
....................          printf(lcd_putc," Luz UV  Finalizado "); 
4666:  MOVLW  1E
4668:  MOVWF  FF6
466A:  MOVLW  09
466C:  MOVWF  FF7
466E:  CALL   1506
....................          lcd_gotoxy(1,4); 
4672:  MOVLW  01
4674:  MOVWF  xE0
4676:  MOVLW  04
4678:  MOVWF  xE1
467A:  CALL   1436
....................          printf(lcd_putc,"                    "); 
467E:  MOVLW  34
4680:  MOVWF  FF6
4682:  MOVLW  09
4684:  MOVWF  FF7
4686:  CALL   1506
....................          lcd_gotoxy(1,1); 
468A:  MOVLW  01
468C:  MOVWF  xE0
468E:  MOVWF  xE1
4690:  CALL   1436
....................          printf(lcd_putc,"                    "); 
4694:  MOVLW  4A
4696:  MOVWF  FF6
4698:  MOVLW  09
469A:  MOVWF  FF7
469C:  CALL   1506
....................          for(i=0;i<5;i++) 
46A0:  CLRF   2E
46A2:  MOVF   2E,W
46A4:  SUBLW  04
46A6:  BNC   46C4
....................          { 
....................             Buzzer_on; 
46A8:  BSF    F8B.0
46AA:  BCF    F94.0
....................             delay_ms(200); 
46AC:  MOVLW  C8
46AE:  MOVWF  xE5
46B0:  CALL   0960
....................             Buzzer_off; 
46B4:  BCF    F8B.0
46B6:  BCF    F94.0
....................             delay_ms(200); 
46B8:  MOVLW  C8
46BA:  MOVWF  xE5
46BC:  CALL   0960
....................          } 
46C0:  INCF   2E,F
46C2:  BRA    46A2
....................       } 
....................       tiempo_cumplido=0; 
46C4:  BCF    17.7
....................       printf(lcd_putc,"\f"); 
46C6:  MOVLW  0C
46C8:  MOVWF  xDF
46CA:  CALL   14A0
....................    }    
....................        
....................    if(estadofl==1){ 
46CE:  BTFSS  17.1
46D0:  BRA    46F0
....................       Luz_Blanca_on; 
46D2:  BCF    F8A.4
46D4:  BCF    F93.4
....................       if(flagfl==0){ 
46D6:  BTFSC  18.2
46D8:  BRA    46EE
....................          lcd_init();delay_ms(200);lcd_init(); 
46DA:  CALL   09F0
46DE:  MOVLW  C8
46E0:  MOVWF  xE5
46E2:  CALL   0960
46E6:  CALL   09F0
....................          flagfl=1;Cambio=ON; 
46EA:  BSF    18.2
46EC:  BSF    18.7
....................       } 
....................    }else{ 
46EE:  BRA    470C
....................       Luz_Blanca_off; 
46F0:  BSF    F8A.4
46F2:  BCF    F93.4
....................       if(flagfl==1){ 
46F4:  BTFSS  18.2
46F6:  BRA    470C
....................          lcd_init();delay_ms(200);lcd_init(); 
46F8:  CALL   09F0
46FC:  MOVLW  C8
46FE:  MOVWF  xE5
4700:  CALL   0960
4704:  CALL   09F0
....................          flagfl=0;Cambio=ON; 
4708:  BCF    18.2
470A:  BSF    18.7
....................       } 
....................    } 
....................       Cambio=OFF; 
470C:  BCF    18.7
....................     
....................    if(estadomv==1){  
470E:  BTFSS  17.2
4710:  BRA    4740
....................       if(flagmv==0){ 
4712:  BTFSC  xB0.0
4714:  BRA    4736
....................          VelMotor=6; 
4716:  MOVLW  06
4718:  MOVWF  xBF
....................          lcd_init();delay_ms(200);lcd_init(); 
471A:  CALL   09F0
471E:  MOVLW  C8
4720:  MOVWF  xE5
4722:  CALL   0960
4726:  CALL   09F0
....................          flagmv=1;Cambio=ON;delay_ms(200); 
472A:  BSF    xB0.0
472C:  BSF    18.7
472E:  MOVLW  C8
4730:  MOVWF  xE5
4732:  CALL   0960
....................       } 
....................       //VelMotor=Vel1; 
....................       Motor_on; 
4736:  BSF    F8B.2
4738:  BCF    F94.2
....................       Motor2_on; 
473A:  BSF    F8B.1
473C:  BCF    F94.1
....................    }else{ 
473E:  BRA    4760
....................       //VelMotor=0; 
....................       Motor_off; 
4740:  BCF    F8B.2
4742:  BCF    F94.2
....................       Motor2_off; 
4744:  BCF    F8B.1
4746:  BCF    F94.1
....................       if(flagmv==1){ 
4748:  BTFSS  xB0.0
474A:  BRA    4760
....................          lcd_init();delay_ms(200);lcd_init(); 
474C:  CALL   09F0
4750:  MOVLW  C8
4752:  MOVWF  xE5
4754:  CALL   0960
4758:  CALL   09F0
....................          flagmv=0;Cambio=ON; 
475C:  BCF    xB0.0
475E:  BSF    18.7
....................       } 
....................    } 
....................     
....................    if(estadofl==1) 
4760:  BTFSS  17.1
4762:  BRA    4782
....................    { 
....................       Luz_Blanca_on; 
4764:  BCF    F8A.4
4766:  BCF    F93.4
....................       if(flagfl==0) 
4768:  BTFSC  18.2
476A:  BRA    4780
....................       { 
....................          lcd_init();delay_ms(200);lcd_init(); 
476C:  CALL   09F0
4770:  MOVLW  C8
4772:  MOVWF  xE5
4774:  CALL   0960
4778:  CALL   09F0
....................          flagfl=1;Cambio=ON; 
477C:  BSF    18.2
477E:  BSF    18.7
....................       } 
....................    } 
....................    else 
4780:  BRA    479E
....................    { 
....................       Luz_Blanca_off; 
4782:  BSF    F8A.4
4784:  BCF    F93.4
....................       if(flagfl==1) 
4786:  BTFSS  18.2
4788:  BRA    479E
....................       { 
....................          lcd_init();delay_ms(200);lcd_init(); 
478A:  CALL   09F0
478E:  MOVLW  C8
4790:  MOVWF  xE5
4792:  CALL   0960
4796:  CALL   09F0
....................          flagfl=0;Cambio=ON; 
479A:  BCF    18.2
479C:  BSF    18.7
....................       } 
....................    } 
....................     
....................    if(estadouv==1){ 
479E:  BTFSS  17.0
47A0:  BRA    484C
....................       Luz_UV_on; 
47A2:  BCF    F8A.3
47A4:  BCF    F93.3
....................       tiempo_cumplido=0;       
47A6:  BCF    17.7
....................       estadomv=0; 
47A8:  BCF    17.2
....................       VelMotor=0; 
47AA:  CLRF   xBF
....................       estadofl=0; 
47AC:  BCF    17.1
....................       Luz_Blanca_off; 
47AE:  BSF    F8A.4
47B0:  BCF    F93.4
....................       if(flaguv==0){ 
47B2:  BTFSC  18.1
47B4:  BRA    484A
....................          lcd_init();delay_ms(200);lcd_init(); 
47B6:  CALL   09F0
47BA:  MOVLW  C8
47BC:  MOVWF  xE5
47BE:  CALL   0960
47C2:  CALL   09F0
....................          flaguv=1;guardaruv=1;Cambio=ON; 
47C6:  BSF    18.1
47C8:  MOVLW  01
47CA:  MOVWF  31
47CC:  BSF    18.7
....................          write_eeprom(22,estadomv);delay_ms(20); 
47CE:  MOVLW  00
47D0:  BTFSC  17.2
47D2:  MOVLW  01
47D4:  MOVWF  xCE
47D6:  MOVLW  16
47D8:  MOVWF  FA9
47DA:  MOVFF  CE,FA8
47DE:  BCF    FA6.6
47E0:  BCF    FA6.7
47E2:  BSF    FA6.2
47E4:  MOVF   FF2,W
47E6:  MOVWF  00
47E8:  BCF    FF2.6
47EA:  BCF    FF2.7
47EC:  MOVLB  F
47EE:  MOVLW  55
47F0:  MOVWF  FA7
47F2:  MOVLW  AA
47F4:  MOVWF  FA7
47F6:  BSF    FA6.1
47F8:  BTFSC  FA6.1
47FA:  BRA    47F8
47FC:  BCF    FA6.2
47FE:  MOVF   00,W
4800:  IORWF  FF2,F
4802:  MOVLW  14
4804:  MOVLB  0
4806:  MOVWF  xE5
4808:  CALL   0960
....................          write_eeprom(23,estadofl);delay_ms(20); 
480C:  MOVLW  00
480E:  BTFSC  17.1
4810:  MOVLW  01
4812:  MOVWF  xCE
4814:  MOVLW  17
4816:  MOVWF  FA9
4818:  MOVFF  CE,FA8
481C:  BCF    FA6.6
481E:  BCF    FA6.7
4820:  BSF    FA6.2
4822:  MOVF   FF2,W
4824:  MOVWF  00
4826:  BCF    FF2.6
4828:  BCF    FF2.7
482A:  MOVLB  F
482C:  MOVLW  55
482E:  MOVWF  FA7
4830:  MOVLW  AA
4832:  MOVWF  FA7
4834:  BSF    FA6.1
4836:  BTFSC  FA6.1
4838:  BRA    4836
483A:  BCF    FA6.2
483C:  MOVF   00,W
483E:  IORWF  FF2,F
4840:  MOVLW  14
4842:  MOVLB  0
4844:  MOVWF  xE5
4846:  CALL   0960
....................       } 
....................    }else{ 
484A:  BRA    486E
....................       estadouv=0; 
484C:  BCF    17.0
....................       Luz_UV_off; 
484E:  BSF    F8A.3
4850:  BCF    F93.3
....................       if(flaguv==1){ 
4852:  BTFSS  18.1
4854:  BRA    486E
....................          lcd_init();delay_ms(200);lcd_init(); 
4856:  CALL   09F0
485A:  MOVLW  C8
485C:  MOVWF  xE5
485E:  CALL   0960
4862:  CALL   09F0
....................          flaguv=0;guardaruv=1;Cambio=ON; 
4866:  BCF    18.1
4868:  MOVLW  01
486A:  MOVWF  31
486C:  BSF    18.7
....................       } 
....................    } 
....................        
....................    if(tdown>=60){ //Si oprimio tecla abajo por 300ms o mas 
486E:  MOVF   xB6,F
4870:  BNZ   4878
4872:  MOVF   xB5,W
4874:  SUBLW  3B
4876:  BC    48CA
....................       if(!Flanco){ 
4878:  BTFSC  17.3
487A:  BRA    48C8
....................          estadofl=!estadofl;Flanco = 1;write_eeprom(23,estadofl);delay_ms(300);Cambio=ON; 
487C:  BTG    17.1
487E:  BSF    17.3
4880:  MOVLW  00
4882:  BTFSC  17.1
4884:  MOVLW  01
4886:  MOVWF  xCE
4888:  MOVLW  17
488A:  MOVWF  FA9
488C:  MOVFF  CE,FA8
4890:  BCF    FA6.6
4892:  BCF    FA6.7
4894:  BSF    FA6.2
4896:  MOVF   FF2,W
4898:  MOVWF  00
489A:  BCF    FF2.6
489C:  BCF    FF2.7
489E:  MOVLB  F
48A0:  MOVLW  55
48A2:  MOVWF  FA7
48A4:  MOVLW  AA
48A6:  MOVWF  FA7
48A8:  BSF    FA6.1
48AA:  BTFSC  FA6.1
48AC:  BRA    48AA
48AE:  BCF    FA6.2
48B0:  MOVF   00,W
48B2:  IORWF  FF2,F
48B4:  MOVLW  02
48B6:  MOVLB  0
48B8:  MOVWF  xCE
48BA:  MOVLW  96
48BC:  MOVWF  xE5
48BE:  CALL   0960
48C2:  DECFSZ xCE,F
48C4:  BRA    48BA
48C6:  BSF    18.7
....................       } 
....................    }else{ 
48C8:  BRA    48CC
....................       Flanco=0; 
48CA:  BCF    17.3
....................    } 
....................     
....................    if(tright>=60){ //Si oprimio tecla derecha por 300ms o mas 
48CC:  MOVF   xB8,F
48CE:  BNZ   48D6
48D0:  MOVF   xB7,W
48D2:  SUBLW  3B
48D4:  BC    4928
....................       if(!Flanco2){ 
48D6:  BTFSC  17.5
48D8:  BRA    4926
....................          estadomv=!estadomv;Flanco2 = 1;write_eeprom(22,estadomv);delay_ms(300);Cambio=ON; 
48DA:  BTG    17.2
48DC:  BSF    17.5
48DE:  MOVLW  00
48E0:  BTFSC  17.2
48E2:  MOVLW  01
48E4:  MOVWF  xCE
48E6:  MOVLW  16
48E8:  MOVWF  FA9
48EA:  MOVFF  CE,FA8
48EE:  BCF    FA6.6
48F0:  BCF    FA6.7
48F2:  BSF    FA6.2
48F4:  MOVF   FF2,W
48F6:  MOVWF  00
48F8:  BCF    FF2.6
48FA:  BCF    FF2.7
48FC:  MOVLB  F
48FE:  MOVLW  55
4900:  MOVWF  FA7
4902:  MOVLW  AA
4904:  MOVWF  FA7
4906:  BSF    FA6.1
4908:  BTFSC  FA6.1
490A:  BRA    4908
490C:  BCF    FA6.2
490E:  MOVF   00,W
4910:  IORWF  FF2,F
4912:  MOVLW  02
4914:  MOVLB  0
4916:  MOVWF  xCE
4918:  MOVLW  96
491A:  MOVWF  xE5
491C:  CALL   0960
4920:  DECFSZ xCE,F
4922:  BRA    4918
4924:  BSF    18.7
....................       } 
....................    }else{ 
4926:  BRA    492A
....................       Flanco2=0; 
4928:  BCF    17.5
....................    } 
....................     
....................    if(tleft>=60){ //Si oprimio tecla izquierda por 300ms o mas 
492A:  MOVF   xBA,F
492C:  BNZ   4934
492E:  MOVF   xB9,W
4930:  SUBLW  3B
4932:  BC    4948
....................       if(!Flanco3){ 
4934:  BTFSC  17.6
4936:  BRA    4946
....................          delay_ms(150);  
4938:  MOVLW  96
493A:  MOVWF  xE5
493C:  CALL   0960
....................          estadouv=!estadouv; 
4940:  BTG    17.0
....................          Cambio=ON; 
4942:  BSF    18.7
....................          Flanco3=1; 
4944:  BSF    17.6
....................       } 
....................    }else{ 
4946:  BRA    494A
....................       Flanco3=0; 
4948:  BCF    17.6
....................    } 
....................     
....................    if(tup>=60){ //Si oprimio tecla arriba por 300ms o mas 
494A:  MOVF   xB4,F
494C:  BNZ   4954
494E:  MOVF   xB3,W
4950:  SUBLW  3B
4952:  BC    498A
....................       if(!Flanco1){ 
4954:  BTFSC  17.4
4956:  BRA    4988
....................          delay_ms(200); 
4958:  MOVLW  C8
495A:  MOVWF  xE5
495C:  CALL   0960
....................          printf(lcd_putc,"\f"); 
4960:  MOVLW  0C
4962:  MOVWF  xDF
4964:  CALL   14A0
....................          delay_ms(300); 
4968:  MOVLW  02
496A:  MOVWF  xCE
496C:  MOVLW  96
496E:  MOVWF  xE5
4970:  CALL   0960
4974:  DECFSZ xCE,F
4976:  BRA    496C
....................          Menu=1;  
4978:  MOVLW  01
497A:  MOVWF  19
....................          paso=0; 
497C:  CLRF   35
....................          Flecha=2; 
497E:  MOVLW  02
4980:  MOVWF  1D
....................          Flecha2=2; 
4982:  MOVWF  1F
....................          Cambio=ON; 
4984:  BSF    18.7
....................          Flanco1=1; 
4986:  BSF    17.4
....................       } 
....................    }else{ 
4988:  BRA    498C
....................       Flanco1=0; 
498A:  BCF    17.4
....................    } 
....................        
....................    if(guardaruv==1) 
498C:  DECFSZ 31,W
498E:  BRA    4A5A
....................    { 
....................       write_eeprom(7,segundos);write_eeprom(8,minutos); 
4990:  MOVLW  07
4992:  MOVWF  FA9
4994:  MOVFF  22,FA8
4998:  BCF    FA6.6
499A:  BCF    FA6.7
499C:  BSF    FA6.2
499E:  MOVF   FF2,W
49A0:  MOVWF  00
49A2:  BCF    FF2.6
49A4:  BCF    FF2.7
49A6:  MOVLB  F
49A8:  MOVLW  55
49AA:  MOVWF  FA7
49AC:  MOVLW  AA
49AE:  MOVWF  FA7
49B0:  BSF    FA6.1
49B2:  BTFSC  FA6.1
49B4:  BRA    49B2
49B6:  BCF    FA6.2
49B8:  MOVF   00,W
49BA:  IORWF  FF2,F
49BC:  MOVLW  08
49BE:  MOVWF  FA9
49C0:  MOVFF  23,FA8
49C4:  BCF    FA6.6
49C6:  BCF    FA6.7
49C8:  BSF    FA6.2
49CA:  MOVF   FF2,W
49CC:  MOVWF  00
49CE:  BCF    FF2.6
49D0:  BCF    FF2.7
49D2:  MOVLW  55
49D4:  MOVWF  FA7
49D6:  MOVLW  AA
49D8:  MOVWF  FA7
49DA:  BSF    FA6.1
49DC:  BTFSC  FA6.1
49DE:  BRA    49DC
49E0:  BCF    FA6.2
49E2:  MOVF   00,W
49E4:  IORWF  FF2,F
....................       horasL=make8(horas,0); 
49E6:  MOVFF  48,24
....................       horasH=make8(horas,1); 
49EA:  MOVFF  49,25
....................       write_eeprom(9,horasL); 
49EE:  MOVLW  09
49F0:  MOVWF  FA9
49F2:  MOVFF  24,FA8
49F6:  BCF    FA6.6
49F8:  BCF    FA6.7
49FA:  BSF    FA6.2
49FC:  MOVFF  FF2,00
4A00:  BCF    FF2.6
4A02:  BCF    FF2.7
4A04:  MOVLW  55
4A06:  MOVWF  FA7
4A08:  MOVLW  AA
4A0A:  MOVWF  FA7
4A0C:  BSF    FA6.1
4A0E:  BTFSC  FA6.1
4A10:  BRA    4A0E
4A12:  BCF    FA6.2
4A14:  MOVF   00,W
4A16:  IORWF  FF2,F
....................       delay_ms(20); 
4A18:  MOVLW  14
4A1A:  MOVLB  0
4A1C:  MOVWF  xE5
4A1E:  CALL   0960
....................       write_eeprom(10,horasH); 
4A22:  MOVLW  0A
4A24:  MOVWF  FA9
4A26:  MOVFF  25,FA8
4A2A:  BCF    FA6.6
4A2C:  BCF    FA6.7
4A2E:  BSF    FA6.2
4A30:  MOVF   FF2,W
4A32:  MOVWF  00
4A34:  BCF    FF2.6
4A36:  BCF    FF2.7
4A38:  MOVLB  F
4A3A:  MOVLW  55
4A3C:  MOVWF  FA7
4A3E:  MOVLW  AA
4A40:  MOVWF  FA7
4A42:  BSF    FA6.1
4A44:  BTFSC  FA6.1
4A46:  BRA    4A44
4A48:  BCF    FA6.2
4A4A:  MOVF   00,W
4A4C:  IORWF  FF2,F
....................       delay_ms(20); 
4A4E:  MOVLW  14
4A50:  MOVLB  0
4A52:  MOVWF  xE5
4A54:  CALL   0960
....................       guardaruv=0; 
4A58:  CLRF   31
....................    } 
....................     
....................    if(segundos>=60) 
4A5A:  MOVF   22,W
4A5C:  SUBLW  3B
4A5E:  BC    4A64
....................    { 
....................       segundos=0;minutos++; 
4A60:  CLRF   22
4A62:  INCF   23,F
....................    } 
....................    if(minutos==60) 
4A64:  MOVF   23,W
4A66:  SUBLW  3C
4A68:  BNZ   4A72
....................    { 
....................       minutos=0;horas++; 
4A6A:  CLRF   23
4A6C:  INCF   48,F
4A6E:  BTFSC  FD8.2
4A70:  INCF   49,F
....................    }   
....................      
....................    } 
.................... //----------------Fin-Menu100--------------------------------------------------------------   
....................    if(tiemporeset>=60) 
4A72:  MOVF   30,W
4A74:  SUBLW  3B
4A76:  BC    4A90
....................    { 
....................       printf(lcd_putc,"\f"); 
4A78:  MOVLW  0C
4A7A:  MOVWF  xDF
4A7C:  CALL   14A0
....................       lcd_init(); 
4A80:  CALL   09F0
....................       delay_ms(200); 
4A84:  MOVLW  C8
4A86:  MOVWF  xE5
4A88:  CALL   0960
....................       tiemporeset=0; 
4A8C:  CLRF   30
....................       Cambio=ON; 
4A8E:  BSF    18.7
....................    }    
....................    } 
4A90:  GOTO   2C0A
.................... } 
....................  
.................... int8 BIT_BYTE(int1 D0, int1 D1, int1 D2, int1 D3, int1 D4, int1 D5, int1 D6, int1 D7){ 
....................    int8 dato; 
4A94:  SLEEP 
....................    dato= D7*128 + D6*64 + D5*32 + D4*16 + D3*8 + D2*4 + D1*2 +D0*1; // 0 al 255  
....................    return dato;  
.................... } 

Configuration Fuses:
   Word  1: 0E3C   NOIESO NOFCMEN HSPLL PLL5 CPUDIV4 USBDIV
   Word  2: 1E39   NOBROWNOUT NOWDT BORV20 NOPUT WDT32768 VREGEN
   Word  3: 0100   NOPBADEN CCP2C1 NOMCLR NOLPT1OSC
   Word  4: 0080   NOSTVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
