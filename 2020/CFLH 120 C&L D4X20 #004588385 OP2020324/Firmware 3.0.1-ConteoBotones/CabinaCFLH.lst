CCS PCH C Compiler, Version 4.104, 5967               09-oct.-20 15:07

               Filename: D:\Laboratorio\Cabina de Flujo Laminar Horizontal\2020\CFLH 120 C&L D4X20 #0045883XX OP2020324\Firmware 3.0.0\CabinaCFLH.lst

               ROM used: 16302 bytes (50%)
                         Largest free fragment is 16464
               RAM used: 198 (10%) at main() level
                         236 (12%) worst case
               Stack:    8 worst case (6 in main + 2 for interrupts)

*
0000:  GOTO   208A
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  FF2.4
004A:  GOTO   0054
004E:  BTFSC  FF2.1
0050:  GOTO   01B2
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina de PCR. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz UV, Luz Blanca, Motor Ventilador y Cambio de Contraseña. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... //#fuses XTPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,VREGEN,NOMCLR,NOPUT// PLL1 para 4 MHz 
.................... //#fuses XT,NOWDT,NOPROTECT,NOLVP,NODEBUG,NOVREGEN,NOMCLR// PLL1 para 4 MHz 
.................... //#use delay(clock=48000000) 
.................... //#use delay(clock=20000000) 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL5,CPUDIV4,VREGEN,NOMCLR,NOPUT,NOBROWNOUT,NOSTVREN,NOWRT,NOWRTD,NOIESO,NOFCMEN,NOPBADEN,NOWRTC,NOWRTB,NOEBTR,NOEBTRB,NOCPB,NOLPT1OSC,NOXINST,NOICPRT 
.................... #use delay(clock=16000000) 
*
0198:  MOVLW  04
019A:  SUBWF  xEB,F
019C:  BNC   01B0
019E:  CLRF   FEA
01A0:  MOVLW  EB
01A2:  MOVWF  FE9
01A4:  MOVF   FEF,W
01A6:  BZ    01B0
01A8:  BRA    01AC
01AA:  NOP   
01AC:  DECFSZ FEF,F
01AE:  BRA    01AA
01B0:  RETLW  00
*
08B4:  CLRF   FEA
08B6:  MOVLW  D9
08B8:  MOVWF  FE9
08BA:  MOVF   FEF,W
08BC:  BZ    08DA
08BE:  MOVLW  05
08C0:  MOVWF  01
08C2:  CLRF   00
08C4:  DECFSZ 00,F
08C6:  BRA    08C4
08C8:  DECFSZ 01,F
08CA:  BRA    08C2
08CC:  MOVLW  2E
08CE:  MOVWF  00
08D0:  DECFSZ 00,F
08D2:  BRA    08D0
08D4:  BRA    08D6
08D6:  DECFSZ FEF,F
08D8:  BRA    08BE
08DA:  RETLW  00
.................... #include <MATH.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
*
1D3A:  BCF    xD5.0
....................    y = x; 
1D3C:  MOVFF  C9,CE
1D40:  MOVFF  C8,CD
1D44:  MOVFF  C7,CC
1D48:  MOVFF  C6,CB
....................  
....................    if (x < 0) 
1D4C:  MOVFF  C9,D9
1D50:  MOVFF  C8,D8
1D54:  MOVFF  C7,D7
1D58:  MOVFF  C6,D6
1D5C:  CLRF   xDD
1D5E:  CLRF   xDC
1D60:  CLRF   xDB
1D62:  CLRF   xDA
1D64:  CALL   0D16
1D68:  BNC   1D72
....................    { 
....................       s = 1; 
1D6A:  BSF    xD5.0
....................       y = -y; 
1D6C:  MOVF   xCC,W
1D6E:  XORLW  80
1D70:  MOVWF  xCC
....................    } 
....................  
....................    if (y <= 32768.0) 
1D72:  MOVFF  CE,D9
1D76:  MOVFF  CD,D8
1D7A:  MOVFF  CC,D7
1D7E:  MOVFF  CB,D6
1D82:  CLRF   xDD
1D84:  CLRF   xDC
1D86:  CLRF   xDB
1D88:  MOVLW  8E
1D8A:  MOVWF  xDA
1D8C:  CALL   0D16
1D90:  BC    1D94
1D92:  BNZ   1DC4
....................   res = (float32)(unsigned int16)y; 
1D94:  MOVFF  CE,D9
1D98:  MOVFF  CD,D8
1D9C:  MOVFF  CC,D7
1DA0:  MOVFF  CB,D6
1DA4:  RCALL  1D02
1DA6:  MOVFF  02,DB
1DAA:  MOVFF  01,DA
1DAE:  CALL   0B02
1DB2:  MOVFF  03,D2
1DB6:  MOVFF  02,D1
1DBA:  MOVFF  01,D0
1DBE:  MOVFF  00,CF
....................  
....................  else if (y < 10000000.0) 
1DC2:  BRA    1F4E
1DC4:  MOVFF  CE,D9
1DC8:  MOVFF  CD,D8
1DCC:  MOVFF  CC,D7
1DD0:  MOVFF  CB,D6
1DD4:  MOVLW  80
1DD6:  MOVWF  xDD
1DD8:  MOVLW  96
1DDA:  MOVWF  xDC
1DDC:  MOVLW  18
1DDE:  MOVWF  xDB
1DE0:  MOVLW  96
1DE2:  MOVWF  xDA
1DE4:  CALL   0D16
1DE8:  BTFSS  FD8.0
1DEA:  BRA    1F3E
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
1DEC:  MOVFF  CE,D9
1DF0:  MOVFF  CD,D8
1DF4:  MOVFF  CC,D7
1DF8:  MOVFF  CB,D6
1DFC:  CLRF   xDD
1DFE:  CLRF   xDC
1E00:  CLRF   xDB
1E02:  MOVLW  8E
1E04:  MOVWF  xDA
1E06:  CALL   1476
1E0A:  MOVFF  03,D9
1E0E:  MOVFF  02,D8
1E12:  MOVFF  01,D7
1E16:  MOVFF  00,D6
1E1A:  RCALL  1D02
1E1C:  MOVFF  02,D4
1E20:  MOVFF  01,D3
....................       y = 32768.0*(y/32768.0 - (float32)l); 
1E24:  MOVFF  CE,D9
1E28:  MOVFF  CD,D8
1E2C:  MOVFF  CC,D7
1E30:  MOVFF  CB,D6
1E34:  CLRF   xDD
1E36:  CLRF   xDC
1E38:  CLRF   xDB
1E3A:  MOVLW  8E
1E3C:  MOVWF  xDA
1E3E:  CALL   1476
1E42:  MOVFF  00,D6
1E46:  MOVFF  01,D7
1E4A:  MOVFF  02,D8
1E4E:  MOVFF  03,D9
1E52:  MOVFF  D4,DB
1E56:  MOVFF  D3,DA
1E5A:  CALL   0B02
1E5E:  BSF    FD8.1
1E60:  MOVFF  D9,DD
1E64:  MOVFF  D8,DC
1E68:  MOVFF  D7,DB
1E6C:  MOVFF  D6,DA
1E70:  MOVFF  03,E1
1E74:  MOVFF  02,E0
1E78:  MOVFF  01,DF
1E7C:  MOVFF  00,DE
1E80:  CALL   15D0
1E84:  CLRF   xD9
1E86:  CLRF   xD8
1E88:  CLRF   xD7
1E8A:  MOVLW  8E
1E8C:  MOVWF  xD6
1E8E:  MOVFF  03,DD
1E92:  MOVFF  02,DC
1E96:  MOVFF  01,DB
1E9A:  MOVFF  00,DA
1E9E:  RCALL  19D0
1EA0:  MOVFF  03,CE
1EA4:  MOVFF  02,CD
1EA8:  MOVFF  01,CC
1EAC:  MOVFF  00,CB
....................   res = 32768.0*(float32)l; 
1EB0:  MOVFF  D4,DB
1EB4:  MOVFF  D3,DA
1EB8:  CALL   0B02
1EBC:  CLRF   xD9
1EBE:  CLRF   xD8
1EC0:  CLRF   xD7
1EC2:  MOVLW  8E
1EC4:  MOVWF  xD6
1EC6:  MOVFF  03,DD
1ECA:  MOVFF  02,DC
1ECE:  MOVFF  01,DB
1ED2:  MOVFF  00,DA
1ED6:  RCALL  19D0
1ED8:  MOVFF  03,D2
1EDC:  MOVFF  02,D1
1EE0:  MOVFF  01,D0
1EE4:  MOVFF  00,CF
....................   res += (float32)(unsigned int16)y; 
1EE8:  MOVFF  CE,D9
1EEC:  MOVFF  CD,D8
1EF0:  MOVFF  CC,D7
1EF4:  MOVFF  CB,D6
1EF8:  RCALL  1D02
1EFA:  MOVFF  02,DB
1EFE:  MOVFF  01,DA
1F02:  CALL   0B02
1F06:  BCF    FD8.1
1F08:  MOVFF  D2,DD
1F0C:  MOVFF  D1,DC
1F10:  MOVFF  D0,DB
1F14:  MOVFF  CF,DA
1F18:  MOVFF  03,E1
1F1C:  MOVFF  02,E0
1F20:  MOVFF  01,DF
1F24:  MOVFF  00,DE
1F28:  CALL   15D0
1F2C:  MOVFF  03,D2
1F30:  MOVFF  02,D1
1F34:  MOVFF  01,D0
1F38:  MOVFF  00,CF
....................  } 
....................  
....................  else 
1F3C:  BRA    1F4E
....................   res = y; 
1F3E:  MOVFF  CE,D2
1F42:  MOVFF  CD,D1
1F46:  MOVFF  CC,D0
1F4A:  MOVFF  CB,CF
....................  
....................  y = y - (float32)(unsigned int16)y; 
1F4E:  MOVFF  CE,D9
1F52:  MOVFF  CD,D8
1F56:  MOVFF  CC,D7
1F5A:  MOVFF  CB,D6
1F5E:  RCALL  1D02
1F60:  MOVFF  02,DB
1F64:  MOVFF  01,DA
1F68:  CALL   0B02
1F6C:  BSF    FD8.1
1F6E:  MOVFF  CE,DD
1F72:  MOVFF  CD,DC
1F76:  MOVFF  CC,DB
1F7A:  MOVFF  CB,DA
1F7E:  MOVFF  03,E1
1F82:  MOVFF  02,E0
1F86:  MOVFF  01,DF
1F8A:  MOVFF  00,DE
1F8E:  CALL   15D0
1F92:  MOVFF  03,CE
1F96:  MOVFF  02,CD
1F9A:  MOVFF  01,CC
1F9E:  MOVFF  00,CB
....................  
....................  if (s) 
1FA2:  BTFSS  xD5.0
1FA4:  BRA    1FAC
....................   res = -res; 
1FA6:  MOVF   xD0,W
1FA8:  XORLW  80
1FAA:  MOVWF  xD0
....................  
....................  if (y != 0) 
1FAC:  MOVFF  CE,D9
1FB0:  MOVFF  CD,D8
1FB4:  MOVFF  CC,D7
1FB8:  MOVFF  CB,D6
1FBC:  CLRF   xDD
1FBE:  CLRF   xDC
1FC0:  CLRF   xDB
1FC2:  CLRF   xDA
1FC4:  CALL   0D16
1FC8:  BZ    203A
....................  { 
....................   if (s == 1 && n == 0) 
1FCA:  BTFSS  xD5.0
1FCC:  BRA    2002
1FCE:  MOVF   xCA,F
1FD0:  BNZ   2002
....................    res -= 1.0; 
1FD2:  BSF    FD8.1
1FD4:  MOVFF  D2,DD
1FD8:  MOVFF  D1,DC
1FDC:  MOVFF  D0,DB
1FE0:  MOVFF  CF,DA
1FE4:  CLRF   xE1
1FE6:  CLRF   xE0
1FE8:  CLRF   xDF
1FEA:  MOVLW  7F
1FEC:  MOVWF  xDE
1FEE:  CALL   15D0
1FF2:  MOVFF  03,D2
1FF6:  MOVFF  02,D1
1FFA:  MOVFF  01,D0
1FFE:  MOVFF  00,CF
....................  
....................   if (s == 0 && n == 1) 
2002:  BTFSC  xD5.0
2004:  BRA    203A
2006:  DECFSZ xCA,W
2008:  BRA    203A
....................    res += 1.0; 
200A:  BCF    FD8.1
200C:  MOVFF  D2,DD
2010:  MOVFF  D1,DC
2014:  MOVFF  D0,DB
2018:  MOVFF  CF,DA
201C:  CLRF   xE1
201E:  CLRF   xE0
2020:  CLRF   xDF
2022:  MOVLW  7F
2024:  MOVWF  xDE
2026:  CALL   15D0
202A:  MOVFF  03,D2
202E:  MOVFF  02,D1
2032:  MOVFF  01,D0
2036:  MOVFF  00,CF
....................  } 
....................  if (x == 0) 
203A:  MOVFF  C9,D9
203E:  MOVFF  C8,D8
2042:  MOVFF  C7,D7
2046:  MOVFF  C6,D6
204A:  CLRF   xDD
204C:  CLRF   xDC
204E:  CLRF   xDB
2050:  CLRF   xDA
2052:  CALL   0D16
2056:  BNZ   2060
....................     res = 0; 
2058:  CLRF   xD2
205A:  CLRF   xD1
205C:  CLRF   xD0
205E:  CLRF   xCF
....................  
....................  return (res); 
2060:  MOVFF  CF,00
2064:  MOVFF  D0,01
2068:  MOVFF  D1,02
206C:  MOVFF  D2,03
.................... } 
2070:  GOTO   2088 (RETURN)
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
2074:  MOVFF  C5,C9
2078:  MOVFF  C4,C8
207C:  MOVFF  C3,C7
2080:  MOVFF  C2,C6
2084:  CLRF   xCA
2086:  BRA    1D3A
.................... } 
2088:  RETLW  00
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   UP            !input(PIN_A5) 
.................... #define   DOWN          !input(PIN_E0) 
.................... #define   RIGHT         !input(PIN_E1) 
.................... #define   IZQU          !input(PIN_E2) 
.................... #define   VIDRIO        !input(PIN_A1) 
....................  
.................... // Definición de otros puertos 
.................... #define   Luz_UV_on         output_bit(PIN_B3,0) 
.................... #define   Luz_UV_off        output_bit(PIN_B3,1) 
.................... #define   Luz_Blanca_on     output_bit(PIN_B4,0) 
.................... #define   Luz_Blanca_off    output_bit(PIN_B4,1) 
.................... #define   Motor_L1_on       output_bit(PIN_C2,1) 
.................... #define   Motor_L1_off      output_bit(PIN_C2,0) 
.................... #define   Motor_L2_on       output_bit(PIN_C1,1) 
.................... #define   Motor_L2_off      output_bit(PIN_C1,0) 
.................... #define   Buzzer_on         output_bit(PIN_C0,1) 
.................... #define   Buzzer_off        output_bit(PIN_C0,0) 
.................... #define   ON  1 
.................... #define   OFF 0 
....................  
.................... short estadouv=0,estadofl=0,estadomv=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,tiempo_cumplido=0,Lectura=0,flaguv=0,flagfl=0,estadobuzzer=0,estadoalarma=0; 
.................... int8 Menu=0, n_opcionH=7,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,segundos=0,minutos=0,horasL=0,horasH=0,G_l=0,G_h=0; 
.................... int8 tempo_minutos=0,tempo_segundos=0,tempo_minutos_pro=0,tempo_segundos_pro=0,r=0,q=0,i=0,unidad2=1,tiemporeset=0,guardaruv=0; 
.................... signed int8   paso=0; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... signed  int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 ActivaBuzzer=0; 
.................... int16 tiempos,horas=0,G16=0; 
.................... float PromPresion[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float V1=0.0,Presion=0.0,Saturacion=0.0,CaidaPresion=0.0; 
.................... float G=2; 
.................... short Cambio=ON,flagmv=0; 
....................  
.................... int16 pulsos=0,retardo=0,tup=0,tdown=0,tright=0,tleft=0; 
.................... short Cruce=OFF,Purga=OFF; 
.................... int16 tiempocruce=0; 
.................... int8 Porcentaje=0,VelMotor=0; 
.................... float Tcruce=0.0,Tcruce2=0; 
....................  
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN unused;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN enable;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTD")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_d(LCD_READ); 
....................       lcd.rw = 1; 
....................       delay_cycles(30);//30 
....................       lcd.enable = 1; 
....................       delay_cycles(30);//30 
....................       high = lcd.data; 
....................       lcd.enable = 0; 
....................       delay_cycles(30);//30 
....................       lcd.enable = 1; 
....................       delay_us(30);//30 
....................       low = lcd.data; 
....................       lcd.enable = 0; 
....................       set_tris_d(LCD_WRITE); 
....................       return( (high<<4) | low); 
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
08DC:  SWAPF  xDA,W
08DE:  ANDLW  F0
08E0:  MOVWF  00
08E2:  MOVLW  0F
08E4:  ANDWF  F83,W
08E6:  IORWF  00,W
08E8:  MOVWF  F83
....................       delay_cycles(30);//30 
08EA:  MOVLW  09
08EC:  MOVWF  00
08EE:  DECFSZ 00,F
08F0:  BRA    08EE
08F2:  BRA    08F4
....................       lcd.enable = 1; 
08F4:  BSF    F83.3
....................       delay_us(55);//55 
08F6:  MOVLW  49
08F8:  MOVWF  00
08FA:  DECFSZ 00,F
08FC:  BRA    08FA
....................       lcd.enable = 0; 
08FE:  BCF    F83.3
.................... } 
0900:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
0902:  BCF    F83.1
....................       //while ( bit_test(lcd_read_byte(),7)); 
....................       delay_ms(1); 
0904:  MOVLW  01
0906:  MOVWF  xD9
0908:  RCALL  08B4
....................       lcd.rs = address; 
090A:  BTFSS  xD7.0
090C:  BCF    F83.1
090E:  BTFSC  xD7.0
0910:  BSF    F83.1
....................       delay_cycles(30);//30 
0912:  MOVLW  09
0914:  MOVWF  00
0916:  DECFSZ 00,F
0918:  BRA    0916
091A:  BRA    091C
....................       lcd.rw = 0; 
091C:  BCF    F83.2
....................       delay_cycles(30);//30 
091E:  MOVLW  09
0920:  MOVWF  00
0922:  DECFSZ 00,F
0924:  BRA    0922
0926:  BRA    0928
....................       lcd.enable = 0; 
0928:  BCF    F83.3
....................       lcd_send_nibble(n >> 4); 
092A:  SWAPF  xD8,W
092C:  MOVWF  xD9
092E:  MOVLW  0F
0930:  ANDWF  xD9,F
0932:  MOVFF  D9,DA
0936:  RCALL  08DC
....................       lcd_send_nibble(n & 0xf); 
0938:  MOVF   xD8,W
093A:  ANDLW  0F
093C:  MOVWF  xD9
093E:  MOVWF  xDA
0940:  RCALL  08DC
.................... } 
0942:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_d(LCD_WRITE); 
0944:  MOVLW  00
0946:  MOVWF  F95
....................     lcd.rs = 0; 
0948:  BCF    F83.1
....................     lcd.rw = 0; 
094A:  BCF    F83.2
....................     lcd.enable = 0; 
094C:  BCF    F83.3
....................     delay_ms(15); 
094E:  MOVLW  0F
0950:  MOVWF  xD9
0952:  RCALL  08B4
....................     for(i=1;i<=3;++i) { 
0954:  MOVLW  01
0956:  MOVWF  xC2
0958:  MOVF   xC2,W
095A:  SUBLW  03
095C:  BNC   096E
....................        lcd_send_nibble(3); 
095E:  MOVLW  03
0960:  MOVWF  xDA
0962:  RCALL  08DC
....................        delay_ms(5); 
0964:  MOVLW  05
0966:  MOVWF  xD9
0968:  RCALL  08B4
....................     } 
096A:  INCF   xC2,F
096C:  BRA    0958
....................     lcd_send_nibble(2); 
096E:  MOVLW  02
0970:  MOVWF  xDA
0972:  RCALL  08DC
....................     for(i=0;i<=3;++i) 
0974:  CLRF   xC2
0976:  MOVF   xC2,W
0978:  SUBLW  03
097A:  BNC   099A
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
097C:  CLRF   03
097E:  MOVF   xC2,W
0980:  MOVFF  FF2,C3
0984:  BCF    FF2.7
0986:  CALL   0096
098A:  BTFSC  xC3.7
098C:  BSF    FF2.7
098E:  MOVWF  xC3
0990:  CLRF   xD7
0992:  MOVWF  xD8
0994:  RCALL  0902
0996:  INCF   xC2,F
0998:  BRA    0976
.................... } 
099A:  RETLW  00
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
*
09BC:  MOVLW  01
09BE:  SUBWF  xD5,W
09C0:  ADDLW  FC
09C2:  BC    09E2
09C4:  ADDLW  04
09C6:  GOTO   09F2
....................      case 1 : address=0x80;break; 
09CA:  MOVLW  80
09CC:  MOVWF  xD6
09CE:  BRA    09E2
....................      case 2 : address=0xc0;break; 
09D0:  MOVLW  C0
09D2:  MOVWF  xD6
09D4:  BRA    09E2
....................      case 3 : address=0x94;break; 
09D6:  MOVLW  94
09D8:  MOVWF  xD6
09DA:  BRA    09E2
....................      case 4 : address=0xd4;break; 
09DC:  MOVLW  D4
09DE:  MOVWF  xD6
09E0:  BRA    09E2
....................    } 
....................    address+=x-1; 
09E2:  MOVLW  01
09E4:  SUBWF  xD4,W
09E6:  ADDWF  xD6,F
....................    lcd_send_byte(0,address); 
09E8:  CLRF   xD7
09EA:  MOVFF  D6,D8
09EE:  RCALL  0902
.................... } 
09F0:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
....................    if(c=='ñ') 
*
0A1E:  MOVF   xD3,W
0A20:  SUBLW  F1
0A22:  BNZ   0A28
....................    { 
....................       c=238; 
0A24:  MOVLW  EE
0A26:  MOVWF  xD3
....................    } 
....................    if(c=='Ñ') 
0A28:  MOVF   xD3,W
0A2A:  SUBLW  D1
0A2C:  BNZ   0A32
....................    { 
....................       c=255; 
0A2E:  MOVLW  FF
0A30:  MOVWF  xD3
....................    } 
....................     
....................    switch (c) { 
0A32:  MOVF   xD3,W
0A34:  XORLW  0C
0A36:  BZ    0A42
0A38:  XORLW  06
0A3A:  BZ    0A56
0A3C:  XORLW  02
0A3E:  BZ    0A64
0A40:  BRA    0A6E
....................      case '\f'   : lcd_send_byte(0,1); 
0A42:  CLRF   xD7
0A44:  MOVLW  01
0A46:  MOVWF  xD8
0A48:  RCALL  0902
....................                    lcdline=1; 
0A4A:  MOVLW  01
0A4C:  MOVWF  xC1
....................                    delay_ms(2); 
0A4E:  MOVLW  02
0A50:  MOVWF  xD9
0A52:  RCALL  08B4
....................                                            break; 
0A54:  BRA    0A7A
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
0A56:  INCF   xC1,F
0A58:  MOVLW  01
0A5A:  MOVWF  xD4
0A5C:  MOVFF  C1,D5
0A60:  RCALL  09BC
0A62:  BRA    0A7A
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
0A64:  CLRF   xD7
0A66:  MOVLW  10
0A68:  MOVWF  xD8
0A6A:  RCALL  0902
0A6C:  BRA    0A7A
....................      default     : lcd_send_byte(1,c);     break; 
0A6E:  MOVLW  01
0A70:  MOVWF  xD7
0A72:  MOVFF  D3,D8
0A76:  RCALL  0902
0A78:  BRA    0A7A
....................    } 
.................... } 
0A7A:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... #include <Funciones.h> 
.................... void VelocidadMotor(int8 Vel){ 
....................    if(Vel==6){ 
*
0830:  MOVF   xC2,W
0832:  SUBLW  06
0834:  BNZ   0840
....................       Motor_L1_on; 
0836:  BSF    F8B.2
0838:  BCF    F94.2
....................       Motor_L2_on; 
083A:  BSF    F8B.1
083C:  BCF    F94.1
....................    }else if(Vel==5){ 
083E:  BRA    08B2
0840:  MOVF   xC2,W
0842:  SUBLW  05
0844:  BNZ   0854
....................       Porcentaje=15; 
0846:  MOVLW  0F
0848:  MOVWF  xB7
....................       retardo=2000; 
084A:  MOVLW  07
084C:  MOVWF  xAB
084E:  MOVLW  D0
0850:  MOVWF  xAA
....................    }else if(Vel==4){ 
0852:  BRA    08B2
0854:  MOVF   xC2,W
0856:  SUBLW  04
0858:  BNZ   0868
....................       Porcentaje=25; 
085A:  MOVLW  19
085C:  MOVWF  xB7
....................       retardo=3000; 
085E:  MOVLW  0B
0860:  MOVWF  xAB
0862:  MOVLW  B8
0864:  MOVWF  xAA
....................    }else if(Vel==3){ 
0866:  BRA    08B2
0868:  MOVF   xC2,W
086A:  SUBLW  03
086C:  BNZ   087C
....................       Porcentaje=35; 
086E:  MOVLW  23
0870:  MOVWF  xB7
....................       retardo=3600; 
0872:  MOVLW  0E
0874:  MOVWF  xAB
0876:  MOVLW  10
0878:  MOVWF  xAA
....................    }else if(Vel==2){ 
087A:  BRA    08B2
087C:  MOVF   xC2,W
087E:  SUBLW  02
0880:  BNZ   0890
....................       Porcentaje=45; 
0882:  MOVLW  2D
0884:  MOVWF  xB7
....................       retardo=4300; 
0886:  MOVLW  10
0888:  MOVWF  xAB
088A:  MOVLW  CC
088C:  MOVWF  xAA
....................    }else if(Vel==1){ 
088E:  BRA    08B2
0890:  DECFSZ xC2,W
0892:  BRA    08A2
....................       Porcentaje=50; 
0894:  MOVLW  32
0896:  MOVWF  xB7
....................       retardo=5000; 
0898:  MOVLW  13
089A:  MOVWF  xAB
089C:  MOVLW  88
089E:  MOVWF  xAA
....................    }else if(Vel==0){ 
08A0:  BRA    08B2
08A2:  MOVF   xC2,F
08A4:  BNZ   08B2
....................       Porcentaje=100; 
08A6:  MOVLW  64
08A8:  MOVWF  xB7
....................       Motor_L1_off; 
08AA:  BCF    F8B.2
08AC:  BCF    F94.2
....................       Motor_L2_off; 
08AE:  BCF    F8B.1
08B0:  BCF    F94.1
....................    } 
.................... } 
08B2:  RETLW  00
....................  
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {   
....................    if(x==1) 
*
122E:  DECFSZ xC3,W
1230:  BRA    1248
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Temporizador UV    ");} 
1232:  MOVLW  02
1234:  MOVWF  xD4
1236:  MOVFF  C4,D5
123A:  CALL   09BC
123E:  MOVLW  B4
1240:  MOVWF  FF6
1242:  MOVLW  00
1244:  MOVWF  FF7
1246:  RCALL  0A7C
....................    if(x==2) 
1248:  MOVF   xC3,W
124A:  SUBLW  02
124C:  BNZ   1264
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
124E:  MOVLW  02
1250:  MOVWF  xD4
1252:  MOVFF  C4,D5
1256:  CALL   09BC
125A:  MOVLW  C8
125C:  MOVWF  FF6
125E:  MOVLW  00
1260:  MOVWF  FF7
1262:  RCALL  0A7C
....................    if(x==3) 
1264:  MOVF   xC3,W
1266:  SUBLW  03
1268:  BNZ   1282
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo Trabajo UV  ");} 
126A:  MOVLW  02
126C:  MOVWF  xD4
126E:  MOVFF  C4,D5
1272:  CALL   09BC
1276:  MOVLW  DC
1278:  MOVWF  FF6
127A:  MOVLW  00
127C:  MOVWF  FF7
127E:  CALL   0A7C
....................    if(x==4) 
1282:  MOVF   xC3,W
1284:  SUBLW  04
1286:  BNZ   12A0
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Punto Cero         ");} 
1288:  MOVLW  02
128A:  MOVWF  xD4
128C:  MOVFF  C4,D5
1290:  CALL   09BC
1294:  MOVLW  F0
1296:  MOVWF  FF6
1298:  MOVLW  00
129A:  MOVWF  FF7
129C:  CALL   0A7C
....................     
....................    if(x==5) 
12A0:  MOVF   xC3,W
12A2:  SUBLW  05
12A4:  BNZ   12DE
....................    {if(estadoalarma==0) 
12A6:  BTFSC  17.4
12A8:  BRA    12C2
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma          OFF");} 
12AA:  MOVLW  02
12AC:  MOVWF  xD4
12AE:  MOVFF  C4,D5
12B2:  CALL   09BC
12B6:  MOVLW  04
12B8:  MOVWF  FF6
12BA:  MOVLW  01
12BC:  MOVWF  FF7
12BE:  CALL   0A7C
....................    if(estadoalarma==1) 
12C2:  BTFSS  17.4
12C4:  BRA    12DE
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma           ON");} 
12C6:  MOVLW  02
12C8:  MOVWF  xD4
12CA:  MOVFF  C4,D5
12CE:  CALL   09BC
12D2:  MOVLW  18
12D4:  MOVWF  FF6
12D6:  MOVLW  01
12D8:  MOVWF  FF7
12DA:  CALL   0A7C
....................    } 
....................     
....................    if(x==6) 
12DE:  MOVF   xC3,W
12E0:  SUBLW  06
12E2:  BNZ   12FC
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Velocidad          ");} 
12E4:  MOVLW  02
12E6:  MOVWF  xD4
12E8:  MOVFF  C4,D5
12EC:  CALL   09BC
12F0:  MOVLW  2C
12F2:  MOVWF  FF6
12F4:  MOVLW  01
12F6:  MOVWF  FF7
12F8:  CALL   0A7C
.................... } 
12FC:  RETLW  00
....................  
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
1420:  RLCF   xC7,W
1422:  MOVWF  00
1424:  RLCF   00,F
1426:  MOVLW  FC
1428:  ANDWF  00,F
142A:  MOVFF  00,01
142E:  MOVF   FC2,W
1430:  ANDLW  C3
1432:  IORWF  00,W
1434:  MOVWF  FC2
1436:  MOVLW  0A
1438:  MOVWF  xD9
143A:  CALL   08B4
143E:  BSF    FC2.1
1440:  BTFSC  FC2.1
1442:  BRA    1440
1444:  MOVFF  FC4,03
1448:  MOVFF  FC3,DA
144C:  MOVFF  FC4,DB
1450:  CALL   0B02
1454:  MOVFF  03,CB
1458:  MOVFF  02,CA
145C:  MOVFF  01,C9
1460:  MOVFF  00,C8
1464:  MOVFF  C8,00
1468:  MOVFF  C9,01
146C:  MOVFF  CA,02
1470:  MOVFF  CB,03
.................... } 
1474:  RETLW  00
....................  
.................... float Leer_Sensor_Presion(int media){ 
*
183A:  CLRF   xC6
183C:  CLRF   xC5
183E:  CLRF   xC4
1840:  CLRF   xC3
....................    float promediopresion=0.0; 
....................     
....................    V1=sensores(0);  
1842:  CLRF   xC7
1844:  RCALL  1420
1846:  MOVFF  03,97
184A:  MOVFF  02,96
184E:  MOVFF  01,95
1852:  MOVFF  00,94
....................    //V1 = (x_uno*5.0)/1023.0;   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
....................    Presion=(V1/G)-1.0;// Presion=(Voltaje/Ganancia)-1 
1856:  MOVFF  97,D9
185A:  MOVFF  96,D8
185E:  MOVFF  95,D7
1862:  MOVFF  94,D6
1866:  MOVFF  A7,DD
186A:  MOVFF  A6,DC
186E:  MOVFF  A5,DB
1872:  MOVFF  A4,DA
1876:  RCALL  1476
1878:  MOVFF  00,C7
187C:  MOVFF  01,C8
1880:  MOVFF  02,C9
1884:  MOVFF  03,CA
1888:  BSF    FD8.1
188A:  MOVFF  03,DD
188E:  MOVFF  02,DC
1892:  MOVFF  01,DB
1896:  MOVFF  00,DA
189A:  CLRF   xE1
189C:  CLRF   xE0
189E:  CLRF   xDF
18A0:  MOVLW  7F
18A2:  MOVWF  xDE
18A4:  RCALL  15D0
18A6:  MOVFF  03,9B
18AA:  MOVFF  02,9A
18AE:  MOVFF  01,99
18B2:  MOVFF  00,98
....................     
....................    if(Presion<0.0) 
18B6:  MOVFF  9B,D9
18BA:  MOVFF  9A,D8
18BE:  MOVFF  99,D7
18C2:  MOVFF  98,D6
18C6:  CLRF   xDD
18C8:  CLRF   xDC
18CA:  CLRF   xDB
18CC:  CLRF   xDA
18CE:  CALL   0D16
18D2:  BNC   18DC
....................    { 
....................       Presion=0.0; 
18D4:  CLRF   x9B
18D6:  CLRF   x9A
18D8:  CLRF   x99
18DA:  CLRF   x98
....................    } 
....................  
....................    if(r>media-1) 
18DC:  MOVLW  01
18DE:  SUBWF  xC2,W
18E0:  SUBWF  2B,W
18E2:  BZ    18E8
18E4:  BNC   18E8
....................    {r=0;} 
18E6:  CLRF   2B
....................    PromPresion[r]=Presion;r++; 
18E8:  MOVF   2B,W
18EA:  MULLW  04
18EC:  MOVF   FF3,W
18EE:  CLRF   03
18F0:  ADDLW  44
18F2:  MOVWF  FE9
18F4:  MOVLW  00
18F6:  ADDWFC 03,W
18F8:  MOVWF  FEA
18FA:  MOVFF  98,FEF
18FE:  MOVFF  99,FEC
1902:  MOVFF  9A,FEC
1906:  MOVFF  9B,FEC
190A:  INCF   2B,F
....................           
....................    for(q=0;q<=(media-1);q++) 
190C:  CLRF   2C
190E:  MOVLW  01
1910:  SUBWF  xC2,W
1912:  SUBWF  2C,W
1914:  BZ    1918
1916:  BC    1982
....................    { 
....................       promediopresion+=PromPresion[q]; 
1918:  MOVF   2C,W
191A:  MULLW  04
191C:  MOVF   FF3,W
191E:  CLRF   03
1920:  ADDLW  44
1922:  MOVWF  FE9
1924:  MOVLW  00
1926:  ADDWFC 03,W
1928:  MOVWF  FEA
192A:  MOVFF  FEF,00
192E:  MOVFF  FEC,01
1932:  MOVFF  FEC,02
1936:  MOVFF  FEC,03
193A:  MOVFF  FEA,C8
193E:  MOVFF  FE9,C7
1942:  BCF    FD8.1
1944:  MOVFF  C6,DD
1948:  MOVFF  C5,DC
194C:  MOVFF  C4,DB
1950:  MOVFF  C3,DA
1954:  MOVFF  03,E1
1958:  MOVFF  02,E0
195C:  MOVFF  01,DF
1960:  MOVFF  00,DE
1964:  RCALL  15D0
1966:  MOVFF  C8,FEA
196A:  MOVFF  C7,FE9
196E:  MOVFF  03,C6
1972:  MOVFF  02,C5
1976:  MOVFF  01,C4
197A:  MOVFF  00,C3
....................    }  
197E:  INCF   2C,F
1980:  BRA    190E
....................    promediopresion=promediopresion/media;    
1982:  CLRF   xDB
1984:  MOVFF  C2,DA
1988:  CALL   0B02
198C:  MOVFF  C6,D9
1990:  MOVFF  C5,D8
1994:  MOVFF  C4,D7
1998:  MOVFF  C3,D6
199C:  MOVFF  03,DD
19A0:  MOVFF  02,DC
19A4:  MOVFF  01,DB
19A8:  MOVFF  00,DA
19AC:  RCALL  1476
19AE:  MOVFF  03,C6
19B2:  MOVFF  02,C5
19B6:  MOVFF  01,C4
19BA:  MOVFF  00,C3
....................     
....................    return promediopresion; 
19BE:  MOVFF  C3,00
19C2:  MOVFF  C4,01
19C6:  MOVFF  C5,02
19CA:  MOVFF  C6,03
.................... } 
19CE:  RETLW  00
....................  
.................... void EliminaRuido(void){ 
....................    /*if(Menu==50){ 
....................       dato[0]=lcd_getc(1,2); 
....................       dato[1]=lcd_getc(2,2); 
....................       dato[2]=lcd_getc(3,2); 
....................       if(dato[0]!=70 || dato[1]!=105 || dato[2]!=108){ 
....................          lcd_init();delay_ms(200);lcd_init(); 
....................          Cambio=ON; 
....................       } 
....................    }*/ 
.................... } 
*
0004:  RETLW  00
....................  
.................... void ConfigInterrupciones (void){ 
....................    lcd_init(); 
*
099C:  RCALL  0944
....................    enable_interrupts(INT_EXT_L2H); 
099E:  BSF    FF2.4
09A0:  BSF    FF1.6
....................    setup_adc_ports(AN0); 
09A2:  MOVF   FC1,W
09A4:  ANDLW  C0
09A6:  IORLW  0E
09A8:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
09AA:  BCF    FC0.0
09AC:  BSF    FC0.1
09AE:  BCF    FC0.2
09B0:  BSF    FC0.7
09B2:  BSF    FC2.0
....................    enable_interrupts(global); 
09B4:  MOVLW  C0
09B6:  IORWF  FF2,F
.................... } 
09B8:  GOTO   2238 (RETURN)
....................  
.................... void MensajeBienvenida (void){ 
....................    lcd_gotoxy(1,1); 
*
0A9C:  MOVLW  01
0A9E:  MOVWF  xD4
0AA0:  MOVWF  xD5
0AA2:  RCALL  09BC
....................    printf(lcd_putc,"CABINA FLUJO LAMINAR"); 
0AA4:  MOVLW  40
0AA6:  MOVWF  FF6
0AA8:  MOVLW  01
0AAA:  MOVWF  FF7
0AAC:  RCALL  0A7C
....................    lcd_gotoxy(1,2); 
0AAE:  MOVLW  01
0AB0:  MOVWF  xD4
0AB2:  MOVLW  02
0AB4:  MOVWF  xD5
0AB6:  RCALL  09BC
....................    printf(lcd_putc,"     HORIZONTAL     "); 
0AB8:  MOVLW  56
0ABA:  MOVWF  FF6
0ABC:  MOVLW  01
0ABE:  MOVWF  FF7
0AC0:  RCALL  0A7C
....................    lcd_gotoxy(1,3); 
0AC2:  MOVLW  01
0AC4:  MOVWF  xD4
0AC6:  MOVLW  03
0AC8:  MOVWF  xD5
0ACA:  RCALL  09BC
....................    printf(lcd_putc,"    JP  INGLOBAL    "); 
0ACC:  MOVLW  6C
0ACE:  MOVWF  FF6
0AD0:  MOVLW  01
0AD2:  MOVWF  FF7
0AD4:  RCALL  0A7C
....................    lcd_gotoxy(1,4); 
0AD6:  MOVLW  01
0AD8:  MOVWF  xD4
0ADA:  MOVLW  04
0ADC:  MOVWF  xD5
0ADE:  RCALL  09BC
....................    printf(lcd_putc,"     REF:JPCH48     "); 
0AE0:  MOVLW  82
0AE2:  MOVWF  FF6
0AE4:  MOVLW  01
0AE6:  MOVWF  FF7
0AE8:  RCALL  0A7C
....................    delay_ms(2000); 
0AEA:  MOVLW  08
0AEC:  MOVWF  xC2
0AEE:  MOVLW  FA
0AF0:  MOVWF  xD9
0AF2:  RCALL  08B4
0AF4:  DECFSZ xC2,F
0AF6:  BRA    0AEE
....................    printf(lcd_putc,"\f"); 
0AF8:  MOVLW  0C
0AFA:  MOVWF  xD3
0AFC:  RCALL  0A1E
.................... } 
0AFE:  GOTO   223C (RETURN)
....................  
.................... void LeeEEPROM (void){ 
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0); 
*
0B38:  MOVFF  FF2,C2
0B3C:  BCF    FF2.7
0B3E:  CLRF   FA9
0B40:  BCF    FA6.6
0B42:  BCF    FA6.7
0B44:  BSF    FA6.0
0B46:  MOVF   FA8,W
0B48:  BTFSC  xC2.7
0B4A:  BSF    FF2.7
0B4C:  MOVWF  39
....................    delay_ms(20);  
0B4E:  MOVLW  14
0B50:  MOVWF  xD9
0B52:  RCALL  08B4
....................    contrasena[1]=read_eeprom(1); 
0B54:  MOVFF  FF2,C2
0B58:  BCF    FF2.7
0B5A:  MOVLW  01
0B5C:  MOVWF  FA9
0B5E:  BCF    FA6.6
0B60:  BCF    FA6.7
0B62:  BSF    FA6.0
0B64:  MOVF   FA8,W
0B66:  BTFSC  xC2.7
0B68:  BSF    FF2.7
0B6A:  MOVWF  3A
....................    delay_ms(20); 
0B6C:  MOVLW  14
0B6E:  MOVWF  xD9
0B70:  RCALL  08B4
....................    contrasena[2]=read_eeprom(2); 
0B72:  MOVFF  FF2,C2
0B76:  BCF    FF2.7
0B78:  MOVLW  02
0B7A:  MOVWF  FA9
0B7C:  BCF    FA6.6
0B7E:  BCF    FA6.7
0B80:  BSF    FA6.0
0B82:  MOVF   FA8,W
0B84:  BTFSC  xC2.7
0B86:  BSF    FF2.7
0B88:  MOVWF  3B
....................    delay_ms(20);  
0B8A:  MOVLW  14
0B8C:  MOVWF  xD9
0B8E:  RCALL  08B4
....................    contrasena[3]=read_eeprom(3); 
0B90:  MOVFF  FF2,C2
0B94:  BCF    FF2.7
0B96:  MOVLW  03
0B98:  MOVWF  FA9
0B9A:  BCF    FA6.6
0B9C:  BCF    FA6.7
0B9E:  BSF    FA6.0
0BA0:  MOVF   FA8,W
0BA2:  BTFSC  xC2.7
0BA4:  BSF    FF2.7
0BA6:  MOVWF  3C
....................    delay_ms(20); 
0BA8:  MOVLW  14
0BAA:  MOVWF  xD9
0BAC:  RCALL  08B4
....................    estadoalarma=read_eeprom(4); 
0BAE:  MOVFF  FF2,C2
0BB2:  BCF    FF2.7
0BB4:  MOVLW  04
0BB6:  MOVWF  FA9
0BB8:  BCF    FA6.6
0BBA:  BCF    FA6.7
0BBC:  BSF    FA6.0
0BBE:  MOVF   FA8,W
0BC0:  BTFSC  xC2.7
0BC2:  BSF    FF2.7
0BC4:  MOVWF  01
0BC6:  BCF    17.4
0BC8:  BTFSC  01.0
0BCA:  BSF    17.4
....................    delay_ms(20); 
0BCC:  MOVLW  14
0BCE:  MOVWF  xD9
0BD0:  RCALL  08B4
....................    tempo_minutos=read_eeprom(5); 
0BD2:  MOVFF  FF2,C2
0BD6:  BCF    FF2.7
0BD8:  MOVLW  05
0BDA:  MOVWF  FA9
0BDC:  BCF    FA6.6
0BDE:  BCF    FA6.7
0BE0:  BSF    FA6.0
0BE2:  MOVF   FA8,W
0BE4:  BTFSC  xC2.7
0BE6:  BSF    FF2.7
0BE8:  MOVWF  27
....................    delay_ms(20); 
0BEA:  MOVLW  14
0BEC:  MOVWF  xD9
0BEE:  RCALL  08B4
....................    tempo_segundos=read_eeprom(6); 
0BF0:  MOVFF  FF2,C2
0BF4:  BCF    FF2.7
0BF6:  MOVLW  06
0BF8:  MOVWF  FA9
0BFA:  BCF    FA6.6
0BFC:  BCF    FA6.7
0BFE:  BSF    FA6.0
0C00:  MOVF   FA8,W
0C02:  BTFSC  xC2.7
0C04:  BSF    FF2.7
0C06:  MOVWF  28
....................    delay_ms(20); 
0C08:  MOVLW  14
0C0A:  MOVWF  xD9
0C0C:  RCALL  08B4
....................    segundos=read_eeprom(7); 
0C0E:  MOVFF  FF2,C2
0C12:  BCF    FF2.7
0C14:  MOVLW  07
0C16:  MOVWF  FA9
0C18:  BCF    FA6.6
0C1A:  BCF    FA6.7
0C1C:  BSF    FA6.0
0C1E:  MOVF   FA8,W
0C20:  BTFSC  xC2.7
0C22:  BSF    FF2.7
0C24:  MOVWF  21
....................    delay_ms(20); 
0C26:  MOVLW  14
0C28:  MOVWF  xD9
0C2A:  RCALL  08B4
....................    minutos=read_eeprom(8); 
0C2C:  MOVFF  FF2,C2
0C30:  BCF    FF2.7
0C32:  MOVLW  08
0C34:  MOVWF  FA9
0C36:  BCF    FA6.6
0C38:  BCF    FA6.7
0C3A:  BSF    FA6.0
0C3C:  MOVF   FA8,W
0C3E:  BTFSC  xC2.7
0C40:  BSF    FF2.7
0C42:  MOVWF  22
....................    delay_ms(20); 
0C44:  MOVLW  14
0C46:  MOVWF  xD9
0C48:  RCALL  08B4
....................    horasL=read_eeprom(9); 
0C4A:  MOVFF  FF2,C2
0C4E:  BCF    FF2.7
0C50:  MOVLW  09
0C52:  MOVWF  FA9
0C54:  BCF    FA6.6
0C56:  BCF    FA6.7
0C58:  BSF    FA6.0
0C5A:  MOVF   FA8,W
0C5C:  BTFSC  xC2.7
0C5E:  BSF    FF2.7
0C60:  MOVWF  23
....................    delay_ms(20); 
0C62:  MOVLW  14
0C64:  MOVWF  xD9
0C66:  RCALL  08B4
....................    horasH=read_eeprom(10); 
0C68:  MOVFF  FF2,C2
0C6C:  BCF    FF2.7
0C6E:  MOVLW  0A
0C70:  MOVWF  FA9
0C72:  BCF    FA6.6
0C74:  BCF    FA6.7
0C76:  BSF    FA6.0
0C78:  MOVF   FA8,W
0C7A:  BTFSC  xC2.7
0C7C:  BSF    FF2.7
0C7E:  MOVWF  24
....................    delay_ms(20); 
0C80:  MOVLW  14
0C82:  MOVWF  xD9
0C84:  RCALL  08B4
....................    G_l=read_eeprom(11); 
0C86:  MOVFF  FF2,C2
0C8A:  BCF    FF2.7
0C8C:  MOVLW  0B
0C8E:  MOVWF  FA9
0C90:  BCF    FA6.6
0C92:  BCF    FA6.7
0C94:  BSF    FA6.0
0C96:  MOVF   FA8,W
0C98:  BTFSC  xC2.7
0C9A:  BSF    FF2.7
0C9C:  MOVWF  25
....................    delay_ms(20); 
0C9E:  MOVLW  14
0CA0:  MOVWF  xD9
0CA2:  RCALL  08B4
....................    G_h=read_eeprom(12); 
0CA4:  MOVFF  FF2,C2
0CA8:  BCF    FF2.7
0CAA:  MOVLW  0C
0CAC:  MOVWF  FA9
0CAE:  BCF    FA6.6
0CB0:  BCF    FA6.7
0CB2:  BSF    FA6.0
0CB4:  MOVF   FA8,W
0CB6:  BTFSC  xC2.7
0CB8:  BSF    FF2.7
0CBA:  MOVWF  26
....................    delay_ms(20); 
0CBC:  MOVLW  14
0CBE:  MOVWF  xD9
0CC0:  RCALL  08B4
....................    VelMotor=read_eeprom(13); 
0CC2:  MOVFF  FF2,C2
0CC6:  BCF    FF2.7
0CC8:  MOVLW  0D
0CCA:  MOVWF  FA9
0CCC:  BCF    FA6.6
0CCE:  BCF    FA6.7
0CD0:  BSF    FA6.0
0CD2:  MOVF   FA8,W
0CD4:  BTFSC  xC2.7
0CD6:  BSF    FF2.7
0CD8:  MOVWF  xB8
....................    delay_ms(20); 
0CDA:  MOVLW  14
0CDC:  MOVWF  xD9
0CDE:  RCALL  08B4
....................    G16=make16(G_h,G_l); 
0CE0:  MOVFF  26,43
0CE4:  MOVFF  25,42
....................    G=G16; 
0CE8:  MOVFF  43,DB
0CEC:  MOVFF  42,DA
0CF0:  RCALL  0B02
0CF2:  MOVFF  03,A7
0CF6:  MOVFF  02,A6
0CFA:  MOVFF  01,A5
0CFE:  MOVFF  00,A4
....................    horas=make16(horasH,horasL); 
0D02:  MOVFF  24,41
0D06:  MOVFF  23,40
....................    tempo_minutos_pro=tempo_minutos;tempo_segundos_pro=tempo_segundos; 
0D0A:  MOVFF  27,29
0D0E:  MOVFF  28,2A
.................... } 
0D12:  GOTO   2240 (RETURN)
....................  
.................... void LimitaValores(void){ 
....................     
....................    if(Contrasena[0]>9 || Contrasena[0]<0){ 
*
0D8C:  BTFSC  39.7
0D8E:  BRA    0D96
0D90:  MOVF   39,W
0D92:  SUBLW  09
0D94:  BNC   0D9C
0D96:  BTFSC  39.7
0D98:  BRA    0D9C
0D9A:  BRA    0DCC
....................       Contrasena[0]=0;write_eeprom(0,0);delay_ms(20); 
0D9C:  CLRF   39
0D9E:  CLRF   FA9
0DA0:  CLRF   FA8
0DA2:  BCF    FA6.6
0DA4:  BCF    FA6.7
0DA6:  BSF    FA6.2
0DA8:  MOVF   FF2,W
0DAA:  MOVWF  00
0DAC:  BCF    FF2.7
0DAE:  MOVLB  F
0DB0:  MOVLW  55
0DB2:  MOVWF  FA7
0DB4:  MOVLW  AA
0DB6:  MOVWF  FA7
0DB8:  BSF    FA6.1
0DBA:  BTFSC  FA6.1
0DBC:  BRA    0DBA
0DBE:  BCF    FA6.2
0DC0:  MOVF   00,W
0DC2:  IORWF  FF2,F
0DC4:  MOVLW  14
0DC6:  MOVLB  0
0DC8:  MOVWF  xD9
0DCA:  RCALL  08B4
....................    } 
....................    if(Contrasena[1]>9 || Contrasena[1]<0){ 
0DCC:  BTFSC  3A.7
0DCE:  BRA    0DD6
0DD0:  MOVF   3A,W
0DD2:  SUBLW  09
0DD4:  BNC   0DDC
0DD6:  BTFSC  3A.7
0DD8:  BRA    0DDC
0DDA:  BRA    0E0E
....................       Contrasena[1]=0;write_eeprom(1,0);delay_ms(20); 
0DDC:  CLRF   3A
0DDE:  MOVLW  01
0DE0:  MOVWF  FA9
0DE2:  CLRF   FA8
0DE4:  BCF    FA6.6
0DE6:  BCF    FA6.7
0DE8:  BSF    FA6.2
0DEA:  MOVF   FF2,W
0DEC:  MOVWF  00
0DEE:  BCF    FF2.7
0DF0:  MOVLB  F
0DF2:  MOVLW  55
0DF4:  MOVWF  FA7
0DF6:  MOVLW  AA
0DF8:  MOVWF  FA7
0DFA:  BSF    FA6.1
0DFC:  BTFSC  FA6.1
0DFE:  BRA    0DFC
0E00:  BCF    FA6.2
0E02:  MOVF   00,W
0E04:  IORWF  FF2,F
0E06:  MOVLW  14
0E08:  MOVLB  0
0E0A:  MOVWF  xD9
0E0C:  RCALL  08B4
....................    } 
....................    if(Contrasena[2]>9 || Contrasena[2]<0){ 
0E0E:  BTFSC  3B.7
0E10:  BRA    0E18
0E12:  MOVF   3B,W
0E14:  SUBLW  09
0E16:  BNC   0E1E
0E18:  BTFSC  3B.7
0E1A:  BRA    0E1E
0E1C:  BRA    0E50
....................       Contrasena[2]=0;write_eeprom(2,0);delay_ms(20); 
0E1E:  CLRF   3B
0E20:  MOVLW  02
0E22:  MOVWF  FA9
0E24:  CLRF   FA8
0E26:  BCF    FA6.6
0E28:  BCF    FA6.7
0E2A:  BSF    FA6.2
0E2C:  MOVF   FF2,W
0E2E:  MOVWF  00
0E30:  BCF    FF2.7
0E32:  MOVLB  F
0E34:  MOVLW  55
0E36:  MOVWF  FA7
0E38:  MOVLW  AA
0E3A:  MOVWF  FA7
0E3C:  BSF    FA6.1
0E3E:  BTFSC  FA6.1
0E40:  BRA    0E3E
0E42:  BCF    FA6.2
0E44:  MOVF   00,W
0E46:  IORWF  FF2,F
0E48:  MOVLW  14
0E4A:  MOVLB  0
0E4C:  MOVWF  xD9
0E4E:  RCALL  08B4
....................    } 
....................    if(Contrasena[3]>9 || Contrasena[3]<0){ 
0E50:  BTFSC  3C.7
0E52:  BRA    0E5A
0E54:  MOVF   3C,W
0E56:  SUBLW  09
0E58:  BNC   0E60
0E5A:  BTFSC  3C.7
0E5C:  BRA    0E60
0E5E:  BRA    0E92
....................       Contrasena[3]=0;write_eeprom(3,0);delay_ms(20); 
0E60:  CLRF   3C
0E62:  MOVLW  03
0E64:  MOVWF  FA9
0E66:  CLRF   FA8
0E68:  BCF    FA6.6
0E6A:  BCF    FA6.7
0E6C:  BSF    FA6.2
0E6E:  MOVF   FF2,W
0E70:  MOVWF  00
0E72:  BCF    FF2.7
0E74:  MOVLB  F
0E76:  MOVLW  55
0E78:  MOVWF  FA7
0E7A:  MOVLW  AA
0E7C:  MOVWF  FA7
0E7E:  BSF    FA6.1
0E80:  BTFSC  FA6.1
0E82:  BRA    0E80
0E84:  BCF    FA6.2
0E86:  MOVF   00,W
0E88:  IORWF  FF2,F
0E8A:  MOVLW  14
0E8C:  MOVLB  0
0E8E:  MOVWF  xD9
0E90:  RCALL  08B4
....................    } 
....................    if(estadoalarma>1){ 
0E92:  MOVLW  00
0E94:  BTFSC  17.4
0E96:  MOVLW  01
0E98:  SUBLW  01
0E9A:  BC    0ED0
....................       estadoalarma=1;write_eeprom(4,1);delay_ms(20); 
0E9C:  BSF    17.4
0E9E:  MOVLW  04
0EA0:  MOVWF  FA9
0EA2:  MOVLW  01
0EA4:  MOVWF  FA8
0EA6:  BCF    FA6.6
0EA8:  BCF    FA6.7
0EAA:  BSF    FA6.2
0EAC:  MOVF   FF2,W
0EAE:  MOVWF  00
0EB0:  BCF    FF2.7
0EB2:  MOVLB  F
0EB4:  MOVLW  55
0EB6:  MOVWF  FA7
0EB8:  MOVLW  AA
0EBA:  MOVWF  FA7
0EBC:  BSF    FA6.1
0EBE:  BTFSC  FA6.1
0EC0:  BRA    0EBE
0EC2:  BCF    FA6.2
0EC4:  MOVF   00,W
0EC6:  IORWF  FF2,F
0EC8:  MOVLW  14
0ECA:  MOVLB  0
0ECC:  MOVWF  xD9
0ECE:  RCALL  08B4
....................    } 
....................    if(tempo_minutos>200){ 
0ED0:  MOVF   27,W
0ED2:  SUBLW  C8
0ED4:  BC    0F0C
....................       tempo_minutos=20;write_eeprom(5,20);delay_ms(20); 
0ED6:  MOVLW  14
0ED8:  MOVWF  27
0EDA:  MOVLW  05
0EDC:  MOVWF  FA9
0EDE:  MOVLW  14
0EE0:  MOVWF  FA8
0EE2:  BCF    FA6.6
0EE4:  BCF    FA6.7
0EE6:  BSF    FA6.2
0EE8:  MOVF   FF2,W
0EEA:  MOVWF  00
0EEC:  BCF    FF2.7
0EEE:  MOVLB  F
0EF0:  MOVLW  55
0EF2:  MOVWF  FA7
0EF4:  MOVLW  AA
0EF6:  MOVWF  FA7
0EF8:  BSF    FA6.1
0EFA:  BTFSC  FA6.1
0EFC:  BRA    0EFA
0EFE:  BCF    FA6.2
0F00:  MOVF   00,W
0F02:  IORWF  FF2,F
0F04:  MOVLW  14
0F06:  MOVLB  0
0F08:  MOVWF  xD9
0F0A:  RCALL  08B4
....................    } 
....................    if(tempo_segundos>59){ 
0F0C:  MOVF   28,W
0F0E:  SUBLW  3B
0F10:  BC    0F44
....................       tempo_segundos=0;write_eeprom(6,0);delay_ms(20); 
0F12:  CLRF   28
0F14:  MOVLW  06
0F16:  MOVWF  FA9
0F18:  CLRF   FA8
0F1A:  BCF    FA6.6
0F1C:  BCF    FA6.7
0F1E:  BSF    FA6.2
0F20:  MOVF   FF2,W
0F22:  MOVWF  00
0F24:  BCF    FF2.7
0F26:  MOVLB  F
0F28:  MOVLW  55
0F2A:  MOVWF  FA7
0F2C:  MOVLW  AA
0F2E:  MOVWF  FA7
0F30:  BSF    FA6.1
0F32:  BTFSC  FA6.1
0F34:  BRA    0F32
0F36:  BCF    FA6.2
0F38:  MOVF   00,W
0F3A:  IORWF  FF2,F
0F3C:  MOVLW  14
0F3E:  MOVLB  0
0F40:  MOVWF  xD9
0F42:  RCALL  08B4
....................    } 
....................    if(segundos>60){ 
0F44:  MOVF   21,W
0F46:  SUBLW  3C
0F48:  BC    0F7C
....................       segundos=0;write_eeprom(7,0);delay_ms(20); 
0F4A:  CLRF   21
0F4C:  MOVLW  07
0F4E:  MOVWF  FA9
0F50:  CLRF   FA8
0F52:  BCF    FA6.6
0F54:  BCF    FA6.7
0F56:  BSF    FA6.2
0F58:  MOVF   FF2,W
0F5A:  MOVWF  00
0F5C:  BCF    FF2.7
0F5E:  MOVLB  F
0F60:  MOVLW  55
0F62:  MOVWF  FA7
0F64:  MOVLW  AA
0F66:  MOVWF  FA7
0F68:  BSF    FA6.1
0F6A:  BTFSC  FA6.1
0F6C:  BRA    0F6A
0F6E:  BCF    FA6.2
0F70:  MOVF   00,W
0F72:  IORWF  FF2,F
0F74:  MOVLW  14
0F76:  MOVLB  0
0F78:  MOVWF  xD9
0F7A:  RCALL  08B4
....................    } 
....................    if(minutos>60){ 
0F7C:  MOVF   22,W
0F7E:  SUBLW  3C
0F80:  BC    0FB4
....................       minutos=0;write_eeprom(8,0);delay_ms(20); 
0F82:  CLRF   22
0F84:  MOVLW  08
0F86:  MOVWF  FA9
0F88:  CLRF   FA8
0F8A:  BCF    FA6.6
0F8C:  BCF    FA6.7
0F8E:  BSF    FA6.2
0F90:  MOVF   FF2,W
0F92:  MOVWF  00
0F94:  BCF    FF2.7
0F96:  MOVLB  F
0F98:  MOVLW  55
0F9A:  MOVWF  FA7
0F9C:  MOVLW  AA
0F9E:  MOVWF  FA7
0FA0:  BSF    FA6.1
0FA2:  BTFSC  FA6.1
0FA4:  BRA    0FA2
0FA6:  BCF    FA6.2
0FA8:  MOVF   00,W
0FAA:  IORWF  FF2,F
0FAC:  MOVLW  14
0FAE:  MOVLB  0
0FB0:  MOVWF  xD9
0FB2:  RCALL  08B4
....................    } 
....................    if(horas>10000){ 
0FB4:  MOVF   41,W
0FB6:  SUBLW  26
0FB8:  BC    102A
0FBA:  XORLW  FF
0FBC:  BNZ   0FC4
0FBE:  MOVF   40,W
0FC0:  SUBLW  10
0FC2:  BC    102A
....................       horas=0;write_eeprom(9,10);delay_ms(20);write_eeprom(10,0);delay_ms(20); 
0FC4:  CLRF   41
0FC6:  CLRF   40
0FC8:  MOVLW  09
0FCA:  MOVWF  FA9
0FCC:  MOVLW  0A
0FCE:  MOVWF  FA8
0FD0:  BCF    FA6.6
0FD2:  BCF    FA6.7
0FD4:  BSF    FA6.2
0FD6:  MOVF   FF2,W
0FD8:  MOVWF  00
0FDA:  BCF    FF2.7
0FDC:  MOVLB  F
0FDE:  MOVLW  55
0FE0:  MOVWF  FA7
0FE2:  MOVLW  AA
0FE4:  MOVWF  FA7
0FE6:  BSF    FA6.1
0FE8:  BTFSC  FA6.1
0FEA:  BRA    0FE8
0FEC:  BCF    FA6.2
0FEE:  MOVF   00,W
0FF0:  IORWF  FF2,F
0FF2:  MOVLW  14
0FF4:  MOVLB  0
0FF6:  MOVWF  xD9
0FF8:  RCALL  08B4
0FFA:  MOVLW  0A
0FFC:  MOVWF  FA9
0FFE:  CLRF   FA8
1000:  BCF    FA6.6
1002:  BCF    FA6.7
1004:  BSF    FA6.2
1006:  MOVF   FF2,W
1008:  MOVWF  00
100A:  BCF    FF2.7
100C:  MOVLB  F
100E:  MOVLW  55
1010:  MOVWF  FA7
1012:  MOVLW  AA
1014:  MOVWF  FA7
1016:  BSF    FA6.1
1018:  BTFSC  FA6.1
101A:  BRA    1018
101C:  BCF    FA6.2
101E:  MOVF   00,W
1020:  IORWF  FF2,F
1022:  MOVLW  14
1024:  MOVLB  0
1026:  MOVWF  xD9
1028:  RCALL  08B4
....................    } 
....................    if(G>300 || G<200){ 
102A:  CLRF   xD9
102C:  CLRF   xD8
102E:  MOVLW  16
1030:  MOVWF  xD7
1032:  MOVLW  87
1034:  MOVWF  xD6
1036:  MOVFF  A7,DD
103A:  MOVFF  A6,DC
103E:  MOVFF  A5,DB
1042:  MOVFF  A4,DA
1046:  RCALL  0D16
1048:  BC    106A
104A:  MOVFF  A7,D9
104E:  MOVFF  A6,D8
1052:  MOVFF  A5,D7
1056:  MOVFF  A4,D6
105A:  CLRF   xDD
105C:  CLRF   xDC
105E:  MOVLW  48
1060:  MOVWF  xDB
1062:  MOVLW  86
1064:  MOVWF  xDA
1066:  RCALL  0D16
1068:  BNC   10DA
....................       G=240;write_eeprom(11,240);delay_ms(20);write_eeprom(12,0);delay_ms(20); 
106A:  CLRF   xA7
106C:  CLRF   xA6
106E:  MOVLW  70
1070:  MOVWF  xA5
1072:  MOVLW  86
1074:  MOVWF  xA4
1076:  MOVLW  0B
1078:  MOVWF  FA9
107A:  MOVLW  F0
107C:  MOVWF  FA8
107E:  BCF    FA6.6
1080:  BCF    FA6.7
1082:  BSF    FA6.2
1084:  MOVF   FF2,W
1086:  MOVWF  00
1088:  BCF    FF2.7
108A:  MOVLB  F
108C:  MOVLW  55
108E:  MOVWF  FA7
1090:  MOVLW  AA
1092:  MOVWF  FA7
1094:  BSF    FA6.1
1096:  BTFSC  FA6.1
1098:  BRA    1096
109A:  BCF    FA6.2
109C:  MOVF   00,W
109E:  IORWF  FF2,F
10A0:  MOVLW  14
10A2:  MOVLB  0
10A4:  MOVWF  xD9
10A6:  RCALL  08B4
10A8:  MOVLW  0C
10AA:  MOVWF  FA9
10AC:  CLRF   FA8
10AE:  BCF    FA6.6
10B0:  BCF    FA6.7
10B2:  BSF    FA6.2
10B4:  MOVF   FF2,W
10B6:  MOVWF  00
10B8:  BCF    FF2.7
10BA:  MOVLB  F
10BC:  MOVLW  55
10BE:  MOVWF  FA7
10C0:  MOVLW  AA
10C2:  MOVWF  FA7
10C4:  BSF    FA6.1
10C6:  BTFSC  FA6.1
10C8:  BRA    10C6
10CA:  BCF    FA6.2
10CC:  MOVF   00,W
10CE:  IORWF  FF2,F
10D0:  MOVLW  14
10D2:  MOVLB  0
10D4:  MOVWF  xD9
10D6:  CALL   08B4
....................    } 
....................    if(VelMotor>6){ 
10DA:  MOVF   xB8,W
10DC:  SUBLW  06
10DE:  BC    1118
....................       VelMotor=4;write_eeprom(13,4);delay_ms(20); 
10E0:  MOVLW  04
10E2:  MOVWF  xB8
10E4:  MOVLW  0D
10E6:  MOVWF  FA9
10E8:  MOVLW  04
10EA:  MOVWF  FA8
10EC:  BCF    FA6.6
10EE:  BCF    FA6.7
10F0:  BSF    FA6.2
10F2:  MOVF   FF2,W
10F4:  MOVWF  00
10F6:  BCF    FF2.7
10F8:  MOVLB  F
10FA:  MOVLW  55
10FC:  MOVWF  FA7
10FE:  MOVLW  AA
1100:  MOVWF  FA7
1102:  BSF    FA6.1
1104:  BTFSC  FA6.1
1106:  BRA    1104
1108:  BCF    FA6.2
110A:  MOVF   00,W
110C:  IORWF  FF2,F
110E:  MOVLW  14
1110:  MOVLB  0
1112:  MOVWF  xD9
1114:  CALL   08B4
....................    } 
.................... } 
1118:  GOTO   2244 (RETURN)
....................  
....................  
.................... #int_EXT            // Interrupción de encoder para control. 
.................... void ext0() {       // 6 pulsos por vuelta. 
....................    pulsos++; 
*
01B2:  INCF   xA8,F
01B4:  BTFSC  FD8.2
01B6:  INCF   xA9,F
....................    if(UP) 
01B8:  BSF    F92.5
01BA:  BTFSC  F80.5
01BC:  BRA    01C6
....................          tup++; 
01BE:  INCF   xAC,F
01C0:  BTFSC  FD8.2
01C2:  INCF   xAD,F
....................       else 
01C4:  BRA    01CA
....................          tup=0; 
01C6:  CLRF   xAD
01C8:  CLRF   xAC
....................           
....................       if(DOWN) 
01CA:  BSF    F96.0
01CC:  BTFSC  F84.0
01CE:  BRA    01D8
....................          tdown++; 
01D0:  INCF   xAE,F
01D2:  BTFSC  FD8.2
01D4:  INCF   xAF,F
....................       else 
01D6:  BRA    01DC
....................          tdown=0; 
01D8:  CLRF   xAF
01DA:  CLRF   xAE
....................           
....................       if(RIGHT) 
01DC:  BSF    F96.1
01DE:  BTFSC  F84.1
01E0:  BRA    01EA
....................          tright++; 
01E2:  INCF   xB0,F
01E4:  BTFSC  FD8.2
01E6:  INCF   xB1,F
....................       else 
01E8:  BRA    01EE
....................          tright=0; 
01EA:  CLRF   xB1
01EC:  CLRF   xB0
....................        
....................       if(IZQU) 
01EE:  BSF    F96.2
01F0:  BTFSC  F84.2
01F2:  BRA    01FC
....................          tleft++; 
01F4:  INCF   xB2,F
01F6:  BTFSC  FD8.2
01F8:  INCF   xB3,F
....................       else 
01FA:  BRA    0200
....................          tleft=0; 
01FC:  CLRF   xB3
01FE:  CLRF   xB2
....................    if(pulsos>=120){  
0200:  MOVF   xA9,F
0202:  BNZ   020A
0204:  MOVF   xA8,W
0206:  SUBLW  77
0208:  BC    025C
....................       pulsos=0; 
020A:  CLRF   xA9
020C:  CLRF   xA8
....................       //output_toggle(PIN_C0); 
....................       tiempos=0;tiemporeset++;Lectura=1; 
020E:  CLRF   3F
0210:  CLRF   3E
0212:  INCF   2F,F
0214:  BSF    17.0
....................     
....................       if(ActivaBuzzer==1){ 
0216:  DECFSZ 3D,W
0218:  BRA    022E
....................          if(estadobuzzer==0){ 
021A:  BTFSC  17.3
021C:  BRA    0224
....................             Buzzer_off; 
021E:  BCF    F8B.0
0220:  BCF    F94.0
....................          }else{ 
0222:  BRA    022C
....................             if(estadoalarma==1) 
0224:  BTFSS  17.4
0226:  BRA    022C
....................                Buzzer_on; 
0228:  BSF    F8B.0
022A:  BCF    F94.0
....................          } 
....................          estadobuzzer=!estadobuzzer; 
022C:  BTG    17.3
....................       } 
....................    //----------------------------- Tiempo Total-----------------------------// 
....................       if(estadouv==1){ 
022E:  BTFSS  16.0
0230:  BRA    025C
....................          segundos++; 
0232:  INCF   21,F
....................          if(tiempo_cumplido==0){ 
0234:  BTFSC  16.7
0236:  BRA    025C
....................             if(tempo_segundos>0){ 
0238:  MOVF   28,F
023A:  BZ    0240
....................                tempo_segundos--; 
023C:  DECF   28,F
....................             }else{ 
023E:  BRA    025C
....................                if(tempo_minutos>0){ 
0240:  MOVF   27,F
0242:  BZ    024C
....................                   tempo_minutos--; 
0244:  DECF   27,F
....................                   tempo_segundos=59; 
0246:  MOVLW  3B
0248:  MOVWF  28
....................                }else{ 
024A:  BRA    025C
....................                   tiempo_cumplido=1; 
024C:  BSF    16.7
....................                   estadouv=0;Luz_UV_off; 
024E:  BCF    16.0
0250:  BSF    F8A.3
0252:  BCF    F93.3
....................                   tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
0254:  MOVFF  29,27
0258:  MOVFF  2A,28
....................                } 
....................             } 
....................          } 
....................       } 
....................    } 
....................    tiempocruce=0; 
025C:  CLRF   xB6
025E:  CLRF   xB5
....................    Cruce=ON; 
0260:  BSF    17.7
....................    if(VelMotor<6){ 
0262:  MOVF   xB8,W
0264:  SUBLW  05
0266:  BNC   0294
....................       if(VelMotor>0 && Porcentaje<100){ 
0268:  MOVF   xB8,F
026A:  BZ    0294
026C:  MOVF   xB7,W
026E:  SUBLW  63
0270:  BNC   0294
....................          delay_us(retardo);       
0272:  MOVFF  AB,EA
0276:  INCF   xEA,F
0278:  DECF   xEA,F
027A:  BTFSC  FD8.2
027C:  BRA    0286
027E:  MOVLW  FF
0280:  MOVWF  xEB
0282:  RCALL  0198
0284:  BRA    0278
0286:  MOVFF  AA,EB
028A:  RCALL  0198
....................          Motor_L1_on; 
028C:  BSF    F8B.2
028E:  BCF    F94.2
....................          Motor_L2_on; 
0290:  BSF    F8B.1
0292:  BCF    F94.1
....................          //delay_us(100);       
....................       } 
....................       //Motor_L1_off; //Se comenta lo de variacion de velocidad debido a que por tamaño de motor se activa con un contactor 
....................       //Motor_L2_off; 
....................    } 
.................... } 
....................  
0294:  BCF    FF2.1
0296:  GOTO   0054
.................... void main () 
.................... { 
*
208A:  CLRF   FF8
208C:  BCF    FD0.7
208E:  BSF    07.7
2090:  CLRF   FEA
2092:  CLRF   FE9
2094:  BCF    16.0
2096:  BCF    16.1
2098:  BCF    16.2
209A:  BCF    16.3
209C:  BCF    16.4
209E:  BCF    16.5
20A0:  BCF    16.6
20A2:  BCF    16.7
20A4:  BCF    17.0
20A6:  BCF    17.1
20A8:  BCF    17.2
20AA:  BCF    17.3
20AC:  BCF    17.4
20AE:  CLRF   18
20B0:  MOVLW  07
20B2:  MOVWF  19
20B4:  MOVLW  02
20B6:  MOVWF  1A
20B8:  MOVLW  0B
20BA:  MOVWF  1B
20BC:  MOVLW  02
20BE:  MOVWF  1C
20C0:  MOVLW  03
20C2:  MOVWF  1D
20C4:  MOVLW  02
20C6:  MOVWF  1E
20C8:  MOVWF  1F
20CA:  MOVLW  04
20CC:  MOVWF  20
20CE:  CLRF   21
20D0:  CLRF   22
20D2:  CLRF   23
20D4:  CLRF   24
20D6:  CLRF   25
20D8:  CLRF   26
20DA:  CLRF   27
20DC:  CLRF   28
20DE:  CLRF   29
20E0:  CLRF   2A
20E2:  CLRF   2B
20E4:  CLRF   2C
20E6:  CLRF   2D
20E8:  MOVLW  01
20EA:  MOVWF  2E
20EC:  CLRF   2F
20EE:  CLRF   30
20F0:  CLRF   31
20F2:  CLRF   3D
20F4:  CLRF   41
20F6:  CLRF   40
20F8:  CLRF   43
20FA:  CLRF   42
20FC:  CLRF   x97
20FE:  CLRF   x96
2100:  CLRF   x95
2102:  CLRF   x94
2104:  CLRF   x9B
2106:  CLRF   x9A
2108:  CLRF   x99
210A:  CLRF   x98
210C:  CLRF   x9F
210E:  CLRF   x9E
2110:  CLRF   x9D
2112:  CLRF   x9C
2114:  CLRF   xA3
2116:  CLRF   xA2
2118:  CLRF   xA1
211A:  CLRF   xA0
211C:  CLRF   xA7
211E:  CLRF   xA6
2120:  CLRF   xA5
2122:  MOVLW  80
2124:  MOVWF  xA4
2126:  BSF    17.5
2128:  BCF    17.6
212A:  CLRF   xA9
212C:  CLRF   xA8
212E:  CLRF   xAB
2130:  CLRF   xAA
2132:  CLRF   xAD
2134:  CLRF   xAC
2136:  CLRF   xAF
2138:  CLRF   xAE
213A:  CLRF   xB1
213C:  CLRF   xB0
213E:  CLRF   xB3
2140:  CLRF   xB2
2142:  BCF    17.7
2144:  BCF    xB4.0
2146:  CLRF   xB6
2148:  CLRF   xB5
214A:  CLRF   xB7
214C:  CLRF   xB8
214E:  CLRF   xBC
2150:  CLRF   xBB
2152:  CLRF   xBA
2154:  CLRF   xB9
2156:  CLRF   xC0
2158:  CLRF   xBF
215A:  CLRF   xBE
215C:  CLRF   xBD
215E:  MOVF   FC1,W
2160:  ANDLW  C0
2162:  IORLW  0F
2164:  MOVWF  FC1
2166:  MOVLW  07
2168:  MOVWF  FB4
216A:  MOVLW  3E
216C:  MOVWF  32
216E:  MOVLW  20
2170:  MOVWF  33
2172:  MOVLW  5E
2174:  MOVWF  34
2176:  CLRF   35
2178:  CLRF   36
217A:  CLRF   37
217C:  CLRF   38
217E:  CLRF   39
2180:  CLRF   3A
2182:  CLRF   3B
2184:  CLRF   3C
2186:  CLRF   44
2188:  CLRF   45
218A:  CLRF   46
218C:  CLRF   47
218E:  CLRF   48
2190:  CLRF   49
2192:  CLRF   4A
2194:  CLRF   4B
2196:  CLRF   4C
2198:  CLRF   4D
219A:  CLRF   4E
219C:  CLRF   4F
219E:  CLRF   50
21A0:  CLRF   51
21A2:  CLRF   52
21A4:  CLRF   53
21A6:  CLRF   54
21A8:  CLRF   55
21AA:  CLRF   56
21AC:  CLRF   57
21AE:  CLRF   58
21B0:  CLRF   59
21B2:  CLRF   5A
21B4:  CLRF   5B
21B6:  CLRF   5C
21B8:  CLRF   5D
21BA:  CLRF   5E
21BC:  CLRF   5F
21BE:  CLRF   x60
21C0:  CLRF   x61
21C2:  CLRF   x62
21C4:  CLRF   x63
21C6:  CLRF   x64
21C8:  CLRF   x65
21CA:  CLRF   x66
21CC:  CLRF   x67
21CE:  CLRF   x68
21D0:  CLRF   x69
21D2:  CLRF   x6A
21D4:  CLRF   x6B
21D6:  CLRF   x6C
21D8:  CLRF   x6D
21DA:  CLRF   x6E
21DC:  CLRF   x6F
21DE:  CLRF   x70
21E0:  CLRF   x71
21E2:  CLRF   x72
21E4:  CLRF   x73
21E6:  CLRF   x74
21E8:  CLRF   x75
21EA:  CLRF   x76
21EC:  CLRF   x77
21EE:  CLRF   x78
21F0:  CLRF   x79
21F2:  CLRF   x7A
21F4:  CLRF   x7B
21F6:  CLRF   x7C
21F8:  CLRF   x7D
21FA:  CLRF   x7E
21FC:  CLRF   x7F
21FE:  CLRF   x80
2200:  CLRF   x81
2202:  CLRF   x82
2204:  CLRF   x83
2206:  CLRF   x84
2208:  CLRF   x85
220A:  CLRF   x86
220C:  CLRF   x87
220E:  CLRF   x88
2210:  CLRF   x89
2212:  CLRF   x8A
2214:  CLRF   x8B
2216:  CLRF   x8C
2218:  CLRF   x8D
221A:  CLRF   x8E
221C:  CLRF   x8F
221E:  CLRF   x90
2220:  CLRF   x91
2222:  CLRF   x92
2224:  CLRF   x93
....................    VelocidadMotor(0); 
2226:  CLRF   xC2
2228:  CALL   0830
....................    Motor_L1_off; 
222C:  BCF    F8B.2
222E:  BCF    F94.2
....................    Motor_L2_off; 
2230:  BCF    F8B.1
2232:  BCF    F94.1
....................    ConfigInterrupciones(); 
2234:  GOTO   099C
....................    MensajeBienvenida(); 
2238:  GOTO   0A9C
....................    LeeEEPROM();  
223C:  GOTO   0B38
....................    LimitaValores(); 
2240:  GOTO   0D8C
....................    VelocidadMotor(0); 
2244:  CLRF   xC2
2246:  CALL   0830
....................    Motor_L1_off; 
224A:  BCF    F8B.2
224C:  BCF    F94.2
....................    Motor_L2_off; 
224E:  BCF    F8B.1
2250:  BCF    F94.1
....................    Tcruce2=83; 
2252:  CLRF   xC0
2254:  CLRF   xBF
2256:  MOVLW  26
2258:  MOVWF  xBE
225A:  MOVLW  85
225C:  MOVWF  xBD
....................    Tcruce=8300; 
225E:  CLRF   xBC
2260:  MOVLW  B0
2262:  MOVWF  xBB
2264:  MOVLW  01
2266:  MOVWF  xBA
2268:  MOVLW  8C
226A:  MOVWF  xB9
....................    while(true){ 
....................           
.................... //------------Menu0------------------------------------------------------------------    
....................    if(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
226C:  MOVF   18,F
226E:  BTFSS  FD8.2
2270:  BRA    2674
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
2272:  MOVLW  01
2274:  MOVWF  xD4
2276:  MOVWF  xD5
2278:  CALL   09BC
....................          printf(lcd_putc,"     Ingrese        "); 
227C:  MOVLW  9A
227E:  MOVWF  FF6
2280:  MOVLW  02
2282:  MOVWF  FF7
2284:  CALL   0A7C
....................          lcd_gotoxy(1,2); 
2288:  MOVLW  01
228A:  MOVWF  xD4
228C:  MOVLW  02
228E:  MOVWF  xD5
2290:  CALL   09BC
....................          printf(lcd_putc,"    Contraseña      "); 
2294:  MOVLW  B0
2296:  MOVWF  FF6
2298:  MOVLW  02
229A:  MOVWF  FF7
229C:  CALL   0A7C
....................          lcd_gotoxy(1,3); 
22A0:  MOVLW  01
22A2:  MOVWF  xD4
22A4:  MOVLW  03
22A6:  MOVWF  xD5
22A8:  CALL   09BC
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
22AC:  MOVLW  C6
22AE:  MOVWF  FF6
22B0:  MOVLW  02
22B2:  MOVWF  FF7
22B4:  MOVLW  0A
22B6:  MOVWF  xC6
22B8:  CALL   111C
22BC:  MOVFF  35,C2
22C0:  MOVLW  1F
22C2:  MOVWF  xC3
22C4:  CALL   1162
22C8:  MOVFF  36,C2
22CC:  MOVLW  1F
22CE:  MOVWF  xC3
22D0:  CALL   1162
22D4:  MOVFF  37,C2
22D8:  MOVLW  1F
22DA:  MOVWF  xC3
22DC:  CALL   1162
22E0:  MOVFF  38,C2
22E4:  MOVLW  1F
22E6:  MOVWF  xC3
22E8:  CALL   1162
22EC:  MOVLW  20
22EE:  MOVWF  xD3
22F0:  CALL   0A1E
22F4:  MOVLW  20
22F6:  MOVWF  xD3
22F8:  CALL   0A1E
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
22FC:  MOVFF  1B,D4
2300:  MOVLW  04
2302:  MOVWF  xD5
2304:  CALL   09BC
....................          lcd_putc(t[2]); 
2308:  MOVFF  34,D3
230C:  CALL   0A1E
....................           
....................          if(unidad>11&&unidad<14){ 
2310:  MOVF   1B,W
2312:  SUBLW  0B
2314:  BC    2334
2316:  MOVF   1B,W
2318:  SUBLW  0D
231A:  BNC   2334
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
231C:  MOVLW  01
231E:  SUBWF  1B,W
2320:  MOVWF  xC2
2322:  MOVWF  xD4
2324:  MOVLW  04
2326:  MOVWF  xD5
2328:  CALL   09BC
....................             lcd_putc(t[1]); 
232C:  MOVFF  33,D3
2330:  CALL   0A1E
....................          } 
....................           
....................          Cambio=OFF; 
2334:  BCF    17.5
....................       //} 
....................        
....................       if(UP){//Si oprime hacia arriba 
2336:  BSF    F92.5
2338:  BTFSC  F80.5
233A:  BRA    236E
....................          delay_ms(20); 
233C:  MOVLW  14
233E:  MOVWF  xD9
2340:  CALL   08B4
....................          if(UP){ 
2344:  BSF    F92.5
2346:  BTFSC  F80.5
2348:  BRA    236C
....................             if(Flanco == 0) { 
234A:  BTFSC  16.3
234C:  BRA    236C
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
234E:  MOVLW  0B
2350:  SUBWF  1B,W
2352:  CLRF   03
2354:  ADDLW  35
2356:  MOVWF  FE9
2358:  MOVLW  00
235A:  ADDWFC 03,W
235C:  MOVWF  FEA
235E:  INCF   FEF,F
2360:  BSF    16.3
2362:  MOVLW  1E
2364:  MOVWF  xD9
2366:  CALL   08B4
236A:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
236C:  BRA    2370
....................          Flanco = 0; 
236E:  BCF    16.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
2370:  BSF    F96.0
2372:  BTFSC  F84.0
2374:  BRA    23A8
....................          delay_ms(20); 
2376:  MOVLW  14
2378:  MOVWF  xD9
237A:  CALL   08B4
....................          if(DOWN){ 
237E:  BSF    F96.0
2380:  BTFSC  F84.0
2382:  BRA    23A6
....................             if(Flanco2 == 0) { 
2384:  BTFSC  16.5
2386:  BRA    23A6
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
2388:  MOVLW  0B
238A:  SUBWF  1B,W
238C:  CLRF   03
238E:  ADDLW  35
2390:  MOVWF  FE9
2392:  MOVLW  00
2394:  ADDWFC 03,W
2396:  MOVWF  FEA
2398:  DECF   FEF,F
239A:  BSF    16.5
239C:  MOVLW  1E
239E:  MOVWF  xD9
23A0:  CALL   08B4
23A4:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
23A6:  BRA    23AA
....................          Flanco2 = 0; 
23A8:  BCF    16.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
23AA:  BSF    F96.1
23AC:  BTFSC  F84.1
23AE:  BRA    23DA
....................          delay_ms(20); 
23B0:  MOVLW  14
23B2:  MOVWF  xD9
23B4:  CALL   08B4
....................          if(RIGHT){ 
23B8:  BSF    F96.1
23BA:  BTFSC  F84.1
23BC:  BRA    23D8
....................             if(Flanco1 == 0) { 
23BE:  BTFSC  16.4
23C0:  BRA    23D8
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
23C2:  BSF    16.4
23C4:  INCF   1B,F
23C6:  MOVLW  1E
23C8:  MOVWF  xD9
23CA:  CALL   08B4
23CE:  MOVLW  0C
23D0:  MOVWF  xD3
23D2:  CALL   0A1E
23D6:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
23D8:  BRA    23DC
....................          Flanco1 = 0; 
23DA:  BCF    16.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
23DC:  BSF    F96.2
23DE:  BTFSC  F84.2
23E0:  BRA    240C
....................          delay_ms(150); 
23E2:  MOVLW  96
23E4:  MOVWF  xD9
23E6:  CALL   08B4
....................          if(IZQU){ 
23EA:  BSF    F96.2
23EC:  BTFSC  F84.2
23EE:  BRA    240A
....................             if(Flanco3 == 0){ 
23F0:  BTFSC  16.6
23F2:  BRA    240A
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
23F4:  BSF    16.6
23F6:  DECF   1B,F
23F8:  MOVLW  1E
23FA:  MOVWF  xD9
23FC:  CALL   08B4
2400:  MOVLW  0C
2402:  MOVWF  xD3
2404:  CALL   0A1E
2408:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
240A:  BRA    240E
....................         Flanco3 = 0; 
240C:  BCF    16.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
240E:  MOVLW  0B
2410:  SUBWF  1B,W
2412:  CLRF   03
2414:  ADDLW  35
2416:  MOVWF  FE9
2418:  MOVLW  00
241A:  ADDWFC 03,W
241C:  MOVWF  FEA
241E:  BTFSC  FEF.7
2420:  BRA    2424
2422:  BRA    2438
....................          clave[unidad-11]=9; 
2424:  MOVLW  0B
2426:  SUBWF  1B,W
2428:  CLRF   03
242A:  ADDLW  35
242C:  MOVWF  FE9
242E:  MOVLW  00
2430:  ADDWFC 03,W
2432:  MOVWF  FEA
2434:  MOVLW  09
2436:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
2438:  MOVLW  0B
243A:  SUBWF  1B,W
243C:  CLRF   03
243E:  ADDLW  35
2440:  MOVWF  FE9
2442:  MOVLW  00
2444:  ADDWFC 03,W
2446:  MOVWF  FEA
2448:  BTFSC  FEF.7
244A:  BRA    2464
244C:  MOVF   FEF,W
244E:  SUBLW  09
2450:  BC    2464
....................          clave[unidad-11]=0; 
2452:  MOVLW  0B
2454:  SUBWF  1B,W
2456:  CLRF   03
2458:  ADDLW  35
245A:  MOVWF  FE9
245C:  MOVLW  00
245E:  ADDWFC 03,W
2460:  MOVWF  FEA
2462:  CLRF   FEF
....................         
....................       if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
2464:  MOVF   1B,W
2466:  SUBLW  0A
2468:  BNC   246E
....................          unidad=11; 
246A:  MOVLW  0B
246C:  MOVWF  1B
....................              
....................       if(unidad>14){             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
246E:  MOVF   1B,W
2470:  SUBLW  0E
2472:  BTFSC  FD8.0
2474:  BRA    2674
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2){ // Si Ingresa clave para reset general del sistema. 
2476:  MOVF   35,W
2478:  SUBLW  03
247A:  BNZ   2556
247C:  MOVF   36,W
247E:  SUBLW  08
2480:  BNZ   2556
2482:  MOVF   37,W
2484:  SUBLW  09
2486:  BNZ   2556
2488:  MOVF   38,W
248A:  SUBLW  02
248C:  BNZ   2556
....................             write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
248E:  CLRF   FA9
2490:  CLRF   FA8
2492:  BCF    FA6.6
2494:  BCF    FA6.7
2496:  BSF    FA6.2
2498:  MOVF   FF2,W
249A:  MOVWF  00
249C:  BCF    FF2.7
249E:  MOVLB  F
24A0:  MOVLW  55
24A2:  MOVWF  FA7
24A4:  MOVLW  AA
24A6:  MOVWF  FA7
24A8:  BSF    FA6.1
24AA:  BTFSC  FA6.1
24AC:  BRA    24AA
24AE:  BCF    FA6.2
24B0:  MOVF   00,W
24B2:  IORWF  FF2,F
24B4:  MOVLW  14
24B6:  MOVLB  0
24B8:  MOVWF  xD9
24BA:  CALL   08B4
24BE:  MOVLW  01
24C0:  MOVWF  FA9
24C2:  CLRF   FA8
24C4:  BCF    FA6.6
24C6:  BCF    FA6.7
24C8:  BSF    FA6.2
24CA:  MOVF   FF2,W
24CC:  MOVWF  00
24CE:  BCF    FF2.7
24D0:  MOVLB  F
24D2:  MOVLW  55
24D4:  MOVWF  FA7
24D6:  MOVLW  AA
24D8:  MOVWF  FA7
24DA:  BSF    FA6.1
24DC:  BTFSC  FA6.1
24DE:  BRA    24DC
24E0:  BCF    FA6.2
24E2:  MOVF   00,W
24E4:  IORWF  FF2,F
24E6:  MOVLW  14
24E8:  MOVLB  0
24EA:  MOVWF  xD9
24EC:  CALL   08B4
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
24F0:  MOVLW  02
24F2:  MOVWF  FA9
24F4:  CLRF   FA8
24F6:  BCF    FA6.6
24F8:  BCF    FA6.7
24FA:  BSF    FA6.2
24FC:  MOVF   FF2,W
24FE:  MOVWF  00
2500:  BCF    FF2.7
2502:  MOVLB  F
2504:  MOVLW  55
2506:  MOVWF  FA7
2508:  MOVLW  AA
250A:  MOVWF  FA7
250C:  BSF    FA6.1
250E:  BTFSC  FA6.1
2510:  BRA    250E
2512:  BCF    FA6.2
2514:  MOVF   00,W
2516:  IORWF  FF2,F
2518:  MOVLW  14
251A:  MOVLB  0
251C:  MOVWF  xD9
251E:  CALL   08B4
2522:  MOVLW  03
2524:  MOVWF  FA9
2526:  CLRF   FA8
2528:  BCF    FA6.6
252A:  BCF    FA6.7
252C:  BSF    FA6.2
252E:  MOVF   FF2,W
2530:  MOVWF  00
2532:  BCF    FF2.7
2534:  MOVLB  F
2536:  MOVLW  55
2538:  MOVWF  FA7
253A:  MOVLW  AA
253C:  MOVWF  FA7
253E:  BSF    FA6.1
2540:  BTFSC  FA6.1
2542:  BRA    2540
2544:  BCF    FA6.2
2546:  MOVF   00,W
2548:  IORWF  FF2,F
254A:  MOVLW  14
254C:  MOVLB  0
254E:  MOVWF  xD9
2550:  CALL   08B4
....................              reset_cpu(); 
2554:  RESET
....................          } 
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]){ // Si las claves coinciden pasa a Menu Principal. 
2556:  MOVF   39,W
2558:  SUBWF  35,W
255A:  BNZ   25FA
255C:  MOVF   3A,W
255E:  SUBWF  36,W
2560:  BNZ   25FA
2562:  MOVF   3B,W
2564:  SUBWF  37,W
2566:  BNZ   25FA
2568:  MOVF   3C,W
256A:  SUBWF  38,W
256C:  BNZ   25FA
....................             lcd_gotoxy(1,1); 
256E:  MOVLW  01
2570:  MOVWF  xD4
2572:  MOVWF  xD5
2574:  CALL   09BC
....................             printf(lcd_putc,"                   "); 
2578:  MOVLW  DC
257A:  MOVWF  FF6
257C:  MOVLW  02
257E:  MOVWF  FF7
2580:  CALL   0A7C
....................             lcd_gotoxy(1,2); 
2584:  MOVLW  01
2586:  MOVWF  xD4
2588:  MOVLW  02
258A:  MOVWF  xD5
258C:  CALL   09BC
....................             printf(lcd_putc,"     Contraseña    "); 
2590:  MOVLW  F0
2592:  MOVWF  FF6
2594:  MOVLW  02
2596:  MOVWF  FF7
2598:  CALL   0A7C
....................             lcd_gotoxy(1,3); 
259C:  MOVLW  01
259E:  MOVWF  xD4
25A0:  MOVLW  03
25A2:  MOVWF  xD5
25A4:  CALL   09BC
....................             printf(lcd_putc,"      Correcta     "); 
25A8:  MOVLW  04
25AA:  MOVWF  FF6
25AC:  MOVLW  03
25AE:  MOVWF  FF7
25B0:  CALL   0A7C
....................             lcd_gotoxy(1,4); 
25B4:  MOVLW  01
25B6:  MOVWF  xD4
25B8:  MOVLW  04
25BA:  MOVWF  xD5
25BC:  CALL   09BC
....................             printf(lcd_putc,"                   "); 
25C0:  MOVLW  18
25C2:  MOVWF  FF6
25C4:  MOVLW  03
25C6:  MOVWF  FF7
25C8:  CALL   0A7C
....................             delay_ms(1000);Menu=50;unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
25CC:  MOVLW  04
25CE:  MOVWF  xC2
25D0:  MOVLW  FA
25D2:  MOVWF  xD9
25D4:  CALL   08B4
25D8:  DECFSZ xC2,F
25DA:  BRA    25D0
25DC:  MOVLW  32
25DE:  MOVWF  18
25E0:  MOVLW  0B
25E2:  MOVWF  1B
25E4:  MOVLW  0C
25E6:  MOVWF  xD3
25E8:  CALL   0A1E
25EC:  BSF    17.5
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
25EE:  CLRF   35
25F0:  CLRF   36
25F2:  CLRF   37
25F4:  CLRF   38
25F6:  BSF    17.5
....................          } 
....................          else{                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
25F8:  BRA    2674
....................             lcd_gotoxy(1,1); 
25FA:  MOVLW  01
25FC:  MOVWF  xD4
25FE:  MOVWF  xD5
2600:  CALL   09BC
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
2604:  MOVLW  01
2606:  MOVWF  xD4
2608:  MOVLW  02
260A:  MOVWF  xD5
260C:  CALL   09BC
....................             printf(lcd_putc,"     Contraseña    "); 
2610:  MOVLW  2C
2612:  MOVWF  FF6
2614:  MOVLW  03
2616:  MOVWF  FF7
2618:  CALL   0A7C
....................             lcd_gotoxy(1,3); 
261C:  MOVLW  01
261E:  MOVWF  xD4
2620:  MOVLW  03
2622:  MOVWF  xD5
2624:  CALL   09BC
....................             printf(lcd_putc,"     Incorrecta    "); 
2628:  MOVLW  40
262A:  MOVWF  FF6
262C:  MOVLW  03
262E:  MOVWF  FF7
2630:  CALL   0A7C
....................             lcd_gotoxy(1,4); 
2634:  MOVLW  01
2636:  MOVWF  xD4
2638:  MOVLW  04
263A:  MOVWF  xD5
263C:  CALL   09BC
....................             printf(lcd_putc,"                   "); 
2640:  MOVLW  54
2642:  MOVWF  FF6
2644:  MOVLW  03
2646:  MOVWF  FF7
2648:  CALL   0A7C
....................             delay_ms(1000);unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
264C:  MOVLW  04
264E:  MOVWF  xC2
2650:  MOVLW  FA
2652:  MOVWF  xD9
2654:  CALL   08B4
2658:  DECFSZ xC2,F
265A:  BRA    2650
265C:  MOVLW  0B
265E:  MOVWF  1B
2660:  MOVLW  0C
2662:  MOVWF  xD3
2664:  CALL   0A1E
2668:  BSF    17.5
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
266A:  CLRF   35
266C:  CLRF   36
266E:  CLRF   37
2670:  CLRF   38
2672:  BSF    17.5
....................          } 
....................       } 
....................    } 
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
2674:  DECFSZ 18,W
2676:  BRA    28AE
....................       EliminaRuido(); 
2678:  CALL   0004
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
267C:  MOVLW  01
267E:  MOVWF  xD4
2680:  MOVWF  xD5
2682:  CALL   09BC
....................          printf(lcd_putc,"---MENU PRINCIPAL---"); 
2686:  MOVLW  68
2688:  MOVWF  FF6
268A:  MOVLW  03
268C:  MOVWF  FF7
268E:  CALL   0A7C
....................          mensajes(1+paso,2); 
2692:  MOVLW  01
2694:  ADDWF  31,W
2696:  MOVWF  xC2
2698:  MOVWF  xC3
269A:  MOVLW  02
269C:  MOVWF  xC4
269E:  CALL   122E
....................          mensajes(2+paso,3); 
26A2:  MOVLW  02
26A4:  ADDWF  31,W
26A6:  MOVWF  xC2
26A8:  MOVWF  xC3
26AA:  MOVLW  03
26AC:  MOVWF  xC4
26AE:  CALL   122E
....................          mensajes(3+paso,4); 
26B2:  MOVLW  03
26B4:  ADDWF  31,W
26B6:  MOVWF  xC2
26B8:  MOVWF  xC3
26BA:  MOVLW  04
26BC:  MOVWF  xC4
26BE:  CALL   122E
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
26C2:  MOVLW  01
26C4:  MOVWF  xD4
26C6:  MOVFF  1C,D5
26CA:  CALL   09BC
....................         lcd_putc(t[0]); 
26CE:  MOVFF  32,D3
26D2:  CALL   0A1E
....................  
....................         if(Flecha==2) 
26D6:  MOVF   1C,W
26D8:  SUBLW  02
26DA:  BNZ   2704
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
26DC:  MOVLW  01
26DE:  MOVWF  xD4
26E0:  MOVLW  04
26E2:  MOVWF  xD5
26E4:  CALL   09BC
....................             lcd_putc(t[1]); 
26E8:  MOVFF  33,D3
26EC:  CALL   0A1E
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
26F0:  MOVLW  01
26F2:  MOVWF  xD4
26F4:  MOVLW  03
26F6:  MOVWF  xD5
26F8:  CALL   09BC
....................             lcd_putc(t[1]); 
26FC:  MOVFF  33,D3
2700:  CALL   0A1E
....................           } 
....................          
....................         if(Flecha==4) 
2704:  MOVF   1C,W
2706:  SUBLW  04
2708:  BNZ   2732
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
270A:  MOVLW  01
270C:  MOVWF  xD4
270E:  MOVLW  02
2710:  MOVWF  xD5
2712:  CALL   09BC
....................             lcd_putc(t[1]); 
2716:  MOVFF  33,D3
271A:  CALL   0A1E
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
271E:  MOVLW  01
2720:  MOVWF  xD4
2722:  MOVLW  03
2724:  MOVWF  xD5
2726:  CALL   09BC
....................             lcd_putc(t[1]); 
272A:  MOVFF  33,D3
272E:  CALL   0A1E
....................           } 
....................          
....................         if(Flecha==3) 
2732:  MOVF   1C,W
2734:  SUBLW  03
2736:  BNZ   2760
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
2738:  MOVLW  01
273A:  MOVWF  xD4
273C:  MOVLW  04
273E:  MOVWF  xD5
2740:  CALL   09BC
....................             lcd_putc(t[1]); 
2744:  MOVFF  33,D3
2748:  CALL   0A1E
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
274C:  MOVLW  01
274E:  MOVWF  xD4
2750:  MOVLW  02
2752:  MOVWF  xD5
2754:  CALL   09BC
....................             lcd_putc(t[1]); 
2758:  MOVFF  33,D3
275C:  CALL   0A1E
....................           } 
....................          Cambio=OFF; 
2760:  BCF    17.5
....................      // } 
....................          
....................       if(UP){//Si oprime hacia arriba 
2762:  BSF    F92.5
2764:  BTFSC  F80.5
2766:  BRA    2792
....................          delay_ms(20); 
2768:  MOVLW  14
276A:  MOVWF  xD9
276C:  CALL   08B4
....................          if(UP){ 
2770:  BSF    F92.5
2772:  BTFSC  F80.5
2774:  BRA    2790
....................             if(Flanco == 0){ 
2776:  BTFSC  16.3
2778:  BRA    2790
....................                Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(10);Cambio=ON; 
277A:  DECF   1E,F
277C:  DECF   1C,F
277E:  MOVLW  01
2780:  ADDWF  1C,W
2782:  MOVWF  1D
2784:  BSF    16.3
2786:  MOVLW  0A
2788:  MOVWF  xD9
278A:  CALL   08B4
278E:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2790:  BRA    2794
....................          Flanco = 0; 
2792:  BCF    16.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
2794:  BSF    F96.0
2796:  BTFSC  F84.0
2798:  BRA    27C4
....................          delay_ms(20); 
279A:  MOVLW  14
279C:  MOVWF  xD9
279E:  CALL   08B4
....................          if(DOWN){ 
27A2:  BSF    F96.0
27A4:  BTFSC  F84.0
27A6:  BRA    27C2
....................             if(Flanco2 == 0){ 
27A8:  BTFSC  16.5
27AA:  BRA    27C2
....................                Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(10);Cambio=ON; 
27AC:  INCF   1E,F
27AE:  INCF   1C,F
27B0:  MOVLW  01
27B2:  SUBWF  1C,W
27B4:  MOVWF  1D
27B6:  BSF    16.5
27B8:  MOVLW  0A
27BA:  MOVWF  xD9
27BC:  CALL   08B4
27C0:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
27C2:  BRA    27C6
....................          Flanco2 = 0; 
27C4:  BCF    16.5
....................       } 
....................     
....................          
....................       if(Flecha2>nMenuH){ 
27C6:  MOVF   1E,W
27C8:  SUBWF  20,W
27CA:  BC    27DC
....................          paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4; 
27CC:  INCF   31,F
27CE:  MOVFF  1E,20
27D2:  MOVLW  02
27D4:  SUBWF  20,W
27D6:  MOVWF  1F
27D8:  MOVLW  04
27DA:  MOVWF  1C
....................       } 
....................          
....................       if(Flecha2<nMenuL){ 
27DC:  MOVF   1F,W
27DE:  SUBWF  1E,W
27E0:  BC    27F2
....................          paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2; 
27E2:  DECF   31,F
27E4:  MOVFF  1E,1F
27E8:  MOVLW  02
27EA:  ADDWF  1F,W
27EC:  MOVWF  20
27EE:  MOVLW  02
27F0:  MOVWF  1C
....................       } 
....................          
....................       if(Flecha2>n_opcionH){ 
27F2:  MOVF   1E,W
27F4:  SUBWF  19,W
27F6:  BC    280A
....................          Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2; 
27F8:  MOVFF  1A,1E
27FC:  MOVLW  02
27FE:  MOVWF  1C
2800:  CLRF   31
2802:  MOVFF  1E,1F
2806:  ADDWF  1F,W
2808:  MOVWF  20
....................       } 
....................          
....................       if(Flecha2<n_opcionL){ 
280A:  MOVF   1A,W
280C:  SUBWF  1E,W
280E:  BC    2826
....................          Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2; 
2810:  MOVFF  19,1E
2814:  MOVLW  04
2816:  MOVWF  1C
2818:  SUBWF  19,W
281A:  MOVWF  31
281C:  MOVFF  1E,20
2820:  MOVLW  02
2822:  SUBWF  20,W
2824:  MOVWF  1F
....................       } 
....................          
....................       if(paso<0) 
2826:  BTFSC  31.7
2828:  BRA    282C
282A:  BRA    282E
....................          paso=0; 
282C:  CLRF   31
....................           
....................       if(RIGHT){// Si oprime derecha 
282E:  BSF    F96.1
2830:  BTFSC  F84.1
2832:  BRA    287A
....................          delay_ms(20); 
2834:  MOVLW  14
2836:  MOVWF  xD9
2838:  CALL   08B4
....................          if(RIGHT){ 
283C:  BSF    F96.1
283E:  BTFSC  F84.1
2840:  BRA    2876
....................             if(Flanco1 == 0){ 
2842:  BTFSC  16.4
2844:  BRA    2876
....................                Flanco1 = 1;Menu=Flecha2;Flecha=3;delay_ms(300);printf(lcd_putc,"\f"); 
2846:  BSF    16.4
2848:  MOVFF  1E,18
284C:  MOVLW  03
284E:  MOVWF  1C
2850:  MOVLW  02
2852:  MOVWF  xC2
2854:  MOVLW  96
2856:  MOVWF  xD9
2858:  CALL   08B4
285C:  DECFSZ xC2,F
285E:  BRA    2854
2860:  MOVLW  0C
2862:  MOVWF  xD3
2864:  CALL   0A1E
....................                if(Menu==6){ 
2868:  MOVF   18,W
286A:  SUBLW  06
286C:  BNZ   2876
....................                   clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
286E:  CLRF   35
2870:  CLRF   36
2872:  CLRF   37
2874:  CLRF   38
....................                } 
....................             } 
....................          } 
....................          Cambio=ON; 
2876:  BSF    17.5
....................       }else{ 
2878:  BRA    287C
....................         Flanco1 = 0; 
287A:  BCF    16.4
....................       } 
....................              
....................       if(IZQU){ 
287C:  BSF    F96.2
287E:  BTFSC  F84.2
2880:  BRA    28AE
....................          delay_ms(20); 
2882:  MOVLW  14
2884:  MOVWF  xD9
2886:  CALL   08B4
....................          if(IZQU){ 
288A:  BSF    F96.2
288C:  BTFSC  F84.2
288E:  BRA    28AE
....................             delay_ms(500);Menu=50;printf(lcd_putc,"\f");Cambio=ON; 
2890:  MOVLW  02
2892:  MOVWF  xC2
2894:  MOVLW  FA
2896:  MOVWF  xD9
2898:  CALL   08B4
289C:  DECFSZ xC2,F
289E:  BRA    2894
28A0:  MOVLW  32
28A2:  MOVWF  18
28A4:  MOVLW  0C
28A6:  MOVWF  xD3
28A8:  CALL   0A1E
28AC:  BSF    17.5
....................          } 
....................       } 
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de tiempo de trabajo de Luz UV    
28AE:  MOVF   18,W
28B0:  SUBLW  02
28B2:  BTFSS  FD8.2
28B4:  BRA    2B0A
....................    EliminaRuido(); 
28B6:  CALL   0004
....................    //if(Cambio){ 
....................       lcd_gotoxy(1,1); 
28BA:  MOVLW  01
28BC:  MOVWF  xD4
28BE:  MOVWF  xD5
28C0:  CALL   09BC
....................       printf(lcd_putc,"    Temporizador     "); 
28C4:  MOVLW  7E
28C6:  MOVWF  FF6
28C8:  MOVLW  03
28CA:  MOVWF  FF7
28CC:  CALL   0A7C
....................       lcd_gotoxy(1,2); 
28D0:  MOVLW  01
28D2:  MOVWF  xD4
28D4:  MOVLW  02
28D6:  MOVWF  xD5
28D8:  CALL   09BC
....................       printf(lcd_putc,"       Luz UV        "); 
28DC:  MOVLW  94
28DE:  MOVWF  FF6
28E0:  MOVLW  03
28E2:  MOVWF  FF7
28E4:  CALL   0A7C
....................       lcd_gotoxy(6,3); 
28E8:  MOVLW  06
28EA:  MOVWF  xD4
28EC:  MOVLW  03
28EE:  MOVWF  xD5
28F0:  CALL   09BC
....................       printf(lcd_putc,"%03u:%02u (M:S)  ",tempo_minutos_pro,tempo_segundos_pro);  
28F4:  MOVFF  29,C2
28F8:  MOVLW  03
28FA:  MOVWF  xC3
28FC:  CALL   12FE
2900:  MOVLW  3A
2902:  MOVWF  xD3
2904:  CALL   0A1E
2908:  MOVFF  2A,C2
290C:  MOVLW  01
290E:  MOVWF  xC3
2910:  CALL   12FE
2914:  MOVLW  B3
2916:  MOVWF  FF6
2918:  MOVLW  03
291A:  MOVWF  FF7
291C:  MOVLW  08
291E:  MOVWF  xC6
2920:  CALL   111C
....................        
....................       lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
2924:  MOVLW  06
2926:  ADDWF  2E,W
2928:  MOVWF  xC2
292A:  MOVWF  xD4
292C:  MOVLW  04
292E:  MOVWF  xD5
2930:  CALL   09BC
....................       lcd_putc(t[2]); 
2934:  MOVFF  34,D3
2938:  CALL   0A1E
....................        
....................       Cambio=OFF; 
293C:  BCF    17.5
.................... //   } 
....................     
....................    if(UP) 
293E:  BSF    F92.5
2940:  BTFSC  F80.5
2942:  BRA    2990
....................    { 
....................       delay_ms(20); 
2944:  MOVLW  14
2946:  MOVWF  xD9
2948:  CALL   08B4
....................       if(UP){ 
294C:  BSF    F92.5
294E:  BTFSC  F80.5
2950:  BRA    2990
....................          if(unidad2==1) 
2952:  DECFSZ 2E,W
2954:  BRA    2970
....................          { 
....................             if(tempo_minutos_pro<240) 
2956:  MOVF   29,W
2958:  SUBLW  EF
295A:  BNC   2970
....................             { 
....................                tempo_minutos_pro+=5;delay_ms(300); 
295C:  MOVLW  05
295E:  ADDWF  29,F
2960:  MOVLW  02
2962:  MOVWF  xC2
2964:  MOVLW  96
2966:  MOVWF  xD9
2968:  CALL   08B4
296C:  DECFSZ xC2,F
296E:  BRA    2964
....................             } 
....................          } 
....................           
....................          if(unidad2==4) 
2970:  MOVF   2E,W
2972:  SUBLW  04
2974:  BNZ   298E
....................          { 
....................             if(tempo_segundos_pro<59) 
2976:  MOVF   2A,W
2978:  SUBLW  3A
297A:  BNC   298E
....................             { 
....................                tempo_segundos_pro++;delay_ms(300); 
297C:  INCF   2A,F
297E:  MOVLW  02
2980:  MOVWF  xC2
2982:  MOVLW  96
2984:  MOVWF  xD9
2986:  CALL   08B4
298A:  DECFSZ xC2,F
298C:  BRA    2982
....................             } 
....................          }      
....................       Cambio=ON; 
298E:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(DOWN) 
2990:  BSF    F96.0
2992:  BTFSC  F84.0
2994:  BRA    29DE
....................    { 
....................       delay_ms(20); 
2996:  MOVLW  14
2998:  MOVWF  xD9
299A:  CALL   08B4
....................       if(DOWN){ 
299E:  BSF    F96.0
29A0:  BTFSC  F84.0
29A2:  BRA    29DE
....................          if(unidad2==1) 
29A4:  DECFSZ 2E,W
29A6:  BRA    29C0
....................          { 
....................             if(tempo_minutos_pro>0) 
29A8:  MOVF   29,F
29AA:  BZ    29C0
....................             { 
....................                tempo_minutos_pro-=5;delay_ms(300); 
29AC:  MOVLW  05
29AE:  SUBWF  29,F
29B0:  MOVLW  02
29B2:  MOVWF  xC2
29B4:  MOVLW  96
29B6:  MOVWF  xD9
29B8:  CALL   08B4
29BC:  DECFSZ xC2,F
29BE:  BRA    29B4
....................             }  
....................          } 
....................           
....................          if(unidad2==4) 
29C0:  MOVF   2E,W
29C2:  SUBLW  04
29C4:  BNZ   29DC
....................          { 
....................             if(tempo_segundos_pro>0) 
29C6:  MOVF   2A,F
29C8:  BZ    29DC
....................             { 
....................                tempo_segundos_pro--;delay_ms(300); 
29CA:  DECF   2A,F
29CC:  MOVLW  02
29CE:  MOVWF  xC2
29D0:  MOVLW  96
29D2:  MOVWF  xD9
29D4:  CALL   08B4
29D8:  DECFSZ xC2,F
29DA:  BRA    29D0
....................             }    
....................          } 
....................       Cambio=ON; 
29DC:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(RIGHT) 
29DE:  BSF    F96.1
29E0:  BTFSC  F84.1
29E2:  BRA    2A20
....................    { 
....................       delay_ms(20); 
29E4:  MOVLW  14
29E6:  MOVWF  xD9
29E8:  CALL   08B4
....................       if(RIGHT){ 
29EC:  BSF    F96.1
29EE:  BTFSC  F84.1
29F0:  BRA    2A20
....................          if(unidad2==1) 
29F2:  DECFSZ 2E,W
29F4:  BRA    29FC
....................          { 
....................             unidad2=4; 
29F6:  MOVLW  04
29F8:  MOVWF  2E
....................          } 
....................          else 
29FA:  BRA    2A06
....................          { 
....................             if(unidad2==4) 
29FC:  MOVF   2E,W
29FE:  SUBLW  04
2A00:  BNZ   2A06
....................             { 
....................                unidad2=1; 
2A02:  MOVLW  01
2A04:  MOVWF  2E
....................             } 
....................          } 
....................       delay_ms(500); 
2A06:  MOVLW  02
2A08:  MOVWF  xC2
2A0A:  MOVLW  FA
2A0C:  MOVWF  xD9
2A0E:  CALL   08B4
2A12:  DECFSZ xC2,F
2A14:  BRA    2A0A
....................       printf(lcd_putc,"\f"); 
2A16:  MOVLW  0C
2A18:  MOVWF  xD3
2A1A:  CALL   0A1E
....................       Cambio=ON; 
2A1E:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(IZQU) 
2A20:  BSF    F96.2
2A22:  BTFSC  F84.2
2A24:  BRA    2B0A
....................    { 
....................       if(IZQU){ 
2A26:  BSF    F96.2
2A28:  BTFSC  F84.2
2A2A:  BRA    2B0A
....................          delay_ms(200); 
2A2C:  MOVLW  C8
2A2E:  MOVWF  xD9
2A30:  CALL   08B4
....................          printf(lcd_putc,"\f"); 
2A34:  MOVLW  0C
2A36:  MOVWF  xD3
2A38:  CALL   0A1E
....................          lcd_gotoxy(1,2); 
2A3C:  MOVLW  01
2A3E:  MOVWF  xD4
2A40:  MOVLW  02
2A42:  MOVWF  xD5
2A44:  CALL   09BC
....................          printf(lcd_putc,"Tiempo Almacenado"); 
2A48:  MOVLW  BC
2A4A:  MOVWF  FF6
2A4C:  MOVLW  03
2A4E:  MOVWF  FF7
2A50:  CALL   0A7C
....................          lcd_gotoxy(1,3); 
2A54:  MOVLW  01
2A56:  MOVWF  xD4
2A58:  MOVLW  03
2A5A:  MOVWF  xD5
2A5C:  CALL   09BC
....................          printf(lcd_putc,"  Correctamente  "); 
2A60:  MOVLW  CE
2A62:  MOVWF  FF6
2A64:  MOVLW  03
2A66:  MOVWF  FF7
2A68:  CALL   0A7C
....................          write_eeprom(5,tempo_minutos_pro); 
2A6C:  MOVLW  05
2A6E:  MOVWF  FA9
2A70:  MOVFF  29,FA8
2A74:  BCF    FA6.6
2A76:  BCF    FA6.7
2A78:  BSF    FA6.2
2A7A:  MOVF   FF2,W
2A7C:  MOVWF  00
2A7E:  BCF    FF2.7
2A80:  MOVLB  F
2A82:  MOVLW  55
2A84:  MOVWF  FA7
2A86:  MOVLW  AA
2A88:  MOVWF  FA7
2A8A:  BSF    FA6.1
2A8C:  BTFSC  FA6.1
2A8E:  BRA    2A8C
2A90:  BCF    FA6.2
2A92:  MOVF   00,W
2A94:  IORWF  FF2,F
....................          delay_ms(20); 
2A96:  MOVLW  14
2A98:  MOVLB  0
2A9A:  MOVWF  xD9
2A9C:  CALL   08B4
....................          write_eeprom(6,tempo_segundos_pro); 
2AA0:  MOVLW  06
2AA2:  MOVWF  FA9
2AA4:  MOVFF  2A,FA8
2AA8:  BCF    FA6.6
2AAA:  BCF    FA6.7
2AAC:  BSF    FA6.2
2AAE:  MOVF   FF2,W
2AB0:  MOVWF  00
2AB2:  BCF    FF2.7
2AB4:  MOVLB  F
2AB6:  MOVLW  55
2AB8:  MOVWF  FA7
2ABA:  MOVLW  AA
2ABC:  MOVWF  FA7
2ABE:  BSF    FA6.1
2AC0:  BTFSC  FA6.1
2AC2:  BRA    2AC0
2AC4:  BCF    FA6.2
2AC6:  MOVF   00,W
2AC8:  IORWF  FF2,F
....................          delay_ms(20); 
2ACA:  MOVLW  14
2ACC:  MOVLB  0
2ACE:  MOVWF  xD9
2AD0:  CALL   08B4
....................          tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
2AD4:  MOVFF  29,27
2AD8:  MOVFF  2A,28
....................          delay_ms(700); 
2ADC:  MOVLW  04
2ADE:  MOVWF  xC2
2AE0:  MOVLW  AF
2AE2:  MOVWF  xD9
2AE4:  CALL   08B4
2AE8:  DECFSZ xC2,F
2AEA:  BRA    2AE0
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2AEC:  MOVLW  1E
2AEE:  MOVWF  xD9
2AF0:  CALL   08B4
2AF4:  MOVLW  01
2AF6:  MOVWF  18
2AF8:  CLRF   31
2AFA:  MOVLW  02
2AFC:  MOVWF  1C
2AFE:  MOVWF  1E
2B00:  MOVLW  0C
2B02:  MOVWF  xD3
2B04:  CALL   0A1E
....................          Cambio=ON; 
2B08:  BSF    17.5
....................       } 
....................    }   
....................   } 
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................  
.................... //----------------Menu3--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu para Cambio de Contraseña 
2B0A:  MOVF   18,W
2B0C:  SUBLW  03
2B0E:  BTFSS  FD8.2
2B10:  BRA    2E5C
....................       EliminaRuido(); 
2B12:  CALL   0004
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
2B16:  MOVLW  01
2B18:  MOVWF  xD4
2B1A:  MOVWF  xD5
2B1C:  CALL   09BC
....................          printf(lcd_putc,"     Ingrese        "); 
2B20:  MOVLW  E0
2B22:  MOVWF  FF6
2B24:  MOVLW  03
2B26:  MOVWF  FF7
2B28:  CALL   0A7C
....................          lcd_gotoxy(1,2); 
2B2C:  MOVLW  01
2B2E:  MOVWF  xD4
2B30:  MOVLW  02
2B32:  MOVWF  xD5
2B34:  CALL   09BC
....................          printf(lcd_putc,"    Contraseña      "); 
2B38:  MOVLW  F6
2B3A:  MOVWF  FF6
2B3C:  MOVLW  03
2B3E:  MOVWF  FF7
2B40:  CALL   0A7C
....................          lcd_gotoxy(1,3); 
2B44:  MOVLW  01
2B46:  MOVWF  xD4
2B48:  MOVLW  03
2B4A:  MOVWF  xD5
2B4C:  CALL   09BC
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2B50:  MOVLW  0C
2B52:  MOVWF  FF6
2B54:  MOVLW  04
2B56:  MOVWF  FF7
2B58:  MOVLW  0A
2B5A:  MOVWF  xC6
2B5C:  CALL   111C
2B60:  MOVFF  35,C2
2B64:  MOVLW  1F
2B66:  MOVWF  xC3
2B68:  CALL   1162
2B6C:  MOVFF  36,C2
2B70:  MOVLW  1F
2B72:  MOVWF  xC3
2B74:  CALL   1162
2B78:  MOVFF  37,C2
2B7C:  MOVLW  1F
2B7E:  MOVWF  xC3
2B80:  CALL   1162
2B84:  MOVFF  38,C2
2B88:  MOVLW  1F
2B8A:  MOVWF  xC3
2B8C:  CALL   1162
2B90:  MOVLW  20
2B92:  MOVWF  xD3
2B94:  CALL   0A1E
2B98:  MOVLW  20
2B9A:  MOVWF  xD3
2B9C:  CALL   0A1E
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
2BA0:  MOVFF  1B,D4
2BA4:  MOVLW  04
2BA6:  MOVWF  xD5
2BA8:  CALL   09BC
....................          lcd_putc(t[2]); 
2BAC:  MOVFF  34,D3
2BB0:  CALL   0A1E
....................           
....................          if(unidad>11&&unidad<14){ 
2BB4:  MOVF   1B,W
2BB6:  SUBLW  0B
2BB8:  BC    2BD8
2BBA:  MOVF   1B,W
2BBC:  SUBLW  0D
2BBE:  BNC   2BD8
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2BC0:  MOVLW  01
2BC2:  SUBWF  1B,W
2BC4:  MOVWF  xC2
2BC6:  MOVWF  xD4
2BC8:  MOVLW  04
2BCA:  MOVWF  xD5
2BCC:  CALL   09BC
....................             lcd_putc(t[1]); 
2BD0:  MOVFF  33,D3
2BD4:  CALL   0A1E
....................          } 
....................           
....................          Cambio=OFF; 
2BD8:  BCF    17.5
....................       //} 
....................        
....................       if(UP){//Si oprime hacia arriba 
2BDA:  BSF    F92.5
2BDC:  BTFSC  F80.5
2BDE:  BRA    2C12
....................          delay_ms(20); 
2BE0:  MOVLW  14
2BE2:  MOVWF  xD9
2BE4:  CALL   08B4
....................          if(UP){ 
2BE8:  BSF    F92.5
2BEA:  BTFSC  F80.5
2BEC:  BRA    2C10
....................             if(Flanco == 0) { 
2BEE:  BTFSC  16.3
2BF0:  BRA    2C10
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
2BF2:  MOVLW  0B
2BF4:  SUBWF  1B,W
2BF6:  CLRF   03
2BF8:  ADDLW  35
2BFA:  MOVWF  FE9
2BFC:  MOVLW  00
2BFE:  ADDWFC 03,W
2C00:  MOVWF  FEA
2C02:  INCF   FEF,F
2C04:  BSF    16.3
2C06:  MOVLW  1E
2C08:  MOVWF  xD9
2C0A:  CALL   08B4
2C0E:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2C10:  BRA    2C14
....................          Flanco = 0; 
2C12:  BCF    16.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
2C14:  BSF    F96.0
2C16:  BTFSC  F84.0
2C18:  BRA    2C4C
....................          delay_ms(20); 
2C1A:  MOVLW  14
2C1C:  MOVWF  xD9
2C1E:  CALL   08B4
....................          if(DOWN){ 
2C22:  BSF    F96.0
2C24:  BTFSC  F84.0
2C26:  BRA    2C4A
....................             if(Flanco2 == 0) { 
2C28:  BTFSC  16.5
2C2A:  BRA    2C4A
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
2C2C:  MOVLW  0B
2C2E:  SUBWF  1B,W
2C30:  CLRF   03
2C32:  ADDLW  35
2C34:  MOVWF  FE9
2C36:  MOVLW  00
2C38:  ADDWFC 03,W
2C3A:  MOVWF  FEA
2C3C:  DECF   FEF,F
2C3E:  BSF    16.5
2C40:  MOVLW  1E
2C42:  MOVWF  xD9
2C44:  CALL   08B4
2C48:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2C4A:  BRA    2C4E
....................          Flanco2 = 0; 
2C4C:  BCF    16.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
2C4E:  BSF    F96.1
2C50:  BTFSC  F84.1
2C52:  BRA    2C7E
....................          delay_ms(20); 
2C54:  MOVLW  14
2C56:  MOVWF  xD9
2C58:  CALL   08B4
....................          if(RIGHT){ 
2C5C:  BSF    F96.1
2C5E:  BTFSC  F84.1
2C60:  BRA    2C7C
....................             if(Flanco1 == 0) { 
2C62:  BTFSC  16.4
2C64:  BRA    2C7C
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2C66:  BSF    16.4
2C68:  INCF   1B,F
2C6A:  MOVLW  1E
2C6C:  MOVWF  xD9
2C6E:  CALL   08B4
2C72:  MOVLW  0C
2C74:  MOVWF  xD3
2C76:  CALL   0A1E
2C7A:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2C7C:  BRA    2C80
....................          Flanco1 = 0; 
2C7E:  BCF    16.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
2C80:  BSF    F96.2
2C82:  BTFSC  F84.2
2C84:  BRA    2CB0
....................          delay_ms(150); 
2C86:  MOVLW  96
2C88:  MOVWF  xD9
2C8A:  CALL   08B4
....................          if(IZQU){ 
2C8E:  BSF    F96.2
2C90:  BTFSC  F84.2
2C92:  BRA    2CAE
....................             if(Flanco3 == 0){ 
2C94:  BTFSC  16.6
2C96:  BRA    2CAE
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2C98:  BSF    16.6
2C9A:  DECF   1B,F
2C9C:  MOVLW  1E
2C9E:  MOVWF  xD9
2CA0:  CALL   08B4
2CA4:  MOVLW  0C
2CA6:  MOVWF  xD3
2CA8:  CALL   0A1E
2CAC:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2CAE:  BRA    2CB2
....................         Flanco3 = 0; 
2CB0:  BCF    16.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
2CB2:  MOVLW  0B
2CB4:  SUBWF  1B,W
2CB6:  CLRF   03
2CB8:  ADDLW  35
2CBA:  MOVWF  FE9
2CBC:  MOVLW  00
2CBE:  ADDWFC 03,W
2CC0:  MOVWF  FEA
2CC2:  BTFSC  FEF.7
2CC4:  BRA    2CC8
2CC6:  BRA    2CDC
....................          clave[unidad-11]=9; 
2CC8:  MOVLW  0B
2CCA:  SUBWF  1B,W
2CCC:  CLRF   03
2CCE:  ADDLW  35
2CD0:  MOVWF  FE9
2CD2:  MOVLW  00
2CD4:  ADDWFC 03,W
2CD6:  MOVWF  FEA
2CD8:  MOVLW  09
2CDA:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
2CDC:  MOVLW  0B
2CDE:  SUBWF  1B,W
2CE0:  CLRF   03
2CE2:  ADDLW  35
2CE4:  MOVWF  FE9
2CE6:  MOVLW  00
2CE8:  ADDWFC 03,W
2CEA:  MOVWF  FEA
2CEC:  BTFSC  FEF.7
2CEE:  BRA    2D08
2CF0:  MOVF   FEF,W
2CF2:  SUBLW  09
2CF4:  BC    2D08
....................          clave[unidad-11]=0; 
2CF6:  MOVLW  0B
2CF8:  SUBWF  1B,W
2CFA:  CLRF   03
2CFC:  ADDLW  35
2CFE:  MOVWF  FE9
2D00:  MOVLW  00
2D02:  ADDWFC 03,W
2D04:  MOVWF  FEA
2D06:  CLRF   FEF
....................         
....................       if(unidad<11){             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
2D08:  MOVF   1B,W
2D0A:  SUBLW  0A
2D0C:  BNC   2D2E
....................          unidad=11; 
2D0E:  MOVLW  0B
2D10:  MOVWF  1B
....................          Menu=1; 
2D12:  MOVLW  01
2D14:  MOVWF  18
....................          paso=0; 
2D16:  CLRF   31
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
2D18:  CLRF   35
2D1A:  CLRF   36
2D1C:  CLRF   37
2D1E:  CLRF   38
2D20:  BSF    17.5
....................          unidad=11;printf(lcd_putc,"\f"); 
2D22:  MOVLW  0B
2D24:  MOVWF  1B
2D26:  MOVLW  0C
2D28:  MOVWF  xD3
2D2A:  CALL   0A1E
....................       } 
....................         
....................       if(unidad>14){// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
2D2E:  MOVF   1B,W
2D30:  SUBLW  0E
2D32:  BTFSC  FD8.0
2D34:  BRA    2E5C
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]){ 
2D36:  MOVF   39,W
2D38:  SUBWF  35,W
2D3A:  BNZ   2DD8
2D3C:  MOVF   3A,W
2D3E:  SUBWF  36,W
2D40:  BNZ   2DD8
2D42:  MOVF   3B,W
2D44:  SUBWF  37,W
2D46:  BNZ   2DD8
2D48:  MOVF   3C,W
2D4A:  SUBWF  38,W
2D4C:  BNZ   2DD8
....................             lcd_gotoxy(1,1); 
2D4E:  MOVLW  01
2D50:  MOVWF  xD4
2D52:  MOVWF  xD5
2D54:  CALL   09BC
....................             printf(lcd_putc,"                    "); 
2D58:  MOVLW  22
2D5A:  MOVWF  FF6
2D5C:  MOVLW  04
2D5E:  MOVWF  FF7
2D60:  CALL   0A7C
....................             lcd_gotoxy(1,2); 
2D64:  MOVLW  01
2D66:  MOVWF  xD4
2D68:  MOVLW  02
2D6A:  MOVWF  xD5
2D6C:  CALL   09BC
....................             printf(lcd_putc,"     Contraseña     "); 
2D70:  MOVLW  38
2D72:  MOVWF  FF6
2D74:  MOVLW  04
2D76:  MOVWF  FF7
2D78:  CALL   0A7C
....................             lcd_gotoxy(1,3); 
2D7C:  MOVLW  01
2D7E:  MOVWF  xD4
2D80:  MOVLW  03
2D82:  MOVWF  xD5
2D84:  CALL   09BC
....................             printf(lcd_putc,"      Correcta      "); 
2D88:  MOVLW  4E
2D8A:  MOVWF  FF6
2D8C:  MOVLW  04
2D8E:  MOVWF  FF7
2D90:  CALL   0A7C
....................             lcd_gotoxy(1,4); 
2D94:  MOVLW  01
2D96:  MOVWF  xD4
2D98:  MOVLW  04
2D9A:  MOVWF  xD5
2D9C:  CALL   09BC
....................             printf(lcd_putc,"                    "); 
2DA0:  MOVLW  64
2DA2:  MOVWF  FF6
2DA4:  MOVLW  04
2DA6:  MOVWF  FF7
2DA8:  CALL   0A7C
....................             delay_ms(500);Menu=61;unidad=11;printf(lcd_putc,"\f"); 
2DAC:  MOVLW  02
2DAE:  MOVWF  xC2
2DB0:  MOVLW  FA
2DB2:  MOVWF  xD9
2DB4:  CALL   08B4
2DB8:  DECFSZ xC2,F
2DBA:  BRA    2DB0
2DBC:  MOVLW  3D
2DBE:  MOVWF  18
2DC0:  MOVLW  0B
2DC2:  MOVWF  1B
2DC4:  MOVLW  0C
2DC6:  MOVWF  xD3
2DC8:  CALL   0A1E
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
2DCC:  CLRF   35
2DCE:  CLRF   36
2DD0:  CLRF   37
2DD2:  CLRF   38
2DD4:  BSF    17.5
....................          }else{ 
2DD6:  BRA    2E5C
....................             lcd_gotoxy(1,1); 
2DD8:  MOVLW  01
2DDA:  MOVWF  xD4
2DDC:  MOVWF  xD5
2DDE:  CALL   09BC
....................             printf(lcd_putc,"                    "); 
2DE2:  MOVLW  7A
2DE4:  MOVWF  FF6
2DE6:  MOVLW  04
2DE8:  MOVWF  FF7
2DEA:  CALL   0A7C
....................             lcd_gotoxy(1,2); 
2DEE:  MOVLW  01
2DF0:  MOVWF  xD4
2DF2:  MOVLW  02
2DF4:  MOVWF  xD5
2DF6:  CALL   09BC
....................             printf(lcd_putc,"     Contraseña     "); 
2DFA:  MOVLW  90
2DFC:  MOVWF  FF6
2DFE:  MOVLW  04
2E00:  MOVWF  FF7
2E02:  CALL   0A7C
....................             lcd_gotoxy(1,3); 
2E06:  MOVLW  01
2E08:  MOVWF  xD4
2E0A:  MOVLW  03
2E0C:  MOVWF  xD5
2E0E:  CALL   09BC
....................             printf(lcd_putc,"     Incorrecta     "); 
2E12:  MOVLW  A6
2E14:  MOVWF  FF6
2E16:  MOVLW  04
2E18:  MOVWF  FF7
2E1A:  CALL   0A7C
....................             lcd_gotoxy(1,4); 
2E1E:  MOVLW  01
2E20:  MOVWF  xD4
2E22:  MOVLW  04
2E24:  MOVWF  xD5
2E26:  CALL   09BC
....................             printf(lcd_putc,"                    "); 
2E2A:  MOVLW  BC
2E2C:  MOVWF  FF6
2E2E:  MOVLW  04
2E30:  MOVWF  FF7
2E32:  CALL   0A7C
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
2E36:  MOVLW  02
2E38:  MOVWF  xC2
2E3A:  MOVLW  FA
2E3C:  MOVWF  xD9
2E3E:  CALL   08B4
2E42:  DECFSZ xC2,F
2E44:  BRA    2E3A
2E46:  MOVLW  0B
2E48:  MOVWF  1B
2E4A:  MOVLW  0C
2E4C:  MOVWF  xD3
2E4E:  CALL   0A1E
2E52:  BSF    17.5
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
2E54:  CLRF   35
2E56:  CLRF   36
2E58:  CLRF   37
2E5A:  CLRF   38
....................          } 
....................       } 
....................    }       
.................... //----------------Fin-Menu3--------------------------------------------------------------- 
....................  
.................... //----------------Menu6.1--------------------------------------------------------------- 
....................    if(Menu == 61){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
2E5C:  MOVF   18,W
2E5E:  SUBLW  3D
2E60:  BTFSS  FD8.2
2E62:  BRA    31EC
....................       EliminaRuido(); 
2E64:  CALL   0004
.................... //      if(Cambio){ 
....................          lcd_gotoxy(1,1); 
2E68:  MOVLW  01
2E6A:  MOVWF  xD4
2E6C:  MOVWF  xD5
2E6E:  CALL   09BC
....................          printf(lcd_putc,"   Ingrese Nueva    "); 
2E72:  MOVLW  D2
2E74:  MOVWF  FF6
2E76:  MOVLW  04
2E78:  MOVWF  FF7
2E7A:  CALL   0A7C
....................          lcd_gotoxy(1,2); 
2E7E:  MOVLW  01
2E80:  MOVWF  xD4
2E82:  MOVLW  02
2E84:  MOVWF  xD5
2E86:  CALL   09BC
....................          printf(lcd_putc,"     Contraseña     "); 
2E8A:  MOVLW  E8
2E8C:  MOVWF  FF6
2E8E:  MOVLW  04
2E90:  MOVWF  FF7
2E92:  CALL   0A7C
....................          lcd_gotoxy(1,3); 
2E96:  MOVLW  01
2E98:  MOVWF  xD4
2E9A:  MOVLW  03
2E9C:  MOVWF  xD5
2E9E:  CALL   09BC
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2EA2:  MOVLW  FE
2EA4:  MOVWF  FF6
2EA6:  MOVLW  04
2EA8:  MOVWF  FF7
2EAA:  MOVLW  0A
2EAC:  MOVWF  xC6
2EAE:  CALL   111C
2EB2:  MOVFF  35,C2
2EB6:  MOVLW  1F
2EB8:  MOVWF  xC3
2EBA:  CALL   1162
2EBE:  MOVFF  36,C2
2EC2:  MOVLW  1F
2EC4:  MOVWF  xC3
2EC6:  CALL   1162
2ECA:  MOVFF  37,C2
2ECE:  MOVLW  1F
2ED0:  MOVWF  xC3
2ED2:  CALL   1162
2ED6:  MOVFF  38,C2
2EDA:  MOVLW  1F
2EDC:  MOVWF  xC3
2EDE:  CALL   1162
2EE2:  MOVLW  20
2EE4:  MOVWF  xD3
2EE6:  CALL   0A1E
2EEA:  MOVLW  20
2EEC:  MOVWF  xD3
2EEE:  CALL   0A1E
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
2EF2:  MOVFF  1B,D4
2EF6:  MOVLW  04
2EF8:  MOVWF  xD5
2EFA:  CALL   09BC
....................          lcd_putc(t[2]); 
2EFE:  MOVFF  34,D3
2F02:  CALL   0A1E
....................           
....................          if(unidad>11&&unidad<14){ 
2F06:  MOVF   1B,W
2F08:  SUBLW  0B
2F0A:  BC    2F2A
2F0C:  MOVF   1B,W
2F0E:  SUBLW  0D
2F10:  BNC   2F2A
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2F12:  MOVLW  01
2F14:  SUBWF  1B,W
2F16:  MOVWF  xC2
2F18:  MOVWF  xD4
2F1A:  MOVLW  04
2F1C:  MOVWF  xD5
2F1E:  CALL   09BC
....................             lcd_putc(t[1]); 
2F22:  MOVFF  33,D3
2F26:  CALL   0A1E
....................          } 
....................           
....................          Cambio=OFF; 
2F2A:  BCF    17.5
.................... //      } 
....................        
....................       if(UP){//Si oprime hacia arriba 
2F2C:  BSF    F92.5
2F2E:  BTFSC  F80.5
2F30:  BRA    2F64
....................          delay_ms(20); 
2F32:  MOVLW  14
2F34:  MOVWF  xD9
2F36:  CALL   08B4
....................          if(UP){ 
2F3A:  BSF    F92.5
2F3C:  BTFSC  F80.5
2F3E:  BRA    2F62
....................             if(Flanco == 0) { 
2F40:  BTFSC  16.3
2F42:  BRA    2F62
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
2F44:  MOVLW  0B
2F46:  SUBWF  1B,W
2F48:  CLRF   03
2F4A:  ADDLW  35
2F4C:  MOVWF  FE9
2F4E:  MOVLW  00
2F50:  ADDWFC 03,W
2F52:  MOVWF  FEA
2F54:  INCF   FEF,F
2F56:  BSF    16.3
2F58:  MOVLW  1E
2F5A:  MOVWF  xD9
2F5C:  CALL   08B4
2F60:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2F62:  BRA    2F66
....................          Flanco = 0; 
2F64:  BCF    16.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
2F66:  BSF    F96.0
2F68:  BTFSC  F84.0
2F6A:  BRA    2F9E
....................          delay_ms(20); 
2F6C:  MOVLW  14
2F6E:  MOVWF  xD9
2F70:  CALL   08B4
....................          if(DOWN){ 
2F74:  BSF    F96.0
2F76:  BTFSC  F84.0
2F78:  BRA    2F9C
....................             if(Flanco2 == 0) { 
2F7A:  BTFSC  16.5
2F7C:  BRA    2F9C
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
2F7E:  MOVLW  0B
2F80:  SUBWF  1B,W
2F82:  CLRF   03
2F84:  ADDLW  35
2F86:  MOVWF  FE9
2F88:  MOVLW  00
2F8A:  ADDWFC 03,W
2F8C:  MOVWF  FEA
2F8E:  DECF   FEF,F
2F90:  BSF    16.5
2F92:  MOVLW  1E
2F94:  MOVWF  xD9
2F96:  CALL   08B4
2F9A:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2F9C:  BRA    2FA0
....................          Flanco2 = 0; 
2F9E:  BCF    16.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
2FA0:  BSF    F96.1
2FA2:  BTFSC  F84.1
2FA4:  BRA    2FC8
....................          if(RIGHT){ 
2FA6:  BSF    F96.1
2FA8:  BTFSC  F84.1
2FAA:  BRA    2FC6
....................             if(Flanco1 == 0) { 
2FAC:  BTFSC  16.4
2FAE:  BRA    2FC6
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2FB0:  BSF    16.4
2FB2:  INCF   1B,F
2FB4:  MOVLW  1E
2FB6:  MOVWF  xD9
2FB8:  CALL   08B4
2FBC:  MOVLW  0C
2FBE:  MOVWF  xD3
2FC0:  CALL   0A1E
2FC4:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2FC6:  BRA    2FCA
....................          Flanco1 = 0; 
2FC8:  BCF    16.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
2FCA:  BSF    F96.2
2FCC:  BTFSC  F84.2
2FCE:  BRA    2FFA
....................          delay_ms(150); 
2FD0:  MOVLW  96
2FD2:  MOVWF  xD9
2FD4:  CALL   08B4
....................          if(IZQU){ 
2FD8:  BSF    F96.2
2FDA:  BTFSC  F84.2
2FDC:  BRA    2FF8
....................             if(Flanco3 == 0){ 
2FDE:  BTFSC  16.6
2FE0:  BRA    2FF8
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2FE2:  BSF    16.6
2FE4:  DECF   1B,F
2FE6:  MOVLW  1E
2FE8:  MOVWF  xD9
2FEA:  CALL   08B4
2FEE:  MOVLW  0C
2FF0:  MOVWF  xD3
2FF2:  CALL   0A1E
2FF6:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2FF8:  BRA    2FFC
....................         Flanco3 = 0; 
2FFA:  BCF    16.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
2FFC:  MOVLW  0B
2FFE:  SUBWF  1B,W
3000:  CLRF   03
3002:  ADDLW  35
3004:  MOVWF  FE9
3006:  MOVLW  00
3008:  ADDWFC 03,W
300A:  MOVWF  FEA
300C:  BTFSC  FEF.7
300E:  BRA    3012
3010:  BRA    3026
....................          clave[unidad-11]=9; 
3012:  MOVLW  0B
3014:  SUBWF  1B,W
3016:  CLRF   03
3018:  ADDLW  35
301A:  MOVWF  FE9
301C:  MOVLW  00
301E:  ADDWFC 03,W
3020:  MOVWF  FEA
3022:  MOVLW  09
3024:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
3026:  MOVLW  0B
3028:  SUBWF  1B,W
302A:  CLRF   03
302C:  ADDLW  35
302E:  MOVWF  FE9
3030:  MOVLW  00
3032:  ADDWFC 03,W
3034:  MOVWF  FEA
3036:  BTFSC  FEF.7
3038:  BRA    3052
303A:  MOVF   FEF,W
303C:  SUBLW  09
303E:  BC    3052
....................          clave[unidad-11]=0; 
3040:  MOVLW  0B
3042:  SUBWF  1B,W
3044:  CLRF   03
3046:  ADDLW  35
3048:  MOVWF  FE9
304A:  MOVLW  00
304C:  ADDWFC 03,W
304E:  MOVWF  FEA
3050:  CLRF   FEF
....................         
....................       if(unidad<11){             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
3052:  MOVF   1B,W
3054:  SUBLW  0A
3056:  BNC   3076
....................          unidad=11; 
3058:  MOVLW  0B
305A:  MOVWF  1B
....................          Menu=1; 
305C:  MOVLW  01
305E:  MOVWF  18
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
3060:  CLRF   35
3062:  CLRF   36
3064:  CLRF   37
3066:  CLRF   38
3068:  BSF    17.5
....................          unidad=11;printf(lcd_putc,"\f"); 
306A:  MOVLW  0B
306C:  MOVWF  1B
306E:  MOVLW  0C
3070:  MOVWF  xD3
3072:  CALL   0A1E
....................       } 
....................         
....................       if(unidad>14){// Si ya ingreso la nueva contraseña.      
3076:  MOVF   1B,W
3078:  SUBLW  0E
307A:  BTFSC  FD8.0
307C:  BRA    31EC
....................          lcd_gotoxy(1,1); 
307E:  MOVLW  01
3080:  MOVWF  xD4
3082:  MOVWF  xD5
3084:  CALL   09BC
....................          printf(lcd_putc,"                    "); 
3088:  MOVLW  14
308A:  MOVWF  FF6
308C:  MOVLW  05
308E:  MOVWF  FF7
3090:  CALL   0A7C
....................          lcd_gotoxy(1,2); 
3094:  MOVLW  01
3096:  MOVWF  xD4
3098:  MOVLW  02
309A:  MOVWF  xD5
309C:  CALL   09BC
....................          printf(lcd_putc,"     Contraseña     "); 
30A0:  MOVLW  2A
30A2:  MOVWF  FF6
30A4:  MOVLW  05
30A6:  MOVWF  FF7
30A8:  CALL   0A7C
....................          lcd_gotoxy(1,3); 
30AC:  MOVLW  01
30AE:  MOVWF  xD4
30B0:  MOVLW  03
30B2:  MOVWF  xD5
30B4:  CALL   09BC
....................          printf(lcd_putc,"     Almacenada     "); 
30B8:  MOVLW  40
30BA:  MOVWF  FF6
30BC:  MOVLW  05
30BE:  MOVWF  FF7
30C0:  CALL   0A7C
....................          lcd_gotoxy(1,4); 
30C4:  MOVLW  01
30C6:  MOVWF  xD4
30C8:  MOVLW  04
30CA:  MOVWF  xD5
30CC:  CALL   09BC
....................          printf(lcd_putc,"                    "); 
30D0:  MOVLW  56
30D2:  MOVWF  FF6
30D4:  MOVLW  05
30D6:  MOVWF  FF7
30D8:  CALL   0A7C
....................          write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
30DC:  CLRF   FA9
30DE:  MOVFF  35,FA8
30E2:  BCF    FA6.6
30E4:  BCF    FA6.7
30E6:  BSF    FA6.2
30E8:  MOVF   FF2,W
30EA:  MOVWF  00
30EC:  BCF    FF2.7
30EE:  MOVLB  F
30F0:  MOVLW  55
30F2:  MOVWF  FA7
30F4:  MOVLW  AA
30F6:  MOVWF  FA7
30F8:  BSF    FA6.1
30FA:  BTFSC  FA6.1
30FC:  BRA    30FA
30FE:  BCF    FA6.2
3100:  MOVF   00,W
3102:  IORWF  FF2,F
3104:  MOVLW  14
3106:  MOVLB  0
3108:  MOVWF  xD9
310A:  CALL   08B4
310E:  MOVLW  01
3110:  MOVWF  FA9
3112:  MOVFF  36,FA8
3116:  BCF    FA6.6
3118:  BCF    FA6.7
311A:  BSF    FA6.2
311C:  MOVF   FF2,W
311E:  MOVWF  00
3120:  BCF    FF2.7
3122:  MOVLB  F
3124:  MOVLW  55
3126:  MOVWF  FA7
3128:  MOVLW  AA
312A:  MOVWF  FA7
312C:  BSF    FA6.1
312E:  BTFSC  FA6.1
3130:  BRA    312E
3132:  BCF    FA6.2
3134:  MOVF   00,W
3136:  IORWF  FF2,F
3138:  MOVLW  14
313A:  MOVLB  0
313C:  MOVWF  xD9
313E:  CALL   08B4
....................          write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
3142:  MOVLW  02
3144:  MOVWF  FA9
3146:  MOVFF  37,FA8
314A:  BCF    FA6.6
314C:  BCF    FA6.7
314E:  BSF    FA6.2
3150:  MOVF   FF2,W
3152:  MOVWF  00
3154:  BCF    FF2.7
3156:  MOVLB  F
3158:  MOVLW  55
315A:  MOVWF  FA7
315C:  MOVLW  AA
315E:  MOVWF  FA7
3160:  BSF    FA6.1
3162:  BTFSC  FA6.1
3164:  BRA    3162
3166:  BCF    FA6.2
3168:  MOVF   00,W
316A:  IORWF  FF2,F
316C:  MOVLW  14
316E:  MOVLB  0
3170:  MOVWF  xD9
3172:  CALL   08B4
3176:  MOVLW  03
3178:  MOVWF  FA9
317A:  MOVFF  38,FA8
317E:  BCF    FA6.6
3180:  BCF    FA6.7
3182:  BSF    FA6.2
3184:  MOVF   FF2,W
3186:  MOVWF  00
3188:  BCF    FF2.7
318A:  MOVLB  F
318C:  MOVLW  55
318E:  MOVWF  FA7
3190:  MOVLW  AA
3192:  MOVWF  FA7
3194:  BSF    FA6.1
3196:  BTFSC  FA6.1
3198:  BRA    3196
319A:  BCF    FA6.2
319C:  MOVF   00,W
319E:  IORWF  FF2,F
31A0:  MOVLW  14
31A2:  MOVLB  0
31A4:  MOVWF  xD9
31A6:  CALL   08B4
....................          delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
31AA:  MOVLW  02
31AC:  MOVWF  xC2
31AE:  MOVLW  FA
31B0:  MOVWF  xD9
31B2:  CALL   08B4
31B6:  DECFSZ xC2,F
31B8:  BRA    31AE
31BA:  MOVLW  01
31BC:  MOVWF  18
31BE:  CLRF   31
31C0:  MOVLW  02
31C2:  MOVWF  1C
31C4:  MOVWF  1E
....................          contrasena[0]=clave[0];contrasena[1]=clave[1];contrasena[2]=clave[2];contrasena[3]=clave[3]; 
31C6:  MOVFF  35,39
31CA:  MOVFF  36,3A
31CE:  MOVFF  37,3B
31D2:  MOVFF  38,3C
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
31D6:  CLRF   35
31D8:  CLRF   36
31DA:  CLRF   37
31DC:  CLRF   38
31DE:  BSF    17.5
....................          unidad=11;printf(lcd_putc,"\f");          
31E0:  MOVLW  0B
31E2:  MOVWF  1B
31E4:  MOVLW  0C
31E6:  MOVWF  xD3
31E8:  CALL   0A1E
....................       } 
....................    }       
.................... //----------------Fin-Menu6.1--------------------------------------------------------------- 
....................     
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu de tiempo de trabajo de Luz UV 
31EC:  MOVF   18,W
31EE:  SUBLW  04
31F0:  BTFSS  FD8.2
31F2:  BRA    3406
....................    EliminaRuido(); 
31F4:  CALL   0004
.................... //   if(Cambio){ 
....................       lcd_gotoxy(1,1); 
31F8:  MOVLW  01
31FA:  MOVWF  xD4
31FC:  MOVWF  xD5
31FE:  CALL   09BC
....................       printf(lcd_putc,"  Duracion Actual   "); 
3202:  MOVLW  6C
3204:  MOVWF  FF6
3206:  MOVLW  05
3208:  MOVWF  FF7
320A:  CALL   0A7C
....................       lcd_gotoxy(1,2); 
320E:  MOVLW  01
3210:  MOVWF  xD4
3212:  MOVLW  02
3214:  MOVWF  xD5
3216:  CALL   09BC
....................       printf(lcd_putc,"   Tiempo= %05Lu   ",horas); 
321A:  MOVLW  82
321C:  MOVWF  FF6
321E:  MOVLW  05
3220:  MOVWF  FF7
3222:  MOVLW  0B
3224:  MOVWF  xC6
3226:  CALL   111C
322A:  MOVLW  08
322C:  MOVWF  FE9
322E:  MOVFF  41,C3
3232:  MOVFF  40,C2
3236:  GOTO   136A
323A:  MOVLW  20
323C:  MOVWF  xD3
323E:  CALL   0A1E
3242:  MOVLW  20
3244:  MOVWF  xD3
3246:  CALL   0A1E
324A:  MOVLW  20
324C:  MOVWF  xD3
324E:  CALL   0A1E
....................       lcd_gotoxy(1,4); 
3252:  MOVLW  01
3254:  MOVWF  xD4
3256:  MOVLW  04
3258:  MOVWF  xD5
325A:  CALL   09BC
....................       printf(lcd_putc," RESET= Oprima ^ y > "); 
325E:  MOVLW  96
3260:  MOVWF  FF6
3262:  MOVLW  05
3264:  MOVWF  FF7
3266:  CALL   0A7C
....................        
....................       Cambio=OFF; 
326A:  BCF    17.5
.................... //   } 
....................     
....................       if(UP && RIGHT){//Si oprime hacia arriba 
326C:  BSF    F92.5
326E:  BTFSC  F80.5
3270:  BRA    33C2
3272:  BSF    F96.1
3274:  BTFSC  F84.1
3276:  BRA    33C2
....................          delay_ms(20); 
3278:  MOVLW  14
327A:  MOVWF  xD9
327C:  CALL   08B4
....................          if(UP && RIGHT){ 
3280:  BSF    F92.5
3282:  BTFSC  F80.5
3284:  BRA    33C2
3286:  BSF    F96.1
3288:  BTFSC  F84.1
328A:  BRA    33C2
....................             delay_ms(200); 
328C:  MOVLW  C8
328E:  MOVWF  xD9
3290:  CALL   08B4
....................             printf(lcd_putc,"\f"); 
3294:  MOVLW  0C
3296:  MOVWF  xD3
3298:  CALL   0A1E
....................             lcd_gotoxy(1,2); 
329C:  MOVLW  01
329E:  MOVWF  xD4
32A0:  MOVLW  02
32A2:  MOVWF  xD5
32A4:  CALL   09BC
....................             printf(lcd_putc," Reset de tiempo "); 
32A8:  MOVLW  AC
32AA:  MOVWF  FF6
32AC:  MOVLW  05
32AE:  MOVWF  FF7
32B0:  CALL   0A7C
....................             lcd_gotoxy(1,3); 
32B4:  MOVLW  01
32B6:  MOVWF  xD4
32B8:  MOVLW  03
32BA:  MOVWF  xD5
32BC:  CALL   09BC
....................             printf(lcd_putc,"     Exitoso     "); 
32C0:  MOVLW  BE
32C2:  MOVWF  FF6
32C4:  MOVLW  05
32C6:  MOVWF  FF7
32C8:  CALL   0A7C
....................             write_eeprom(7,0); 
32CC:  MOVLW  07
32CE:  MOVWF  FA9
32D0:  CLRF   FA8
32D2:  BCF    FA6.6
32D4:  BCF    FA6.7
32D6:  BSF    FA6.2
32D8:  MOVF   FF2,W
32DA:  MOVWF  00
32DC:  BCF    FF2.7
32DE:  MOVLB  F
32E0:  MOVLW  55
32E2:  MOVWF  FA7
32E4:  MOVLW  AA
32E6:  MOVWF  FA7
32E8:  BSF    FA6.1
32EA:  BTFSC  FA6.1
32EC:  BRA    32EA
32EE:  BCF    FA6.2
32F0:  MOVF   00,W
32F2:  IORWF  FF2,F
....................             delay_ms(20); 
32F4:  MOVLW  14
32F6:  MOVLB  0
32F8:  MOVWF  xD9
32FA:  CALL   08B4
....................             write_eeprom(8,0); 
32FE:  MOVLW  08
3300:  MOVWF  FA9
3302:  CLRF   FA8
3304:  BCF    FA6.6
3306:  BCF    FA6.7
3308:  BSF    FA6.2
330A:  MOVF   FF2,W
330C:  MOVWF  00
330E:  BCF    FF2.7
3310:  MOVLB  F
3312:  MOVLW  55
3314:  MOVWF  FA7
3316:  MOVLW  AA
3318:  MOVWF  FA7
331A:  BSF    FA6.1
331C:  BTFSC  FA6.1
331E:  BRA    331C
3320:  BCF    FA6.2
3322:  MOVF   00,W
3324:  IORWF  FF2,F
....................             delay_ms(20); 
3326:  MOVLW  14
3328:  MOVLB  0
332A:  MOVWF  xD9
332C:  CALL   08B4
....................             write_eeprom(9,0); 
3330:  MOVLW  09
3332:  MOVWF  FA9
3334:  CLRF   FA8
3336:  BCF    FA6.6
3338:  BCF    FA6.7
333A:  BSF    FA6.2
333C:  MOVF   FF2,W
333E:  MOVWF  00
3340:  BCF    FF2.7
3342:  MOVLB  F
3344:  MOVLW  55
3346:  MOVWF  FA7
3348:  MOVLW  AA
334A:  MOVWF  FA7
334C:  BSF    FA6.1
334E:  BTFSC  FA6.1
3350:  BRA    334E
3352:  BCF    FA6.2
3354:  MOVF   00,W
3356:  IORWF  FF2,F
....................             delay_ms(20); 
3358:  MOVLW  14
335A:  MOVLB  0
335C:  MOVWF  xD9
335E:  CALL   08B4
....................             write_eeprom(10,0); 
3362:  MOVLW  0A
3364:  MOVWF  FA9
3366:  CLRF   FA8
3368:  BCF    FA6.6
336A:  BCF    FA6.7
336C:  BSF    FA6.2
336E:  MOVF   FF2,W
3370:  MOVWF  00
3372:  BCF    FF2.7
3374:  MOVLB  F
3376:  MOVLW  55
3378:  MOVWF  FA7
337A:  MOVLW  AA
337C:  MOVWF  FA7
337E:  BSF    FA6.1
3380:  BTFSC  FA6.1
3382:  BRA    3380
3384:  BCF    FA6.2
3386:  MOVF   00,W
3388:  IORWF  FF2,F
....................             delay_ms(700); 
338A:  MOVLW  04
338C:  MOVLB  0
338E:  MOVWF  xC2
3390:  MOVLW  AF
3392:  MOVWF  xD9
3394:  CALL   08B4
3398:  DECFSZ xC2,F
339A:  BRA    3390
....................             segundos=0;minutos=0;horas=0; 
339C:  CLRF   21
339E:  CLRF   22
33A0:  CLRF   41
33A2:  CLRF   40
....................             delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
33A4:  MOVLW  1E
33A6:  MOVWF  xD9
33A8:  CALL   08B4
33AC:  MOVLW  01
33AE:  MOVWF  18
33B0:  CLRF   31
33B2:  MOVLW  02
33B4:  MOVWF  1C
33B6:  MOVWF  1E
33B8:  MOVLW  0C
33BA:  MOVWF  xD3
33BC:  CALL   0A1E
....................             Cambio=ON; 
33C0:  BSF    17.5
....................          } 
....................       } 
....................              
....................       if(IZQU){// Si oprime Izquierda 
33C2:  BSF    F96.2
33C4:  BTFSC  F84.2
33C6:  BRA    3404
....................          delay_ms(20); 
33C8:  MOVLW  14
33CA:  MOVWF  xD9
33CC:  CALL   08B4
....................          if(IZQU){ 
33D0:  BSF    F96.2
33D2:  BTFSC  F84.2
33D4:  BRA    3402
....................             if(Flanco3 == 0){ 
33D6:  BTFSC  16.6
33D8:  BRA    3402
....................                Flanco3 = 1;delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f");Cambio=ON; 
33DA:  BSF    16.6
33DC:  MOVLW  02
33DE:  MOVWF  xC2
33E0:  MOVLW  FA
33E2:  MOVWF  xD9
33E4:  CALL   08B4
33E8:  DECFSZ xC2,F
33EA:  BRA    33E0
33EC:  MOVLW  01
33EE:  MOVWF  18
33F0:  CLRF   31
33F2:  MOVLW  02
33F4:  MOVWF  1C
33F6:  MOVWF  1E
33F8:  MOVLW  0C
33FA:  MOVWF  xD3
33FC:  CALL   0A1E
3400:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
3402:  BRA    3406
....................          Flanco3 = 0; 
3404:  BCF    16.6
....................       } 
....................    } 
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5){ // Menu de Punto Cero 
3406:  MOVF   18,W
3408:  SUBLW  05
340A:  BTFSS  FD8.2
340C:  BRA    3662
....................       EliminaRuido(); 
340E:  CALL   0004
.................... //      if(Cambio){ 
....................          lcd_gotoxy(1,1); 
3412:  MOVLW  01
3414:  MOVWF  xD4
3416:  MOVWF  xD5
3418:  CALL   09BC
....................          printf(lcd_putc,"  Zero Point Config "); 
341C:  MOVLW  D0
341E:  MOVWF  FF6
3420:  MOVLW  05
3422:  MOVWF  FF7
3424:  CALL   0A7C
....................          lcd_gotoxy(1,2); 
3428:  MOVLW  01
342A:  MOVWF  xD4
342C:  MOVLW  02
342E:  MOVWF  xD5
3430:  CALL   09BC
....................          printf(lcd_putc,"Presion= %3.2f inH2O ",(Leer_Sensor_Presion(5)*4.02)); 
3434:  MOVLW  05
3436:  MOVWF  xC2
3438:  CALL   183A
343C:  MOVFF  00,C2
3440:  MOVFF  01,C3
3444:  MOVFF  02,C4
3448:  MOVFF  03,C5
344C:  MOVFF  03,D9
3450:  MOVFF  02,D8
3454:  MOVFF  01,D7
3458:  MOVFF  00,D6
345C:  MOVLW  D7
345E:  MOVWF  xDD
3460:  MOVLW  A3
3462:  MOVWF  xDC
3464:  CLRF   xDB
3466:  MOVLW  81
3468:  MOVWF  xDA
346A:  CALL   19D0
346E:  MOVFF  00,C2
3472:  MOVFF  01,C3
3476:  MOVFF  02,C4
347A:  MOVFF  03,C5
347E:  MOVLW  E6
3480:  MOVWF  FF6
3482:  MOVLW  05
3484:  MOVWF  FF7
3486:  MOVLW  09
3488:  MOVWF  xC6
348A:  CALL   111C
348E:  MOVLW  02
3490:  MOVWF  FE9
3492:  MOVFF  C5,C9
3496:  MOVFF  C4,C8
349A:  MOVFF  C3,C7
349E:  MOVFF  C2,C6
34A2:  MOVWF  xCA
34A4:  CALL   1B7C
34A8:  MOVLW  F4
34AA:  MOVWF  FF6
34AC:  MOVLW  05
34AE:  MOVWF  FF7
34B0:  MOVLW  07
34B2:  MOVWF  xC6
34B4:  CALL   111C
....................          lcd_gotoxy(1,3); 
34B8:  MOVLW  01
34BA:  MOVWF  xD4
34BC:  MOVLW  03
34BE:  MOVWF  xD5
34C0:  CALL   09BC
....................          printf(lcd_putc,"    ADC=%2.0f",sensores(0)); 
34C4:  CLRF   xC7
34C6:  CALL   1420
34CA:  MOVFF  00,C2
34CE:  MOVFF  01,C3
34D2:  MOVFF  02,C4
34D6:  MOVFF  03,C5
34DA:  MOVLW  FC
34DC:  MOVWF  FF6
34DE:  MOVLW  05
34E0:  MOVWF  FF7
34E2:  MOVLW  08
34E4:  MOVWF  xC6
34E6:  CALL   111C
34EA:  MOVLW  01
34EC:  MOVWF  FE9
34EE:  MOVFF  C5,C9
34F2:  MOVFF  C4,C8
34F6:  MOVFF  C3,C7
34FA:  MOVFF  C2,C6
34FE:  CLRF   xCA
3500:  CALL   1B7C
....................          lcd_gotoxy(1,4); 
3504:  MOVLW  01
3506:  MOVWF  xD4
3508:  MOVLW  04
350A:  MOVWF  xD5
350C:  CALL   09BC
....................          printf(lcd_putc,"    ZF=%2.0f",G); 
3510:  MOVLW  0A
3512:  MOVWF  FF6
3514:  MOVLW  06
3516:  MOVWF  FF7
3518:  MOVLW  07
351A:  MOVWF  xC6
351C:  CALL   111C
3520:  MOVLW  01
3522:  MOVWF  FE9
3524:  MOVFF  A7,C9
3528:  MOVFF  A6,C8
352C:  MOVFF  A5,C7
3530:  MOVFF  A4,C6
3534:  CLRF   xCA
3536:  CALL   1B7C
....................           
....................          Cambio=OFF; 
353A:  BCF    17.5
.................... //      } 
....................      
....................       if(RIGHT){// Si oprime derecha 
353C:  BSF    F96.1
353E:  BTFSC  F84.1
3540:  BRA    3622
....................          delay_ms(20); 
3542:  MOVLW  14
3544:  MOVWF  xD9
3546:  CALL   08B4
....................          if(RIGHT){ 
354A:  BSF    F96.1
354C:  BTFSC  F84.1
354E:  BRA    3620
....................             if(Flanco1 == 0){ 
3550:  BTFSC  16.4
3552:  BRA    3620
....................                /*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
3554:  MOVLW  01
3556:  MOVWF  18
3558:  CLRF   31
355A:  MOVLW  02
355C:  MOVWF  1C
355E:  MOVWF  1E
3560:  MOVLW  0B
3562:  MOVWF  1B
3564:  MOVLW  02
3566:  MOVWF  xC2
3568:  MOVLW  FA
356A:  MOVWF  xD9
356C:  CALL   08B4
3570:  DECFSZ xC2,F
3572:  BRA    3568
3574:  MOVLW  0C
3576:  MOVWF  xD3
3578:  CALL   0A1E
....................                G=sensores(0); 
357C:  CLRF   xC7
357E:  CALL   1420
3582:  MOVFF  03,A7
3586:  MOVFF  02,A6
358A:  MOVFF  01,A5
358E:  MOVFF  00,A4
....................                G16=(int16)G; 
3592:  MOVFF  A7,D9
3596:  MOVFF  A6,D8
359A:  MOVFF  A5,D7
359E:  MOVFF  A4,D6
35A2:  CALL   1D02
35A6:  MOVFF  02,43
35AA:  MOVFF  01,42
....................                G_l=G16; G_h=(G16>>8); 
35AE:  MOVFF  42,25
35B2:  MOVFF  43,26
....................                 
....................                write_eeprom(11,G_l); 
35B6:  MOVLW  0B
35B8:  MOVWF  FA9
35BA:  MOVFF  25,FA8
35BE:  BCF    FA6.6
35C0:  BCF    FA6.7
35C2:  BSF    FA6.2
35C4:  MOVF   FF2,W
35C6:  MOVWF  00
35C8:  BCF    FF2.7
35CA:  MOVLB  F
35CC:  MOVLW  55
35CE:  MOVWF  FA7
35D0:  MOVLW  AA
35D2:  MOVWF  FA7
35D4:  BSF    FA6.1
35D6:  BTFSC  FA6.1
35D8:  BRA    35D6
35DA:  BCF    FA6.2
35DC:  MOVF   00,W
35DE:  IORWF  FF2,F
....................                delay_ms(20); 
35E0:  MOVLW  14
35E2:  MOVLB  0
35E4:  MOVWF  xD9
35E6:  CALL   08B4
....................                write_eeprom(12,G_h);//Guardar valor de Setpoint en eeprom 
35EA:  MOVLW  0C
35EC:  MOVWF  FA9
35EE:  MOVFF  26,FA8
35F2:  BCF    FA6.6
35F4:  BCF    FA6.7
35F6:  BSF    FA6.2
35F8:  MOVF   FF2,W
35FA:  MOVWF  00
35FC:  BCF    FF2.7
35FE:  MOVLB  F
3600:  MOVLW  55
3602:  MOVWF  FA7
3604:  MOVLW  AA
3606:  MOVWF  FA7
3608:  BSF    FA6.1
360A:  BTFSC  FA6.1
360C:  BRA    360A
360E:  BCF    FA6.2
3610:  MOVF   00,W
3612:  IORWF  FF2,F
....................                delay_ms(20); 
3614:  MOVLW  14
3616:  MOVLB  0
3618:  MOVWF  xD9
361A:  CALL   08B4
....................                Cambio=ON; 
361E:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
3620:  BRA    3624
....................          Flanco1 = 0; 
3622:  BCF    16.4
....................       } 
....................              
....................       if(IZQU){// Si oprime Izquierda 
3624:  BSF    F96.2
3626:  BTFSC  F84.2
3628:  BRA    3660
....................          delay_ms(20); 
362A:  MOVLW  14
362C:  MOVWF  xD9
362E:  CALL   08B4
....................          if(IZQU){ 
3632:  BSF    F96.2
3634:  BTFSC  F84.2
3636:  BRA    365E
....................             if(Flanco3 == 0){ 
3638:  BTFSC  16.6
363A:  BRA    365E
....................                /*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f"); 
363C:  MOVLW  01
363E:  MOVWF  18
3640:  CLRF   31
3642:  MOVLW  02
3644:  MOVWF  1C
3646:  MOVWF  1E
3648:  MOVLW  0B
364A:  MOVWF  1B
364C:  MOVLW  1E
364E:  MOVWF  xD9
3650:  CALL   08B4
3654:  MOVLW  0C
3656:  MOVWF  xD3
3658:  CALL   0A1E
....................                Cambio=ON; 
365C:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
365E:  BRA    3662
....................          Flanco3 = 0; 
3660:  BCF    16.6
....................       } 
....................    } 
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6){ // Menu de seleccion de estado de Alarma 
3662:  MOVF   18,W
3664:  SUBLW  06
3666:  BTFSS  FD8.2
3668:  BRA    3790
....................    estadoalarma=!estadoalarma;Flanco1 = 1;Menu=1; paso=0; 
366A:  BTG    17.4
366C:  BSF    16.4
366E:  MOVLW  01
3670:  MOVWF  18
3672:  CLRF   31
....................                        
....................             if(estadoalarma==1) 
3674:  BTFSS  17.4
3676:  BRA    36D8
....................             {estadoalarma=1; 
3678:  BSF    17.4
....................                lcd_gotoxy(1,1); 
367A:  MOVLW  01
367C:  MOVWF  xD4
367E:  MOVWF  xD5
3680:  CALL   09BC
....................                printf(lcd_putc,"                    "); 
3684:  MOVLW  18
3686:  MOVWF  FF6
3688:  MOVLW  06
368A:  MOVWF  FF7
368C:  CALL   0A7C
....................                lcd_gotoxy(1,2); 
3690:  MOVLW  01
3692:  MOVWF  xD4
3694:  MOVLW  02
3696:  MOVWF  xD5
3698:  CALL   09BC
....................                printf(lcd_putc,"        Activo      "); 
369C:  MOVLW  2E
369E:  MOVWF  FF6
36A0:  MOVLW  06
36A2:  MOVWF  FF7
36A4:  CALL   0A7C
....................                lcd_gotoxy(1,3); 
36A8:  MOVLW  01
36AA:  MOVWF  xD4
36AC:  MOVLW  03
36AE:  MOVWF  xD5
36B0:  CALL   09BC
....................                printf(lcd_putc,"        Alarma      "); 
36B4:  MOVLW  44
36B6:  MOVWF  FF6
36B8:  MOVLW  06
36BA:  MOVWF  FF7
36BC:  CALL   0A7C
....................                lcd_gotoxy(1,4); 
36C0:  MOVLW  01
36C2:  MOVWF  xD4
36C4:  MOVLW  04
36C6:  MOVWF  xD5
36C8:  CALL   09BC
....................                printf(lcd_putc,"                    ");} 
36CC:  MOVLW  5A
36CE:  MOVWF  FF6
36D0:  MOVLW  06
36D2:  MOVWF  FF7
36D4:  CALL   0A7C
....................                 
....................             if(estadoalarma==0) 
36D8:  BTFSC  17.4
36DA:  BRA    373C
....................             {estadoalarma=0; 
36DC:  BCF    17.4
....................                lcd_gotoxy(1,1); 
36DE:  MOVLW  01
36E0:  MOVWF  xD4
36E2:  MOVWF  xD5
36E4:  CALL   09BC
....................                printf(lcd_putc,"                    "); 
36E8:  MOVLW  70
36EA:  MOVWF  FF6
36EC:  MOVLW  06
36EE:  MOVWF  FF7
36F0:  CALL   0A7C
....................                lcd_gotoxy(1,2); 
36F4:  MOVLW  01
36F6:  MOVWF  xD4
36F8:  MOVLW  02
36FA:  MOVWF  xD5
36FC:  CALL   09BC
....................                printf(lcd_putc,"      Desactivo     "); 
3700:  MOVLW  86
3702:  MOVWF  FF6
3704:  MOVLW  06
3706:  MOVWF  FF7
3708:  CALL   0A7C
....................                lcd_gotoxy(1,3); 
370C:  MOVLW  01
370E:  MOVWF  xD4
3710:  MOVLW  03
3712:  MOVWF  xD5
3714:  CALL   09BC
....................                printf(lcd_putc,"       Alarma       "); 
3718:  MOVLW  9C
371A:  MOVWF  FF6
371C:  MOVLW  06
371E:  MOVWF  FF7
3720:  CALL   0A7C
....................                lcd_gotoxy(1,4); 
3724:  MOVLW  01
3726:  MOVWF  xD4
3728:  MOVLW  04
372A:  MOVWF  xD5
372C:  CALL   09BC
....................                printf(lcd_putc,"                    ");} 
3730:  MOVLW  B2
3732:  MOVWF  FF6
3734:  MOVLW  06
3736:  MOVWF  FF7
3738:  CALL   0A7C
....................               
....................             write_eeprom(4,estadoalarma);delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
373C:  MOVLW  00
373E:  BTFSC  17.4
3740:  MOVLW  01
3742:  MOVWF  xC2
3744:  MOVLW  04
3746:  MOVWF  FA9
3748:  MOVFF  C2,FA8
374C:  BCF    FA6.6
374E:  BCF    FA6.7
3750:  BSF    FA6.2
3752:  MOVF   FF2,W
3754:  MOVWF  00
3756:  BCF    FF2.7
3758:  MOVLB  F
375A:  MOVLW  55
375C:  MOVWF  FA7
375E:  MOVLW  AA
3760:  MOVWF  FA7
3762:  BSF    FA6.1
3764:  BTFSC  FA6.1
3766:  BRA    3764
3768:  BCF    FA6.2
376A:  MOVF   00,W
376C:  IORWF  FF2,F
376E:  MOVLW  04
3770:  MOVLB  0
3772:  MOVWF  xC2
3774:  MOVLW  FA
3776:  MOVWF  xD9
3778:  CALL   08B4
377C:  DECFSZ xC2,F
377E:  BRA    3774
3780:  MOVLW  02
3782:  MOVWF  1C
3784:  MOVWF  1E
3786:  MOVLW  0C
3788:  MOVWF  xD3
378A:  CALL   0A1E
....................             Cambio=ON; 
378E:  BSF    17.5
....................    }       
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu7--------------------------------------------------------------- 
....................    if(Menu == 7){ // Menu de seleccion de Velocidad 
3790:  MOVF   18,W
3792:  SUBLW  07
3794:  BTFSS  FD8.2
3796:  BRA    3930
....................       if(VelMotor>6)VelMotor=6; 
3798:  MOVF   xB8,W
379A:  SUBLW  06
379C:  BC    37A2
379E:  MOVLW  06
37A0:  MOVWF  xB8
....................       if(VelMotor<1)VelMotor=1; 
37A2:  MOVF   xB8,F
37A4:  BNZ   37AA
37A6:  MOVLW  01
37A8:  MOVWF  xB8
....................        
....................       lcd_gotoxy(1,1); 
37AA:  MOVLW  01
37AC:  MOVWF  xD4
37AE:  MOVWF  xD5
37B0:  CALL   09BC
....................       printf(lcd_putc,"Seleccione Velocidad"); 
37B4:  MOVLW  C8
37B6:  MOVWF  FF6
37B8:  MOVLW  06
37BA:  MOVWF  FF7
37BC:  CALL   0A7C
....................       lcd_gotoxy(1,2); 
37C0:  MOVLW  01
37C2:  MOVWF  xD4
37C4:  MOVLW  02
37C6:  MOVWF  xD5
37C8:  CALL   09BC
....................       printf(lcd_putc,"   del Ventilador   "); 
37CC:  MOVLW  DE
37CE:  MOVWF  FF6
37D0:  MOVLW  06
37D2:  MOVWF  FF7
37D4:  CALL   0A7C
....................       lcd_gotoxy(1,3); 
37D8:  MOVLW  01
37DA:  MOVWF  xD4
37DC:  MOVLW  03
37DE:  MOVWF  xD5
37E0:  CALL   09BC
....................       printf(lcd_putc,"     Vel: %u       ",VelMotor); 
37E4:  MOVLW  F4
37E6:  MOVWF  FF6
37E8:  MOVLW  06
37EA:  MOVWF  FF7
37EC:  MOVLW  0A
37EE:  MOVWF  xC6
37F0:  CALL   111C
37F4:  MOVFF  B8,C2
37F8:  MOVLW  1B
37FA:  MOVWF  xC3
37FC:  CALL   12FE
3800:  MOVLW  00
3802:  MOVWF  FF6
3804:  MOVLW  07
3806:  MOVWF  FF7
3808:  MOVLW  07
380A:  MOVWF  xC6
380C:  CALL   111C
....................       lcd_gotoxy(1,4); 
3810:  MOVLW  01
3812:  MOVWF  xD4
3814:  MOVLW  04
3816:  MOVWF  xD5
3818:  CALL   09BC
....................       printf(lcd_putc,"                    ");       
381C:  MOVLW  08
381E:  MOVWF  FF6
3820:  MOVLW  07
3822:  MOVWF  FF7
3824:  CALL   0A7C
....................        
....................       if(UP && VelMotor<6)//Si oprime hacia arriba 
3828:  BSF    F92.5
382A:  BTFSC  F80.5
382C:  BRA    383E
382E:  MOVF   xB8,W
3830:  SUBLW  05
3832:  BNC   383E
....................       {   
....................          delay_ms(100);VelMotor++; 
3834:  MOVLW  64
3836:  MOVWF  xD9
3838:  CALL   08B4
383C:  INCF   xB8,F
....................       } 
....................              
....................       if(DOWN && VelMotor>0)//Si oprime hacia abajo 
383E:  BSF    F96.0
3840:  BTFSC  F84.0
3842:  BRA    3852
3844:  MOVF   xB8,F
3846:  BZ    3852
....................       {   
....................          delay_ms(100);VelMotor--; 
3848:  MOVLW  64
384A:  MOVWF  xD9
384C:  CALL   08B4
3850:  DECF   xB8,F
....................       } 
....................              
....................       if(RIGHT)//Si oprime SET 
3852:  BSF    F96.1
3854:  BTFSC  F84.1
3856:  BRA    3860
....................       {            
....................          VelocidadMotor(VelMotor); 
3858:  MOVFF  B8,C2
385C:  CALL   0830
....................       }  
....................              
....................       if(IZQU)//Si oprime boton de Toma. 
3860:  BSF    F96.2
3862:  BTFSC  F84.2
3864:  BRA    3930
....................       {                   
....................          delay_ms(100);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
3866:  MOVLW  64
3868:  MOVWF  xD9
386A:  CALL   08B4
386E:  MOVLW  02
3870:  MOVWF  1C
3872:  MOVWF  1E
3874:  MOVLW  0C
3876:  MOVWF  xD3
3878:  CALL   0A1E
....................          write_eeprom(13,VelMotor);//Guardar valor de Setpoint en eeprom 
387C:  MOVLW  0D
387E:  MOVWF  FA9
3880:  MOVFF  B8,FA8
3884:  BCF    FA6.6
3886:  BCF    FA6.7
3888:  BSF    FA6.2
388A:  MOVF   FF2,W
388C:  MOVWF  00
388E:  BCF    FF2.7
3890:  MOVLB  F
3892:  MOVLW  55
3894:  MOVWF  FA7
3896:  MOVLW  AA
3898:  MOVWF  FA7
389A:  BSF    FA6.1
389C:  BTFSC  FA6.1
389E:  BRA    389C
38A0:  BCF    FA6.2
38A2:  MOVF   00,W
38A4:  IORWF  FF2,F
....................          delay_ms(20); 
38A6:  MOVLW  14
38A8:  MOVLB  0
38AA:  MOVWF  xD9
38AC:  CALL   08B4
....................          lcd_gotoxy(1,1); 
38B0:  MOVLW  01
38B2:  MOVWF  xD4
38B4:  MOVWF  xD5
38B6:  CALL   09BC
....................          printf(lcd_putc,"                    "); 
38BA:  MOVLW  1E
38BC:  MOVWF  FF6
38BE:  MOVLW  07
38C0:  MOVWF  FF7
38C2:  CALL   0A7C
....................          lcd_gotoxy(1,2); 
38C6:  MOVLW  01
38C8:  MOVWF  xD4
38CA:  MOVLW  02
38CC:  MOVWF  xD5
38CE:  CALL   09BC
....................          printf(lcd_putc,"     Velocidad      "); 
38D2:  MOVLW  34
38D4:  MOVWF  FF6
38D6:  MOVLW  07
38D8:  MOVWF  FF7
38DA:  CALL   0A7C
....................          lcd_gotoxy(1,3); 
38DE:  MOVLW  01
38E0:  MOVWF  xD4
38E2:  MOVLW  03
38E4:  MOVWF  xD5
38E6:  CALL   09BC
....................          printf(lcd_putc,"      Almacenada    "); 
38EA:  MOVLW  4A
38EC:  MOVWF  FF6
38EE:  MOVLW  07
38F0:  MOVWF  FF7
38F2:  CALL   0A7C
....................          lcd_gotoxy(1,4); 
38F6:  MOVLW  01
38F8:  MOVWF  xD4
38FA:  MOVLW  04
38FC:  MOVWF  xD5
38FE:  CALL   09BC
....................          printf(lcd_putc,"                    ");  
3902:  MOVLW  60
3904:  MOVWF  FF6
3906:  MOVLW  07
3908:  MOVWF  FF7
390A:  CALL   0A7C
....................          delay_ms(1000); 
390E:  MOVLW  04
3910:  MOVWF  xC2
3912:  MOVLW  FA
3914:  MOVWF  xD9
3916:  CALL   08B4
391A:  DECFSZ xC2,F
391C:  BRA    3912
....................          printf(lcd_putc,"\f"); 
391E:  MOVLW  0C
3920:  MOVWF  xD3
3922:  CALL   0A1E
....................          lcd_init(); 
3926:  CALL   0944
....................          Menu=1; paso=0; 
392A:  MOVLW  01
392C:  MOVWF  18
392E:  CLRF   31
....................       } 
....................    }       
.................... //----------------Fin-Menu7--------------------------------------------------------------- 
....................  
.................... //----------------Menu100--------------------------------------------------------------- 
....................    if(Menu == 50){ // Menu de seleccion de Estado de Luz UV    
3930:  MOVF   18,W
3932:  SUBLW  32
3934:  BTFSS  FD8.2
3936:  BRA    3F90
....................    if(Lectura==1){ 
3938:  BTFSS  17.0
393A:  BRA    3B92
....................       Lectura=0; 
393C:  BCF    17.0
....................       CaidaPresion=Leer_Sensor_Presion(5); 
393E:  MOVLW  05
3940:  MOVWF  xC2
3942:  CALL   183A
3946:  MOVFF  03,A3
394A:  MOVFF  02,A2
394E:  MOVFF  01,A1
3952:  MOVFF  00,A0
....................       lcd_gotoxy(1,1); 
3956:  MOVLW  01
3958:  MOVWF  xD4
395A:  MOVWF  xD5
395C:  CALL   09BC
....................       printf(lcd_putc,"JPCR DP:%3.2f inH2O ",(CaidaPresion*4.02));    //   
3960:  MOVFF  A3,D9
3964:  MOVFF  A2,D8
3968:  MOVFF  A1,D7
396C:  MOVFF  A0,D6
3970:  MOVLW  D7
3972:  MOVWF  xDD
3974:  MOVLW  A3
3976:  MOVWF  xDC
3978:  CLRF   xDB
397A:  MOVLW  81
397C:  MOVWF  xDA
397E:  CALL   19D0
3982:  MOVFF  00,C2
3986:  MOVFF  01,C3
398A:  MOVFF  02,C4
398E:  MOVFF  03,C5
3992:  MOVLW  76
3994:  MOVWF  FF6
3996:  MOVLW  07
3998:  MOVWF  FF7
399A:  MOVLW  08
399C:  MOVWF  xC6
399E:  CALL   111C
39A2:  MOVLW  02
39A4:  MOVWF  FE9
39A6:  MOVFF  C5,C9
39AA:  MOVFF  C4,C8
39AE:  MOVFF  C3,C7
39B2:  MOVFF  C2,C6
39B6:  MOVWF  xCA
39B8:  CALL   1B7C
39BC:  MOVLW  83
39BE:  MOVWF  FF6
39C0:  MOVLW  07
39C2:  MOVWF  FF7
39C4:  MOVLW  07
39C6:  MOVWF  xC6
39C8:  CALL   111C
....................       //Saturacion=((CaidaPresion-0.07462)/0.15)*11; 
....................       Saturacion=((CaidaPresion-0.1243)/0.29)*20; 
39CC:  BSF    FD8.1
39CE:  MOVFF  A3,DD
39D2:  MOVFF  A2,DC
39D6:  MOVFF  A1,DB
39DA:  MOVFF  A0,DA
39DE:  CLRF   xE1
39E0:  MOVLW  91
39E2:  MOVWF  xE0
39E4:  MOVLW  7E
39E6:  MOVWF  xDF
39E8:  MOVLW  7B
39EA:  MOVWF  xDE
39EC:  CALL   15D0
39F0:  MOVFF  00,C2
39F4:  MOVFF  01,C3
39F8:  MOVFF  02,C4
39FC:  MOVFF  03,C5
3A00:  MOVFF  03,D9
3A04:  MOVFF  02,D8
3A08:  MOVFF  01,D7
3A0C:  MOVFF  00,D6
3A10:  MOVLW  E1
3A12:  MOVWF  xDD
3A14:  MOVLW  7A
3A16:  MOVWF  xDC
3A18:  MOVLW  14
3A1A:  MOVWF  xDB
3A1C:  MOVLW  7D
3A1E:  MOVWF  xDA
3A20:  CALL   1476
3A24:  MOVFF  00,C2
3A28:  MOVFF  01,C3
3A2C:  MOVFF  02,C4
3A30:  MOVFF  03,C5
3A34:  MOVFF  03,D9
3A38:  MOVFF  02,D8
3A3C:  MOVFF  01,D7
3A40:  MOVFF  00,D6
3A44:  CLRF   xDD
3A46:  CLRF   xDC
3A48:  MOVLW  20
3A4A:  MOVWF  xDB
3A4C:  MOVLW  83
3A4E:  MOVWF  xDA
3A50:  CALL   19D0
3A54:  MOVFF  03,9F
3A58:  MOVFF  02,9E
3A5C:  MOVFF  01,9D
3A60:  MOVFF  00,9C
....................        
....................       if(Saturacion>11) 
3A64:  CLRF   xD9
3A66:  CLRF   xD8
3A68:  MOVLW  30
3A6A:  MOVWF  xD7
3A6C:  MOVLW  82
3A6E:  MOVWF  xD6
3A70:  MOVFF  9F,DD
3A74:  MOVFF  9E,DC
3A78:  MOVFF  9D,DB
3A7C:  MOVFF  9C,DA
3A80:  CALL   0D16
3A84:  BNC   3A92
....................       { 
....................          Saturacion=11; 
3A86:  CLRF   x9F
3A88:  CLRF   x9E
3A8A:  MOVLW  30
3A8C:  MOVWF  x9D
3A8E:  MOVLW  82
3A90:  MOVWF  x9C
....................       } 
....................        
....................       for(i=0;i<floor(Saturacion);i++) 
3A92:  CLRF   2D
3A94:  MOVFF  9F,C5
3A98:  MOVFF  9E,C4
3A9C:  MOVFF  9D,C3
3AA0:  MOVFF  9C,C2
3AA4:  CALL   2074
3AA8:  MOVFF  00,C2
3AAC:  MOVFF  01,C3
3AB0:  MOVFF  02,C4
3AB4:  MOVFF  03,C5
3AB8:  CLRF   xDB
3ABA:  MOVFF  2D,DA
3ABE:  CALL   0B02
3AC2:  MOVFF  03,D9
3AC6:  MOVFF  02,D8
3ACA:  MOVFF  01,D7
3ACE:  MOVFF  00,D6
3AD2:  MOVFF  C5,DD
3AD6:  MOVFF  C4,DC
3ADA:  MOVFF  C3,DB
3ADE:  MOVFF  C2,DA
3AE2:  CALL   0D16
3AE6:  BNC   3B04
....................       { 
....................          lcd_gotoxy(i+8,2); 
3AE8:  MOVLW  08
3AEA:  ADDWF  2D,W
3AEC:  MOVWF  xC2
3AEE:  MOVWF  xD4
3AF0:  MOVLW  02
3AF2:  MOVWF  xD5
3AF4:  CALL   09BC
....................          printf(lcd_putc,"Ñ"); 
3AF8:  MOVLW  D1
3AFA:  MOVWF  xD3
3AFC:  CALL   0A1E
....................       } 
3B00:  INCF   2D,F
3B02:  BRA    3A94
....................        
....................       for(i=floor(Saturacion);i<11;i++) 
3B04:  MOVFF  9F,C5
3B08:  MOVFF  9E,C4
3B0C:  MOVFF  9D,C3
3B10:  MOVFF  9C,C2
3B14:  CALL   2074
3B18:  MOVFF  03,D9
3B1C:  MOVFF  02,D8
3B20:  MOVFF  01,D7
3B24:  MOVFF  00,D6
3B28:  CALL   1D02
3B2C:  MOVFF  01,2D
3B30:  MOVF   2D,W
3B32:  SUBLW  0A
3B34:  BNC   3B52
....................       { 
....................          lcd_gotoxy(i+8,2); 
3B36:  MOVLW  08
3B38:  ADDWF  2D,W
3B3A:  MOVWF  xC2
3B3C:  MOVWF  xD4
3B3E:  MOVLW  02
3B40:  MOVWF  xD5
3B42:  CALL   09BC
....................          printf(lcd_putc," "); 
3B46:  MOVLW  20
3B48:  MOVWF  xD3
3B4A:  CALL   0A1E
....................       } 
3B4E:  INCF   2D,F
3B50:  BRA    3B30
....................        
....................       lcd_gotoxy(9,3); 
3B52:  MOVLW  09
3B54:  MOVWF  xD4
3B56:  MOVLW  03
3B58:  MOVWF  xD5
3B5A:  CALL   09BC
....................       printf(lcd_putc,"Tempo:%03u:%02u",tempo_minutos,tempo_segundos); 
3B5E:  MOVLW  8C
3B60:  MOVWF  FF6
3B62:  MOVLW  07
3B64:  MOVWF  FF7
3B66:  MOVLW  06
3B68:  MOVWF  xC6
3B6A:  CALL   111C
3B6E:  MOVFF  27,C2
3B72:  MOVLW  03
3B74:  MOVWF  xC3
3B76:  CALL   12FE
3B7A:  MOVLW  3A
3B7C:  MOVWF  xD3
3B7E:  CALL   0A1E
3B82:  MOVFF  28,C2
3B86:  MOVLW  01
3B88:  MOVWF  xC3
3B8A:  CALL   12FE
....................       EliminaRuido(); 
3B8E:  CALL   0004
....................    } 
....................      
....................    if(tiempo_cumplido==1) 
3B92:  BTFSS  16.7
3B94:  BRA    3C2E
....................    { 
....................       if(estadoalarma==1) 
3B96:  BTFSS  17.4
3B98:  BRA    3C24
....................       { 
....................          printf(lcd_putc,"\f"); 
3B9A:  MOVLW  0C
3B9C:  MOVWF  xD3
3B9E:  CALL   0A1E
....................          lcd_gotoxy(1,2); 
3BA2:  MOVLW  01
3BA4:  MOVWF  xD4
3BA6:  MOVLW  02
3BA8:  MOVWF  xD5
3BAA:  CALL   09BC
....................          printf(lcd_putc,"  Temporizador  de  "); 
3BAE:  MOVLW  9C
3BB0:  MOVWF  FF6
3BB2:  MOVLW  07
3BB4:  MOVWF  FF7
3BB6:  CALL   0A7C
....................          lcd_gotoxy(1,3); 
3BBA:  MOVLW  01
3BBC:  MOVWF  xD4
3BBE:  MOVLW  03
3BC0:  MOVWF  xD5
3BC2:  CALL   09BC
....................          printf(lcd_putc," Luz UV  Finalizado "); 
3BC6:  MOVLW  B2
3BC8:  MOVWF  FF6
3BCA:  MOVLW  07
3BCC:  MOVWF  FF7
3BCE:  CALL   0A7C
....................          lcd_gotoxy(1,4); 
3BD2:  MOVLW  01
3BD4:  MOVWF  xD4
3BD6:  MOVLW  04
3BD8:  MOVWF  xD5
3BDA:  CALL   09BC
....................          printf(lcd_putc,"                    "); 
3BDE:  MOVLW  C8
3BE0:  MOVWF  FF6
3BE2:  MOVLW  07
3BE4:  MOVWF  FF7
3BE6:  CALL   0A7C
....................          lcd_gotoxy(1,1); 
3BEA:  MOVLW  01
3BEC:  MOVWF  xD4
3BEE:  MOVWF  xD5
3BF0:  CALL   09BC
....................          printf(lcd_putc,"                    "); 
3BF4:  MOVLW  DE
3BF6:  MOVWF  FF6
3BF8:  MOVLW  07
3BFA:  MOVWF  FF7
3BFC:  CALL   0A7C
....................          for(i=0;i<5;i++) 
3C00:  CLRF   2D
3C02:  MOVF   2D,W
3C04:  SUBLW  04
3C06:  BNC   3C24
....................          { 
....................             Buzzer_on; 
3C08:  BSF    F8B.0
3C0A:  BCF    F94.0
....................             delay_ms(200); 
3C0C:  MOVLW  C8
3C0E:  MOVWF  xD9
3C10:  CALL   08B4
....................             Buzzer_off; 
3C14:  BCF    F8B.0
3C16:  BCF    F94.0
....................             delay_ms(200); 
3C18:  MOVLW  C8
3C1A:  MOVWF  xD9
3C1C:  CALL   08B4
....................          } 
3C20:  INCF   2D,F
3C22:  BRA    3C02
....................       } 
....................       tiempo_cumplido=0; 
3C24:  BCF    16.7
....................       printf(lcd_putc,"\f"); 
3C26:  MOVLW  0C
3C28:  MOVWF  xD3
3C2A:  CALL   0A1E
....................    } 
....................     
....................    if(CaidaPresion>=0.285)//Maxima caida de Presion = 1.2inH20 = 0.29kPa 
3C2E:  MOVLW  85
3C30:  MOVWF  xD9
3C32:  MOVLW  EB
3C34:  MOVWF  xD8
3C36:  MOVLW  11
3C38:  MOVWF  xD7
3C3A:  MOVLW  7D
3C3C:  MOVWF  xD6
3C3E:  MOVFF  A3,DD
3C42:  MOVFF  A2,DC
3C46:  MOVFF  A1,DB
3C4A:  MOVFF  A0,DA
3C4E:  CALL   0D16
3C52:  BC    3C56
3C54:  BNZ   3C5C
....................    {  
....................       ActivaBuzzer=1; 
3C56:  MOVLW  01
3C58:  MOVWF  3D
....................    } 
....................    else 
3C5A:  BRA    3C62
....................    { 
....................       ActivaBuzzer=0; 
3C5C:  CLRF   3D
....................       Buzzer_off; 
3C5E:  BCF    F8B.0
3C60:  BCF    F94.0
....................    } 
....................        
....................    //if(Cambio){ 
....................       lcd_gotoxy(1,2); 
3C62:  MOVLW  01
3C64:  MOVWF  xD4
3C66:  MOVLW  02
3C68:  MOVWF  xD5
3C6A:  CALL   09BC
....................       printf(lcd_putc,"Filtro:"); 
3C6E:  MOVLW  F4
3C70:  MOVWF  FF6
3C72:  MOVLW  07
3C74:  MOVWF  FF7
3C76:  CALL   0A7C
....................        
....................       if(estadomv==1) 
3C7A:  BTFSS  16.2
3C7C:  BRA    3C98
....................       { 
....................          lcd_gotoxy(1,4); 
3C7E:  MOVLW  01
3C80:  MOVWF  xD4
3C82:  MOVLW  04
3C84:  MOVWF  xD5
3C86:  CALL   09BC
....................          printf(lcd_putc,"Motor:ON ");       
3C8A:  MOVLW  FC
3C8C:  MOVWF  FF6
3C8E:  MOVLW  07
3C90:  MOVWF  FF7
3C92:  CALL   0A7C
....................       } 
....................       else 
3C96:  BRA    3CB0
....................       { 
....................          lcd_gotoxy(1,4); 
3C98:  MOVLW  01
3C9A:  MOVWF  xD4
3C9C:  MOVLW  04
3C9E:  MOVWF  xD5
3CA0:  CALL   09BC
....................          printf(lcd_putc,"Motor:OFF"); 
3CA4:  MOVLW  06
3CA6:  MOVWF  FF6
3CA8:  MOVLW  08
3CAA:  MOVWF  FF7
3CAC:  CALL   0A7C
....................       } 
....................        
....................       if(estadouv==1) 
3CB0:  BTFSS  16.0
3CB2:  BRA    3CCE
....................       { 
....................          lcd_gotoxy(13,4); 
3CB4:  MOVLW  0D
3CB6:  MOVWF  xD4
3CB8:  MOVLW  04
3CBA:  MOVWF  xD5
3CBC:  CALL   09BC
....................          printf(lcd_putc,"UV:ON "); 
3CC0:  MOVLW  10
3CC2:  MOVWF  FF6
3CC4:  MOVLW  08
3CC6:  MOVWF  FF7
3CC8:  CALL   0A7C
....................       } 
....................       else 
3CCC:  BRA    3CE6
....................       {          
....................          lcd_gotoxy(13,4); 
3CCE:  MOVLW  0D
3CD0:  MOVWF  xD4
3CD2:  MOVLW  04
3CD4:  MOVWF  xD5
3CD6:  CALL   09BC
....................          printf(lcd_putc,"UV:OFF"); 
3CDA:  MOVLW  18
3CDC:  MOVWF  FF6
3CDE:  MOVLW  08
3CE0:  MOVWF  FF7
3CE2:  CALL   0A7C
....................       } 
....................        
....................       if(estadofl==1) 
3CE6:  BTFSS  16.1
3CE8:  BRA    3D04
....................       { 
....................          lcd_gotoxy(1,3); 
3CEA:  MOVLW  01
3CEC:  MOVWF  xD4
3CEE:  MOVLW  03
3CF0:  MOVWF  xD5
3CF2:  CALL   09BC
....................          printf(lcd_putc,"Luz:ON "); 
3CF6:  MOVLW  20
3CF8:  MOVWF  FF6
3CFA:  MOVLW  08
3CFC:  MOVWF  FF7
3CFE:  CALL   0A7C
....................       } 
....................       else 
3D02:  BRA    3D1C
....................       { 
....................          lcd_gotoxy(1,3); 
3D04:  MOVLW  01
3D06:  MOVWF  xD4
3D08:  MOVLW  03
3D0A:  MOVWF  xD5
3D0C:  CALL   09BC
....................          printf(lcd_putc,"Luz:OFF"); 
3D10:  MOVLW  28
3D12:  MOVWF  FF6
3D14:  MOVLW  08
3D16:  MOVWF  FF7
3D18:  CALL   0A7C
....................       }  
....................       Cambio=OFF; 
3D1C:  BCF    17.5
....................    //} 
....................     
....................    if(estadomv==1){  
3D1E:  BTFSS  16.2
3D20:  BRA    3D4C
....................       if(flagmv==0){ 
3D22:  BTFSC  17.6
3D24:  BRA    3D42
....................          VelocidadMotor(6);lcd_init();delay_ms(200);lcd_init();flagmv=1;Cambio=ON; 
3D26:  MOVLW  06
3D28:  MOVWF  xC2
3D2A:  CALL   0830
3D2E:  CALL   0944
3D32:  MOVLW  C8
3D34:  MOVWF  xD9
3D36:  CALL   08B4
3D3A:  CALL   0944
3D3E:  BSF    17.6
3D40:  BSF    17.5
....................       } 
....................       VelocidadMotor(VelMotor); 
3D42:  MOVFF  B8,C2
3D46:  CALL   0830
....................    }else{ 
3D4A:  BRA    3D6A
....................       VelocidadMotor(0); 
3D4C:  CLRF   xC2
3D4E:  CALL   0830
....................       if(flagmv==1){ 
3D52:  BTFSS  17.6
3D54:  BRA    3D6A
....................          lcd_init();delay_ms(200);lcd_init();flagmv=0;Cambio=ON; 
3D56:  CALL   0944
3D5A:  MOVLW  C8
3D5C:  MOVWF  xD9
3D5E:  CALL   08B4
3D62:  CALL   0944
3D66:  BCF    17.6
3D68:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(estadouv==1){ 
3D6A:  BTFSS  16.0
3D6C:  BRA    3DA0
....................       estadomv=0; 
3D6E:  BCF    16.2
....................       VelocidadMotor(0); 
3D70:  CLRF   xC2
3D72:  CALL   0830
....................       estadofl=0; 
3D76:  BCF    16.1
....................       Luz_Blanca_off; 
3D78:  BSF    F8A.4
3D7A:  BCF    F93.4
....................       Luz_UV_on; 
3D7C:  BCF    F8A.3
3D7E:  BCF    F93.3
....................       tiempo_cumplido=0; 
3D80:  BCF    16.7
....................       if(flaguv==0){ 
3D82:  BTFSC  17.1
3D84:  BRA    3D9E
....................          lcd_init();delay_ms(200);lcd_init();flaguv=1;guardaruv=1;Cambio=ON; 
3D86:  CALL   0944
3D8A:  MOVLW  C8
3D8C:  MOVWF  xD9
3D8E:  CALL   08B4
3D92:  CALL   0944
3D96:  BSF    17.1
3D98:  MOVLW  01
3D9A:  MOVWF  30
3D9C:  BSF    17.5
....................       } 
....................    }else{ 
3D9E:  BRA    3DC2
....................       estadouv=0; 
3DA0:  BCF    16.0
....................       Luz_UV_off; 
3DA2:  BSF    F8A.3
3DA4:  BCF    F93.3
....................       if(flaguv==1){ 
3DA6:  BTFSS  17.1
3DA8:  BRA    3DC2
....................          lcd_init();delay_ms(200);lcd_init();flaguv=0;guardaruv=1;Cambio=ON; 
3DAA:  CALL   0944
3DAE:  MOVLW  C8
3DB0:  MOVWF  xD9
3DB2:  CALL   08B4
3DB6:  CALL   0944
3DBA:  BCF    17.1
3DBC:  MOVLW  01
3DBE:  MOVWF  30
3DC0:  BSF    17.5
....................       } 
....................    } 
....................        
....................    if(estadofl==1) 
3DC2:  BTFSS  16.1
3DC4:  BRA    3DE4
....................    { 
....................       Luz_Blanca_on; 
3DC6:  BCF    F8A.4
3DC8:  BCF    F93.4
....................       if(flagfl==0) 
3DCA:  BTFSC  17.2
3DCC:  BRA    3DE2
....................       { 
....................          lcd_init();delay_ms(200);lcd_init();flagfl=1;Cambio=ON; 
3DCE:  CALL   0944
3DD2:  MOVLW  C8
3DD4:  MOVWF  xD9
3DD6:  CALL   08B4
3DDA:  CALL   0944
3DDE:  BSF    17.2
3DE0:  BSF    17.5
....................       } 
....................    } 
....................    else 
3DE2:  BRA    3E00
....................    { 
....................       Luz_Blanca_off; 
3DE4:  BSF    F8A.4
3DE6:  BCF    F93.4
....................       if(flagfl==1) 
3DE8:  BTFSS  17.2
3DEA:  BRA    3E00
....................       { 
....................          lcd_init();delay_ms(200);lcd_init();flagfl=0;Cambio=ON; 
3DEC:  CALL   0944
3DF0:  MOVLW  C8
3DF2:  MOVWF  xD9
3DF4:  CALL   08B4
3DF8:  CALL   0944
3DFC:  BCF    17.2
3DFE:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(tdown>=30){ //Si oprimio tecla abajo por 300ms o mas 
3E00:  MOVF   xAF,F
3E02:  BNZ   3E0A
3E04:  MOVF   xAE,W
3E06:  SUBLW  1D
3E08:  BC    3E26
....................       if(!Flanco){ 
3E0A:  BTFSC  16.3
3E0C:  BRA    3E24
....................          estadofl=!estadofl;Flanco = 1;delay_ms(300);Cambio=ON; 
3E0E:  BTG    16.1
3E10:  BSF    16.3
3E12:  MOVLW  02
3E14:  MOVWF  xC2
3E16:  MOVLW  96
3E18:  MOVWF  xD9
3E1A:  CALL   08B4
3E1E:  DECFSZ xC2,F
3E20:  BRA    3E16
3E22:  BSF    17.5
....................       } 
....................    }else{ 
3E24:  BRA    3E28
....................       Flanco=0; 
3E26:  BCF    16.3
....................    } 
....................     
....................    if(tright>=30){ //Si oprimio tecla derecha por 300ms o mas 
3E28:  MOVF   xB1,F
3E2A:  BNZ   3E32
3E2C:  MOVF   xB0,W
3E2E:  SUBLW  1D
3E30:  BC    3E4E
....................       if(!Flanco2){ 
3E32:  BTFSC  16.5
3E34:  BRA    3E4C
....................          estadomv=!estadomv;Flanco2 = 1;delay_ms(300);Cambio=ON; 
3E36:  BTG    16.2
3E38:  BSF    16.5
3E3A:  MOVLW  02
3E3C:  MOVWF  xC2
3E3E:  MOVLW  96
3E40:  MOVWF  xD9
3E42:  CALL   08B4
3E46:  DECFSZ xC2,F
3E48:  BRA    3E3E
3E4A:  BSF    17.5
....................       } 
....................    }else{ 
3E4C:  BRA    3E50
....................       Flanco2=0; 
3E4E:  BCF    16.5
....................    } 
....................     
....................    if(tleft>=30){ //Si oprimio tecla izquierda por 300ms o mas 
3E50:  MOVF   xB3,F
3E52:  BNZ   3E5A
3E54:  MOVF   xB2,W
3E56:  SUBLW  1D
3E58:  BC    3E6E
....................       if(!Flanco3){ 
3E5A:  BTFSC  16.6
3E5C:  BRA    3E6C
....................          delay_ms(150);  
3E5E:  MOVLW  96
3E60:  MOVWF  xD9
3E62:  CALL   08B4
....................          estadouv=!estadouv; 
3E66:  BTG    16.0
....................          Cambio=ON; 
3E68:  BSF    17.5
....................          Flanco3=1; 
3E6A:  BSF    16.6
....................       } 
....................    }else{ 
3E6C:  BRA    3E70
....................       Flanco3=0; 
3E6E:  BCF    16.6
....................    } 
....................     
....................    if(tup>=30){ //Si oprimio tecla arriba por 300ms o mas 
3E70:  MOVF   xAD,F
3E72:  BNZ   3E7A
3E74:  MOVF   xAC,W
3E76:  SUBLW  1D
3E78:  BC    3EB0
....................       if(!Flanco1){ 
3E7A:  BTFSC  16.4
3E7C:  BRA    3EAE
....................          delay_ms(200); 
3E7E:  MOVLW  C8
3E80:  MOVWF  xD9
3E82:  CALL   08B4
....................          printf(lcd_putc,"\f"); 
3E86:  MOVLW  0C
3E88:  MOVWF  xD3
3E8A:  CALL   0A1E
....................          delay_ms(300); 
3E8E:  MOVLW  02
3E90:  MOVWF  xC2
3E92:  MOVLW  96
3E94:  MOVWF  xD9
3E96:  CALL   08B4
3E9A:  DECFSZ xC2,F
3E9C:  BRA    3E92
....................          Menu=1;  
3E9E:  MOVLW  01
3EA0:  MOVWF  18
....................          paso=0; 
3EA2:  CLRF   31
....................          Flecha=2; 
3EA4:  MOVLW  02
3EA6:  MOVWF  1C
....................          Flecha2=2; 
3EA8:  MOVWF  1E
....................          Cambio=ON; 
3EAA:  BSF    17.5
....................          Flanco1=1; 
3EAC:  BSF    16.4
....................       } 
....................    }else{ 
3EAE:  BRA    3EB2
....................       Flanco1=0; 
3EB0:  BCF    16.4
....................    } 
....................     
....................    if(guardaruv==1) 
3EB2:  DECFSZ 30,W
3EB4:  BRA    3F78
....................    { 
....................       write_eeprom(7,segundos);write_eeprom(8,minutos); 
3EB6:  MOVLW  07
3EB8:  MOVWF  FA9
3EBA:  MOVFF  21,FA8
3EBE:  BCF    FA6.6
3EC0:  BCF    FA6.7
3EC2:  BSF    FA6.2
3EC4:  MOVF   FF2,W
3EC6:  MOVWF  00
3EC8:  BCF    FF2.7
3ECA:  MOVLB  F
3ECC:  MOVLW  55
3ECE:  MOVWF  FA7
3ED0:  MOVLW  AA
3ED2:  MOVWF  FA7
3ED4:  BSF    FA6.1
3ED6:  BTFSC  FA6.1
3ED8:  BRA    3ED6
3EDA:  BCF    FA6.2
3EDC:  MOVF   00,W
3EDE:  IORWF  FF2,F
3EE0:  MOVLW  08
3EE2:  MOVWF  FA9
3EE4:  MOVFF  22,FA8
3EE8:  BCF    FA6.6
3EEA:  BCF    FA6.7
3EEC:  BSF    FA6.2
3EEE:  MOVF   FF2,W
3EF0:  MOVWF  00
3EF2:  BCF    FF2.7
3EF4:  MOVLW  55
3EF6:  MOVWF  FA7
3EF8:  MOVLW  AA
3EFA:  MOVWF  FA7
3EFC:  BSF    FA6.1
3EFE:  BTFSC  FA6.1
3F00:  BRA    3EFE
3F02:  BCF    FA6.2
3F04:  MOVF   00,W
3F06:  IORWF  FF2,F
....................       horasL=make8(horas,0); 
3F08:  MOVFF  40,23
....................       horasH=make8(horas,1); 
3F0C:  MOVFF  41,24
....................       write_eeprom(9,horasL); 
3F10:  MOVLW  09
3F12:  MOVWF  FA9
3F14:  MOVFF  23,FA8
3F18:  BCF    FA6.6
3F1A:  BCF    FA6.7
3F1C:  BSF    FA6.2
3F1E:  MOVFF  FF2,00
3F22:  BCF    FF2.7
3F24:  MOVLW  55
3F26:  MOVWF  FA7
3F28:  MOVLW  AA
3F2A:  MOVWF  FA7
3F2C:  BSF    FA6.1
3F2E:  BTFSC  FA6.1
3F30:  BRA    3F2E
3F32:  BCF    FA6.2
3F34:  MOVF   00,W
3F36:  IORWF  FF2,F
....................       delay_ms(20); 
3F38:  MOVLW  14
3F3A:  MOVLB  0
3F3C:  MOVWF  xD9
3F3E:  CALL   08B4
....................       write_eeprom(10,horasH); 
3F42:  MOVLW  0A
3F44:  MOVWF  FA9
3F46:  MOVFF  24,FA8
3F4A:  BCF    FA6.6
3F4C:  BCF    FA6.7
3F4E:  BSF    FA6.2
3F50:  MOVF   FF2,W
3F52:  MOVWF  00
3F54:  BCF    FF2.7
3F56:  MOVLB  F
3F58:  MOVLW  55
3F5A:  MOVWF  FA7
3F5C:  MOVLW  AA
3F5E:  MOVWF  FA7
3F60:  BSF    FA6.1
3F62:  BTFSC  FA6.1
3F64:  BRA    3F62
3F66:  BCF    FA6.2
3F68:  MOVF   00,W
3F6A:  IORWF  FF2,F
....................       delay_ms(20); 
3F6C:  MOVLW  14
3F6E:  MOVLB  0
3F70:  MOVWF  xD9
3F72:  CALL   08B4
....................       guardaruv=0; 
3F76:  CLRF   30
....................    } 
....................     
....................    if(segundos>=60) 
3F78:  MOVF   21,W
3F7A:  SUBLW  3B
3F7C:  BC    3F82
....................    { 
....................       segundos=0;minutos++; 
3F7E:  CLRF   21
3F80:  INCF   22,F
....................    } 
....................    if(minutos==60) 
3F82:  MOVF   22,W
3F84:  SUBLW  3C
3F86:  BNZ   3F90
....................    { 
....................       minutos=0;horas++; 
3F88:  CLRF   22
3F8A:  INCF   40,F
3F8C:  BTFSC  FD8.2
3F8E:  INCF   41,F
....................    }   
....................      
....................    } 
.................... //----------------Fin-Menu100--------------------------------------------------------------   
....................    if(tiemporeset>=60) 
3F90:  MOVF   2F,W
3F92:  SUBLW  3B
3F94:  BC    3FAA
....................    { 
....................       lcd_init();delay_ms(200);lcd_init(); 
3F96:  CALL   0944
3F9A:  MOVLW  C8
3F9C:  MOVWF  xD9
3F9E:  CALL   08B4
3FA2:  CALL   0944
....................       tiemporeset=0; 
3FA6:  CLRF   2F
....................       Cambio=ON; 
3FA8:  BSF    17.5
....................    }    
....................    } 
3FAA:  GOTO   226C
.................... } 
....................  
3FAE:  SLEEP 

Configuration Fuses:
   Word  1: 0E3C   NOIESO NOFCMEN HSPLL PLL5 CPUDIV4 USBDIV
   Word  2: 1E39   NOBROWNOUT NOWDT BORV20 NOPUT WDT32768 VREGEN
   Word  3: 0100   NOPBADEN CCP2C1 NOMCLR NOLPT1OSC
   Word  4: 0080   NOSTVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
