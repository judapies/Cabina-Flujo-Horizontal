CCS PCH C Compiler, Version 4.104, 5967               28-oct.-20 14:10

               Filename: D:\Laboratorio\Cabina de Flujo Laminar Horizontal\2020\CFLH 90 Bioweb #004588395 OP2020320\Firmware 2.1.0 - Sin Presion\CabinaCFLH.lst

               ROM used: 19614 bytes (60%)
                         Largest free fragment is 13152
               RAM used: 228 (11%) at main() level
                         265 (13%) worst case
               Stack:    7 worst case (6 in main + 1 for interrupts)

*
0000:  GOTO   2948
*
0008:  GOTO   00A6
000C:  NOP   
000E:  NOP   
0010:  NOP   
0012:  NOP   
0014:  NOP   
0016:  NOP   
0018:  MOVWF  04
001A:  MOVFF  FD8,05
001E:  MOVFF  FE0,06
0022:  MOVLB  0
0024:  MOVFF  FE9,0C
0028:  MOVFF  FEA,07
002C:  MOVFF  FE1,08
0030:  MOVFF  FE2,09
0034:  MOVFF  FD9,0A
0038:  MOVFF  FDA,0B
003C:  MOVFF  FF3,12
0040:  MOVFF  FF4,13
0044:  MOVFF  FFA,14
0048:  MOVFF  00,0E
004C:  MOVFF  01,0F
0050:  MOVFF  02,10
0054:  MOVFF  03,11
0058:  BTFSS  F9D.0
005A:  GOTO   0064
005E:  BTFSC  F9E.0
0060:  GOTO   0426
0064:  MOVFF  0E,00
0068:  MOVFF  0F,01
006C:  MOVFF  10,02
0070:  MOVFF  11,03
0074:  MOVFF  0C,FE9
0078:  MOVFF  07,FEA
007C:  BSF    07.7
007E:  MOVFF  08,FE1
0082:  MOVFF  09,FE2
0086:  MOVFF  0A,FD9
008A:  MOVFF  0B,FDA
008E:  MOVFF  12,FF3
0092:  MOVFF  13,FF4
0096:  MOVFF  14,FFA
009A:  MOVF   04,W
009C:  MOVFF  06,FE0
00A0:  MOVFF  05,FD8
00A4:  RETFIE 0
00A6:  MOVWF  16
00A8:  MOVFF  FD8,17
00AC:  MOVFF  FE0,18
00B0:  MOVLB  0
00B2:  MOVFF  FE9,1E
00B6:  MOVFF  FEA,19
00BA:  MOVFF  FE1,1A
00BE:  MOVFF  FE2,1B
00C2:  MOVFF  FD9,1C
00C6:  MOVFF  FDA,1D
00CA:  MOVFF  FF3,24
00CE:  MOVFF  FF4,25
00D2:  MOVFF  FFA,26
00D6:  MOVFF  00,20
00DA:  MOVFF  01,21
00DE:  MOVFF  02,22
00E2:  MOVFF  03,23
00E6:  BTFSS  FF2.5
00E8:  GOTO   00F2
00EC:  BTFSC  FF2.2
00EE:  GOTO   03F4
00F2:  BTFSS  FF2.4
00F4:  GOTO   00FE
00F8:  BTFSC  FF2.1
00FA:  GOTO   0248
00FE:  MOVFF  20,00
0102:  MOVFF  21,01
0106:  MOVFF  22,02
010A:  MOVFF  23,03
010E:  MOVFF  1E,FE9
0112:  MOVFF  19,FEA
0116:  BSF    19.7
0118:  MOVFF  1A,FE1
011C:  MOVFF  1B,FE2
0120:  MOVFF  1C,FD9
0124:  MOVFF  1D,FDA
0128:  MOVFF  24,FF3
012C:  MOVFF  25,FF4
0130:  MOVFF  26,FFA
0134:  MOVF   16,W
0136:  MOVFF  18,FE0
013A:  MOVFF  17,FD8
013E:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina de PCR. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz UV, Luz Blanca, Motor Ventilador y Cambio de Contraseña. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... #device HIGH_INTS=TRUE //Activamos niveles de prioridad 
.................... #priority TIMER2 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL5,CPUDIV4,VREGEN,NOMCLR,NOBROWNOUT,NOPUT,NOCPD,NOSTVREN,NOWRT,NOWRTD,NOIESO,NOFCMEN,NOPBADEN,NOWRTC,NOWRTB,NOEBTR,NOEBTRB,NOCPB,NOLPT1OSC,NOXINST,NOICPRT// PLL1 para 4 MHz 
.................... #use delay(clock=16000000) 
*
0B9E:  CLRF   FEA
0BA0:  MOVLW  F7
0BA2:  MOVWF  FE9
0BA4:  MOVF   FEF,W
0BA6:  BZ    0BC4
0BA8:  MOVLW  05
0BAA:  MOVWF  01
0BAC:  CLRF   00
0BAE:  DECFSZ 00,F
0BB0:  BRA    0BAE
0BB2:  DECFSZ 01,F
0BB4:  BRA    0BAC
0BB6:  MOVLW  2E
0BB8:  MOVWF  00
0BBA:  DECFSZ 00,F
0BBC:  BRA    0BBA
0BBE:  BRA    0BC0
0BC0:  DECFSZ FEF,F
0BC2:  BRA    0BA8
0BC4:  RETLW  00
.................... #include <MATH.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
*
25F8:  BCF    xF3.0
....................    y = x; 
25FA:  MOVFF  E7,EC
25FE:  MOVFF  E6,EB
2602:  MOVFF  E5,EA
2606:  MOVFF  E4,E9
....................  
....................    if (x < 0) 
260A:  MOVFF  E7,F7
260E:  MOVFF  E6,F6
2612:  MOVFF  E5,F5
2616:  MOVFF  E4,F4
261A:  CLRF   xFB
261C:  CLRF   xFA
261E:  CLRF   xF9
2620:  CLRF   xF8
2622:  CALL   109C
2626:  BNC   2630
....................    { 
....................       s = 1; 
2628:  BSF    xF3.0
....................       y = -y; 
262A:  MOVF   xEA,W
262C:  XORLW  80
262E:  MOVWF  xEA
....................    } 
....................  
....................    if (y <= 32768.0) 
2630:  MOVFF  EC,F7
2634:  MOVFF  EB,F6
2638:  MOVFF  EA,F5
263C:  MOVFF  E9,F4
2640:  CLRF   xFB
2642:  CLRF   xFA
2644:  CLRF   xF9
2646:  MOVLW  8E
2648:  MOVWF  xF8
264A:  CALL   109C
264E:  BC    2652
2650:  BNZ   2682
....................   res = (float32)(unsigned int16)y; 
2652:  MOVFF  EC,F7
2656:  MOVFF  EB,F6
265A:  MOVFF  EA,F5
265E:  MOVFF  E9,F4
2662:  RCALL  25C0
2664:  MOVFF  02,F9
2668:  MOVFF  01,F8
266C:  CALL   0CC8
2670:  MOVFF  03,F0
2674:  MOVFF  02,EF
2678:  MOVFF  01,EE
267C:  MOVFF  00,ED
....................  
....................  else if (y < 10000000.0) 
2680:  BRA    280C
2682:  MOVFF  EC,F7
2686:  MOVFF  EB,F6
268A:  MOVFF  EA,F5
268E:  MOVFF  E9,F4
2692:  MOVLW  80
2694:  MOVWF  xFB
2696:  MOVLW  96
2698:  MOVWF  xFA
269A:  MOVLW  18
269C:  MOVWF  xF9
269E:  MOVLW  96
26A0:  MOVWF  xF8
26A2:  CALL   109C
26A6:  BTFSS  FD8.0
26A8:  BRA    27FC
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
26AA:  MOVFF  EC,F7
26AE:  MOVFF  EB,F6
26B2:  MOVFF  EA,F5
26B6:  MOVFF  E9,F4
26BA:  CLRF   xFB
26BC:  CLRF   xFA
26BE:  CLRF   xF9
26C0:  MOVLW  8E
26C2:  MOVWF  xF8
26C4:  CALL   1CB6
26C8:  MOVFF  03,F7
26CC:  MOVFF  02,F6
26D0:  MOVFF  01,F5
26D4:  MOVFF  00,F4
26D8:  RCALL  25C0
26DA:  MOVFF  02,F2
26DE:  MOVFF  01,F1
....................       y = 32768.0*(y/32768.0 - (float32)l); 
26E2:  MOVFF  EC,F7
26E6:  MOVFF  EB,F6
26EA:  MOVFF  EA,F5
26EE:  MOVFF  E9,F4
26F2:  CLRF   xFB
26F4:  CLRF   xFA
26F6:  CLRF   xF9
26F8:  MOVLW  8E
26FA:  MOVWF  xF8
26FC:  CALL   1CB6
2700:  MOVFF  00,F4
2704:  MOVFF  01,F5
2708:  MOVFF  02,F6
270C:  MOVFF  03,F7
2710:  MOVFF  F2,F9
2714:  MOVFF  F1,F8
2718:  CALL   0CC8
271C:  BSF    FD8.1
271E:  MOVFF  F7,FB
2722:  MOVFF  F6,FA
2726:  MOVFF  F5,F9
272A:  MOVFF  F4,F8
272E:  MOVFF  03,FF
2732:  MOVFF  02,FE
2736:  MOVFF  01,FD
273A:  MOVFF  00,FC
273E:  CALL   1E5E
2742:  CLRF   xF7
2744:  CLRF   xF6
2746:  CLRF   xF5
2748:  MOVLW  8E
274A:  MOVWF  xF4
274C:  MOVFF  03,FB
2750:  MOVFF  02,FA
2754:  MOVFF  01,F9
2758:  MOVFF  00,F8
275C:  RCALL  228E
275E:  MOVFF  03,EC
2762:  MOVFF  02,EB
2766:  MOVFF  01,EA
276A:  MOVFF  00,E9
....................   res = 32768.0*(float32)l; 
276E:  MOVFF  F2,F9
2772:  MOVFF  F1,F8
2776:  CALL   0CC8
277A:  CLRF   xF7
277C:  CLRF   xF6
277E:  CLRF   xF5
2780:  MOVLW  8E
2782:  MOVWF  xF4
2784:  MOVFF  03,FB
2788:  MOVFF  02,FA
278C:  MOVFF  01,F9
2790:  MOVFF  00,F8
2794:  RCALL  228E
2796:  MOVFF  03,F0
279A:  MOVFF  02,EF
279E:  MOVFF  01,EE
27A2:  MOVFF  00,ED
....................   res += (float32)(unsigned int16)y; 
27A6:  MOVFF  EC,F7
27AA:  MOVFF  EB,F6
27AE:  MOVFF  EA,F5
27B2:  MOVFF  E9,F4
27B6:  RCALL  25C0
27B8:  MOVFF  02,F9
27BC:  MOVFF  01,F8
27C0:  CALL   0CC8
27C4:  BCF    FD8.1
27C6:  MOVFF  F0,FB
27CA:  MOVFF  EF,FA
27CE:  MOVFF  EE,F9
27D2:  MOVFF  ED,F8
27D6:  MOVFF  03,FF
27DA:  MOVFF  02,FE
27DE:  MOVFF  01,FD
27E2:  MOVFF  00,FC
27E6:  CALL   1E5E
27EA:  MOVFF  03,F0
27EE:  MOVFF  02,EF
27F2:  MOVFF  01,EE
27F6:  MOVFF  00,ED
....................  } 
....................  
....................  else 
27FA:  BRA    280C
....................   res = y; 
27FC:  MOVFF  EC,F0
2800:  MOVFF  EB,EF
2804:  MOVFF  EA,EE
2808:  MOVFF  E9,ED
....................  
....................  y = y - (float32)(unsigned int16)y; 
280C:  MOVFF  EC,F7
2810:  MOVFF  EB,F6
2814:  MOVFF  EA,F5
2818:  MOVFF  E9,F4
281C:  RCALL  25C0
281E:  MOVFF  02,F9
2822:  MOVFF  01,F8
2826:  CALL   0CC8
282A:  BSF    FD8.1
282C:  MOVFF  EC,FB
2830:  MOVFF  EB,FA
2834:  MOVFF  EA,F9
2838:  MOVFF  E9,F8
283C:  MOVFF  03,FF
2840:  MOVFF  02,FE
2844:  MOVFF  01,FD
2848:  MOVFF  00,FC
284C:  CALL   1E5E
2850:  MOVFF  03,EC
2854:  MOVFF  02,EB
2858:  MOVFF  01,EA
285C:  MOVFF  00,E9
....................  
....................  if (s) 
2860:  BTFSS  xF3.0
2862:  BRA    286A
....................   res = -res; 
2864:  MOVF   xEE,W
2866:  XORLW  80
2868:  MOVWF  xEE
....................  
....................  if (y != 0) 
286A:  MOVFF  EC,F7
286E:  MOVFF  EB,F6
2872:  MOVFF  EA,F5
2876:  MOVFF  E9,F4
287A:  CLRF   xFB
287C:  CLRF   xFA
287E:  CLRF   xF9
2880:  CLRF   xF8
2882:  CALL   109C
2886:  BZ    28F8
....................  { 
....................   if (s == 1 && n == 0) 
2888:  BTFSS  xF3.0
288A:  BRA    28C0
288C:  MOVF   xE8,F
288E:  BNZ   28C0
....................    res -= 1.0; 
2890:  BSF    FD8.1
2892:  MOVFF  F0,FB
2896:  MOVFF  EF,FA
289A:  MOVFF  EE,F9
289E:  MOVFF  ED,F8
28A2:  CLRF   xFF
28A4:  CLRF   xFE
28A6:  CLRF   xFD
28A8:  MOVLW  7F
28AA:  MOVWF  xFC
28AC:  CALL   1E5E
28B0:  MOVFF  03,F0
28B4:  MOVFF  02,EF
28B8:  MOVFF  01,EE
28BC:  MOVFF  00,ED
....................  
....................   if (s == 0 && n == 1) 
28C0:  BTFSC  xF3.0
28C2:  BRA    28F8
28C4:  DECFSZ xE8,W
28C6:  BRA    28F8
....................    res += 1.0; 
28C8:  BCF    FD8.1
28CA:  MOVFF  F0,FB
28CE:  MOVFF  EF,FA
28D2:  MOVFF  EE,F9
28D6:  MOVFF  ED,F8
28DA:  CLRF   xFF
28DC:  CLRF   xFE
28DE:  CLRF   xFD
28E0:  MOVLW  7F
28E2:  MOVWF  xFC
28E4:  CALL   1E5E
28E8:  MOVFF  03,F0
28EC:  MOVFF  02,EF
28F0:  MOVFF  01,EE
28F4:  MOVFF  00,ED
....................  } 
....................  if (x == 0) 
28F8:  MOVFF  E7,F7
28FC:  MOVFF  E6,F6
2900:  MOVFF  E5,F5
2904:  MOVFF  E4,F4
2908:  CLRF   xFB
290A:  CLRF   xFA
290C:  CLRF   xF9
290E:  CLRF   xF8
2910:  CALL   109C
2914:  BNZ   291E
....................     res = 0; 
2916:  CLRF   xF0
2918:  CLRF   xEF
291A:  CLRF   xEE
291C:  CLRF   xED
....................  
....................  return (res); 
291E:  MOVFF  ED,00
2922:  MOVFF  EE,01
2926:  MOVFF  EF,02
292A:  MOVFF  F0,03
.................... } 
292E:  GOTO   2946 (RETURN)
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
2932:  MOVFF  E3,E7
2936:  MOVFF  E2,E6
293A:  MOVFF  E1,E5
293E:  MOVFF  E0,E4
2942:  CLRF   xE8
2944:  BRA    25F8
.................... } 
2946:  RETLW  00
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN unused;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN enable;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTD")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_d(LCD_READ); 
....................       lcd.rw = 1; 
....................       delay_cycles(30);//30 
....................       lcd.enable = 1; 
....................       delay_cycles(30);//30 
....................       high = lcd.data; 
....................       lcd.enable = 0; 
....................       delay_cycles(30);//30 
....................       lcd.enable = 1; 
....................       delay_us(30);//30 
....................       low = lcd.data; 
....................       lcd.enable = 0; 
....................       set_tris_d(LCD_WRITE); 
....................       return( (high<<4) | low); 
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
0BC6:  SWAPF  xF8,W
0BC8:  ANDLW  F0
0BCA:  MOVWF  00
0BCC:  MOVLW  0F
0BCE:  ANDWF  F83,W
0BD0:  IORWF  00,W
0BD2:  MOVWF  F83
....................       delay_cycles(30);//30 
0BD4:  MOVLW  09
0BD6:  MOVWF  00
0BD8:  DECFSZ 00,F
0BDA:  BRA    0BD8
0BDC:  BRA    0BDE
....................       lcd.enable = 1; 
0BDE:  BSF    F83.3
....................       delay_us(55);//55 
0BE0:  MOVLW  49
0BE2:  MOVWF  00
0BE4:  DECFSZ 00,F
0BE6:  BRA    0BE4
....................       lcd.enable = 0; 
0BE8:  BCF    F83.3
.................... } 
0BEA:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
0BEC:  BCF    F83.1
....................       //while ( bit_test(lcd_read_byte(),7)); 
....................       delay_ms(1); 
0BEE:  MOVLW  01
0BF0:  MOVWF  xF7
0BF2:  RCALL  0B9E
....................       lcd.rs = address; 
0BF4:  BTFSS  xF5.0
0BF6:  BCF    F83.1
0BF8:  BTFSC  xF5.0
0BFA:  BSF    F83.1
....................       delay_cycles(30);//30 
0BFC:  MOVLW  09
0BFE:  MOVWF  00
0C00:  DECFSZ 00,F
0C02:  BRA    0C00
0C04:  BRA    0C06
....................       lcd.rw = 0; 
0C06:  BCF    F83.2
....................       delay_cycles(30);//30 
0C08:  MOVLW  09
0C0A:  MOVWF  00
0C0C:  DECFSZ 00,F
0C0E:  BRA    0C0C
0C10:  BRA    0C12
....................       lcd.enable = 0; 
0C12:  BCF    F83.3
....................       lcd_send_nibble(n >> 4); 
0C14:  SWAPF  xF6,W
0C16:  MOVWF  xF7
0C18:  MOVLW  0F
0C1A:  ANDWF  xF7,F
0C1C:  MOVFF  F7,F8
0C20:  RCALL  0BC6
....................       lcd_send_nibble(n & 0xf); 
0C22:  MOVF   xF6,W
0C24:  ANDLW  0F
0C26:  MOVWF  xF7
0C28:  MOVWF  xF8
0C2A:  RCALL  0BC6
.................... } 
0C2C:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_d(LCD_WRITE); 
0C2E:  MOVLW  00
0C30:  MOVWF  F95
....................     lcd.rs = 0; 
0C32:  BCF    F83.1
....................     lcd.rw = 0; 
0C34:  BCF    F83.2
....................     lcd.enable = 0; 
0C36:  BCF    F83.3
....................     delay_ms(15); 
0C38:  MOVLW  0F
0C3A:  MOVWF  xF7
0C3C:  RCALL  0B9E
....................     for(i=1;i<=3;++i) { 
0C3E:  MOVLW  01
0C40:  MOVWF  xE0
0C42:  MOVF   xE0,W
0C44:  SUBLW  03
0C46:  BNC   0C58
....................        lcd_send_nibble(3); 
0C48:  MOVLW  03
0C4A:  MOVWF  xF8
0C4C:  RCALL  0BC6
....................        delay_ms(5); 
0C4E:  MOVLW  05
0C50:  MOVWF  xF7
0C52:  RCALL  0B9E
....................     } 
0C54:  INCF   xE0,F
0C56:  BRA    0C42
....................     lcd_send_nibble(2); 
0C58:  MOVLW  02
0C5A:  MOVWF  xF8
0C5C:  RCALL  0BC6
....................     for(i=0;i<=3;++i) 
0C5E:  CLRF   xE0
0C60:  MOVF   xE0,W
0C62:  SUBLW  03
0C64:  BNC   0C8A
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
0C66:  CLRF   03
0C68:  MOVF   xE0,W
0C6A:  MOVFF  FF2,E1
0C6E:  BCF    FF2.6
0C70:  BCF    FF2.7
0C72:  CALL   0140
0C76:  BTFSC  xE1.6
0C78:  BSF    FF2.6
0C7A:  BTFSC  xE1.7
0C7C:  BSF    FF2.7
0C7E:  MOVWF  xE1
0C80:  CLRF   xF5
0C82:  MOVWF  xF6
0C84:  RCALL  0BEC
0C86:  INCF   xE0,F
0C88:  BRA    0C60
.................... } 
0C8A:  RETLW  00
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
*
167E:  MOVLW  01
1680:  SUBWF  xF3,W
1682:  ADDLW  FC
1684:  BC    16A4
1686:  ADDLW  04
1688:  GOTO   16B6
....................      case 1 : address=0x80;break; 
168C:  MOVLW  80
168E:  MOVWF  xF4
1690:  BRA    16A4
....................      case 2 : address=0xc0;break; 
1692:  MOVLW  C0
1694:  MOVWF  xF4
1696:  BRA    16A4
....................      case 3 : address=0x94;break; 
1698:  MOVLW  94
169A:  MOVWF  xF4
169C:  BRA    16A4
....................      case 4 : address=0xd4;break; 
169E:  MOVLW  D4
16A0:  MOVWF  xF4
16A2:  BRA    16A4
....................    } 
....................    address+=x-1; 
16A4:  MOVLW  01
16A6:  SUBWF  xF2,W
16A8:  ADDWF  xF4,F
....................    lcd_send_byte(0,address); 
16AA:  CLRF   xF5
16AC:  MOVFF  F4,F6
16B0:  CALL   0BEC
.................... } 
16B4:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
....................    if(c=='ñ') 
*
16E8:  MOVF   xF1,W
16EA:  SUBLW  F1
16EC:  BNZ   16F2
....................    { 
....................       c=238; 
16EE:  MOVLW  EE
16F0:  MOVWF  xF1
....................    } 
....................    if(c=='Ñ') 
16F2:  MOVF   xF1,W
16F4:  SUBLW  D1
16F6:  BNZ   16FC
....................    { 
....................       c=255; 
16F8:  MOVLW  FF
16FA:  MOVWF  xF1
....................    } 
....................     
....................    switch (c) { 
16FC:  MOVF   xF1,W
16FE:  XORLW  0C
1700:  BZ    170C
1702:  XORLW  06
1704:  BZ    1724
1706:  XORLW  02
1708:  BZ    1732
170A:  BRA    173E
....................      case '\f'   : lcd_send_byte(0,1); 
170C:  CLRF   xF5
170E:  MOVLW  01
1710:  MOVWF  xF6
1712:  CALL   0BEC
....................                    lcdline=1; 
1716:  MOVLW  01
1718:  MOVWF  28
....................                    delay_ms(2); 
171A:  MOVLW  02
171C:  MOVWF  xF7
171E:  CALL   0B9E
....................                                            break; 
1722:  BRA    174C
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
1724:  INCF   28,F
1726:  MOVLW  01
1728:  MOVWF  xF2
172A:  MOVFF  28,F3
172E:  RCALL  167E
1730:  BRA    174C
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
1732:  CLRF   xF5
1734:  MOVLW  10
1736:  MOVWF  xF6
1738:  CALL   0BEC
173C:  BRA    174C
....................      default     : lcd_send_byte(1,c);     break; 
173E:  MOVLW  01
1740:  MOVWF  xF5
1742:  MOVFF  F1,F6
1746:  CALL   0BEC
174A:  BRA    174C
....................    } 
.................... } 
174C:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   UP            !input(PIN_A5) 
.................... #define   DOWN          !input(PIN_E0) 
.................... #define   RIGHT         !input(PIN_E1) 
.................... #define   IZQU          !input(PIN_E2) 
.................... #define   VIDRIOUUP     !input(PIN_A1) 
.................... #define   VIDRIODN      !input(PIN_A2) 
....................  
.................... // Definición de otros puertos 
.................... #define   Luz_UV_on         output_bit(PIN_B3,0) 
.................... #define   Luz_UV_off        output_bit(PIN_B3,1) 
.................... #define   Luz_Blanca_on     output_bit(PIN_B4,0) 
.................... #define   Luz_Blanca_off    output_bit(PIN_B4,1) 
.................... #define   Motor_on          output_bit(PIN_C2,1) 
.................... #define   Motor_off         output_bit(PIN_C2,0) 
.................... #define   Motor2_on         output_bit(PIN_C1,1) 
.................... #define   Motor2_off        output_bit(PIN_C1,0) 
.................... #define   Buzzer_on         output_bit(PIN_C0,1) 
.................... #define   Buzzer_off        output_bit(PIN_C0,0) 
.................... #define   O1_on             output_bit(PIN_B6,1) 
.................... #define   O1_off            output_bit(PIN_B6,0) 
.................... #define   O2_on             output_bit(PIN_B7,1) 
.................... #define   O2_off            output_bit(PIN_B7,0) 
.................... #define   ON  1 
.................... #define   OFF 0 
....................  
.................... short estadouv=0,estadofl=0,estadomv=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,tiempo_cumplido=0,Lectura=0,flaguv=0,flagfl=0,estadobuzzer=0,estadoalarma=0,pulsoSubir=OFF,pulsoBajar=OFF; 
.................... int8 Menu=0, n_opcionH=7,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,segundos=0,minutos=0,horasL=0,horasH=0,G_l=0,G_h=0; 
.................... int8 tempo_minutos=0,tempo_segundos=0,tempo_minutos_pro=0,tempo_segundos_pro=0,r=0,q=0,i=0,unidad2=1,tiemporeset=0,guardaruv=0,motor=0,luz=0,velocidadInicial=10; 
.................... signed int8   paso=0; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... signed  int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 ActivaBuzzer=0,codigoSubir=0,codigoBajar=0,codigoDetener=0,Vel1=4; 
.................... int16 tiempos,horas=0,G16=0; 
.................... float PromPresion[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float V1=0.0,Presion=0.0,Saturacion=0.0,CaidaPresion=0.0; 
.................... float G=2; 
.................... short Cambio=ON,flagmv=0; 
....................  
.................... int16 pulsos=0,tup=0,tdown=0,tright=0,tleft=0,segundosTrabajo=0,horasTrabajo=0; 
.................... short Cruce=OFF; 
....................  
.................... int8 VelMotor=0; 
....................  
.................... int1 BITS[32]; 
.................... int16 Ta,Tb,TICK=0; 
.................... Int1 BIT_START, NUEVO_DATO; 
.................... int BYTE_IR[4]; 
.................... int8 BIT_BYTE(int1 D7, int1 D6, int1 D5, int1 D4, int1 D3, int1 D2, int1 D1, int1 D0); 
....................  
.................... #include <Funciones.h> 
.................... int8 BIT_BYTE(int1 D7, int1 D6, int1 D5, int1 D4, int1 D3, int1 D2, int1 D1, int1 D0); 
....................  
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {   
....................    if(x==1) 
*
1AF6:  DECFSZ xE1,W
1AF8:  BRA    1B0E
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Temporizador UV    ");} 
1AFA:  MOVLW  02
1AFC:  MOVWF  xF2
1AFE:  MOVFF  E2,F3
1B02:  RCALL  167E
1B04:  MOVLW  64
1B06:  MOVWF  FF6
1B08:  MOVLW  01
1B0A:  MOVWF  FF7
1B0C:  RCALL  174E
....................    if(x==2) 
1B0E:  MOVF   xE1,W
1B10:  SUBLW  02
1B12:  BNZ   1B28
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
1B14:  MOVLW  02
1B16:  MOVWF  xF2
1B18:  MOVFF  E2,F3
1B1C:  RCALL  167E
1B1E:  MOVLW  78
1B20:  MOVWF  FF6
1B22:  MOVLW  01
1B24:  MOVWF  FF7
1B26:  RCALL  174E
....................    if(x==3) 
1B28:  MOVF   xE1,W
1B2A:  SUBLW  03
1B2C:  BNZ   1B42
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo Trabajo UV  ");} 
1B2E:  MOVLW  02
1B30:  MOVWF  xF2
1B32:  MOVFF  E2,F3
1B36:  RCALL  167E
1B38:  MOVLW  8C
1B3A:  MOVWF  FF6
1B3C:  MOVLW  01
1B3E:  MOVWF  FF7
1B40:  RCALL  174E
....................    if(x==4) 
1B42:  MOVF   xE1,W
1B44:  SUBLW  04
1B46:  BNZ   1B5C
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Punto Cero         ");} 
1B48:  MOVLW  02
1B4A:  MOVWF  xF2
1B4C:  MOVFF  E2,F3
1B50:  RCALL  167E
1B52:  MOVLW  A0
1B54:  MOVWF  FF6
1B56:  MOVLW  01
1B58:  MOVWF  FF7
1B5A:  RCALL  174E
....................     
....................    if(x==5) 
1B5C:  MOVF   xE1,W
1B5E:  SUBLW  05
1B60:  BNZ   1B92
....................    {if(estadoalarma==0) 
1B62:  BTFSC  2A.4
1B64:  BRA    1B7A
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma          OFF");} 
1B66:  MOVLW  02
1B68:  MOVWF  xF2
1B6A:  MOVFF  E2,F3
1B6E:  RCALL  167E
1B70:  MOVLW  B4
1B72:  MOVWF  FF6
1B74:  MOVLW  01
1B76:  MOVWF  FF7
1B78:  RCALL  174E
....................    if(estadoalarma==1) 
1B7A:  BTFSS  2A.4
1B7C:  BRA    1B92
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma           ON");} 
1B7E:  MOVLW  02
1B80:  MOVWF  xF2
1B82:  MOVFF  E2,F3
1B86:  RCALL  167E
1B88:  MOVLW  C8
1B8A:  MOVWF  FF6
1B8C:  MOVLW  01
1B8E:  MOVWF  FF7
1B90:  RCALL  174E
....................    } 
....................     
....................    if(x==6) 
1B92:  MOVF   xE1,W
1B94:  SUBLW  06
1B96:  BNZ   1BAC
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Velocidad          ");} 
1B98:  MOVLW  02
1B9A:  MOVWF  xF2
1B9C:  MOVFF  E2,F3
1BA0:  RCALL  167E
1BA2:  MOVLW  DC
1BA4:  MOVWF  FF6
1BA6:  MOVLW  01
1BA8:  MOVWF  FF7
1BAA:  RCALL  174E
.................... } 
1BAC:  RETLW  00
....................  
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
1C60:  RLCF   xF1,W
1C62:  MOVWF  00
1C64:  RLCF   00,F
1C66:  MOVLW  FC
1C68:  ANDWF  00,F
1C6A:  MOVFF  00,01
1C6E:  MOVF   FC2,W
1C70:  ANDLW  C3
1C72:  IORWF  00,W
1C74:  MOVWF  FC2
1C76:  MOVLW  0A
1C78:  MOVWF  xF7
1C7A:  CALL   0B9E
1C7E:  BSF    FC2.1
1C80:  BTFSC  FC2.1
1C82:  BRA    1C80
1C84:  MOVFF  FC4,03
1C88:  MOVFF  FC3,F8
1C8C:  MOVFF  FC4,F9
1C90:  CALL   0CC8
1C94:  MOVFF  03,F5
1C98:  MOVFF  02,F4
1C9C:  MOVFF  01,F3
1CA0:  MOVFF  00,F2
1CA4:  MOVFF  F2,00
1CA8:  MOVFF  F3,01
1CAC:  MOVFF  F4,02
1CB0:  MOVFF  F5,03
.................... } 
1CB4:  RETLW  00
....................  
.................... float Leer_Sensor_Presion(int media){ 
*
20E0:  CLRF   xE4
20E2:  CLRF   xE3
20E4:  CLRF   xE2
20E6:  CLRF   xE1
20E8:  CLRF   xE8
20EA:  CLRF   xE7
20EC:  CLRF   xE6
20EE:  CLRF   xE5
20F0:  CLRF   xEC
20F2:  CLRF   xEB
20F4:  CLRF   xEA
20F6:  CLRF   xE9
20F8:  CLRF   xF0
20FA:  CLRF   xEF
20FC:  CLRF   xEE
20FE:  CLRF   xED
....................    float promediopresion=0.0; 
....................    float VG=0.0,VS=0.0,G2=0.0; 
....................     
....................    V1=sensores(0);  
2100:  CLRF   xF1
2102:  RCALL  1C60
2104:  MOVFF  03,B1
2108:  MOVFF  02,B0
210C:  MOVFF  01,AF
2110:  MOVFF  00,AE
....................    //V1 = (x_uno*5.0)/1023.0;   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
....................    Presion=(V1/G)-1.0;// Presion=(Voltaje/Ganancia)-1 
2114:  MOVFF  B1,F7
2118:  MOVFF  B0,F6
211C:  MOVFF  AF,F5
2120:  MOVFF  AE,F4
2124:  MOVFF  C1,FB
2128:  MOVFF  C0,FA
212C:  MOVFF  BF,F9
2130:  MOVFF  BE,F8
2134:  RCALL  1CB6
2136:  MOVFF  00,F1
213A:  MOVFF  01,F2
213E:  MOVFF  02,F3
2142:  MOVFF  03,F4
2146:  BSF    FD8.1
2148:  MOVFF  03,FB
214C:  MOVFF  02,FA
2150:  MOVFF  01,F9
2154:  MOVFF  00,F8
2158:  CLRF   xFF
215A:  CLRF   xFE
215C:  CLRF   xFD
215E:  MOVLW  7F
2160:  MOVWF  xFC
2162:  RCALL  1E5E
2164:  MOVFF  03,B5
2168:  MOVFF  02,B4
216C:  MOVFF  01,B3
2170:  MOVFF  00,B2
....................    //VS = (V1*5.0)/1023.0;   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
....................    //G2=G; 
....................    //VG = (G2*5.0)/1023.0; 
....................    //Presion=(VS-VG);// Presion=(Voltaje/Ganancia)-1 
....................     
....................    if(Presion<0.0) 
2174:  MOVFF  B5,F7
2178:  MOVFF  B4,F6
217C:  MOVFF  B3,F5
2180:  MOVFF  B2,F4
2184:  CLRF   xFB
2186:  CLRF   xFA
2188:  CLRF   xF9
218A:  CLRF   xF8
218C:  CALL   109C
2190:  BNC   219A
....................    { 
....................       Presion=0.0; 
2192:  CLRF   xB5
2194:  CLRF   xB4
2196:  CLRF   xB3
2198:  CLRF   xB2
....................    } 
....................  
....................    if(r>media-1) 
219A:  MOVLW  01
219C:  SUBWF  xE0,W
219E:  SUBWF  3E,W
21A0:  BZ    21A6
21A2:  BNC   21A6
....................    {r=0;} 
21A4:  CLRF   3E
....................    PromPresion[r]=Presion;r++; 
21A6:  MOVF   3E,W
21A8:  MULLW  04
21AA:  MOVF   FF3,W
21AC:  CLRF   03
21AE:  ADDLW  5E
21B0:  MOVWF  FE9
21B2:  MOVLW  00
21B4:  ADDWFC 03,W
21B6:  MOVWF  FEA
21B8:  MOVFF  B2,FEF
21BC:  MOVFF  B3,FEC
21C0:  MOVFF  B4,FEC
21C4:  MOVFF  B5,FEC
21C8:  INCF   3E,F
....................           
....................    for(q=0;q<=(media-1);q++) 
21CA:  CLRF   3F
21CC:  MOVLW  01
21CE:  SUBWF  xE0,W
21D0:  SUBWF  3F,W
21D2:  BZ    21D6
21D4:  BC    2240
....................    { 
....................       promediopresion+=PromPresion[q]; 
21D6:  MOVF   3F,W
21D8:  MULLW  04
21DA:  MOVF   FF3,W
21DC:  CLRF   03
21DE:  ADDLW  5E
21E0:  MOVWF  FE9
21E2:  MOVLW  00
21E4:  ADDWFC 03,W
21E6:  MOVWF  FEA
21E8:  MOVFF  FEF,00
21EC:  MOVFF  FEC,01
21F0:  MOVFF  FEC,02
21F4:  MOVFF  FEC,03
21F8:  MOVFF  FEA,F2
21FC:  MOVFF  FE9,F1
2200:  BCF    FD8.1
2202:  MOVFF  E4,FB
2206:  MOVFF  E3,FA
220A:  MOVFF  E2,F9
220E:  MOVFF  E1,F8
2212:  MOVFF  03,FF
2216:  MOVFF  02,FE
221A:  MOVFF  01,FD
221E:  MOVFF  00,FC
2222:  RCALL  1E5E
2224:  MOVFF  F2,FEA
2228:  MOVFF  F1,FE9
222C:  MOVFF  03,E4
2230:  MOVFF  02,E3
2234:  MOVFF  01,E2
2238:  MOVFF  00,E1
....................    }  
223C:  INCF   3F,F
223E:  BRA    21CC
....................    promediopresion=promediopresion/media;    
2240:  CLRF   xF9
2242:  MOVFF  E0,F8
2246:  CALL   0CC8
224A:  MOVFF  E4,F7
224E:  MOVFF  E3,F6
2252:  MOVFF  E2,F5
2256:  MOVFF  E1,F4
225A:  MOVFF  03,FB
225E:  MOVFF  02,FA
2262:  MOVFF  01,F9
2266:  MOVFF  00,F8
226A:  RCALL  1CB6
226C:  MOVFF  03,E4
2270:  MOVFF  02,E3
2274:  MOVFF  01,E2
2278:  MOVFF  00,E1
....................     
....................    return promediopresion; 
227C:  MOVFF  E1,00
2280:  MOVFF  E2,01
2284:  MOVFF  E3,02
2288:  MOVFF  E4,03
.................... } 
228C:  RETLW  00
....................  
.................... void EliminaRuido(void){ 
....................    /*if(Menu==50){ 
....................       dato[0]=lcd_getc(1,2); 
....................       dato[1]=lcd_getc(2,2); 
....................       dato[2]=lcd_getc(3,2); 
....................       if(dato[0]!=70 || dato[1]!=105 || dato[2]!=108){ 
....................          lcd_init();delay_ms(200);lcd_init(); 
....................          Cambio=ON; 
....................       } 
....................    }*/ 
.................... } 
*
0004:  RETLW  00
....................  
.................... void ConfigInterrupciones (void){ 
....................    delay_ms(200); 
*
0C8C:  MOVLW  C8
0C8E:  MOVWF  xF7
0C90:  RCALL  0B9E
....................    lcd_init(); 
0C92:  RCALL  0C2E
....................    set_tris_a(0XFF); 
0C94:  MOVLW  FF
0C96:  MOVWF  F92
....................    set_tris_e(0XFF); 
0C98:  MOVWF  F96
....................    enable_interrupts(global); 
0C9A:  MOVLW  C0
0C9C:  IORWF  FF2,F
....................    enable_interrupts(INT_EXT_L2H); 
0C9E:  BSF    FF2.4
0CA0:  BSF    FF1.6
....................    //enable_interrupts(INT_EXT1_H2L); 
....................    setup_timer_0(RTCC_8_BIT|RTCC_DIV_256); 
0CA2:  MOVLW  C7
0CA4:  MOVWF  FD5
....................    enable_interrupts(INT_TIMER0); 
0CA6:  BSF    FF2.5
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
0CA8:  MOVLW  85
0CAA:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
0CAC:  BSF    F9D.0
....................    //setup_timer_2(T2_DIV_BY_16,0xfd,1); 
....................    //enable_interrupts(INT_TIMER2); 
....................    setup_adc_ports(AN0); 
0CAE:  MOVF   FC1,W
0CB0:  ANDLW  C0
0CB2:  IORLW  0E
0CB4:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
0CB6:  BCF    FC0.0
0CB8:  BSF    FC0.1
0CBA:  BCF    FC0.2
0CBC:  BSF    FC0.7
0CBE:  BSF    FC2.0
....................    enable_interrupts(global); 
0CC0:  MOVLW  C0
0CC2:  IORWF  FF2,F
.................... } 
0CC4:  GOTO   2AFA (RETURN)
....................  
.................... void MensajeBienvenida (void){ 
....................    lcd_gotoxy(1,1); 
*
176E:  MOVLW  01
1770:  MOVWF  xF2
1772:  MOVWF  xF3
1774:  RCALL  167E
....................    printf(lcd_putc,"CABINA FLUJO LAMINAR"); 
1776:  MOVLW  F0
1778:  MOVWF  FF6
177A:  MOVLW  01
177C:  MOVWF  FF7
177E:  RCALL  174E
....................    lcd_gotoxy(1,2); 
1780:  MOVLW  01
1782:  MOVWF  xF2
1784:  MOVLW  02
1786:  MOVWF  xF3
1788:  RCALL  167E
....................    printf(lcd_putc,"     HORIZONTAL     "); 
178A:  MOVLW  06
178C:  MOVWF  FF6
178E:  MOVLW  02
1790:  MOVWF  FF7
1792:  RCALL  174E
....................    lcd_gotoxy(1,3); 
1794:  MOVLW  01
1796:  MOVWF  xF2
1798:  MOVLW  03
179A:  MOVWF  xF3
179C:  RCALL  167E
....................    printf(lcd_putc,"    JP  INGLOBAL    "); 
179E:  MOVLW  1C
17A0:  MOVWF  FF6
17A2:  MOVLW  02
17A4:  MOVWF  FF7
17A6:  RCALL  174E
....................    lcd_gotoxy(1,4); 
17A8:  MOVLW  01
17AA:  MOVWF  xF2
17AC:  MOVLW  04
17AE:  MOVWF  xF3
17B0:  RCALL  167E
....................    printf(lcd_putc,"     REF:JPCH36     "); 
17B2:  MOVLW  32
17B4:  MOVWF  FF6
17B6:  MOVLW  02
17B8:  MOVWF  FF7
17BA:  RCALL  174E
....................    delay_ms(2000); 
17BC:  MOVLW  08
17BE:  MOVWF  xE0
17C0:  MOVLW  FA
17C2:  MOVWF  xF7
17C4:  CALL   0B9E
17C8:  DECFSZ xE0,F
17CA:  BRA    17C0
....................    printf(lcd_putc,"\f"); 
17CC:  MOVLW  0C
17CE:  MOVWF  xF1
17D0:  RCALL  16E8
.................... } 
17D2:  GOTO   2B0C (RETURN)
....................  
.................... void LeeEEPROM (void){ 
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0); 
*
0CFE:  MOVFF  FF2,E0
0D02:  BCF    FF2.6
0D04:  BCF    FF2.7
0D06:  CLRF   FA9
0D08:  BCF    FA6.6
0D0A:  BCF    FA6.7
0D0C:  BSF    FA6.0
0D0E:  MOVF   FA8,W
0D10:  BTFSC  xE0.6
0D12:  BSF    FF2.6
0D14:  BTFSC  xE0.7
0D16:  BSF    FF2.7
0D18:  MOVWF  4F
....................    delay_ms(20);  
0D1A:  MOVLW  14
0D1C:  MOVWF  xF7
0D1E:  RCALL  0B9E
....................    contrasena[1]=read_eeprom(1); 
0D20:  MOVFF  FF2,E0
0D24:  BCF    FF2.6
0D26:  BCF    FF2.7
0D28:  MOVLW  01
0D2A:  MOVWF  FA9
0D2C:  BCF    FA6.6
0D2E:  BCF    FA6.7
0D30:  BSF    FA6.0
0D32:  MOVF   FA8,W
0D34:  BTFSC  xE0.6
0D36:  BSF    FF2.6
0D38:  BTFSC  xE0.7
0D3A:  BSF    FF2.7
0D3C:  MOVWF  50
....................    delay_ms(20); 
0D3E:  MOVLW  14
0D40:  MOVWF  xF7
0D42:  RCALL  0B9E
....................    contrasena[2]=read_eeprom(2); 
0D44:  MOVFF  FF2,E0
0D48:  BCF    FF2.6
0D4A:  BCF    FF2.7
0D4C:  MOVLW  02
0D4E:  MOVWF  FA9
0D50:  BCF    FA6.6
0D52:  BCF    FA6.7
0D54:  BSF    FA6.0
0D56:  MOVF   FA8,W
0D58:  BTFSC  xE0.6
0D5A:  BSF    FF2.6
0D5C:  BTFSC  xE0.7
0D5E:  BSF    FF2.7
0D60:  MOVWF  51
....................    delay_ms(20);  
0D62:  MOVLW  14
0D64:  MOVWF  xF7
0D66:  RCALL  0B9E
....................    contrasena[3]=read_eeprom(3); 
0D68:  MOVFF  FF2,E0
0D6C:  BCF    FF2.6
0D6E:  BCF    FF2.7
0D70:  MOVLW  03
0D72:  MOVWF  FA9
0D74:  BCF    FA6.6
0D76:  BCF    FA6.7
0D78:  BSF    FA6.0
0D7A:  MOVF   FA8,W
0D7C:  BTFSC  xE0.6
0D7E:  BSF    FF2.6
0D80:  BTFSC  xE0.7
0D82:  BSF    FF2.7
0D84:  MOVWF  52
....................    delay_ms(20); 
0D86:  MOVLW  14
0D88:  MOVWF  xF7
0D8A:  RCALL  0B9E
....................    estadoalarma=read_eeprom(4); 
0D8C:  MOVFF  FF2,E0
0D90:  BCF    FF2.6
0D92:  BCF    FF2.7
0D94:  MOVLW  04
0D96:  MOVWF  FA9
0D98:  BCF    FA6.6
0D9A:  BCF    FA6.7
0D9C:  BSF    FA6.0
0D9E:  MOVF   FA8,W
0DA0:  BTFSC  xE0.6
0DA2:  BSF    FF2.6
0DA4:  BTFSC  xE0.7
0DA6:  BSF    FF2.7
0DA8:  MOVWF  01
0DAA:  BCF    2A.4
0DAC:  BTFSC  01.0
0DAE:  BSF    2A.4
....................    delay_ms(20); 
0DB0:  MOVLW  14
0DB2:  MOVWF  xF7
0DB4:  RCALL  0B9E
....................    tempo_minutos=read_eeprom(5); 
0DB6:  MOVFF  FF2,E0
0DBA:  BCF    FF2.6
0DBC:  BCF    FF2.7
0DBE:  MOVLW  05
0DC0:  MOVWF  FA9
0DC2:  BCF    FA6.6
0DC4:  BCF    FA6.7
0DC6:  BSF    FA6.0
0DC8:  MOVF   FA8,W
0DCA:  BTFSC  xE0.6
0DCC:  BSF    FF2.6
0DCE:  BTFSC  xE0.7
0DD0:  BSF    FF2.7
0DD2:  MOVWF  3A
....................    delay_ms(20); 
0DD4:  MOVLW  14
0DD6:  MOVWF  xF7
0DD8:  RCALL  0B9E
....................    tempo_segundos=read_eeprom(6); 
0DDA:  MOVFF  FF2,E0
0DDE:  BCF    FF2.6
0DE0:  BCF    FF2.7
0DE2:  MOVLW  06
0DE4:  MOVWF  FA9
0DE6:  BCF    FA6.6
0DE8:  BCF    FA6.7
0DEA:  BSF    FA6.0
0DEC:  MOVF   FA8,W
0DEE:  BTFSC  xE0.6
0DF0:  BSF    FF2.6
0DF2:  BTFSC  xE0.7
0DF4:  BSF    FF2.7
0DF6:  MOVWF  3B
....................    delay_ms(20); 
0DF8:  MOVLW  14
0DFA:  MOVWF  xF7
0DFC:  RCALL  0B9E
....................    segundos=read_eeprom(7); 
0DFE:  MOVFF  FF2,E0
0E02:  BCF    FF2.6
0E04:  BCF    FF2.7
0E06:  MOVLW  07
0E08:  MOVWF  FA9
0E0A:  BCF    FA6.6
0E0C:  BCF    FA6.7
0E0E:  BSF    FA6.0
0E10:  MOVF   FA8,W
0E12:  BTFSC  xE0.6
0E14:  BSF    FF2.6
0E16:  BTFSC  xE0.7
0E18:  BSF    FF2.7
0E1A:  MOVWF  34
....................    delay_ms(20); 
0E1C:  MOVLW  14
0E1E:  MOVWF  xF7
0E20:  RCALL  0B9E
....................    minutos=read_eeprom(8); 
0E22:  MOVFF  FF2,E0
0E26:  BCF    FF2.6
0E28:  BCF    FF2.7
0E2A:  MOVLW  08
0E2C:  MOVWF  FA9
0E2E:  BCF    FA6.6
0E30:  BCF    FA6.7
0E32:  BSF    FA6.0
0E34:  MOVF   FA8,W
0E36:  BTFSC  xE0.6
0E38:  BSF    FF2.6
0E3A:  BTFSC  xE0.7
0E3C:  BSF    FF2.7
0E3E:  MOVWF  35
....................    delay_ms(20); 
0E40:  MOVLW  14
0E42:  MOVWF  xF7
0E44:  RCALL  0B9E
....................    horasL=read_eeprom(9); 
0E46:  MOVFF  FF2,E0
0E4A:  BCF    FF2.6
0E4C:  BCF    FF2.7
0E4E:  MOVLW  09
0E50:  MOVWF  FA9
0E52:  BCF    FA6.6
0E54:  BCF    FA6.7
0E56:  BSF    FA6.0
0E58:  MOVF   FA8,W
0E5A:  BTFSC  xE0.6
0E5C:  BSF    FF2.6
0E5E:  BTFSC  xE0.7
0E60:  BSF    FF2.7
0E62:  MOVWF  36
....................    delay_ms(20); 
0E64:  MOVLW  14
0E66:  MOVWF  xF7
0E68:  RCALL  0B9E
....................    horasH=read_eeprom(10); 
0E6A:  MOVFF  FF2,E0
0E6E:  BCF    FF2.6
0E70:  BCF    FF2.7
0E72:  MOVLW  0A
0E74:  MOVWF  FA9
0E76:  BCF    FA6.6
0E78:  BCF    FA6.7
0E7A:  BSF    FA6.0
0E7C:  MOVF   FA8,W
0E7E:  BTFSC  xE0.6
0E80:  BSF    FF2.6
0E82:  BTFSC  xE0.7
0E84:  BSF    FF2.7
0E86:  MOVWF  37
....................    delay_ms(20); 
0E88:  MOVLW  14
0E8A:  MOVWF  xF7
0E8C:  RCALL  0B9E
....................    G_l=read_eeprom(11); 
0E8E:  MOVFF  FF2,E0
0E92:  BCF    FF2.6
0E94:  BCF    FF2.7
0E96:  MOVLW  0B
0E98:  MOVWF  FA9
0E9A:  BCF    FA6.6
0E9C:  BCF    FA6.7
0E9E:  BSF    FA6.0
0EA0:  MOVF   FA8,W
0EA2:  BTFSC  xE0.6
0EA4:  BSF    FF2.6
0EA6:  BTFSC  xE0.7
0EA8:  BSF    FF2.7
0EAA:  MOVWF  38
....................    delay_ms(20); 
0EAC:  MOVLW  14
0EAE:  MOVWF  xF7
0EB0:  RCALL  0B9E
....................    G_h=read_eeprom(12); 
0EB2:  MOVFF  FF2,E0
0EB6:  BCF    FF2.6
0EB8:  BCF    FF2.7
0EBA:  MOVLW  0C
0EBC:  MOVWF  FA9
0EBE:  BCF    FA6.6
0EC0:  BCF    FA6.7
0EC2:  BSF    FA6.0
0EC4:  MOVF   FA8,W
0EC6:  BTFSC  xE0.6
0EC8:  BSF    FF2.6
0ECA:  BTFSC  xE0.7
0ECC:  BSF    FF2.7
0ECE:  MOVWF  39
....................    delay_ms(20); 
0ED0:  MOVLW  14
0ED2:  MOVWF  xF7
0ED4:  RCALL  0B9E
....................    Vel1=read_eeprom(13); 
0ED6:  MOVFF  FF2,E0
0EDA:  BCF    FF2.6
0EDC:  BCF    FF2.7
0EDE:  MOVLW  0D
0EE0:  MOVWF  FA9
0EE2:  BCF    FA6.6
0EE4:  BCF    FA6.7
0EE6:  BSF    FA6.0
0EE8:  MOVF   FA8,W
0EEA:  BTFSC  xE0.6
0EEC:  BSF    FF2.6
0EEE:  BTFSC  xE0.7
0EF0:  BSF    FF2.7
0EF2:  MOVWF  57
....................    delay_ms(20); 
0EF4:  MOVLW  14
0EF6:  MOVWF  xF7
0EF8:  RCALL  0B9E
....................    codigoSubir=read_eeprom(15); 
0EFA:  MOVFF  FF2,E0
0EFE:  BCF    FF2.6
0F00:  BCF    FF2.7
0F02:  MOVLW  0F
0F04:  MOVWF  FA9
0F06:  BCF    FA6.6
0F08:  BCF    FA6.7
0F0A:  BSF    FA6.0
0F0C:  MOVF   FA8,W
0F0E:  BTFSC  xE0.6
0F10:  BSF    FF2.6
0F12:  BTFSC  xE0.7
0F14:  BSF    FF2.7
0F16:  MOVWF  54
....................    delay_ms(20); 
0F18:  MOVLW  14
0F1A:  MOVWF  xF7
0F1C:  RCALL  0B9E
....................    codigoBajar=read_eeprom(16); 
0F1E:  MOVFF  FF2,E0
0F22:  BCF    FF2.6
0F24:  BCF    FF2.7
0F26:  MOVLW  10
0F28:  MOVWF  FA9
0F2A:  BCF    FA6.6
0F2C:  BCF    FA6.7
0F2E:  BSF    FA6.0
0F30:  MOVF   FA8,W
0F32:  BTFSC  xE0.6
0F34:  BSF    FF2.6
0F36:  BTFSC  xE0.7
0F38:  BSF    FF2.7
0F3A:  MOVWF  55
....................    delay_ms(20); 
0F3C:  MOVLW  14
0F3E:  MOVWF  xF7
0F40:  RCALL  0B9E
....................    codigoDetener=read_eeprom(17); 
0F42:  MOVFF  FF2,E0
0F46:  BCF    FF2.6
0F48:  BCF    FF2.7
0F4A:  MOVLW  11
0F4C:  MOVWF  FA9
0F4E:  BCF    FA6.6
0F50:  BCF    FA6.7
0F52:  BSF    FA6.0
0F54:  MOVF   FA8,W
0F56:  BTFSC  xE0.6
0F58:  BSF    FF2.6
0F5A:  BTFSC  xE0.7
0F5C:  BSF    FF2.7
0F5E:  MOVWF  56
....................    delay_ms(20); 
0F60:  MOVLW  14
0F62:  MOVWF  xF7
0F64:  RCALL  0B9E
....................    G16=make16(G_h,G_l); 
0F66:  MOVFF  39,5D
0F6A:  MOVFF  38,5C
....................    G=G16; 
0F6E:  MOVFF  5D,F9
0F72:  MOVFF  5C,F8
0F76:  RCALL  0CC8
0F78:  MOVFF  03,C1
0F7C:  MOVFF  02,C0
0F80:  MOVFF  01,BF
0F84:  MOVFF  00,BE
....................    horasTrabajo=make16(read_eeprom(19),read_eeprom(18)); 
0F88:  MOVFF  FF2,E0
0F8C:  BCF    FF2.6
0F8E:  BCF    FF2.7
0F90:  MOVLW  13
0F92:  MOVWF  FA9
0F94:  BCF    FA6.6
0F96:  BCF    FA6.7
0F98:  BSF    FA6.0
0F9A:  MOVF   FA8,W
0F9C:  BTFSC  xE0.6
0F9E:  BSF    FF2.6
0FA0:  BTFSC  xE0.7
0FA2:  BSF    FF2.7
0FA4:  MOVWF  xE1
0FA6:  MOVFF  FF2,E2
0FAA:  BCF    FF2.6
0FAC:  BCF    FF2.7
0FAE:  MOVLW  12
0FB0:  MOVWF  FA9
0FB2:  BCF    FA6.6
0FB4:  BCF    FA6.7
0FB6:  BSF    FA6.0
0FB8:  MOVF   FA8,W
0FBA:  BTFSC  xE2.6
0FBC:  BSF    FF2.6
0FBE:  BTFSC  xE2.7
0FC0:  BSF    FF2.7
0FC2:  MOVWF  xE3
0FC4:  MOVFF  E1,D0
0FC8:  MOVFF  E3,CF
....................    delay_ms(20); 
0FCC:  MOVLW  14
0FCE:  MOVWF  xF7
0FD0:  RCALL  0B9E
....................    segundosTrabajo=make16(read_eeprom(21),read_eeprom(20)); 
0FD2:  MOVFF  FF2,E0
0FD6:  BCF    FF2.6
0FD8:  BCF    FF2.7
0FDA:  MOVLW  15
0FDC:  MOVWF  FA9
0FDE:  BCF    FA6.6
0FE0:  BCF    FA6.7
0FE2:  BSF    FA6.0
0FE4:  MOVF   FA8,W
0FE6:  BTFSC  xE0.6
0FE8:  BSF    FF2.6
0FEA:  BTFSC  xE0.7
0FEC:  BSF    FF2.7
0FEE:  MOVWF  xE1
0FF0:  MOVFF  FF2,E2
0FF4:  BCF    FF2.6
0FF6:  BCF    FF2.7
0FF8:  MOVLW  14
0FFA:  MOVWF  FA9
0FFC:  BCF    FA6.6
0FFE:  BCF    FA6.7
1000:  BSF    FA6.0
1002:  MOVF   FA8,W
1004:  BTFSC  xE2.6
1006:  BSF    FF2.6
1008:  BTFSC  xE2.7
100A:  BSF    FF2.7
100C:  MOVWF  xE3
100E:  MOVFF  E1,CE
1012:  MOVFF  E3,CD
....................    delay_ms(20); 
1016:  MOVLW  14
1018:  MOVWF  xF7
101A:  RCALL  0B9E
....................    motor=read_eeprom(22); 
101C:  MOVFF  FF2,E0
1020:  BCF    FF2.6
1022:  BCF    FF2.7
1024:  MOVLW  16
1026:  MOVWF  FA9
1028:  BCF    FA6.6
102A:  BCF    FA6.7
102C:  BSF    FA6.0
102E:  MOVF   FA8,W
1030:  BTFSC  xE0.6
1032:  BSF    FF2.6
1034:  BTFSC  xE0.7
1036:  BSF    FF2.7
1038:  MOVWF  44
....................    delay_ms(20); 
103A:  MOVLW  14
103C:  MOVWF  xF7
103E:  RCALL  0B9E
....................    luz=read_eeprom(23); 
1040:  MOVFF  FF2,E0
1044:  BCF    FF2.6
1046:  BCF    FF2.7
1048:  MOVLW  17
104A:  MOVWF  FA9
104C:  BCF    FA6.6
104E:  BCF    FA6.7
1050:  BSF    FA6.0
1052:  MOVF   FA8,W
1054:  BTFSC  xE0.6
1056:  BSF    FF2.6
1058:  BTFSC  xE0.7
105A:  BSF    FF2.7
105C:  MOVWF  45
....................    delay_ms(20); 
105E:  MOVLW  14
1060:  MOVWF  xF7
1062:  RCALL  0B9E
....................    velocidadInicial=read_eeprom(24); 
1064:  MOVFF  FF2,E0
1068:  BCF    FF2.6
106A:  BCF    FF2.7
106C:  MOVLW  18
106E:  MOVWF  FA9
1070:  BCF    FA6.6
1072:  BCF    FA6.7
1074:  BSF    FA6.0
1076:  MOVF   FA8,W
1078:  BTFSC  xE0.6
107A:  BSF    FF2.6
107C:  BTFSC  xE0.7
107E:  BSF    FF2.7
1080:  MOVWF  46
....................    delay_ms(20); 
1082:  MOVLW  14
1084:  MOVWF  xF7
1086:  RCALL  0B9E
....................    horas=make16(horasH,horasL); 
1088:  MOVFF  37,5B
108C:  MOVFF  36,5A
....................    tempo_minutos_pro=tempo_minutos;tempo_segundos_pro=tempo_segundos; 
1090:  MOVFF  3A,3C
1094:  MOVFF  3B,3D
.................... } 
1098:  GOTO   2AFE (RETURN)
....................  
.................... void LimitaValores(void){ 
....................     
....................    if(Contrasena[0]>9 || Contrasena[0]<0){ 
*
1112:  BTFSC  4F.7
1114:  BRA    111C
1116:  MOVF   4F,W
1118:  SUBLW  09
111A:  BNC   1122
111C:  BTFSC  4F.7
111E:  BRA    1122
1120:  BRA    1154
....................       Contrasena[0]=0;write_eeprom(0,0);delay_ms(20); 
1122:  CLRF   4F
1124:  CLRF   FA9
1126:  CLRF   FA8
1128:  BCF    FA6.6
112A:  BCF    FA6.7
112C:  BSF    FA6.2
112E:  MOVF   FF2,W
1130:  MOVWF  00
1132:  BCF    FF2.6
1134:  BCF    FF2.7
1136:  MOVLB  F
1138:  MOVLW  55
113A:  MOVWF  FA7
113C:  MOVLW  AA
113E:  MOVWF  FA7
1140:  BSF    FA6.1
1142:  BTFSC  FA6.1
1144:  BRA    1142
1146:  BCF    FA6.2
1148:  MOVF   00,W
114A:  IORWF  FF2,F
114C:  MOVLW  14
114E:  MOVLB  0
1150:  MOVWF  xF7
1152:  RCALL  0B9E
....................    } 
....................    if(Contrasena[1]>9 || Contrasena[1]<0){ 
1154:  BTFSC  50.7
1156:  BRA    115E
1158:  MOVF   50,W
115A:  SUBLW  09
115C:  BNC   1164
115E:  BTFSC  50.7
1160:  BRA    1164
1162:  BRA    1198
....................       Contrasena[1]=0;write_eeprom(1,0);delay_ms(20); 
1164:  CLRF   50
1166:  MOVLW  01
1168:  MOVWF  FA9
116A:  CLRF   FA8
116C:  BCF    FA6.6
116E:  BCF    FA6.7
1170:  BSF    FA6.2
1172:  MOVF   FF2,W
1174:  MOVWF  00
1176:  BCF    FF2.6
1178:  BCF    FF2.7
117A:  MOVLB  F
117C:  MOVLW  55
117E:  MOVWF  FA7
1180:  MOVLW  AA
1182:  MOVWF  FA7
1184:  BSF    FA6.1
1186:  BTFSC  FA6.1
1188:  BRA    1186
118A:  BCF    FA6.2
118C:  MOVF   00,W
118E:  IORWF  FF2,F
1190:  MOVLW  14
1192:  MOVLB  0
1194:  MOVWF  xF7
1196:  RCALL  0B9E
....................    } 
....................    if(Contrasena[2]>9 || Contrasena[2]<0){ 
1198:  BTFSC  51.7
119A:  BRA    11A2
119C:  MOVF   51,W
119E:  SUBLW  09
11A0:  BNC   11A8
11A2:  BTFSC  51.7
11A4:  BRA    11A8
11A6:  BRA    11DC
....................       Contrasena[2]=0;write_eeprom(2,0);delay_ms(20); 
11A8:  CLRF   51
11AA:  MOVLW  02
11AC:  MOVWF  FA9
11AE:  CLRF   FA8
11B0:  BCF    FA6.6
11B2:  BCF    FA6.7
11B4:  BSF    FA6.2
11B6:  MOVF   FF2,W
11B8:  MOVWF  00
11BA:  BCF    FF2.6
11BC:  BCF    FF2.7
11BE:  MOVLB  F
11C0:  MOVLW  55
11C2:  MOVWF  FA7
11C4:  MOVLW  AA
11C6:  MOVWF  FA7
11C8:  BSF    FA6.1
11CA:  BTFSC  FA6.1
11CC:  BRA    11CA
11CE:  BCF    FA6.2
11D0:  MOVF   00,W
11D2:  IORWF  FF2,F
11D4:  MOVLW  14
11D6:  MOVLB  0
11D8:  MOVWF  xF7
11DA:  RCALL  0B9E
....................    } 
....................    if(Contrasena[3]>9 || Contrasena[3]<0){ 
11DC:  BTFSC  52.7
11DE:  BRA    11E6
11E0:  MOVF   52,W
11E2:  SUBLW  09
11E4:  BNC   11EC
11E6:  BTFSC  52.7
11E8:  BRA    11EC
11EA:  BRA    1220
....................       Contrasena[3]=0;write_eeprom(3,0);delay_ms(20); 
11EC:  CLRF   52
11EE:  MOVLW  03
11F0:  MOVWF  FA9
11F2:  CLRF   FA8
11F4:  BCF    FA6.6
11F6:  BCF    FA6.7
11F8:  BSF    FA6.2
11FA:  MOVF   FF2,W
11FC:  MOVWF  00
11FE:  BCF    FF2.6
1200:  BCF    FF2.7
1202:  MOVLB  F
1204:  MOVLW  55
1206:  MOVWF  FA7
1208:  MOVLW  AA
120A:  MOVWF  FA7
120C:  BSF    FA6.1
120E:  BTFSC  FA6.1
1210:  BRA    120E
1212:  BCF    FA6.2
1214:  MOVF   00,W
1216:  IORWF  FF2,F
1218:  MOVLW  14
121A:  MOVLB  0
121C:  MOVWF  xF7
121E:  RCALL  0B9E
....................    } 
....................    if(estadoalarma>1){ 
1220:  MOVLW  00
1222:  BTFSC  2A.4
1224:  MOVLW  01
1226:  SUBLW  01
1228:  BC    1260
....................       estadoalarma=1;write_eeprom(4,1);delay_ms(20); 
122A:  BSF    2A.4
122C:  MOVLW  04
122E:  MOVWF  FA9
1230:  MOVLW  01
1232:  MOVWF  FA8
1234:  BCF    FA6.6
1236:  BCF    FA6.7
1238:  BSF    FA6.2
123A:  MOVF   FF2,W
123C:  MOVWF  00
123E:  BCF    FF2.6
1240:  BCF    FF2.7
1242:  MOVLB  F
1244:  MOVLW  55
1246:  MOVWF  FA7
1248:  MOVLW  AA
124A:  MOVWF  FA7
124C:  BSF    FA6.1
124E:  BTFSC  FA6.1
1250:  BRA    124E
1252:  BCF    FA6.2
1254:  MOVF   00,W
1256:  IORWF  FF2,F
1258:  MOVLW  14
125A:  MOVLB  0
125C:  MOVWF  xF7
125E:  RCALL  0B9E
....................    } 
....................    if(tempo_minutos>200){ 
1260:  MOVF   3A,W
1262:  SUBLW  C8
1264:  BC    129E
....................       tempo_minutos=20;write_eeprom(5,20);delay_ms(20); 
1266:  MOVLW  14
1268:  MOVWF  3A
126A:  MOVLW  05
126C:  MOVWF  FA9
126E:  MOVLW  14
1270:  MOVWF  FA8
1272:  BCF    FA6.6
1274:  BCF    FA6.7
1276:  BSF    FA6.2
1278:  MOVF   FF2,W
127A:  MOVWF  00
127C:  BCF    FF2.6
127E:  BCF    FF2.7
1280:  MOVLB  F
1282:  MOVLW  55
1284:  MOVWF  FA7
1286:  MOVLW  AA
1288:  MOVWF  FA7
128A:  BSF    FA6.1
128C:  BTFSC  FA6.1
128E:  BRA    128C
1290:  BCF    FA6.2
1292:  MOVF   00,W
1294:  IORWF  FF2,F
1296:  MOVLW  14
1298:  MOVLB  0
129A:  MOVWF  xF7
129C:  RCALL  0B9E
....................    } 
....................    if(tempo_segundos>59){ 
129E:  MOVF   3B,W
12A0:  SUBLW  3B
12A2:  BC    12D8
....................       tempo_segundos=0;write_eeprom(6,0);delay_ms(20); 
12A4:  CLRF   3B
12A6:  MOVLW  06
12A8:  MOVWF  FA9
12AA:  CLRF   FA8
12AC:  BCF    FA6.6
12AE:  BCF    FA6.7
12B0:  BSF    FA6.2
12B2:  MOVF   FF2,W
12B4:  MOVWF  00
12B6:  BCF    FF2.6
12B8:  BCF    FF2.7
12BA:  MOVLB  F
12BC:  MOVLW  55
12BE:  MOVWF  FA7
12C0:  MOVLW  AA
12C2:  MOVWF  FA7
12C4:  BSF    FA6.1
12C6:  BTFSC  FA6.1
12C8:  BRA    12C6
12CA:  BCF    FA6.2
12CC:  MOVF   00,W
12CE:  IORWF  FF2,F
12D0:  MOVLW  14
12D2:  MOVLB  0
12D4:  MOVWF  xF7
12D6:  RCALL  0B9E
....................    } 
....................    if(segundos>60){ 
12D8:  MOVF   34,W
12DA:  SUBLW  3C
12DC:  BC    1312
....................       segundos=0;write_eeprom(7,0);delay_ms(20); 
12DE:  CLRF   34
12E0:  MOVLW  07
12E2:  MOVWF  FA9
12E4:  CLRF   FA8
12E6:  BCF    FA6.6
12E8:  BCF    FA6.7
12EA:  BSF    FA6.2
12EC:  MOVF   FF2,W
12EE:  MOVWF  00
12F0:  BCF    FF2.6
12F2:  BCF    FF2.7
12F4:  MOVLB  F
12F6:  MOVLW  55
12F8:  MOVWF  FA7
12FA:  MOVLW  AA
12FC:  MOVWF  FA7
12FE:  BSF    FA6.1
1300:  BTFSC  FA6.1
1302:  BRA    1300
1304:  BCF    FA6.2
1306:  MOVF   00,W
1308:  IORWF  FF2,F
130A:  MOVLW  14
130C:  MOVLB  0
130E:  MOVWF  xF7
1310:  RCALL  0B9E
....................    } 
....................    if(minutos>60){ 
1312:  MOVF   35,W
1314:  SUBLW  3C
1316:  BC    134C
....................       minutos=0;write_eeprom(8,0);delay_ms(20); 
1318:  CLRF   35
131A:  MOVLW  08
131C:  MOVWF  FA9
131E:  CLRF   FA8
1320:  BCF    FA6.6
1322:  BCF    FA6.7
1324:  BSF    FA6.2
1326:  MOVF   FF2,W
1328:  MOVWF  00
132A:  BCF    FF2.6
132C:  BCF    FF2.7
132E:  MOVLB  F
1330:  MOVLW  55
1332:  MOVWF  FA7
1334:  MOVLW  AA
1336:  MOVWF  FA7
1338:  BSF    FA6.1
133A:  BTFSC  FA6.1
133C:  BRA    133A
133E:  BCF    FA6.2
1340:  MOVF   00,W
1342:  IORWF  FF2,F
1344:  MOVLW  14
1346:  MOVLB  0
1348:  MOVWF  xF7
134A:  RCALL  0B9E
....................    } 
....................    if(horas>10000){ 
134C:  MOVF   5B,W
134E:  SUBLW  26
1350:  BC    13C8
1352:  XORLW  FF
1354:  BNZ   135C
1356:  MOVF   5A,W
1358:  SUBLW  10
135A:  BC    13C8
....................       horas=0;write_eeprom(9,10);delay_ms(20);write_eeprom(10,0);delay_ms(20); 
135C:  CLRF   5B
135E:  CLRF   5A
1360:  MOVLW  09
1362:  MOVWF  FA9
1364:  MOVLW  0A
1366:  MOVWF  FA8
1368:  BCF    FA6.6
136A:  BCF    FA6.7
136C:  BSF    FA6.2
136E:  MOVF   FF2,W
1370:  MOVWF  00
1372:  BCF    FF2.6
1374:  BCF    FF2.7
1376:  MOVLB  F
1378:  MOVLW  55
137A:  MOVWF  FA7
137C:  MOVLW  AA
137E:  MOVWF  FA7
1380:  BSF    FA6.1
1382:  BTFSC  FA6.1
1384:  BRA    1382
1386:  BCF    FA6.2
1388:  MOVF   00,W
138A:  IORWF  FF2,F
138C:  MOVLW  14
138E:  MOVLB  0
1390:  MOVWF  xF7
1392:  RCALL  0B9E
1394:  MOVLW  0A
1396:  MOVWF  FA9
1398:  CLRF   FA8
139A:  BCF    FA6.6
139C:  BCF    FA6.7
139E:  BSF    FA6.2
13A0:  MOVF   FF2,W
13A2:  MOVWF  00
13A4:  BCF    FF2.6
13A6:  BCF    FF2.7
13A8:  MOVLB  F
13AA:  MOVLW  55
13AC:  MOVWF  FA7
13AE:  MOVLW  AA
13B0:  MOVWF  FA7
13B2:  BSF    FA6.1
13B4:  BTFSC  FA6.1
13B6:  BRA    13B4
13B8:  BCF    FA6.2
13BA:  MOVF   00,W
13BC:  IORWF  FF2,F
13BE:  MOVLW  14
13C0:  MOVLB  0
13C2:  MOVWF  xF7
13C4:  CALL   0B9E
....................    } 
....................    if(G<180 || G>300){ 
13C8:  MOVFF  C1,F7
13CC:  MOVFF  C0,F6
13D0:  MOVFF  BF,F5
13D4:  MOVFF  BE,F4
13D8:  CLRF   xFB
13DA:  CLRF   xFA
13DC:  MOVLW  34
13DE:  MOVWF  xF9
13E0:  MOVLW  86
13E2:  MOVWF  xF8
13E4:  RCALL  109C
13E6:  BC    1408
13E8:  CLRF   xF7
13EA:  CLRF   xF6
13EC:  MOVLW  16
13EE:  MOVWF  xF5
13F0:  MOVLW  87
13F2:  MOVWF  xF4
13F4:  MOVFF  C1,FB
13F8:  MOVFF  C0,FA
13FC:  MOVFF  BF,F9
1400:  MOVFF  BE,F8
1404:  RCALL  109C
1406:  BNC   147E
....................       G=220;write_eeprom(11,220);delay_ms(20);write_eeprom(12,0);delay_ms(20); 
1408:  CLRF   xC1
140A:  CLRF   xC0
140C:  MOVLW  5C
140E:  MOVWF  xBF
1410:  MOVLW  86
1412:  MOVWF  xBE
1414:  MOVLW  0B
1416:  MOVWF  FA9
1418:  MOVLW  DC
141A:  MOVWF  FA8
141C:  BCF    FA6.6
141E:  BCF    FA6.7
1420:  BSF    FA6.2
1422:  MOVF   FF2,W
1424:  MOVWF  00
1426:  BCF    FF2.6
1428:  BCF    FF2.7
142A:  MOVLB  F
142C:  MOVLW  55
142E:  MOVWF  FA7
1430:  MOVLW  AA
1432:  MOVWF  FA7
1434:  BSF    FA6.1
1436:  BTFSC  FA6.1
1438:  BRA    1436
143A:  BCF    FA6.2
143C:  MOVF   00,W
143E:  IORWF  FF2,F
1440:  MOVLW  14
1442:  MOVLB  0
1444:  MOVWF  xF7
1446:  CALL   0B9E
144A:  MOVLW  0C
144C:  MOVWF  FA9
144E:  CLRF   FA8
1450:  BCF    FA6.6
1452:  BCF    FA6.7
1454:  BSF    FA6.2
1456:  MOVF   FF2,W
1458:  MOVWF  00
145A:  BCF    FF2.6
145C:  BCF    FF2.7
145E:  MOVLB  F
1460:  MOVLW  55
1462:  MOVWF  FA7
1464:  MOVLW  AA
1466:  MOVWF  FA7
1468:  BSF    FA6.1
146A:  BTFSC  FA6.1
146C:  BRA    146A
146E:  BCF    FA6.2
1470:  MOVF   00,W
1472:  IORWF  FF2,F
1474:  MOVLW  14
1476:  MOVLB  0
1478:  MOVWF  xF7
147A:  CALL   0B9E
....................    } 
....................    if(Vel1>20 || Vel1<1){ 
147E:  MOVF   57,W
1480:  SUBLW  14
1482:  BNC   1488
1484:  MOVF   57,F
1486:  BNZ   14C2
....................       Vel1=10;write_eeprom(13,10);delay_ms(20); 
1488:  MOVLW  0A
148A:  MOVWF  57
148C:  MOVLW  0D
148E:  MOVWF  FA9
1490:  MOVLW  0A
1492:  MOVWF  FA8
1494:  BCF    FA6.6
1496:  BCF    FA6.7
1498:  BSF    FA6.2
149A:  MOVF   FF2,W
149C:  MOVWF  00
149E:  BCF    FF2.6
14A0:  BCF    FF2.7
14A2:  MOVLB  F
14A4:  MOVLW  55
14A6:  MOVWF  FA7
14A8:  MOVLW  AA
14AA:  MOVWF  FA7
14AC:  BSF    FA6.1
14AE:  BTFSC  FA6.1
14B0:  BRA    14AE
14B2:  BCF    FA6.2
14B4:  MOVF   00,W
14B6:  IORWF  FF2,F
14B8:  MOVLW  14
14BA:  MOVLB  0
14BC:  MOVWF  xF7
14BE:  CALL   0B9E
....................    } 
....................    if(horasTrabajo>60000){ 
14C2:  MOVF   xD0,W
14C4:  SUBLW  E9
14C6:  BC    153E
14C8:  XORLW  FF
14CA:  BNZ   14D2
14CC:  MOVF   xCF,W
14CE:  SUBLW  60
14D0:  BC    153E
....................       horasTrabajo=0;write_eeprom(19,0);delay_ms(20);write_eeprom(18,0);delay_ms(20); 
14D2:  CLRF   xD0
14D4:  CLRF   xCF
14D6:  MOVLW  13
14D8:  MOVWF  FA9
14DA:  CLRF   FA8
14DC:  BCF    FA6.6
14DE:  BCF    FA6.7
14E0:  BSF    FA6.2
14E2:  MOVF   FF2,W
14E4:  MOVWF  00
14E6:  BCF    FF2.6
14E8:  BCF    FF2.7
14EA:  MOVLB  F
14EC:  MOVLW  55
14EE:  MOVWF  FA7
14F0:  MOVLW  AA
14F2:  MOVWF  FA7
14F4:  BSF    FA6.1
14F6:  BTFSC  FA6.1
14F8:  BRA    14F6
14FA:  BCF    FA6.2
14FC:  MOVF   00,W
14FE:  IORWF  FF2,F
1500:  MOVLW  14
1502:  MOVLB  0
1504:  MOVWF  xF7
1506:  CALL   0B9E
150A:  MOVLW  12
150C:  MOVWF  FA9
150E:  CLRF   FA8
1510:  BCF    FA6.6
1512:  BCF    FA6.7
1514:  BSF    FA6.2
1516:  MOVF   FF2,W
1518:  MOVWF  00
151A:  BCF    FF2.6
151C:  BCF    FF2.7
151E:  MOVLB  F
1520:  MOVLW  55
1522:  MOVWF  FA7
1524:  MOVLW  AA
1526:  MOVWF  FA7
1528:  BSF    FA6.1
152A:  BTFSC  FA6.1
152C:  BRA    152A
152E:  BCF    FA6.2
1530:  MOVF   00,W
1532:  IORWF  FF2,F
1534:  MOVLW  14
1536:  MOVLB  0
1538:  MOVWF  xF7
153A:  CALL   0B9E
....................    } 
....................    if(segundosTrabajo>3600){ 
153E:  MOVF   xCE,W
1540:  SUBLW  0D
1542:  BC    15BA
1544:  XORLW  FF
1546:  BNZ   154E
1548:  MOVF   xCD,W
154A:  SUBLW  10
154C:  BC    15BA
....................       segundosTrabajo=0;write_eeprom(20,0);delay_ms(20);write_eeprom(21,0);delay_ms(20); 
154E:  CLRF   xCE
1550:  CLRF   xCD
1552:  MOVLW  14
1554:  MOVWF  FA9
1556:  CLRF   FA8
1558:  BCF    FA6.6
155A:  BCF    FA6.7
155C:  BSF    FA6.2
155E:  MOVF   FF2,W
1560:  MOVWF  00
1562:  BCF    FF2.6
1564:  BCF    FF2.7
1566:  MOVLB  F
1568:  MOVLW  55
156A:  MOVWF  FA7
156C:  MOVLW  AA
156E:  MOVWF  FA7
1570:  BSF    FA6.1
1572:  BTFSC  FA6.1
1574:  BRA    1572
1576:  BCF    FA6.2
1578:  MOVF   00,W
157A:  IORWF  FF2,F
157C:  MOVLW  14
157E:  MOVLB  0
1580:  MOVWF  xF7
1582:  CALL   0B9E
1586:  MOVLW  15
1588:  MOVWF  FA9
158A:  CLRF   FA8
158C:  BCF    FA6.6
158E:  BCF    FA6.7
1590:  BSF    FA6.2
1592:  MOVF   FF2,W
1594:  MOVWF  00
1596:  BCF    FF2.6
1598:  BCF    FF2.7
159A:  MOVLB  F
159C:  MOVLW  55
159E:  MOVWF  FA7
15A0:  MOVLW  AA
15A2:  MOVWF  FA7
15A4:  BSF    FA6.1
15A6:  BTFSC  FA6.1
15A8:  BRA    15A6
15AA:  BCF    FA6.2
15AC:  MOVF   00,W
15AE:  IORWF  FF2,F
15B0:  MOVLW  14
15B2:  MOVLB  0
15B4:  MOVWF  xF7
15B6:  CALL   0B9E
....................    } 
....................    if(motor>1){ 
15BA:  MOVF   44,W
15BC:  SUBLW  01
15BE:  BC    15FA
....................       motor=1;write_eeprom(22,1);delay_ms(20); 
15C0:  MOVLW  01
15C2:  MOVWF  44
15C4:  MOVLW  16
15C6:  MOVWF  FA9
15C8:  MOVLW  01
15CA:  MOVWF  FA8
15CC:  BCF    FA6.6
15CE:  BCF    FA6.7
15D0:  BSF    FA6.2
15D2:  MOVF   FF2,W
15D4:  MOVWF  00
15D6:  BCF    FF2.6
15D8:  BCF    FF2.7
15DA:  MOVLB  F
15DC:  MOVLW  55
15DE:  MOVWF  FA7
15E0:  MOVLW  AA
15E2:  MOVWF  FA7
15E4:  BSF    FA6.1
15E6:  BTFSC  FA6.1
15E8:  BRA    15E6
15EA:  BCF    FA6.2
15EC:  MOVF   00,W
15EE:  IORWF  FF2,F
15F0:  MOVLW  14
15F2:  MOVLB  0
15F4:  MOVWF  xF7
15F6:  CALL   0B9E
....................    } 
....................    if(luz>1){ 
15FA:  MOVF   45,W
15FC:  SUBLW  01
15FE:  BC    163A
....................       luz=1;write_eeprom(23,1);delay_ms(20); 
1600:  MOVLW  01
1602:  MOVWF  45
1604:  MOVLW  17
1606:  MOVWF  FA9
1608:  MOVLW  01
160A:  MOVWF  FA8
160C:  BCF    FA6.6
160E:  BCF    FA6.7
1610:  BSF    FA6.2
1612:  MOVF   FF2,W
1614:  MOVWF  00
1616:  BCF    FF2.6
1618:  BCF    FF2.7
161A:  MOVLB  F
161C:  MOVLW  55
161E:  MOVWF  FA7
1620:  MOVLW  AA
1622:  MOVWF  FA7
1624:  BSF    FA6.1
1626:  BTFSC  FA6.1
1628:  BRA    1626
162A:  BCF    FA6.2
162C:  MOVF   00,W
162E:  IORWF  FF2,F
1630:  MOVLW  14
1632:  MOVLB  0
1634:  MOVWF  xF7
1636:  CALL   0B9E
....................    } 
....................    if(velocidadInicial>15){ 
163A:  MOVF   46,W
163C:  SUBLW  0F
163E:  BC    167A
....................       velocidadInicial=10;write_eeprom(24,10);delay_ms(20); 
1640:  MOVLW  0A
1642:  MOVWF  46
1644:  MOVLW  18
1646:  MOVWF  FA9
1648:  MOVLW  0A
164A:  MOVWF  FA8
164C:  BCF    FA6.6
164E:  BCF    FA6.7
1650:  BSF    FA6.2
1652:  MOVF   FF2,W
1654:  MOVWF  00
1656:  BCF    FF2.6
1658:  BCF    FF2.7
165A:  MOVLB  F
165C:  MOVLW  55
165E:  MOVWF  FA7
1660:  MOVLW  AA
1662:  MOVWF  FA7
1664:  BSF    FA6.1
1666:  BTFSC  FA6.1
1668:  BRA    1666
166A:  BCF    FA6.2
166C:  MOVF   00,W
166E:  IORWF  FF2,F
1670:  MOVLW  14
1672:  MOVLB  0
1674:  MOVWF  xF7
1676:  CALL   0B9E
....................    } 
.................... } 
167A:  GOTO   2B02 (RETURN)
....................  
.................... void bajarVidrio(){ 
....................    pulsoSubir=OFF; 
....................    if(VIDRIOUUP || !VIDRIODN){ 
....................       O1_on;O2_off; 
....................    }else{ 
....................       O1_off;O2_off; 
....................       pulsoBajar=OFF; 
....................    } 
.................... } 
....................  
.................... void subirVidrio(){ 
....................    pulsoBajar=OFF; 
....................    if(!VIDRIOUUP || VIDRIODN){ 
....................       O1_off;O2_on; 
....................    }else{ 
....................       O1_off;O2_off; 
....................       pulsoSubir=OFF; 
....................    } 
.................... } 
....................  
.................... void detenerVidrio(){ 
....................    O1_off;O2_off; 
.................... } 
....................  
.................... void leeControlRemoto(){ 
....................    if(NUEVO_DATO==1){ 
....................       NUEVO_DATO=0; 
....................       BYTE_IR[0]=BIT_BYTE(BITS[0],BITS[1],BITS[2],BITS[3],BITS[4],BITS[5],BITS[6],BITS[7]); 
....................       BYTE_IR[1]=BIT_BYTE(BITS[8],BITS[9],BITS[10],BITS[11],BITS[12],BITS[13],BITS[14],BITS[15]); 
....................       BYTE_IR[2]=BIT_BYTE(BITS[16],BITS[17],BITS[18],BITS[19],BITS[20],BITS[21],BITS[22],BITS[23]); 
....................       BYTE_IR[3]=BIT_BYTE(BITS[24],BITS[25],BITS[26],BITS[27],BITS[28],BITS[29],BITS[30],BITS[31]); 
....................     
....................       if(BYTE_IR[3]==codigoBajar){ //Bajar Vidrio  //AD 
....................          pulsoBajar=ON; 
....................       } 
....................        
....................       if(BYTE_IR[3]==codigoSubir){ // Subir Vidrio //E7 
....................          pulsoSubir=ON; 
....................       } 
....................       
....................       if(BYTE_IR[3]==codigoDetener){ //F7 E3 A5 
....................          O1_off;O2_off; 
....................          pulsoSubir=OFF; 
....................          pulsoBajar=OFF; 
....................       } 
....................    } 
....................     
....................    if(pulsoBajar) 
....................       bajarVidrio(); 
....................        
....................    if(pulsoSubir) 
....................       subirVidrio();     
....................       
.................... } 
....................  
.................... void cuentaTiempoTrabajoFiltro(){ 
....................    //**Contador de Tiempo de Trabajo del filtro**// 
....................    if(segundosTrabajo>=3600){ // Tiempo de Trabajo 
*
1882:  MOVF   xCE,W
1884:  SUBLW  0D
1886:  BTFSC  FD8.0
1888:  BRA    1992
188A:  XORLW  FF
188C:  BNZ   1896
188E:  MOVF   xCD,W
1890:  SUBLW  0F
1892:  BTFSC  FD8.0
1894:  BRA    1992
....................       segundosTrabajo=0; //Minutos Trabajo realmente son segundos. 
1896:  CLRF   xCE
1898:  CLRF   xCD
....................       write_eeprom(20,make8(segundosTrabajo,0)); 
189A:  MOVFF  CD,E0
189E:  MOVLW  14
18A0:  MOVWF  FA9
18A2:  MOVFF  E0,FA8
18A6:  BCF    FA6.6
18A8:  BCF    FA6.7
18AA:  BSF    FA6.2
18AC:  MOVF   FF2,W
18AE:  MOVWF  00
18B0:  BCF    FF2.6
18B2:  BCF    FF2.7
18B4:  MOVLB  F
18B6:  MOVLW  55
18B8:  MOVWF  FA7
18BA:  MOVLW  AA
18BC:  MOVWF  FA7
18BE:  BSF    FA6.1
18C0:  BTFSC  FA6.1
18C2:  BRA    18C0
18C4:  BCF    FA6.2
18C6:  MOVF   00,W
18C8:  IORWF  FF2,F
....................       delay_ms(20); 
18CA:  MOVLW  14
18CC:  MOVLB  0
18CE:  MOVWF  xF7
18D0:  CALL   0B9E
....................       write_eeprom(21,make8(segundosTrabajo,1)); 
18D4:  MOVFF  CE,E0
18D8:  MOVLW  15
18DA:  MOVWF  FA9
18DC:  MOVFF  E0,FA8
18E0:  BCF    FA6.6
18E2:  BCF    FA6.7
18E4:  BSF    FA6.2
18E6:  MOVF   FF2,W
18E8:  MOVWF  00
18EA:  BCF    FF2.6
18EC:  BCF    FF2.7
18EE:  MOVLB  F
18F0:  MOVLW  55
18F2:  MOVWF  FA7
18F4:  MOVLW  AA
18F6:  MOVWF  FA7
18F8:  BSF    FA6.1
18FA:  BTFSC  FA6.1
18FC:  BRA    18FA
18FE:  BCF    FA6.2
1900:  MOVF   00,W
1902:  IORWF  FF2,F
....................       delay_ms(20); 
1904:  MOVLW  14
1906:  MOVLB  0
1908:  MOVWF  xF7
190A:  CALL   0B9E
....................       horasTrabajo++; 
190E:  INCF   xCF,F
1910:  BTFSC  FD8.2
1912:  INCF   xD0,F
....................       write_eeprom(18,make8(horasTrabajo,0)); 
1914:  MOVFF  CF,E0
1918:  MOVLW  12
191A:  MOVWF  FA9
191C:  MOVFF  E0,FA8
1920:  BCF    FA6.6
1922:  BCF    FA6.7
1924:  BSF    FA6.2
1926:  MOVF   FF2,W
1928:  MOVWF  00
192A:  BCF    FF2.6
192C:  BCF    FF2.7
192E:  MOVLB  F
1930:  MOVLW  55
1932:  MOVWF  FA7
1934:  MOVLW  AA
1936:  MOVWF  FA7
1938:  BSF    FA6.1
193A:  BTFSC  FA6.1
193C:  BRA    193A
193E:  BCF    FA6.2
1940:  MOVF   00,W
1942:  IORWF  FF2,F
....................       delay_ms(20); 
1944:  MOVLW  14
1946:  MOVLB  0
1948:  MOVWF  xF7
194A:  CALL   0B9E
....................       write_eeprom(19,make8(horasTrabajo,1)); 
194E:  MOVFF  D0,E0
1952:  MOVLW  13
1954:  MOVWF  FA9
1956:  MOVFF  E0,FA8
195A:  BCF    FA6.6
195C:  BCF    FA6.7
195E:  BSF    FA6.2
1960:  MOVF   FF2,W
1962:  MOVWF  00
1964:  BCF    FF2.6
1966:  BCF    FF2.7
1968:  MOVLB  F
196A:  MOVLW  55
196C:  MOVWF  FA7
196E:  MOVLW  AA
1970:  MOVWF  FA7
1972:  BSF    FA6.1
1974:  BTFSC  FA6.1
1976:  BRA    1974
1978:  BCF    FA6.2
197A:  MOVF   00,W
197C:  IORWF  FF2,F
....................       delay_ms(20); 
197E:  MOVLW  14
1980:  MOVLB  0
1982:  MOVWF  xF7
1984:  CALL   0B9E
....................       delay_ms(20); 
1988:  MOVLW  14
198A:  MOVWF  xF7
198C:  CALL   0B9E
....................    }else if(segundosTrabajo==900 || segundosTrabajo==1800 || segundosTrabajo==2700 ){ 
1990:  BRA    1A2A
1992:  MOVF   xCD,W
1994:  SUBLW  84
1996:  BNZ   199E
1998:  MOVF   xCE,W
199A:  SUBLW  03
199C:  BZ    19B6
199E:  MOVF   xCD,W
19A0:  SUBLW  08
19A2:  BNZ   19AA
19A4:  MOVF   xCE,W
19A6:  SUBLW  07
19A8:  BZ    19B6
19AA:  MOVF   xCD,W
19AC:  SUBLW  8C
19AE:  BNZ   1A2A
19B0:  MOVF   xCE,W
19B2:  SUBLW  0A
19B4:  BNZ   1A2A
....................       write_eeprom(20,make8(segundosTrabajo,0)); 
19B6:  MOVFF  CD,E0
19BA:  MOVLW  14
19BC:  MOVWF  FA9
19BE:  MOVFF  E0,FA8
19C2:  BCF    FA6.6
19C4:  BCF    FA6.7
19C6:  BSF    FA6.2
19C8:  MOVF   FF2,W
19CA:  MOVWF  00
19CC:  BCF    FF2.6
19CE:  BCF    FF2.7
19D0:  MOVLB  F
19D2:  MOVLW  55
19D4:  MOVWF  FA7
19D6:  MOVLW  AA
19D8:  MOVWF  FA7
19DA:  BSF    FA6.1
19DC:  BTFSC  FA6.1
19DE:  BRA    19DC
19E0:  BCF    FA6.2
19E2:  MOVF   00,W
19E4:  IORWF  FF2,F
....................       delay_ms(20); 
19E6:  MOVLW  14
19E8:  MOVLB  0
19EA:  MOVWF  xF7
19EC:  CALL   0B9E
....................       write_eeprom(21,make8(segundosTrabajo,1)); 
19F0:  MOVFF  CE,E0
19F4:  MOVLW  15
19F6:  MOVWF  FA9
19F8:  MOVFF  E0,FA8
19FC:  BCF    FA6.6
19FE:  BCF    FA6.7
1A00:  BSF    FA6.2
1A02:  MOVF   FF2,W
1A04:  MOVWF  00
1A06:  BCF    FF2.6
1A08:  BCF    FF2.7
1A0A:  MOVLB  F
1A0C:  MOVLW  55
1A0E:  MOVWF  FA7
1A10:  MOVLW  AA
1A12:  MOVWF  FA7
1A14:  BSF    FA6.1
1A16:  BTFSC  FA6.1
1A18:  BRA    1A16
1A1A:  BCF    FA6.2
1A1C:  MOVF   00,W
1A1E:  IORWF  FF2,F
....................       delay_ms(20); 
1A20:  MOVLW  14
1A22:  MOVLB  0
1A24:  MOVWF  xF7
1A26:  CALL   0B9E
....................    } 
.................... //----------------------------------------// 
.................... } 
1A2A:  GOTO   2E04 (RETURN)
....................  
.................... void clearSalidasSinUsar(){ 
....................    output_bit(PIN_A3,0); 
....................    //output_bit(PIN_C3,0);//Solo para PIC Diferente a 18F4550 
....................    //output_bit(PIN_C4,0); 
....................    //output_bit(PIN_C5,0); 
....................    output_bit(PIN_C6,0); 
....................    output_bit(PIN_C7,0); 
....................    output_bit(PIN_B5,0); 
.................... }  
....................  
....................  
.................... #int_EXT HIGH 
.................... void ext0() {   
....................    Cruce=ON; 
*
0248:  BSF    xC2.1
....................     
....................    if(VelMotor==19){ 
024A:  MOVF   xD1,W
024C:  SUBLW  13
024E:  BNZ   0260
....................       set_timer0(237);       
0250:  CLRF   FD7
0252:  MOVLW  ED
0254:  MOVWF  FD6
....................       Motor_off;  
0256:  BCF    F8B.2
0258:  BCF    F94.2
....................       Motor2_off;  
025A:  BCF    F8B.1
025C:  BCF    F94.1
....................    }else if(VelMotor==18){ 
025E:  BRA    03E8
0260:  MOVF   xD1,W
0262:  SUBLW  12
0264:  BNZ   0276
....................       set_timer0(234);       
0266:  CLRF   FD7
0268:  MOVLW  EA
026A:  MOVWF  FD6
....................       Motor_off;  
026C:  BCF    F8B.2
026E:  BCF    F94.2
....................       Motor2_off;  
0270:  BCF    F8B.1
0272:  BCF    F94.1
....................    }else if(VelMotor==17){ 
0274:  BRA    03E8
0276:  MOVF   xD1,W
0278:  SUBLW  11
027A:  BNZ   028C
....................       set_timer0(231);       
027C:  CLRF   FD7
027E:  MOVLW  E7
0280:  MOVWF  FD6
....................       Motor_off;  
0282:  BCF    F8B.2
0284:  BCF    F94.2
....................       Motor2_off;  
0286:  BCF    F8B.1
0288:  BCF    F94.1
....................    }else if(VelMotor==16){ 
028A:  BRA    03E8
028C:  MOVF   xD1,W
028E:  SUBLW  10
0290:  BNZ   02A2
....................       set_timer0(228); // Cada cuenta del timer0 es 51.2us y timer1 es 1.59us 
0292:  CLRF   FD7
0294:  MOVLW  E4
0296:  MOVWF  FD6
....................       Motor_off;  
0298:  BCF    F8B.2
029A:  BCF    F94.2
....................       Motor2_off;  
029C:  BCF    F8B.1
029E:  BCF    F94.1
....................    }else if(VelMotor==15){ 
02A0:  BRA    03E8
02A2:  MOVF   xD1,W
02A4:  SUBLW  0F
02A6:  BNZ   02B8
....................       set_timer0(225);       
02A8:  CLRF   FD7
02AA:  MOVLW  E1
02AC:  MOVWF  FD6
....................       Motor_off;  
02AE:  BCF    F8B.2
02B0:  BCF    F94.2
....................       Motor2_off;  
02B2:  BCF    F8B.1
02B4:  BCF    F94.1
....................    }else if(VelMotor==14){ 
02B6:  BRA    03E8
02B8:  MOVF   xD1,W
02BA:  SUBLW  0E
02BC:  BNZ   02CE
....................       set_timer0(222);       
02BE:  CLRF   FD7
02C0:  MOVLW  DE
02C2:  MOVWF  FD6
....................       Motor_off;  
02C4:  BCF    F8B.2
02C6:  BCF    F94.2
....................       Motor2_off;  
02C8:  BCF    F8B.1
02CA:  BCF    F94.1
....................    }else if(VelMotor==13){ 
02CC:  BRA    03E8
02CE:  MOVF   xD1,W
02D0:  SUBLW  0D
02D2:  BNZ   02E4
....................       set_timer0(219);       
02D4:  CLRF   FD7
02D6:  MOVLW  DB
02D8:  MOVWF  FD6
....................       Motor_off;  
02DA:  BCF    F8B.2
02DC:  BCF    F94.2
....................       Motor2_off;  
02DE:  BCF    F8B.1
02E0:  BCF    F94.1
....................    }else if(VelMotor==12){ 
02E2:  BRA    03E8
02E4:  MOVF   xD1,W
02E6:  SUBLW  0C
02E8:  BNZ   02FA
....................       set_timer0(216);       
02EA:  CLRF   FD7
02EC:  MOVLW  D8
02EE:  MOVWF  FD6
....................       Motor_off;  
02F0:  BCF    F8B.2
02F2:  BCF    F94.2
....................       Motor2_off;  
02F4:  BCF    F8B.1
02F6:  BCF    F94.1
....................    }else if(VelMotor==11){ 
02F8:  BRA    03E8
02FA:  MOVF   xD1,W
02FC:  SUBLW  0B
02FE:  BNZ   0310
....................       set_timer0(213);       
0300:  CLRF   FD7
0302:  MOVLW  D5
0304:  MOVWF  FD6
....................       Motor_off;  
0306:  BCF    F8B.2
0308:  BCF    F94.2
....................       Motor2_off;  
030A:  BCF    F8B.1
030C:  BCF    F94.1
....................    }else if(VelMotor==10){ 
030E:  BRA    03E8
0310:  MOVF   xD1,W
0312:  SUBLW  0A
0314:  BNZ   0326
....................       set_timer0(210);       
0316:  CLRF   FD7
0318:  MOVLW  D2
031A:  MOVWF  FD6
....................       Motor_off;  
031C:  BCF    F8B.2
031E:  BCF    F94.2
....................       Motor2_off;  
0320:  BCF    F8B.1
0322:  BCF    F94.1
....................    }else if(VelMotor==9){ 
0324:  BRA    03E8
0326:  MOVF   xD1,W
0328:  SUBLW  09
032A:  BNZ   033C
....................       set_timer0(207);       
032C:  CLRF   FD7
032E:  MOVLW  CF
0330:  MOVWF  FD6
....................       Motor_off;  
0332:  BCF    F8B.2
0334:  BCF    F94.2
....................       Motor2_off;  
0336:  BCF    F8B.1
0338:  BCF    F94.1
....................    }else if(VelMotor==8){ 
033A:  BRA    03E8
033C:  MOVF   xD1,W
033E:  SUBLW  08
0340:  BNZ   0352
....................       set_timer0(204);       
0342:  CLRF   FD7
0344:  MOVLW  CC
0346:  MOVWF  FD6
....................       Motor_off;  
0348:  BCF    F8B.2
034A:  BCF    F94.2
....................       Motor2_off;  
034C:  BCF    F8B.1
034E:  BCF    F94.1
....................    }else if(VelMotor==7){ 
0350:  BRA    03E8
0352:  MOVF   xD1,W
0354:  SUBLW  07
0356:  BNZ   0368
....................       set_timer0(201);       
0358:  CLRF   FD7
035A:  MOVLW  C9
035C:  MOVWF  FD6
....................       Motor_off;  
035E:  BCF    F8B.2
0360:  BCF    F94.2
....................       Motor2_off;  
0362:  BCF    F8B.1
0364:  BCF    F94.1
....................    }else if(VelMotor==6){ 
0366:  BRA    03E8
0368:  MOVF   xD1,W
036A:  SUBLW  06
036C:  BNZ   037E
....................       set_timer0(198);       
036E:  CLRF   FD7
0370:  MOVLW  C6
0372:  MOVWF  FD6
....................       Motor_off;  
0374:  BCF    F8B.2
0376:  BCF    F94.2
....................       Motor2_off;  
0378:  BCF    F8B.1
037A:  BCF    F94.1
....................    }else if(VelMotor==5){ 
037C:  BRA    03E8
037E:  MOVF   xD1,W
0380:  SUBLW  05
0382:  BNZ   0394
....................       set_timer0(195);       
0384:  CLRF   FD7
0386:  MOVLW  C3
0388:  MOVWF  FD6
....................       Motor_off;  
038A:  BCF    F8B.2
038C:  BCF    F94.2
....................       Motor2_off;  
038E:  BCF    F8B.1
0390:  BCF    F94.1
....................    }else if(VelMotor==4){ 
0392:  BRA    03E8
0394:  MOVF   xD1,W
0396:  SUBLW  04
0398:  BNZ   03AA
....................       set_timer0(192);       
039A:  CLRF   FD7
039C:  MOVLW  C0
039E:  MOVWF  FD6
....................       Motor_off;  
03A0:  BCF    F8B.2
03A2:  BCF    F94.2
....................       Motor2_off;  
03A4:  BCF    F8B.1
03A6:  BCF    F94.1
....................    }else if(VelMotor==3){ 
03A8:  BRA    03E8
03AA:  MOVF   xD1,W
03AC:  SUBLW  03
03AE:  BNZ   03C0
....................       set_timer0(189); 
03B0:  CLRF   FD7
03B2:  MOVLW  BD
03B4:  MOVWF  FD6
....................       Motor_off;  
03B6:  BCF    F8B.2
03B8:  BCF    F94.2
....................       Motor2_off;  
03BA:  BCF    F8B.1
03BC:  BCF    F94.1
....................    }else if(VelMotor==2){ 
03BE:  BRA    03E8
03C0:  MOVF   xD1,W
03C2:  SUBLW  02
03C4:  BNZ   03D6
....................       set_timer0(186); 
03C6:  CLRF   FD7
03C8:  MOVLW  BA
03CA:  MOVWF  FD6
....................       Motor_off;  
03CC:  BCF    F8B.2
03CE:  BCF    F94.2
....................       Motor2_off;  
03D0:  BCF    F8B.1
03D2:  BCF    F94.1
....................    }else if(VelMotor==1){ 
03D4:  BRA    03E8
03D6:  DECFSZ xD1,W
03D8:  BRA    03E8
....................       set_timer0(183); 
03DA:  CLRF   FD7
03DC:  MOVLW  B7
03DE:  MOVWF  FD6
....................       Motor_off;  
03E0:  BCF    F8B.2
03E2:  BCF    F94.2
....................       Motor2_off;  
03E4:  BCF    F8B.1
03E6:  BCF    F94.1
....................    } 
....................    pulsos++;    
03E8:  INCF   xC3,F
03EA:  BTFSC  FD8.2
03EC:  INCF   xC4,F
.................... } 
....................  
03EE:  BCF    FF2.1
03F0:  GOTO   00FE
.................... #int_TIMER0 HIGH 
.................... void temp0s(void){ 
....................    if(VelMotor>0 && VelMotor<20){ 
03F4:  MOVF   xD1,F
03F6:  BZ    0420
03F8:  MOVF   xD1,W
03FA:  SUBLW  13
03FC:  BNC   0420
....................    if(Cruce){         //If the triac pin is low we change the state and prepare the timer 
03FE:  BTFSS  xC2.1
0400:  BRA    0414
....................       Motor_on; 
0402:  BSF    F8B.2
0404:  BCF    F94.2
....................       Motor2_on;  
0406:  BSF    F8B.1
0408:  BCF    F94.1
....................       set_timer0(253);         // Next timer overflow will clear the triac pin 
040A:  CLRF   FD7
040C:  MOVLW  FD
040E:  MOVWF  FD6
....................       Cruce=OFF;         // Flag now signals that we need to turn off the triac output pin 
0410:  BCF    xC2.1
....................    } else {            //The triac has been triggered, cut the pulse 
0412:  BRA    0420
....................       Motor_off; 
0414:  BCF    F8B.2
0416:  BCF    F94.2
....................       Motor2_off;  
0418:  BCF    F8B.1
041A:  BCF    F94.1
....................       set_timer0(0);         //Set timer period to maximum, timer should not overflow untill next zero cross interrupt 
041C:  CLRF   FD7
041E:  CLRF   FD6
....................    } 
....................    } 
.................... } 
....................  
.................... //#int_TIMER2 
0420:  BCF    FF2.2
0422:  GOTO   00FE
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    //set_timer2(231);//100.25uS 
....................    set_timer1(45536);//5ms 
0426:  MOVLW  B1
0428:  MOVWF  FCF
042A:  MOVLW  E0
042C:  MOVWF  FCE
....................    tiempos++; 
042E:  INCF   58,F
0430:  BTFSC  FD8.2
0432:  INCF   59,F
....................    if(UP) 
0434:  BSF    F92.5
0436:  BTFSC  F80.5
0438:  BRA    0442
....................          tup++; 
043A:  INCF   xC5,F
043C:  BTFSC  FD8.2
043E:  INCF   xC6,F
....................       else 
0440:  BRA    0446
....................          tup=0; 
0442:  CLRF   xC6
0444:  CLRF   xC5
....................           
....................       if(DOWN) 
0446:  BSF    F96.0
0448:  BTFSC  F84.0
044A:  BRA    0454
....................          tdown++; 
044C:  INCF   xC7,F
044E:  BTFSC  FD8.2
0450:  INCF   xC8,F
....................       else 
0452:  BRA    0458
....................          tdown=0; 
0454:  CLRF   xC8
0456:  CLRF   xC7
....................           
....................       if(RIGHT) 
0458:  BSF    F96.1
045A:  BTFSC  F84.1
045C:  BRA    0466
....................          tright++; 
045E:  INCF   xC9,F
0460:  BTFSC  FD8.2
0462:  INCF   xCA,F
....................       else 
0464:  BRA    046A
....................          tright=0; 
0466:  CLRF   xCA
0468:  CLRF   xC9
....................        
....................       if(IZQU) 
046A:  BSF    F96.2
046C:  BTFSC  F84.2
046E:  BRA    0478
....................          tleft++; 
0470:  INCF   xCB,F
0472:  BTFSC  FD8.2
0474:  INCF   xCC,F
....................       else 
0476:  BRA    047C
....................          tleft=0; 
0478:  CLRF   xCC
047A:  CLRF   xCB
....................      
....................    //if(tiempos>=10000){ 
....................    //if(tiempos>=9710){//1s 
....................    if(tiempos>=200){//1s 
047C:  MOVF   59,F
047E:  BNZ   0486
0480:  MOVF   58,W
0482:  SUBLW  C7
0484:  BC    04E2
....................       output_toggle(PIN_A3); 
0486:  BCF    F92.3
0488:  BTG    F89.3
....................       tiempos=0;tiemporeset++;Lectura=1; 
048A:  CLRF   59
048C:  CLRF   58
048E:  INCF   42,F
0490:  BSF    2A.0
....................     
....................       if(ActivaBuzzer==1){ 
0492:  DECFSZ 53,W
0494:  BRA    04AA
....................          if(estadobuzzer==0){ 
0496:  BTFSC  2A.3
0498:  BRA    04A0
....................             Buzzer_off; 
049A:  BCF    F8B.0
049C:  BCF    F94.0
....................          }else{ 
049E:  BRA    04A8
....................             if(estadoalarma==1) 
04A0:  BTFSS  2A.4
04A2:  BRA    04A8
....................                Buzzer_on; 
04A4:  BSF    F8B.0
04A6:  BCF    F94.0
....................          } 
....................          estadobuzzer=!estadobuzzer; 
04A8:  BTG    2A.3
....................       } 
....................       if(estadomv==1) 
04AA:  BTFSS  29.2
04AC:  BRA    04B4
....................          segundosTrabajo++; 
04AE:  INCF   xCD,F
04B0:  BTFSC  FD8.2
04B2:  INCF   xCE,F
....................    //----------------------------- Tiempo Total-----------------------------// 
....................       if(estadouv==1){ 
04B4:  BTFSS  29.0
04B6:  BRA    04E2
....................          segundos++; 
04B8:  INCF   34,F
....................          if(tiempo_cumplido==0){ 
04BA:  BTFSC  29.7
04BC:  BRA    04E2
....................             if(tempo_segundos>0){ 
04BE:  MOVF   3B,F
04C0:  BZ    04C6
....................                tempo_segundos--; 
04C2:  DECF   3B,F
....................             }else{ 
04C4:  BRA    04E2
....................                if(tempo_minutos>0){ 
04C6:  MOVF   3A,F
04C8:  BZ    04D2
....................                   tempo_minutos--; 
04CA:  DECF   3A,F
....................                   tempo_segundos=59; 
04CC:  MOVLW  3B
04CE:  MOVWF  3B
....................                }else{ 
04D0:  BRA    04E2
....................                   tiempo_cumplido=1; 
04D2:  BSF    29.7
....................                   estadouv=0;Luz_UV_off; 
04D4:  BCF    29.0
04D6:  BSF    F8A.3
04D8:  BCF    F93.3
....................                   tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
04DA:  MOVFF  3C,3A
04DE:  MOVFF  3D,3B
....................                } 
....................             } 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
04E2:  BCF    F9E.0
04E4:  GOTO   0064
.................... void main () 
.................... { 
*
2948:  CLRF   FF8
294A:  BSF    FF1.2
294C:  BCF    F9F.0
294E:  BSF    FD0.7
2950:  BSF    07.7
2952:  CLRF   FEA
2954:  CLRF   FE9
2956:  BCF    29.0
2958:  BCF    29.1
295A:  BCF    29.2
295C:  BCF    29.3
295E:  BCF    29.4
2960:  BCF    29.5
2962:  BCF    29.6
2964:  BCF    29.7
2966:  BCF    2A.0
2968:  BCF    2A.1
296A:  BCF    2A.2
296C:  BCF    2A.3
296E:  BCF    2A.4
2970:  BCF    2A.5
2972:  BCF    2A.6
2974:  CLRF   2B
2976:  MOVLW  07
2978:  MOVWF  2C
297A:  MOVLW  02
297C:  MOVWF  2D
297E:  MOVLW  0B
2980:  MOVWF  2E
2982:  MOVLW  02
2984:  MOVWF  2F
2986:  MOVLW  03
2988:  MOVWF  30
298A:  MOVLW  02
298C:  MOVWF  31
298E:  MOVWF  32
2990:  MOVLW  04
2992:  MOVWF  33
2994:  CLRF   34
2996:  CLRF   35
2998:  CLRF   36
299A:  CLRF   37
299C:  CLRF   38
299E:  CLRF   39
29A0:  CLRF   3A
29A2:  CLRF   3B
29A4:  CLRF   3C
29A6:  CLRF   3D
29A8:  CLRF   3E
29AA:  CLRF   3F
29AC:  CLRF   40
29AE:  MOVLW  01
29B0:  MOVWF  41
29B2:  CLRF   42
29B4:  CLRF   43
29B6:  CLRF   44
29B8:  CLRF   45
29BA:  MOVLW  0A
29BC:  MOVWF  46
29BE:  CLRF   47
29C0:  CLRF   53
29C2:  CLRF   54
29C4:  CLRF   55
29C6:  CLRF   56
29C8:  MOVLW  04
29CA:  MOVWF  57
29CC:  CLRF   5B
29CE:  CLRF   5A
29D0:  CLRF   5D
29D2:  CLRF   5C
29D4:  CLRF   xB1
29D6:  CLRF   xB0
29D8:  CLRF   xAF
29DA:  CLRF   xAE
29DC:  CLRF   xB5
29DE:  CLRF   xB4
29E0:  CLRF   xB3
29E2:  CLRF   xB2
29E4:  CLRF   xB9
29E6:  CLRF   xB8
29E8:  CLRF   xB7
29EA:  CLRF   xB6
29EC:  CLRF   xBD
29EE:  CLRF   xBC
29F0:  CLRF   xBB
29F2:  CLRF   xBA
29F4:  CLRF   xC1
29F6:  CLRF   xC0
29F8:  CLRF   xBF
29FA:  MOVLW  80
29FC:  MOVWF  xBE
29FE:  BSF    2A.7
2A00:  BCF    xC2.0
2A02:  CLRF   xC4
2A04:  CLRF   xC3
2A06:  CLRF   xC6
2A08:  CLRF   xC5
2A0A:  CLRF   xC8
2A0C:  CLRF   xC7
2A0E:  CLRF   xCA
2A10:  CLRF   xC9
2A12:  CLRF   xCC
2A14:  CLRF   xCB
2A16:  CLRF   xCE
2A18:  CLRF   xCD
2A1A:  CLRF   xD0
2A1C:  CLRF   xCF
2A1E:  BCF    xC2.1
2A20:  CLRF   xD1
2A22:  CLRF   xDB
2A24:  CLRF   xDA
2A26:  MOVF   FC1,W
2A28:  ANDLW  C0
2A2A:  IORLW  0F
2A2C:  MOVWF  FC1
2A2E:  MOVLW  07
2A30:  MOVWF  FB4
2A32:  MOVLW  3E
2A34:  MOVWF  48
2A36:  MOVLW  20
2A38:  MOVWF  49
2A3A:  MOVLW  5E
2A3C:  MOVWF  4A
2A3E:  CLRF   4B
2A40:  CLRF   4C
2A42:  CLRF   4D
2A44:  CLRF   4E
2A46:  CLRF   4F
2A48:  CLRF   50
2A4A:  CLRF   51
2A4C:  CLRF   52
2A4E:  CLRF   5E
2A50:  CLRF   5F
2A52:  CLRF   x60
2A54:  CLRF   x61
2A56:  CLRF   x62
2A58:  CLRF   x63
2A5A:  CLRF   x64
2A5C:  CLRF   x65
2A5E:  CLRF   x66
2A60:  CLRF   x67
2A62:  CLRF   x68
2A64:  CLRF   x69
2A66:  CLRF   x6A
2A68:  CLRF   x6B
2A6A:  CLRF   x6C
2A6C:  CLRF   x6D
2A6E:  CLRF   x6E
2A70:  CLRF   x6F
2A72:  CLRF   x70
2A74:  CLRF   x71
2A76:  CLRF   x72
2A78:  CLRF   x73
2A7A:  CLRF   x74
2A7C:  CLRF   x75
2A7E:  CLRF   x76
2A80:  CLRF   x77
2A82:  CLRF   x78
2A84:  CLRF   x79
2A86:  CLRF   x7A
2A88:  CLRF   x7B
2A8A:  CLRF   x7C
2A8C:  CLRF   x7D
2A8E:  CLRF   x7E
2A90:  CLRF   x7F
2A92:  CLRF   x80
2A94:  CLRF   x81
2A96:  CLRF   x82
2A98:  CLRF   x83
2A9A:  CLRF   x84
2A9C:  CLRF   x85
2A9E:  CLRF   x86
2AA0:  CLRF   x87
2AA2:  CLRF   x88
2AA4:  CLRF   x89
2AA6:  CLRF   x8A
2AA8:  CLRF   x8B
2AAA:  CLRF   x8C
2AAC:  CLRF   x8D
2AAE:  CLRF   x8E
2AB0:  CLRF   x8F
2AB2:  CLRF   x90
2AB4:  CLRF   x91
2AB6:  CLRF   x92
2AB8:  CLRF   x93
2ABA:  CLRF   x94
2ABC:  CLRF   x95
2ABE:  CLRF   x96
2AC0:  CLRF   x97
2AC2:  CLRF   x98
2AC4:  CLRF   x99
2AC6:  CLRF   x9A
2AC8:  CLRF   x9B
2ACA:  CLRF   x9C
2ACC:  CLRF   x9D
2ACE:  CLRF   x9E
2AD0:  CLRF   x9F
2AD2:  CLRF   xA0
2AD4:  CLRF   xA1
2AD6:  CLRF   xA2
2AD8:  CLRF   xA3
2ADA:  CLRF   xA4
2ADC:  CLRF   xA5
2ADE:  CLRF   xA6
2AE0:  CLRF   xA7
2AE2:  CLRF   xA8
2AE4:  CLRF   xA9
2AE6:  CLRF   xAA
2AE8:  CLRF   xAB
2AEA:  CLRF   xAC
2AEC:  CLRF   xAD
....................    Motor_off; 
2AEE:  BCF    F8B.2
2AF0:  BCF    F94.2
....................    Motor2_off; 
2AF2:  BCF    F8B.1
2AF4:  BCF    F94.1
....................    ConfigInterrupciones(); 
2AF6:  GOTO   0C8C
....................    //MensajeBienvenida(); 
....................    LeeEEPROM();  
2AFA:  GOTO   0CFE
....................    LimitaValores(); 
2AFE:  GOTO   1112
....................    if(motor!=1){ 
2B02:  DECFSZ 44,W
2B04:  BRA    2B08
2B06:  BRA    2B0E
....................       MensajeBienvenida();  
2B08:  GOTO   176E
....................    }else{ 
2B0C:  BRA    2B20
....................       if(luz==1) 
2B0E:  DECFSZ 45,W
2B10:  BRA    2B14
....................          estadofl=1; 
2B12:  BSF    29.1
....................       if(luz==0) 
2B14:  MOVF   45,F
2B16:  BNZ   2B1A
....................          estadofl=0; 
2B18:  BCF    29.1
....................       estadomv=1; 
2B1A:  BSF    29.2
....................       Menu=50; 
2B1C:  MOVLW  32
2B1E:  MOVWF  2B
....................    } 
....................    Motor_off; 
2B20:  BCF    F8B.2
2B22:  BCF    F94.2
....................    Motor2_off; 
2B24:  BCF    F8B.1
2B26:  BCF    F94.1
....................     
....................    if(UP && DOWN && RIGHT){ 
2B28:  BSF    F92.5
2B2A:  BTFSC  F80.5
2B2C:  BRA    2CA8
2B2E:  BSF    F96.0
2B30:  BTFSC  F84.0
2B32:  BRA    2CA8
2B34:  BSF    F96.1
2B36:  BTFSC  F84.1
2B38:  BRA    2CA8
....................       for(;;){ 
....................          if(velocidadInicial>15) 
2B3A:  MOVF   46,W
2B3C:  SUBLW  0F
2B3E:  BC    2B44
....................             velocidadInicial=15; 
2B40:  MOVLW  0F
2B42:  MOVWF  46
....................          if(velocidadInicial<1) 
2B44:  MOVF   46,F
2B46:  BNZ   2B4C
....................             velocidadInicial=1; 
2B48:  MOVLW  01
2B4A:  MOVWF  46
....................         
....................          lcd_gotoxy(1,1); 
2B4C:  MOVLW  01
2B4E:  MOVWF  xF2
2B50:  MOVWF  xF3
2B52:  CALL   167E
....................          printf(lcd_putc,"Seleccione Velocidad"); 
2B56:  MOVLW  E8
2B58:  MOVWF  FF6
2B5A:  MOVLW  04
2B5C:  MOVWF  FF7
2B5E:  CALL   174E
....................          lcd_gotoxy(1,2); 
2B62:  MOVLW  01
2B64:  MOVWF  xF2
2B66:  MOVLW  02
2B68:  MOVWF  xF3
2B6A:  CALL   167E
....................          printf(lcd_putc,"Inicial   Ventilador"); 
2B6E:  MOVLW  FE
2B70:  MOVWF  FF6
2B72:  MOVLW  04
2B74:  MOVWF  FF7
2B76:  CALL   174E
....................          lcd_gotoxy(1,3); 
2B7A:  MOVLW  01
2B7C:  MOVWF  xF2
2B7E:  MOVLW  03
2B80:  MOVWF  xF3
2B82:  CALL   167E
....................          printf(lcd_putc,"     Vel: %02u       ",velocidadInicial); 
2B86:  MOVLW  14
2B88:  MOVWF  FF6
2B8A:  MOVLW  05
2B8C:  MOVWF  FF7
2B8E:  MOVLW  0A
2B90:  MOVWF  xE4
2B92:  CALL   17D6
2B96:  MOVFF  46,E0
2B9A:  MOVLW  01
2B9C:  MOVWF  xE1
2B9E:  CALL   181C
2BA2:  MOVLW  22
2BA4:  MOVWF  FF6
2BA6:  MOVLW  05
2BA8:  MOVWF  FF7
2BAA:  MOVLW  07
2BAC:  MOVWF  xE4
2BAE:  CALL   17D6
....................          lcd_gotoxy(1,4); 
2BB2:  MOVLW  01
2BB4:  MOVWF  xF2
2BB6:  MOVLW  04
2BB8:  MOVWF  xF3
2BBA:  CALL   167E
....................          printf(lcd_putc,"                    ");       
2BBE:  MOVLW  2A
2BC0:  MOVWF  FF6
2BC2:  MOVLW  05
2BC4:  MOVWF  FF7
2BC6:  CALL   174E
....................           
....................          if(UP){   
2BCA:  BSF    F92.5
2BCC:  BTFSC  F80.5
2BCE:  BRA    2BDA
....................             delay_ms(200);velocidadInicial++; 
2BD0:  MOVLW  C8
2BD2:  MOVWF  xF7
2BD4:  CALL   0B9E
2BD8:  INCF   46,F
....................          } 
....................                 
....................          if(DOWN && Vel1>0)//Si oprime hacia abajo 
2BDA:  BSF    F96.0
2BDC:  BTFSC  F84.0
2BDE:  BRA    2BEE
2BE0:  MOVF   57,F
2BE2:  BZ    2BEE
....................          {   
....................             delay_ms(200);velocidadInicial--; 
2BE4:  MOVLW  C8
2BE6:  MOVWF  xF7
2BE8:  CALL   0B9E
2BEC:  DECF   46,F
....................          } 
....................           
....................          if(IZQU)//Si oprime boton de Toma. 
2BEE:  BSF    F96.2
2BF0:  BTFSC  F84.2
2BF2:  BRA    2CA6
....................          {                   
....................             write_eeprom(24,velocidadInicial);//Guardar valor de Setpoint en eeprom 
2BF4:  MOVLW  18
2BF6:  MOVWF  FA9
2BF8:  MOVFF  46,FA8
2BFC:  BCF    FA6.6
2BFE:  BCF    FA6.7
2C00:  BSF    FA6.2
2C02:  MOVF   FF2,W
2C04:  MOVWF  00
2C06:  BCF    FF2.6
2C08:  BCF    FF2.7
2C0A:  MOVLB  F
2C0C:  MOVLW  55
2C0E:  MOVWF  FA7
2C10:  MOVLW  AA
2C12:  MOVWF  FA7
2C14:  BSF    FA6.1
2C16:  BTFSC  FA6.1
2C18:  BRA    2C16
2C1A:  BCF    FA6.2
2C1C:  MOVF   00,W
2C1E:  IORWF  FF2,F
....................             delay_ms(20); 
2C20:  MOVLW  14
2C22:  MOVLB  0
2C24:  MOVWF  xF7
2C26:  CALL   0B9E
....................             lcd_gotoxy(1,1); 
2C2A:  MOVLW  01
2C2C:  MOVWF  xF2
2C2E:  MOVWF  xF3
2C30:  CALL   167E
....................             printf(lcd_putc,"                    "); 
2C34:  MOVLW  40
2C36:  MOVWF  FF6
2C38:  MOVLW  05
2C3A:  MOVWF  FF7
2C3C:  CALL   174E
....................             lcd_gotoxy(1,2); 
2C40:  MOVLW  01
2C42:  MOVWF  xF2
2C44:  MOVLW  02
2C46:  MOVWF  xF3
2C48:  CALL   167E
....................             printf(lcd_putc,"     Velocidad      "); 
2C4C:  MOVLW  56
2C4E:  MOVWF  FF6
2C50:  MOVLW  05
2C52:  MOVWF  FF7
2C54:  CALL   174E
....................             lcd_gotoxy(1,3); 
2C58:  MOVLW  01
2C5A:  MOVWF  xF2
2C5C:  MOVLW  03
2C5E:  MOVWF  xF3
2C60:  CALL   167E
....................             printf(lcd_putc,"      Almacenada    "); 
2C64:  MOVLW  6C
2C66:  MOVWF  FF6
2C68:  MOVLW  05
2C6A:  MOVWF  FF7
2C6C:  CALL   174E
....................             lcd_gotoxy(1,4); 
2C70:  MOVLW  01
2C72:  MOVWF  xF2
2C74:  MOVLW  04
2C76:  MOVWF  xF3
2C78:  CALL   167E
....................             printf(lcd_putc,"                    ");  
2C7C:  MOVLW  82
2C7E:  MOVWF  FF6
2C80:  MOVLW  05
2C82:  MOVWF  FF7
2C84:  CALL   174E
....................             delay_ms(1000); 
2C88:  MOVLW  04
2C8A:  MOVWF  xE0
2C8C:  MOVLW  FA
2C8E:  MOVWF  xF7
2C90:  CALL   0B9E
2C94:  DECFSZ xE0,F
2C96:  BRA    2C8C
....................             printf(lcd_putc,"\f"); 
2C98:  MOVLW  0C
2C9A:  MOVWF  xF1
2C9C:  CALL   16E8
....................             lcd_init(); 
2CA0:  CALL   0C2E
....................             reset_cpu(); 
2CA4:  RESET
....................          } 
....................       } 
2CA6:  BRA    2B3A
....................    } 
....................     
....................    if(UP && IZQU){ 
2CA8:  BSF    F92.5
2CAA:  BTFSC  F80.5
2CAC:  BRA    2E00
2CAE:  BSF    F96.2
2CB0:  BTFSC  F84.2
2CB2:  BRA    2E00
....................       write_eeprom(20,0); 
2CB4:  MOVLW  14
2CB6:  MOVWF  FA9
2CB8:  CLRF   FA8
2CBA:  BCF    FA6.6
2CBC:  BCF    FA6.7
2CBE:  BSF    FA6.2
2CC0:  MOVF   FF2,W
2CC2:  MOVWF  00
2CC4:  BCF    FF2.6
2CC6:  BCF    FF2.7
2CC8:  MOVLB  F
2CCA:  MOVLW  55
2CCC:  MOVWF  FA7
2CCE:  MOVLW  AA
2CD0:  MOVWF  FA7
2CD2:  BSF    FA6.1
2CD4:  BTFSC  FA6.1
2CD6:  BRA    2CD4
2CD8:  BCF    FA6.2
2CDA:  MOVF   00,W
2CDC:  IORWF  FF2,F
....................       delay_ms(20); 
2CDE:  MOVLW  14
2CE0:  MOVLB  0
2CE2:  MOVWF  xF7
2CE4:  CALL   0B9E
....................       write_eeprom(21,0); 
2CE8:  MOVLW  15
2CEA:  MOVWF  FA9
2CEC:  CLRF   FA8
2CEE:  BCF    FA6.6
2CF0:  BCF    FA6.7
2CF2:  BSF    FA6.2
2CF4:  MOVF   FF2,W
2CF6:  MOVWF  00
2CF8:  BCF    FF2.6
2CFA:  BCF    FF2.7
2CFC:  MOVLB  F
2CFE:  MOVLW  55
2D00:  MOVWF  FA7
2D02:  MOVLW  AA
2D04:  MOVWF  FA7
2D06:  BSF    FA6.1
2D08:  BTFSC  FA6.1
2D0A:  BRA    2D08
2D0C:  BCF    FA6.2
2D0E:  MOVF   00,W
2D10:  IORWF  FF2,F
....................       delay_ms(20); 
2D12:  MOVLW  14
2D14:  MOVLB  0
2D16:  MOVWF  xF7
2D18:  CALL   0B9E
....................       write_eeprom(18,0); 
2D1C:  MOVLW  12
2D1E:  MOVWF  FA9
2D20:  CLRF   FA8
2D22:  BCF    FA6.6
2D24:  BCF    FA6.7
2D26:  BSF    FA6.2
2D28:  MOVF   FF2,W
2D2A:  MOVWF  00
2D2C:  BCF    FF2.6
2D2E:  BCF    FF2.7
2D30:  MOVLB  F
2D32:  MOVLW  55
2D34:  MOVWF  FA7
2D36:  MOVLW  AA
2D38:  MOVWF  FA7
2D3A:  BSF    FA6.1
2D3C:  BTFSC  FA6.1
2D3E:  BRA    2D3C
2D40:  BCF    FA6.2
2D42:  MOVF   00,W
2D44:  IORWF  FF2,F
....................       delay_ms(20); 
2D46:  MOVLW  14
2D48:  MOVLB  0
2D4A:  MOVWF  xF7
2D4C:  CALL   0B9E
....................       write_eeprom(19,0); 
2D50:  MOVLW  13
2D52:  MOVWF  FA9
2D54:  CLRF   FA8
2D56:  BCF    FA6.6
2D58:  BCF    FA6.7
2D5A:  BSF    FA6.2
2D5C:  MOVF   FF2,W
2D5E:  MOVWF  00
2D60:  BCF    FF2.6
2D62:  BCF    FF2.7
2D64:  MOVLB  F
2D66:  MOVLW  55
2D68:  MOVWF  FA7
2D6A:  MOVLW  AA
2D6C:  MOVWF  FA7
2D6E:  BSF    FA6.1
2D70:  BTFSC  FA6.1
2D72:  BRA    2D70
2D74:  BCF    FA6.2
2D76:  MOVF   00,W
2D78:  IORWF  FF2,F
....................       delay_ms(20); 
2D7A:  MOVLW  14
2D7C:  MOVLB  0
2D7E:  MOVWF  xF7
2D80:  CALL   0B9E
....................       lcd_gotoxy(1,1); 
2D84:  MOVLW  01
2D86:  MOVWF  xF2
2D88:  MOVWF  xF3
2D8A:  CALL   167E
....................       printf(lcd_putc,"                    "); 
2D8E:  MOVLW  98
2D90:  MOVWF  FF6
2D92:  MOVLW  05
2D94:  MOVWF  FF7
2D96:  CALL   174E
....................       lcd_gotoxy(1,2); 
2D9A:  MOVLW  01
2D9C:  MOVWF  xF2
2D9E:  MOVLW  02
2DA0:  MOVWF  xF3
2DA2:  CALL   167E
....................       printf(lcd_putc,"  Borrando  Tiempo  "); 
2DA6:  MOVLW  AE
2DA8:  MOVWF  FF6
2DAA:  MOVLW  05
2DAC:  MOVWF  FF7
2DAE:  CALL   174E
....................       lcd_gotoxy(1,3); 
2DB2:  MOVLW  01
2DB4:  MOVWF  xF2
2DB6:  MOVLW  03
2DB8:  MOVWF  xF3
2DBA:  CALL   167E
....................       printf(lcd_putc,"    de Trabajo      "); 
2DBE:  MOVLW  C4
2DC0:  MOVWF  FF6
2DC2:  MOVLW  05
2DC4:  MOVWF  FF7
2DC6:  CALL   174E
....................       lcd_gotoxy(1,4); 
2DCA:  MOVLW  01
2DCC:  MOVWF  xF2
2DCE:  MOVLW  04
2DD0:  MOVWF  xF3
2DD2:  CALL   167E
....................       printf(lcd_putc,"                    ");  
2DD6:  MOVLW  DA
2DD8:  MOVWF  FF6
2DDA:  MOVLW  05
2DDC:  MOVWF  FF7
2DDE:  CALL   174E
....................       delay_ms(1000); 
2DE2:  MOVLW  04
2DE4:  MOVWF  xE0
2DE6:  MOVLW  FA
2DE8:  MOVWF  xF7
2DEA:  CALL   0B9E
2DEE:  DECFSZ xE0,F
2DF0:  BRA    2DE6
....................       printf(lcd_putc,"\f"); 
2DF2:  MOVLW  0C
2DF4:  MOVWF  xF1
2DF6:  CALL   16E8
....................       lcd_init(); 
2DFA:  CALL   0C2E
....................       reset_cpu(); 
2DFE:  RESET
....................    } 
....................  
....................    while(true){ 
....................    //leeControlRemoto(); 
....................    cuentaTiempoTrabajoFiltro(); 
2E00:  GOTO   1882
....................    if(VelMotor==20){ 
2E04:  MOVF   xD1,W
2E06:  SUBLW  14
2E08:  BNZ   2E16
....................       Motor_on; 
2E0A:  BSF    F8B.2
2E0C:  BCF    F94.2
....................       Motor2_on;  
2E0E:  BSF    F8B.1
2E10:  BCF    F94.1
....................       set_timer0(0); 
2E12:  CLRF   FD7
2E14:  CLRF   FD6
....................    } 
....................     
....................    if(VelMotor==0){ 
2E16:  MOVF   xD1,F
2E18:  BNZ   2E26
....................       Motor_off; 
2E1A:  BCF    F8B.2
2E1C:  BCF    F94.2
....................       Motor2_off;  
2E1E:  BCF    F8B.1
2E20:  BCF    F94.1
....................       set_timer0(0); 
2E22:  CLRF   FD7
2E24:  CLRF   FD6
....................    } 
.................... //------------Menu0------------------------------------------------------------------    
....................    if(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
2E26:  MOVF   2B,F
2E28:  BTFSS  FD8.2
2E2A:  BRA    3236
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
2E2C:  MOVLW  01
2E2E:  MOVWF  xF2
2E30:  MOVWF  xF3
2E32:  CALL   167E
....................          printf(lcd_putc,"     Ingrese        "); 
2E36:  MOVLW  F0
2E38:  MOVWF  FF6
2E3A:  MOVLW  05
2E3C:  MOVWF  FF7
2E3E:  CALL   174E
....................          lcd_gotoxy(1,2); 
2E42:  MOVLW  01
2E44:  MOVWF  xF2
2E46:  MOVLW  02
2E48:  MOVWF  xF3
2E4A:  CALL   167E
....................          printf(lcd_putc,"    Contraseña      "); 
2E4E:  MOVLW  06
2E50:  MOVWF  FF6
2E52:  MOVLW  06
2E54:  MOVWF  FF7
2E56:  CALL   174E
....................          lcd_gotoxy(1,3); 
2E5A:  MOVLW  01
2E5C:  MOVWF  xF2
2E5E:  MOVLW  03
2E60:  MOVWF  xF3
2E62:  CALL   167E
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2E66:  MOVLW  1C
2E68:  MOVWF  FF6
2E6A:  MOVLW  06
2E6C:  MOVWF  FF7
2E6E:  MOVLW  0A
2E70:  MOVWF  xE4
2E72:  CALL   17D6
2E76:  MOVFF  4B,E0
2E7A:  MOVLW  1F
2E7C:  MOVWF  xE1
2E7E:  CALL   1A2E
2E82:  MOVFF  4C,E0
2E86:  MOVLW  1F
2E88:  MOVWF  xE1
2E8A:  CALL   1A2E
2E8E:  MOVFF  4D,E0
2E92:  MOVLW  1F
2E94:  MOVWF  xE1
2E96:  CALL   1A2E
2E9A:  MOVFF  4E,E0
2E9E:  MOVLW  1F
2EA0:  MOVWF  xE1
2EA2:  CALL   1A2E
2EA6:  MOVLW  20
2EA8:  MOVWF  xF1
2EAA:  CALL   16E8
2EAE:  MOVLW  20
2EB0:  MOVWF  xF1
2EB2:  CALL   16E8
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
2EB6:  MOVFF  2E,F2
2EBA:  MOVLW  04
2EBC:  MOVWF  xF3
2EBE:  CALL   167E
....................          lcd_putc(t[2]); 
2EC2:  MOVFF  4A,F1
2EC6:  CALL   16E8
....................           
....................          if(unidad>11&&unidad<14){ 
2ECA:  MOVF   2E,W
2ECC:  SUBLW  0B
2ECE:  BC    2EEE
2ED0:  MOVF   2E,W
2ED2:  SUBLW  0D
2ED4:  BNC   2EEE
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2ED6:  MOVLW  01
2ED8:  SUBWF  2E,W
2EDA:  MOVWF  xE0
2EDC:  MOVWF  xF2
2EDE:  MOVLW  04
2EE0:  MOVWF  xF3
2EE2:  CALL   167E
....................             lcd_putc(t[1]); 
2EE6:  MOVFF  49,F1
2EEA:  CALL   16E8
....................          } 
....................           
....................          Cambio=OFF; 
2EEE:  BCF    2A.7
....................       //} 
....................        
....................       if(UP){//Si oprime hacia arriba 
2EF0:  BSF    F92.5
2EF2:  BTFSC  F80.5
2EF4:  BRA    2F28
....................          delay_ms(20); 
2EF6:  MOVLW  14
2EF8:  MOVWF  xF7
2EFA:  CALL   0B9E
....................          if(UP){ 
2EFE:  BSF    F92.5
2F00:  BTFSC  F80.5
2F02:  BRA    2F26
....................             if(Flanco == 0) { 
2F04:  BTFSC  29.3
2F06:  BRA    2F26
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
2F08:  MOVLW  0B
2F0A:  SUBWF  2E,W
2F0C:  CLRF   03
2F0E:  ADDLW  4B
2F10:  MOVWF  FE9
2F12:  MOVLW  00
2F14:  ADDWFC 03,W
2F16:  MOVWF  FEA
2F18:  INCF   FEF,F
2F1A:  BSF    29.3
2F1C:  MOVLW  1E
2F1E:  MOVWF  xF7
2F20:  CALL   0B9E
2F24:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
2F26:  BRA    2F2A
....................          Flanco = 0; 
2F28:  BCF    29.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
2F2A:  BSF    F96.0
2F2C:  BTFSC  F84.0
2F2E:  BRA    2F62
....................          delay_ms(20); 
2F30:  MOVLW  14
2F32:  MOVWF  xF7
2F34:  CALL   0B9E
....................          if(DOWN){ 
2F38:  BSF    F96.0
2F3A:  BTFSC  F84.0
2F3C:  BRA    2F60
....................             if(Flanco2 == 0) { 
2F3E:  BTFSC  29.5
2F40:  BRA    2F60
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
2F42:  MOVLW  0B
2F44:  SUBWF  2E,W
2F46:  CLRF   03
2F48:  ADDLW  4B
2F4A:  MOVWF  FE9
2F4C:  MOVLW  00
2F4E:  ADDWFC 03,W
2F50:  MOVWF  FEA
2F52:  DECF   FEF,F
2F54:  BSF    29.5
2F56:  MOVLW  1E
2F58:  MOVWF  xF7
2F5A:  CALL   0B9E
2F5E:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
2F60:  BRA    2F64
....................          Flanco2 = 0; 
2F62:  BCF    29.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
2F64:  BSF    F96.1
2F66:  BTFSC  F84.1
2F68:  BRA    2F94
....................          delay_ms(20); 
2F6A:  MOVLW  14
2F6C:  MOVWF  xF7
2F6E:  CALL   0B9E
....................          if(RIGHT){ 
2F72:  BSF    F96.1
2F74:  BTFSC  F84.1
2F76:  BRA    2F92
....................             if(Flanco1 == 0) { 
2F78:  BTFSC  29.4
2F7A:  BRA    2F92
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2F7C:  BSF    29.4
2F7E:  INCF   2E,F
2F80:  MOVLW  1E
2F82:  MOVWF  xF7
2F84:  CALL   0B9E
2F88:  MOVLW  0C
2F8A:  MOVWF  xF1
2F8C:  CALL   16E8
2F90:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
2F92:  BRA    2F96
....................          Flanco1 = 0; 
2F94:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
2F96:  BSF    F96.2
2F98:  BTFSC  F84.2
2F9A:  BRA    2FC6
....................          delay_ms(150); 
2F9C:  MOVLW  96
2F9E:  MOVWF  xF7
2FA0:  CALL   0B9E
....................          if(IZQU){ 
2FA4:  BSF    F96.2
2FA6:  BTFSC  F84.2
2FA8:  BRA    2FC4
....................             if(Flanco3 == 0){ 
2FAA:  BTFSC  29.6
2FAC:  BRA    2FC4
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2FAE:  BSF    29.6
2FB0:  DECF   2E,F
2FB2:  MOVLW  1E
2FB4:  MOVWF  xF7
2FB6:  CALL   0B9E
2FBA:  MOVLW  0C
2FBC:  MOVWF  xF1
2FBE:  CALL   16E8
2FC2:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
2FC4:  BRA    2FC8
....................         Flanco3 = 0; 
2FC6:  BCF    29.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
2FC8:  MOVLW  0B
2FCA:  SUBWF  2E,W
2FCC:  CLRF   03
2FCE:  ADDLW  4B
2FD0:  MOVWF  FE9
2FD2:  MOVLW  00
2FD4:  ADDWFC 03,W
2FD6:  MOVWF  FEA
2FD8:  BTFSC  FEF.7
2FDA:  BRA    2FDE
2FDC:  BRA    2FF2
....................          clave[unidad-11]=9; 
2FDE:  MOVLW  0B
2FE0:  SUBWF  2E,W
2FE2:  CLRF   03
2FE4:  ADDLW  4B
2FE6:  MOVWF  FE9
2FE8:  MOVLW  00
2FEA:  ADDWFC 03,W
2FEC:  MOVWF  FEA
2FEE:  MOVLW  09
2FF0:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
2FF2:  MOVLW  0B
2FF4:  SUBWF  2E,W
2FF6:  CLRF   03
2FF8:  ADDLW  4B
2FFA:  MOVWF  FE9
2FFC:  MOVLW  00
2FFE:  ADDWFC 03,W
3000:  MOVWF  FEA
3002:  BTFSC  FEF.7
3004:  BRA    301E
3006:  MOVF   FEF,W
3008:  SUBLW  09
300A:  BC    301E
....................          clave[unidad-11]=0; 
300C:  MOVLW  0B
300E:  SUBWF  2E,W
3010:  CLRF   03
3012:  ADDLW  4B
3014:  MOVWF  FE9
3016:  MOVLW  00
3018:  ADDWFC 03,W
301A:  MOVWF  FEA
301C:  CLRF   FEF
....................         
....................       if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
301E:  MOVF   2E,W
3020:  SUBLW  0A
3022:  BNC   3028
....................          unidad=11; 
3024:  MOVLW  0B
3026:  MOVWF  2E
....................              
....................       if(unidad>14){             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
3028:  MOVF   2E,W
302A:  SUBLW  0E
302C:  BTFSC  FD8.0
302E:  BRA    3236
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2){ // Si Ingresa clave para reset general del sistema. 
3030:  MOVF   4B,W
3032:  SUBLW  03
3034:  BNZ   3118
3036:  MOVF   4C,W
3038:  SUBLW  08
303A:  BNZ   3118
303C:  MOVF   4D,W
303E:  SUBLW  09
3040:  BNZ   3118
3042:  MOVF   4E,W
3044:  SUBLW  02
3046:  BNZ   3118
....................             write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
3048:  CLRF   FA9
304A:  CLRF   FA8
304C:  BCF    FA6.6
304E:  BCF    FA6.7
3050:  BSF    FA6.2
3052:  MOVF   FF2,W
3054:  MOVWF  00
3056:  BCF    FF2.6
3058:  BCF    FF2.7
305A:  MOVLB  F
305C:  MOVLW  55
305E:  MOVWF  FA7
3060:  MOVLW  AA
3062:  MOVWF  FA7
3064:  BSF    FA6.1
3066:  BTFSC  FA6.1
3068:  BRA    3066
306A:  BCF    FA6.2
306C:  MOVF   00,W
306E:  IORWF  FF2,F
3070:  MOVLW  14
3072:  MOVLB  0
3074:  MOVWF  xF7
3076:  CALL   0B9E
307A:  MOVLW  01
307C:  MOVWF  FA9
307E:  CLRF   FA8
3080:  BCF    FA6.6
3082:  BCF    FA6.7
3084:  BSF    FA6.2
3086:  MOVF   FF2,W
3088:  MOVWF  00
308A:  BCF    FF2.6
308C:  BCF    FF2.7
308E:  MOVLB  F
3090:  MOVLW  55
3092:  MOVWF  FA7
3094:  MOVLW  AA
3096:  MOVWF  FA7
3098:  BSF    FA6.1
309A:  BTFSC  FA6.1
309C:  BRA    309A
309E:  BCF    FA6.2
30A0:  MOVF   00,W
30A2:  IORWF  FF2,F
30A4:  MOVLW  14
30A6:  MOVLB  0
30A8:  MOVWF  xF7
30AA:  CALL   0B9E
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
30AE:  MOVLW  02
30B0:  MOVWF  FA9
30B2:  CLRF   FA8
30B4:  BCF    FA6.6
30B6:  BCF    FA6.7
30B8:  BSF    FA6.2
30BA:  MOVF   FF2,W
30BC:  MOVWF  00
30BE:  BCF    FF2.6
30C0:  BCF    FF2.7
30C2:  MOVLB  F
30C4:  MOVLW  55
30C6:  MOVWF  FA7
30C8:  MOVLW  AA
30CA:  MOVWF  FA7
30CC:  BSF    FA6.1
30CE:  BTFSC  FA6.1
30D0:  BRA    30CE
30D2:  BCF    FA6.2
30D4:  MOVF   00,W
30D6:  IORWF  FF2,F
30D8:  MOVLW  14
30DA:  MOVLB  0
30DC:  MOVWF  xF7
30DE:  CALL   0B9E
30E2:  MOVLW  03
30E4:  MOVWF  FA9
30E6:  CLRF   FA8
30E8:  BCF    FA6.6
30EA:  BCF    FA6.7
30EC:  BSF    FA6.2
30EE:  MOVF   FF2,W
30F0:  MOVWF  00
30F2:  BCF    FF2.6
30F4:  BCF    FF2.7
30F6:  MOVLB  F
30F8:  MOVLW  55
30FA:  MOVWF  FA7
30FC:  MOVLW  AA
30FE:  MOVWF  FA7
3100:  BSF    FA6.1
3102:  BTFSC  FA6.1
3104:  BRA    3102
3106:  BCF    FA6.2
3108:  MOVF   00,W
310A:  IORWF  FF2,F
310C:  MOVLW  14
310E:  MOVLB  0
3110:  MOVWF  xF7
3112:  CALL   0B9E
....................              reset_cpu(); 
3116:  RESET
....................          } 
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]){ // Si las claves coinciden pasa a Menu Principal. 
3118:  MOVF   4F,W
311A:  SUBWF  4B,W
311C:  BNZ   31BC
311E:  MOVF   50,W
3120:  SUBWF  4C,W
3122:  BNZ   31BC
3124:  MOVF   51,W
3126:  SUBWF  4D,W
3128:  BNZ   31BC
312A:  MOVF   52,W
312C:  SUBWF  4E,W
312E:  BNZ   31BC
....................             lcd_gotoxy(1,1); 
3130:  MOVLW  01
3132:  MOVWF  xF2
3134:  MOVWF  xF3
3136:  CALL   167E
....................             printf(lcd_putc,"                   "); 
313A:  MOVLW  32
313C:  MOVWF  FF6
313E:  MOVLW  06
3140:  MOVWF  FF7
3142:  CALL   174E
....................             lcd_gotoxy(1,2); 
3146:  MOVLW  01
3148:  MOVWF  xF2
314A:  MOVLW  02
314C:  MOVWF  xF3
314E:  CALL   167E
....................             printf(lcd_putc,"     Contraseña    "); 
3152:  MOVLW  46
3154:  MOVWF  FF6
3156:  MOVLW  06
3158:  MOVWF  FF7
315A:  CALL   174E
....................             lcd_gotoxy(1,3); 
315E:  MOVLW  01
3160:  MOVWF  xF2
3162:  MOVLW  03
3164:  MOVWF  xF3
3166:  CALL   167E
....................             printf(lcd_putc,"      Correcta     "); 
316A:  MOVLW  5A
316C:  MOVWF  FF6
316E:  MOVLW  06
3170:  MOVWF  FF7
3172:  CALL   174E
....................             lcd_gotoxy(1,4); 
3176:  MOVLW  01
3178:  MOVWF  xF2
317A:  MOVLW  04
317C:  MOVWF  xF3
317E:  CALL   167E
....................             printf(lcd_putc,"                   "); 
3182:  MOVLW  6E
3184:  MOVWF  FF6
3186:  MOVLW  06
3188:  MOVWF  FF7
318A:  CALL   174E
....................             delay_ms(1000);Menu=50;unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
318E:  MOVLW  04
3190:  MOVWF  xE0
3192:  MOVLW  FA
3194:  MOVWF  xF7
3196:  CALL   0B9E
319A:  DECFSZ xE0,F
319C:  BRA    3192
319E:  MOVLW  32
31A0:  MOVWF  2B
31A2:  MOVLW  0B
31A4:  MOVWF  2E
31A6:  MOVLW  0C
31A8:  MOVWF  xF1
31AA:  CALL   16E8
31AE:  BSF    2A.7
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
31B0:  CLRF   4B
31B2:  CLRF   4C
31B4:  CLRF   4D
31B6:  CLRF   4E
31B8:  BSF    2A.7
....................          } 
....................          else{                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
31BA:  BRA    3236
....................             lcd_gotoxy(1,1); 
31BC:  MOVLW  01
31BE:  MOVWF  xF2
31C0:  MOVWF  xF3
31C2:  CALL   167E
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
31C6:  MOVLW  01
31C8:  MOVWF  xF2
31CA:  MOVLW  02
31CC:  MOVWF  xF3
31CE:  CALL   167E
....................             printf(lcd_putc,"     Contraseña    "); 
31D2:  MOVLW  82
31D4:  MOVWF  FF6
31D6:  MOVLW  06
31D8:  MOVWF  FF7
31DA:  CALL   174E
....................             lcd_gotoxy(1,3); 
31DE:  MOVLW  01
31E0:  MOVWF  xF2
31E2:  MOVLW  03
31E4:  MOVWF  xF3
31E6:  CALL   167E
....................             printf(lcd_putc,"     Incorrecta    "); 
31EA:  MOVLW  96
31EC:  MOVWF  FF6
31EE:  MOVLW  06
31F0:  MOVWF  FF7
31F2:  CALL   174E
....................             lcd_gotoxy(1,4); 
31F6:  MOVLW  01
31F8:  MOVWF  xF2
31FA:  MOVLW  04
31FC:  MOVWF  xF3
31FE:  CALL   167E
....................             printf(lcd_putc,"                   "); 
3202:  MOVLW  AA
3204:  MOVWF  FF6
3206:  MOVLW  06
3208:  MOVWF  FF7
320A:  CALL   174E
....................             delay_ms(1000);unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
320E:  MOVLW  04
3210:  MOVWF  xE0
3212:  MOVLW  FA
3214:  MOVWF  xF7
3216:  CALL   0B9E
321A:  DECFSZ xE0,F
321C:  BRA    3212
321E:  MOVLW  0B
3220:  MOVWF  2E
3222:  MOVLW  0C
3224:  MOVWF  xF1
3226:  CALL   16E8
322A:  BSF    2A.7
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
322C:  CLRF   4B
322E:  CLRF   4C
3230:  CLRF   4D
3232:  CLRF   4E
3234:  BSF    2A.7
....................          } 
....................       } 
....................    } 
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
3236:  DECFSZ 2B,W
3238:  BRA    3470
....................       EliminaRuido(); 
323A:  CALL   0004
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
323E:  MOVLW  01
3240:  MOVWF  xF2
3242:  MOVWF  xF3
3244:  CALL   167E
....................          printf(lcd_putc,"---MENU PRINCIPAL---"); 
3248:  MOVLW  BE
324A:  MOVWF  FF6
324C:  MOVLW  06
324E:  MOVWF  FF7
3250:  CALL   174E
....................          mensajes(1+paso,2); 
3254:  MOVLW  01
3256:  ADDWF  47,W
3258:  MOVWF  xE0
325A:  MOVWF  xE1
325C:  MOVLW  02
325E:  MOVWF  xE2
3260:  CALL   1AF6
....................          mensajes(2+paso,3); 
3264:  MOVLW  02
3266:  ADDWF  47,W
3268:  MOVWF  xE0
326A:  MOVWF  xE1
326C:  MOVLW  03
326E:  MOVWF  xE2
3270:  CALL   1AF6
....................          mensajes(3+paso,4); 
3274:  MOVLW  03
3276:  ADDWF  47,W
3278:  MOVWF  xE0
327A:  MOVWF  xE1
327C:  MOVLW  04
327E:  MOVWF  xE2
3280:  CALL   1AF6
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
3284:  MOVLW  01
3286:  MOVWF  xF2
3288:  MOVFF  2F,F3
328C:  CALL   167E
....................         lcd_putc(t[0]); 
3290:  MOVFF  48,F1
3294:  CALL   16E8
....................  
....................         if(Flecha==2) 
3298:  MOVF   2F,W
329A:  SUBLW  02
329C:  BNZ   32C6
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
329E:  MOVLW  01
32A0:  MOVWF  xF2
32A2:  MOVLW  04
32A4:  MOVWF  xF3
32A6:  CALL   167E
....................             lcd_putc(t[1]); 
32AA:  MOVFF  49,F1
32AE:  CALL   16E8
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
32B2:  MOVLW  01
32B4:  MOVWF  xF2
32B6:  MOVLW  03
32B8:  MOVWF  xF3
32BA:  CALL   167E
....................             lcd_putc(t[1]); 
32BE:  MOVFF  49,F1
32C2:  CALL   16E8
....................           } 
....................          
....................         if(Flecha==4) 
32C6:  MOVF   2F,W
32C8:  SUBLW  04
32CA:  BNZ   32F4
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
32CC:  MOVLW  01
32CE:  MOVWF  xF2
32D0:  MOVLW  02
32D2:  MOVWF  xF3
32D4:  CALL   167E
....................             lcd_putc(t[1]); 
32D8:  MOVFF  49,F1
32DC:  CALL   16E8
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
32E0:  MOVLW  01
32E2:  MOVWF  xF2
32E4:  MOVLW  03
32E6:  MOVWF  xF3
32E8:  CALL   167E
....................             lcd_putc(t[1]); 
32EC:  MOVFF  49,F1
32F0:  CALL   16E8
....................           } 
....................          
....................         if(Flecha==3) 
32F4:  MOVF   2F,W
32F6:  SUBLW  03
32F8:  BNZ   3322
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
32FA:  MOVLW  01
32FC:  MOVWF  xF2
32FE:  MOVLW  04
3300:  MOVWF  xF3
3302:  CALL   167E
....................             lcd_putc(t[1]); 
3306:  MOVFF  49,F1
330A:  CALL   16E8
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
330E:  MOVLW  01
3310:  MOVWF  xF2
3312:  MOVLW  02
3314:  MOVWF  xF3
3316:  CALL   167E
....................             lcd_putc(t[1]); 
331A:  MOVFF  49,F1
331E:  CALL   16E8
....................           } 
....................          Cambio=OFF; 
3322:  BCF    2A.7
....................      // } 
....................          
....................       if(UP){//Si oprime hacia arriba 
3324:  BSF    F92.5
3326:  BTFSC  F80.5
3328:  BRA    3354
....................          delay_ms(20); 
332A:  MOVLW  14
332C:  MOVWF  xF7
332E:  CALL   0B9E
....................          if(UP){ 
3332:  BSF    F92.5
3334:  BTFSC  F80.5
3336:  BRA    3352
....................             if(Flanco == 0){ 
3338:  BTFSC  29.3
333A:  BRA    3352
....................                Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30);Cambio=ON; 
333C:  DECF   31,F
333E:  DECF   2F,F
3340:  MOVLW  01
3342:  ADDWF  2F,W
3344:  MOVWF  30
3346:  BSF    29.3
3348:  MOVLW  1E
334A:  MOVWF  xF7
334C:  CALL   0B9E
3350:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
3352:  BRA    3356
....................          Flanco = 0; 
3354:  BCF    29.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
3356:  BSF    F96.0
3358:  BTFSC  F84.0
335A:  BRA    3386
....................          delay_ms(20); 
335C:  MOVLW  14
335E:  MOVWF  xF7
3360:  CALL   0B9E
....................          if(DOWN){ 
3364:  BSF    F96.0
3366:  BTFSC  F84.0
3368:  BRA    3384
....................             if(Flanco2 == 0){ 
336A:  BTFSC  29.5
336C:  BRA    3384
....................                Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30);Cambio=ON; 
336E:  INCF   31,F
3370:  INCF   2F,F
3372:  MOVLW  01
3374:  SUBWF  2F,W
3376:  MOVWF  30
3378:  BSF    29.5
337A:  MOVLW  1E
337C:  MOVWF  xF7
337E:  CALL   0B9E
3382:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
3384:  BRA    3388
....................          Flanco2 = 0; 
3386:  BCF    29.5
....................       } 
....................     
....................          
....................       if(Flecha2>nMenuH){ 
3388:  MOVF   31,W
338A:  SUBWF  33,W
338C:  BC    339E
....................          paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4; 
338E:  INCF   47,F
3390:  MOVFF  31,33
3394:  MOVLW  02
3396:  SUBWF  33,W
3398:  MOVWF  32
339A:  MOVLW  04
339C:  MOVWF  2F
....................       } 
....................          
....................       if(Flecha2<nMenuL){ 
339E:  MOVF   32,W
33A0:  SUBWF  31,W
33A2:  BC    33B4
....................          paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2; 
33A4:  DECF   47,F
33A6:  MOVFF  31,32
33AA:  MOVLW  02
33AC:  ADDWF  32,W
33AE:  MOVWF  33
33B0:  MOVLW  02
33B2:  MOVWF  2F
....................       } 
....................          
....................       if(Flecha2>n_opcionH){ 
33B4:  MOVF   31,W
33B6:  SUBWF  2C,W
33B8:  BC    33CC
....................          Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2; 
33BA:  MOVFF  2D,31
33BE:  MOVLW  02
33C0:  MOVWF  2F
33C2:  CLRF   47
33C4:  MOVFF  31,32
33C8:  ADDWF  32,W
33CA:  MOVWF  33
....................       } 
....................          
....................       if(Flecha2<n_opcionL){ 
33CC:  MOVF   2D,W
33CE:  SUBWF  31,W
33D0:  BC    33E8
....................          Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2; 
33D2:  MOVFF  2C,31
33D6:  MOVLW  04
33D8:  MOVWF  2F
33DA:  SUBWF  2C,W
33DC:  MOVWF  47
33DE:  MOVFF  31,33
33E2:  MOVLW  02
33E4:  SUBWF  33,W
33E6:  MOVWF  32
....................       } 
....................          
....................       if(paso<0) 
33E8:  BTFSC  47.7
33EA:  BRA    33EE
33EC:  BRA    33F0
....................          paso=0; 
33EE:  CLRF   47
....................           
....................       if(RIGHT){// Si oprime derecha 
33F0:  BSF    F96.1
33F2:  BTFSC  F84.1
33F4:  BRA    343C
....................          delay_ms(20); 
33F6:  MOVLW  14
33F8:  MOVWF  xF7
33FA:  CALL   0B9E
....................          if(RIGHT){ 
33FE:  BSF    F96.1
3400:  BTFSC  F84.1
3402:  BRA    3438
....................             if(Flanco1 == 0){ 
3404:  BTFSC  29.4
3406:  BRA    3438
....................                Flanco1 = 1;Menu=Flecha2;Flecha=3;delay_ms(300);printf(lcd_putc,"\f"); 
3408:  BSF    29.4
340A:  MOVFF  31,2B
340E:  MOVLW  03
3410:  MOVWF  2F
3412:  MOVLW  02
3414:  MOVWF  xE0
3416:  MOVLW  96
3418:  MOVWF  xF7
341A:  CALL   0B9E
341E:  DECFSZ xE0,F
3420:  BRA    3416
3422:  MOVLW  0C
3424:  MOVWF  xF1
3426:  CALL   16E8
....................                if(Menu==6){ 
342A:  MOVF   2B,W
342C:  SUBLW  06
342E:  BNZ   3438
....................                   clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
3430:  CLRF   4B
3432:  CLRF   4C
3434:  CLRF   4D
3436:  CLRF   4E
....................                } 
....................             } 
....................          } 
....................          Cambio=ON; 
3438:  BSF    2A.7
....................       }else{ 
343A:  BRA    343E
....................         Flanco1 = 0; 
343C:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){ 
343E:  BSF    F96.2
3440:  BTFSC  F84.2
3442:  BRA    3470
....................          delay_ms(20); 
3444:  MOVLW  14
3446:  MOVWF  xF7
3448:  CALL   0B9E
....................          if(IZQU){ 
344C:  BSF    F96.2
344E:  BTFSC  F84.2
3450:  BRA    3470
....................             delay_ms(500);Menu=50;printf(lcd_putc,"\f");Cambio=ON; 
3452:  MOVLW  02
3454:  MOVWF  xE0
3456:  MOVLW  FA
3458:  MOVWF  xF7
345A:  CALL   0B9E
345E:  DECFSZ xE0,F
3460:  BRA    3456
3462:  MOVLW  32
3464:  MOVWF  2B
3466:  MOVLW  0C
3468:  MOVWF  xF1
346A:  CALL   16E8
346E:  BSF    2A.7
....................          } 
....................       } 
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de tiempo de trabajo de Luz UV    
3470:  MOVF   2B,W
3472:  SUBLW  02
3474:  BTFSS  FD8.2
3476:  BRA    36D0
....................    EliminaRuido(); 
3478:  CALL   0004
....................    //if(Cambio){ 
....................       lcd_gotoxy(1,1); 
347C:  MOVLW  01
347E:  MOVWF  xF2
3480:  MOVWF  xF3
3482:  CALL   167E
....................       printf(lcd_putc,"    Temporizador     "); 
3486:  MOVLW  D4
3488:  MOVWF  FF6
348A:  MOVLW  06
348C:  MOVWF  FF7
348E:  CALL   174E
....................       lcd_gotoxy(1,2); 
3492:  MOVLW  01
3494:  MOVWF  xF2
3496:  MOVLW  02
3498:  MOVWF  xF3
349A:  CALL   167E
....................       printf(lcd_putc,"       Luz UV        "); 
349E:  MOVLW  EA
34A0:  MOVWF  FF6
34A2:  MOVLW  06
34A4:  MOVWF  FF7
34A6:  CALL   174E
....................       lcd_gotoxy(6,3); 
34AA:  MOVLW  06
34AC:  MOVWF  xF2
34AE:  MOVLW  03
34B0:  MOVWF  xF3
34B2:  CALL   167E
....................       printf(lcd_putc,"%03u:%02u (M:S)  ",tempo_minutos_pro,tempo_segundos_pro);  
34B6:  MOVFF  3C,E0
34BA:  MOVLW  03
34BC:  MOVWF  xE1
34BE:  CALL   181C
34C2:  MOVLW  3A
34C4:  MOVWF  xF1
34C6:  CALL   16E8
34CA:  MOVFF  3D,E0
34CE:  MOVLW  01
34D0:  MOVWF  xE1
34D2:  CALL   181C
34D6:  MOVLW  09
34D8:  MOVWF  FF6
34DA:  MOVLW  07
34DC:  MOVWF  FF7
34DE:  MOVLW  08
34E0:  MOVWF  xE4
34E2:  CALL   17D6
....................        
....................       lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
34E6:  MOVLW  06
34E8:  ADDWF  41,W
34EA:  MOVWF  xE0
34EC:  MOVWF  xF2
34EE:  MOVLW  04
34F0:  MOVWF  xF3
34F2:  CALL   167E
....................       lcd_putc(t[2]); 
34F6:  MOVFF  4A,F1
34FA:  CALL   16E8
....................        
....................       Cambio=OFF; 
34FE:  BCF    2A.7
.................... //   } 
....................     
....................    if(UP) 
3500:  BSF    F92.5
3502:  BTFSC  F80.5
3504:  BRA    3552
....................    { 
....................       delay_ms(20); 
3506:  MOVLW  14
3508:  MOVWF  xF7
350A:  CALL   0B9E
....................       if(UP){ 
350E:  BSF    F92.5
3510:  BTFSC  F80.5
3512:  BRA    3552
....................          if(unidad2==1) 
3514:  DECFSZ 41,W
3516:  BRA    3532
....................          { 
....................             if(tempo_minutos_pro<240) 
3518:  MOVF   3C,W
351A:  SUBLW  EF
351C:  BNC   3532
....................             { 
....................                tempo_minutos_pro+=5;delay_ms(300); 
351E:  MOVLW  05
3520:  ADDWF  3C,F
3522:  MOVLW  02
3524:  MOVWF  xE0
3526:  MOVLW  96
3528:  MOVWF  xF7
352A:  CALL   0B9E
352E:  DECFSZ xE0,F
3530:  BRA    3526
....................             } 
....................          } 
....................           
....................          if(unidad2==4) 
3532:  MOVF   41,W
3534:  SUBLW  04
3536:  BNZ   3550
....................          { 
....................             if(tempo_segundos_pro<59) 
3538:  MOVF   3D,W
353A:  SUBLW  3A
353C:  BNC   3550
....................             { 
....................                tempo_segundos_pro++;delay_ms(300); 
353E:  INCF   3D,F
3540:  MOVLW  02
3542:  MOVWF  xE0
3544:  MOVLW  96
3546:  MOVWF  xF7
3548:  CALL   0B9E
354C:  DECFSZ xE0,F
354E:  BRA    3544
....................             } 
....................          }      
....................       Cambio=ON; 
3550:  BSF    2A.7
....................       } 
....................    } 
....................     
....................    if(DOWN) 
3552:  BSF    F96.0
3554:  BTFSC  F84.0
3556:  BRA    35A0
....................    { 
....................       delay_ms(20); 
3558:  MOVLW  14
355A:  MOVWF  xF7
355C:  CALL   0B9E
....................       if(DOWN){ 
3560:  BSF    F96.0
3562:  BTFSC  F84.0
3564:  BRA    35A0
....................          if(unidad2==1) 
3566:  DECFSZ 41,W
3568:  BRA    3582
....................          { 
....................             if(tempo_minutos_pro>0) 
356A:  MOVF   3C,F
356C:  BZ    3582
....................             { 
....................                tempo_minutos_pro-=5;delay_ms(300); 
356E:  MOVLW  05
3570:  SUBWF  3C,F
3572:  MOVLW  02
3574:  MOVWF  xE0
3576:  MOVLW  96
3578:  MOVWF  xF7
357A:  CALL   0B9E
357E:  DECFSZ xE0,F
3580:  BRA    3576
....................             }  
....................          } 
....................           
....................          if(unidad2==4) 
3582:  MOVF   41,W
3584:  SUBLW  04
3586:  BNZ   359E
....................          { 
....................             if(tempo_segundos_pro>0) 
3588:  MOVF   3D,F
358A:  BZ    359E
....................             { 
....................                tempo_segundos_pro--;delay_ms(300); 
358C:  DECF   3D,F
358E:  MOVLW  02
3590:  MOVWF  xE0
3592:  MOVLW  96
3594:  MOVWF  xF7
3596:  CALL   0B9E
359A:  DECFSZ xE0,F
359C:  BRA    3592
....................             }    
....................          } 
....................       Cambio=ON; 
359E:  BSF    2A.7
....................       } 
....................    } 
....................     
....................    if(RIGHT) 
35A0:  BSF    F96.1
35A2:  BTFSC  F84.1
35A4:  BRA    35E2
....................    { 
....................       delay_ms(20); 
35A6:  MOVLW  14
35A8:  MOVWF  xF7
35AA:  CALL   0B9E
....................       if(RIGHT){ 
35AE:  BSF    F96.1
35B0:  BTFSC  F84.1
35B2:  BRA    35E2
....................          if(unidad2==1) 
35B4:  DECFSZ 41,W
35B6:  BRA    35BE
....................          { 
....................             unidad2=4; 
35B8:  MOVLW  04
35BA:  MOVWF  41
....................          } 
....................          else 
35BC:  BRA    35C8
....................          { 
....................             if(unidad2==4) 
35BE:  MOVF   41,W
35C0:  SUBLW  04
35C2:  BNZ   35C8
....................             { 
....................                unidad2=1; 
35C4:  MOVLW  01
35C6:  MOVWF  41
....................             } 
....................          } 
....................       delay_ms(500); 
35C8:  MOVLW  02
35CA:  MOVWF  xE0
35CC:  MOVLW  FA
35CE:  MOVWF  xF7
35D0:  CALL   0B9E
35D4:  DECFSZ xE0,F
35D6:  BRA    35CC
....................       printf(lcd_putc,"\f"); 
35D8:  MOVLW  0C
35DA:  MOVWF  xF1
35DC:  CALL   16E8
....................       Cambio=ON; 
35E0:  BSF    2A.7
....................       } 
....................    } 
....................     
....................    if(IZQU) 
35E2:  BSF    F96.2
35E4:  BTFSC  F84.2
35E6:  BRA    36D0
....................    { 
....................       if(IZQU){ 
35E8:  BSF    F96.2
35EA:  BTFSC  F84.2
35EC:  BRA    36D0
....................          delay_ms(200); 
35EE:  MOVLW  C8
35F0:  MOVWF  xF7
35F2:  CALL   0B9E
....................          printf(lcd_putc,"\f"); 
35F6:  MOVLW  0C
35F8:  MOVWF  xF1
35FA:  CALL   16E8
....................          lcd_gotoxy(1,2); 
35FE:  MOVLW  01
3600:  MOVWF  xF2
3602:  MOVLW  02
3604:  MOVWF  xF3
3606:  CALL   167E
....................          printf(lcd_putc,"Tiempo Almacenado"); 
360A:  MOVLW  12
360C:  MOVWF  FF6
360E:  MOVLW  07
3610:  MOVWF  FF7
3612:  CALL   174E
....................          lcd_gotoxy(1,3); 
3616:  MOVLW  01
3618:  MOVWF  xF2
361A:  MOVLW  03
361C:  MOVWF  xF3
361E:  CALL   167E
....................          printf(lcd_putc,"  Correctamente  "); 
3622:  MOVLW  24
3624:  MOVWF  FF6
3626:  MOVLW  07
3628:  MOVWF  FF7
362A:  CALL   174E
....................          write_eeprom(5,tempo_minutos_pro); 
362E:  MOVLW  05
3630:  MOVWF  FA9
3632:  MOVFF  3C,FA8
3636:  BCF    FA6.6
3638:  BCF    FA6.7
363A:  BSF    FA6.2
363C:  MOVF   FF2,W
363E:  MOVWF  00
3640:  BCF    FF2.6
3642:  BCF    FF2.7
3644:  MOVLB  F
3646:  MOVLW  55
3648:  MOVWF  FA7
364A:  MOVLW  AA
364C:  MOVWF  FA7
364E:  BSF    FA6.1
3650:  BTFSC  FA6.1
3652:  BRA    3650
3654:  BCF    FA6.2
3656:  MOVF   00,W
3658:  IORWF  FF2,F
....................          delay_ms(20); 
365A:  MOVLW  14
365C:  MOVLB  0
365E:  MOVWF  xF7
3660:  CALL   0B9E
....................          write_eeprom(6,tempo_segundos_pro); 
3664:  MOVLW  06
3666:  MOVWF  FA9
3668:  MOVFF  3D,FA8
366C:  BCF    FA6.6
366E:  BCF    FA6.7
3670:  BSF    FA6.2
3672:  MOVF   FF2,W
3674:  MOVWF  00
3676:  BCF    FF2.6
3678:  BCF    FF2.7
367A:  MOVLB  F
367C:  MOVLW  55
367E:  MOVWF  FA7
3680:  MOVLW  AA
3682:  MOVWF  FA7
3684:  BSF    FA6.1
3686:  BTFSC  FA6.1
3688:  BRA    3686
368A:  BCF    FA6.2
368C:  MOVF   00,W
368E:  IORWF  FF2,F
....................          delay_ms(20); 
3690:  MOVLW  14
3692:  MOVLB  0
3694:  MOVWF  xF7
3696:  CALL   0B9E
....................          tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
369A:  MOVFF  3C,3A
369E:  MOVFF  3D,3B
....................          delay_ms(700); 
36A2:  MOVLW  04
36A4:  MOVWF  xE0
36A6:  MOVLW  AF
36A8:  MOVWF  xF7
36AA:  CALL   0B9E
36AE:  DECFSZ xE0,F
36B0:  BRA    36A6
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
36B2:  MOVLW  1E
36B4:  MOVWF  xF7
36B6:  CALL   0B9E
36BA:  MOVLW  01
36BC:  MOVWF  2B
36BE:  CLRF   47
36C0:  MOVLW  02
36C2:  MOVWF  2F
36C4:  MOVWF  31
36C6:  MOVLW  0C
36C8:  MOVWF  xF1
36CA:  CALL   16E8
....................          Cambio=ON; 
36CE:  BSF    2A.7
....................       } 
....................    }   
....................   } 
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................  
.................... //----------------Menu3--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu para Cambio de Contraseña 
36D0:  MOVF   2B,W
36D2:  SUBLW  03
36D4:  BTFSS  FD8.2
36D6:  BRA    3A22
....................       EliminaRuido(); 
36D8:  CALL   0004
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
36DC:  MOVLW  01
36DE:  MOVWF  xF2
36E0:  MOVWF  xF3
36E2:  CALL   167E
....................          printf(lcd_putc,"     Ingrese        "); 
36E6:  MOVLW  36
36E8:  MOVWF  FF6
36EA:  MOVLW  07
36EC:  MOVWF  FF7
36EE:  CALL   174E
....................          lcd_gotoxy(1,2); 
36F2:  MOVLW  01
36F4:  MOVWF  xF2
36F6:  MOVLW  02
36F8:  MOVWF  xF3
36FA:  CALL   167E
....................          printf(lcd_putc,"    Contraseña      "); 
36FE:  MOVLW  4C
3700:  MOVWF  FF6
3702:  MOVLW  07
3704:  MOVWF  FF7
3706:  CALL   174E
....................          lcd_gotoxy(1,3); 
370A:  MOVLW  01
370C:  MOVWF  xF2
370E:  MOVLW  03
3710:  MOVWF  xF3
3712:  CALL   167E
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
3716:  MOVLW  62
3718:  MOVWF  FF6
371A:  MOVLW  07
371C:  MOVWF  FF7
371E:  MOVLW  0A
3720:  MOVWF  xE4
3722:  CALL   17D6
3726:  MOVFF  4B,E0
372A:  MOVLW  1F
372C:  MOVWF  xE1
372E:  CALL   1A2E
3732:  MOVFF  4C,E0
3736:  MOVLW  1F
3738:  MOVWF  xE1
373A:  CALL   1A2E
373E:  MOVFF  4D,E0
3742:  MOVLW  1F
3744:  MOVWF  xE1
3746:  CALL   1A2E
374A:  MOVFF  4E,E0
374E:  MOVLW  1F
3750:  MOVWF  xE1
3752:  CALL   1A2E
3756:  MOVLW  20
3758:  MOVWF  xF1
375A:  CALL   16E8
375E:  MOVLW  20
3760:  MOVWF  xF1
3762:  CALL   16E8
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
3766:  MOVFF  2E,F2
376A:  MOVLW  04
376C:  MOVWF  xF3
376E:  CALL   167E
....................          lcd_putc(t[2]); 
3772:  MOVFF  4A,F1
3776:  CALL   16E8
....................           
....................          if(unidad>11&&unidad<14){ 
377A:  MOVF   2E,W
377C:  SUBLW  0B
377E:  BC    379E
3780:  MOVF   2E,W
3782:  SUBLW  0D
3784:  BNC   379E
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
3786:  MOVLW  01
3788:  SUBWF  2E,W
378A:  MOVWF  xE0
378C:  MOVWF  xF2
378E:  MOVLW  04
3790:  MOVWF  xF3
3792:  CALL   167E
....................             lcd_putc(t[1]); 
3796:  MOVFF  49,F1
379A:  CALL   16E8
....................          } 
....................           
....................          Cambio=OFF; 
379E:  BCF    2A.7
....................       //} 
....................        
....................       if(UP){//Si oprime hacia arriba 
37A0:  BSF    F92.5
37A2:  BTFSC  F80.5
37A4:  BRA    37D8
....................          delay_ms(20); 
37A6:  MOVLW  14
37A8:  MOVWF  xF7
37AA:  CALL   0B9E
....................          if(UP){ 
37AE:  BSF    F92.5
37B0:  BTFSC  F80.5
37B2:  BRA    37D6
....................             if(Flanco == 0) { 
37B4:  BTFSC  29.3
37B6:  BRA    37D6
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
37B8:  MOVLW  0B
37BA:  SUBWF  2E,W
37BC:  CLRF   03
37BE:  ADDLW  4B
37C0:  MOVWF  FE9
37C2:  MOVLW  00
37C4:  ADDWFC 03,W
37C6:  MOVWF  FEA
37C8:  INCF   FEF,F
37CA:  BSF    29.3
37CC:  MOVLW  1E
37CE:  MOVWF  xF7
37D0:  CALL   0B9E
37D4:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
37D6:  BRA    37DA
....................          Flanco = 0; 
37D8:  BCF    29.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
37DA:  BSF    F96.0
37DC:  BTFSC  F84.0
37DE:  BRA    3812
....................          delay_ms(20); 
37E0:  MOVLW  14
37E2:  MOVWF  xF7
37E4:  CALL   0B9E
....................          if(DOWN){ 
37E8:  BSF    F96.0
37EA:  BTFSC  F84.0
37EC:  BRA    3810
....................             if(Flanco2 == 0) { 
37EE:  BTFSC  29.5
37F0:  BRA    3810
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
37F2:  MOVLW  0B
37F4:  SUBWF  2E,W
37F6:  CLRF   03
37F8:  ADDLW  4B
37FA:  MOVWF  FE9
37FC:  MOVLW  00
37FE:  ADDWFC 03,W
3800:  MOVWF  FEA
3802:  DECF   FEF,F
3804:  BSF    29.5
3806:  MOVLW  1E
3808:  MOVWF  xF7
380A:  CALL   0B9E
380E:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
3810:  BRA    3814
....................          Flanco2 = 0; 
3812:  BCF    29.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
3814:  BSF    F96.1
3816:  BTFSC  F84.1
3818:  BRA    3844
....................          delay_ms(20); 
381A:  MOVLW  14
381C:  MOVWF  xF7
381E:  CALL   0B9E
....................          if(RIGHT){ 
3822:  BSF    F96.1
3824:  BTFSC  F84.1
3826:  BRA    3842
....................             if(Flanco1 == 0) { 
3828:  BTFSC  29.4
382A:  BRA    3842
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
382C:  BSF    29.4
382E:  INCF   2E,F
3830:  MOVLW  1E
3832:  MOVWF  xF7
3834:  CALL   0B9E
3838:  MOVLW  0C
383A:  MOVWF  xF1
383C:  CALL   16E8
3840:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
3842:  BRA    3846
....................          Flanco1 = 0; 
3844:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
3846:  BSF    F96.2
3848:  BTFSC  F84.2
384A:  BRA    3876
....................          delay_ms(150); 
384C:  MOVLW  96
384E:  MOVWF  xF7
3850:  CALL   0B9E
....................          if(IZQU){ 
3854:  BSF    F96.2
3856:  BTFSC  F84.2
3858:  BRA    3874
....................             if(Flanco3 == 0){ 
385A:  BTFSC  29.6
385C:  BRA    3874
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
385E:  BSF    29.6
3860:  DECF   2E,F
3862:  MOVLW  1E
3864:  MOVWF  xF7
3866:  CALL   0B9E
386A:  MOVLW  0C
386C:  MOVWF  xF1
386E:  CALL   16E8
3872:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
3874:  BRA    3878
....................         Flanco3 = 0; 
3876:  BCF    29.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
3878:  MOVLW  0B
387A:  SUBWF  2E,W
387C:  CLRF   03
387E:  ADDLW  4B
3880:  MOVWF  FE9
3882:  MOVLW  00
3884:  ADDWFC 03,W
3886:  MOVWF  FEA
3888:  BTFSC  FEF.7
388A:  BRA    388E
388C:  BRA    38A2
....................          clave[unidad-11]=9; 
388E:  MOVLW  0B
3890:  SUBWF  2E,W
3892:  CLRF   03
3894:  ADDLW  4B
3896:  MOVWF  FE9
3898:  MOVLW  00
389A:  ADDWFC 03,W
389C:  MOVWF  FEA
389E:  MOVLW  09
38A0:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
38A2:  MOVLW  0B
38A4:  SUBWF  2E,W
38A6:  CLRF   03
38A8:  ADDLW  4B
38AA:  MOVWF  FE9
38AC:  MOVLW  00
38AE:  ADDWFC 03,W
38B0:  MOVWF  FEA
38B2:  BTFSC  FEF.7
38B4:  BRA    38CE
38B6:  MOVF   FEF,W
38B8:  SUBLW  09
38BA:  BC    38CE
....................          clave[unidad-11]=0; 
38BC:  MOVLW  0B
38BE:  SUBWF  2E,W
38C0:  CLRF   03
38C2:  ADDLW  4B
38C4:  MOVWF  FE9
38C6:  MOVLW  00
38C8:  ADDWFC 03,W
38CA:  MOVWF  FEA
38CC:  CLRF   FEF
....................         
....................       if(unidad<11){             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
38CE:  MOVF   2E,W
38D0:  SUBLW  0A
38D2:  BNC   38F4
....................          unidad=11; 
38D4:  MOVLW  0B
38D6:  MOVWF  2E
....................          Menu=1; 
38D8:  MOVLW  01
38DA:  MOVWF  2B
....................          paso=0; 
38DC:  CLRF   47
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
38DE:  CLRF   4B
38E0:  CLRF   4C
38E2:  CLRF   4D
38E4:  CLRF   4E
38E6:  BSF    2A.7
....................          unidad=11;printf(lcd_putc,"\f"); 
38E8:  MOVLW  0B
38EA:  MOVWF  2E
38EC:  MOVLW  0C
38EE:  MOVWF  xF1
38F0:  CALL   16E8
....................       } 
....................         
....................       if(unidad>14){// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
38F4:  MOVF   2E,W
38F6:  SUBLW  0E
38F8:  BTFSC  FD8.0
38FA:  BRA    3A22
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]){ 
38FC:  MOVF   4F,W
38FE:  SUBWF  4B,W
3900:  BNZ   399E
3902:  MOVF   50,W
3904:  SUBWF  4C,W
3906:  BNZ   399E
3908:  MOVF   51,W
390A:  SUBWF  4D,W
390C:  BNZ   399E
390E:  MOVF   52,W
3910:  SUBWF  4E,W
3912:  BNZ   399E
....................             lcd_gotoxy(1,1); 
3914:  MOVLW  01
3916:  MOVWF  xF2
3918:  MOVWF  xF3
391A:  CALL   167E
....................             printf(lcd_putc,"                    "); 
391E:  MOVLW  78
3920:  MOVWF  FF6
3922:  MOVLW  07
3924:  MOVWF  FF7
3926:  CALL   174E
....................             lcd_gotoxy(1,2); 
392A:  MOVLW  01
392C:  MOVWF  xF2
392E:  MOVLW  02
3930:  MOVWF  xF3
3932:  CALL   167E
....................             printf(lcd_putc,"     Contraseña     "); 
3936:  MOVLW  8E
3938:  MOVWF  FF6
393A:  MOVLW  07
393C:  MOVWF  FF7
393E:  CALL   174E
....................             lcd_gotoxy(1,3); 
3942:  MOVLW  01
3944:  MOVWF  xF2
3946:  MOVLW  03
3948:  MOVWF  xF3
394A:  CALL   167E
....................             printf(lcd_putc,"      Correcta      "); 
394E:  MOVLW  A4
3950:  MOVWF  FF6
3952:  MOVLW  07
3954:  MOVWF  FF7
3956:  CALL   174E
....................             lcd_gotoxy(1,4); 
395A:  MOVLW  01
395C:  MOVWF  xF2
395E:  MOVLW  04
3960:  MOVWF  xF3
3962:  CALL   167E
....................             printf(lcd_putc,"                    "); 
3966:  MOVLW  BA
3968:  MOVWF  FF6
396A:  MOVLW  07
396C:  MOVWF  FF7
396E:  CALL   174E
....................             delay_ms(500);Menu=61;unidad=11;printf(lcd_putc,"\f"); 
3972:  MOVLW  02
3974:  MOVWF  xE0
3976:  MOVLW  FA
3978:  MOVWF  xF7
397A:  CALL   0B9E
397E:  DECFSZ xE0,F
3980:  BRA    3976
3982:  MOVLW  3D
3984:  MOVWF  2B
3986:  MOVLW  0B
3988:  MOVWF  2E
398A:  MOVLW  0C
398C:  MOVWF  xF1
398E:  CALL   16E8
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
3992:  CLRF   4B
3994:  CLRF   4C
3996:  CLRF   4D
3998:  CLRF   4E
399A:  BSF    2A.7
....................          }else{ 
399C:  BRA    3A22
....................             lcd_gotoxy(1,1); 
399E:  MOVLW  01
39A0:  MOVWF  xF2
39A2:  MOVWF  xF3
39A4:  CALL   167E
....................             printf(lcd_putc,"                    "); 
39A8:  MOVLW  D0
39AA:  MOVWF  FF6
39AC:  MOVLW  07
39AE:  MOVWF  FF7
39B0:  CALL   174E
....................             lcd_gotoxy(1,2); 
39B4:  MOVLW  01
39B6:  MOVWF  xF2
39B8:  MOVLW  02
39BA:  MOVWF  xF3
39BC:  CALL   167E
....................             printf(lcd_putc,"     Contraseña     "); 
39C0:  MOVLW  E6
39C2:  MOVWF  FF6
39C4:  MOVLW  07
39C6:  MOVWF  FF7
39C8:  CALL   174E
....................             lcd_gotoxy(1,3); 
39CC:  MOVLW  01
39CE:  MOVWF  xF2
39D0:  MOVLW  03
39D2:  MOVWF  xF3
39D4:  CALL   167E
....................             printf(lcd_putc,"     Incorrecta     "); 
39D8:  MOVLW  FC
39DA:  MOVWF  FF6
39DC:  MOVLW  07
39DE:  MOVWF  FF7
39E0:  CALL   174E
....................             lcd_gotoxy(1,4); 
39E4:  MOVLW  01
39E6:  MOVWF  xF2
39E8:  MOVLW  04
39EA:  MOVWF  xF3
39EC:  CALL   167E
....................             printf(lcd_putc,"                    "); 
39F0:  MOVLW  12
39F2:  MOVWF  FF6
39F4:  MOVLW  08
39F6:  MOVWF  FF7
39F8:  CALL   174E
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
39FC:  MOVLW  02
39FE:  MOVWF  xE0
3A00:  MOVLW  FA
3A02:  MOVWF  xF7
3A04:  CALL   0B9E
3A08:  DECFSZ xE0,F
3A0A:  BRA    3A00
3A0C:  MOVLW  0B
3A0E:  MOVWF  2E
3A10:  MOVLW  0C
3A12:  MOVWF  xF1
3A14:  CALL   16E8
3A18:  BSF    2A.7
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
3A1A:  CLRF   4B
3A1C:  CLRF   4C
3A1E:  CLRF   4D
3A20:  CLRF   4E
....................          } 
....................       } 
....................    }       
.................... //----------------Fin-Menu3--------------------------------------------------------------- 
....................  
.................... //----------------Menu6.1--------------------------------------------------------------- 
....................    if(Menu == 61){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
3A22:  MOVF   2B,W
3A24:  SUBLW  3D
3A26:  BTFSS  FD8.2
3A28:  BRA    3DBA
....................       EliminaRuido(); 
3A2A:  CALL   0004
.................... //      if(Cambio){ 
....................          lcd_gotoxy(1,1); 
3A2E:  MOVLW  01
3A30:  MOVWF  xF2
3A32:  MOVWF  xF3
3A34:  CALL   167E
....................          printf(lcd_putc,"   Ingrese Nueva    "); 
3A38:  MOVLW  28
3A3A:  MOVWF  FF6
3A3C:  MOVLW  08
3A3E:  MOVWF  FF7
3A40:  CALL   174E
....................          lcd_gotoxy(1,2); 
3A44:  MOVLW  01
3A46:  MOVWF  xF2
3A48:  MOVLW  02
3A4A:  MOVWF  xF3
3A4C:  CALL   167E
....................          printf(lcd_putc,"     Contraseña     "); 
3A50:  MOVLW  3E
3A52:  MOVWF  FF6
3A54:  MOVLW  08
3A56:  MOVWF  FF7
3A58:  CALL   174E
....................          lcd_gotoxy(1,3); 
3A5C:  MOVLW  01
3A5E:  MOVWF  xF2
3A60:  MOVLW  03
3A62:  MOVWF  xF3
3A64:  CALL   167E
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
3A68:  MOVLW  54
3A6A:  MOVWF  FF6
3A6C:  MOVLW  08
3A6E:  MOVWF  FF7
3A70:  MOVLW  0A
3A72:  MOVWF  xE4
3A74:  CALL   17D6
3A78:  MOVFF  4B,E0
3A7C:  MOVLW  1F
3A7E:  MOVWF  xE1
3A80:  CALL   1A2E
3A84:  MOVFF  4C,E0
3A88:  MOVLW  1F
3A8A:  MOVWF  xE1
3A8C:  CALL   1A2E
3A90:  MOVFF  4D,E0
3A94:  MOVLW  1F
3A96:  MOVWF  xE1
3A98:  CALL   1A2E
3A9C:  MOVFF  4E,E0
3AA0:  MOVLW  1F
3AA2:  MOVWF  xE1
3AA4:  CALL   1A2E
3AA8:  MOVLW  20
3AAA:  MOVWF  xF1
3AAC:  CALL   16E8
3AB0:  MOVLW  20
3AB2:  MOVWF  xF1
3AB4:  CALL   16E8
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
3AB8:  MOVFF  2E,F2
3ABC:  MOVLW  04
3ABE:  MOVWF  xF3
3AC0:  CALL   167E
....................          lcd_putc(t[2]); 
3AC4:  MOVFF  4A,F1
3AC8:  CALL   16E8
....................           
....................          if(unidad>11&&unidad<14){ 
3ACC:  MOVF   2E,W
3ACE:  SUBLW  0B
3AD0:  BC    3AF0
3AD2:  MOVF   2E,W
3AD4:  SUBLW  0D
3AD6:  BNC   3AF0
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
3AD8:  MOVLW  01
3ADA:  SUBWF  2E,W
3ADC:  MOVWF  xE0
3ADE:  MOVWF  xF2
3AE0:  MOVLW  04
3AE2:  MOVWF  xF3
3AE4:  CALL   167E
....................             lcd_putc(t[1]); 
3AE8:  MOVFF  49,F1
3AEC:  CALL   16E8
....................          } 
....................           
....................          Cambio=OFF; 
3AF0:  BCF    2A.7
.................... //      } 
....................        
....................       if(UP){//Si oprime hacia arriba 
3AF2:  BSF    F92.5
3AF4:  BTFSC  F80.5
3AF6:  BRA    3B2A
....................          delay_ms(20); 
3AF8:  MOVLW  14
3AFA:  MOVWF  xF7
3AFC:  CALL   0B9E
....................          if(UP){ 
3B00:  BSF    F92.5
3B02:  BTFSC  F80.5
3B04:  BRA    3B28
....................             if(Flanco == 0) { 
3B06:  BTFSC  29.3
3B08:  BRA    3B28
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
3B0A:  MOVLW  0B
3B0C:  SUBWF  2E,W
3B0E:  CLRF   03
3B10:  ADDLW  4B
3B12:  MOVWF  FE9
3B14:  MOVLW  00
3B16:  ADDWFC 03,W
3B18:  MOVWF  FEA
3B1A:  INCF   FEF,F
3B1C:  BSF    29.3
3B1E:  MOVLW  1E
3B20:  MOVWF  xF7
3B22:  CALL   0B9E
3B26:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
3B28:  BRA    3B2C
....................          Flanco = 0; 
3B2A:  BCF    29.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
3B2C:  BSF    F96.0
3B2E:  BTFSC  F84.0
3B30:  BRA    3B64
....................          delay_ms(20); 
3B32:  MOVLW  14
3B34:  MOVWF  xF7
3B36:  CALL   0B9E
....................          if(DOWN){ 
3B3A:  BSF    F96.0
3B3C:  BTFSC  F84.0
3B3E:  BRA    3B62
....................             if(Flanco2 == 0) { 
3B40:  BTFSC  29.5
3B42:  BRA    3B62
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
3B44:  MOVLW  0B
3B46:  SUBWF  2E,W
3B48:  CLRF   03
3B4A:  ADDLW  4B
3B4C:  MOVWF  FE9
3B4E:  MOVLW  00
3B50:  ADDWFC 03,W
3B52:  MOVWF  FEA
3B54:  DECF   FEF,F
3B56:  BSF    29.5
3B58:  MOVLW  1E
3B5A:  MOVWF  xF7
3B5C:  CALL   0B9E
3B60:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
3B62:  BRA    3B66
....................          Flanco2 = 0; 
3B64:  BCF    29.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
3B66:  BSF    F96.1
3B68:  BTFSC  F84.1
3B6A:  BRA    3B8E
....................          if(RIGHT){ 
3B6C:  BSF    F96.1
3B6E:  BTFSC  F84.1
3B70:  BRA    3B8C
....................             if(Flanco1 == 0) { 
3B72:  BTFSC  29.4
3B74:  BRA    3B8C
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
3B76:  BSF    29.4
3B78:  INCF   2E,F
3B7A:  MOVLW  1E
3B7C:  MOVWF  xF7
3B7E:  CALL   0B9E
3B82:  MOVLW  0C
3B84:  MOVWF  xF1
3B86:  CALL   16E8
3B8A:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
3B8C:  BRA    3B90
....................          Flanco1 = 0; 
3B8E:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
3B90:  BSF    F96.2
3B92:  BTFSC  F84.2
3B94:  BRA    3BC0
....................          delay_ms(150); 
3B96:  MOVLW  96
3B98:  MOVWF  xF7
3B9A:  CALL   0B9E
....................          if(IZQU){ 
3B9E:  BSF    F96.2
3BA0:  BTFSC  F84.2
3BA2:  BRA    3BBE
....................             if(Flanco3 == 0){ 
3BA4:  BTFSC  29.6
3BA6:  BRA    3BBE
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
3BA8:  BSF    29.6
3BAA:  DECF   2E,F
3BAC:  MOVLW  1E
3BAE:  MOVWF  xF7
3BB0:  CALL   0B9E
3BB4:  MOVLW  0C
3BB6:  MOVWF  xF1
3BB8:  CALL   16E8
3BBC:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
3BBE:  BRA    3BC2
....................         Flanco3 = 0; 
3BC0:  BCF    29.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
3BC2:  MOVLW  0B
3BC4:  SUBWF  2E,W
3BC6:  CLRF   03
3BC8:  ADDLW  4B
3BCA:  MOVWF  FE9
3BCC:  MOVLW  00
3BCE:  ADDWFC 03,W
3BD0:  MOVWF  FEA
3BD2:  BTFSC  FEF.7
3BD4:  BRA    3BD8
3BD6:  BRA    3BEC
....................          clave[unidad-11]=9; 
3BD8:  MOVLW  0B
3BDA:  SUBWF  2E,W
3BDC:  CLRF   03
3BDE:  ADDLW  4B
3BE0:  MOVWF  FE9
3BE2:  MOVLW  00
3BE4:  ADDWFC 03,W
3BE6:  MOVWF  FEA
3BE8:  MOVLW  09
3BEA:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
3BEC:  MOVLW  0B
3BEE:  SUBWF  2E,W
3BF0:  CLRF   03
3BF2:  ADDLW  4B
3BF4:  MOVWF  FE9
3BF6:  MOVLW  00
3BF8:  ADDWFC 03,W
3BFA:  MOVWF  FEA
3BFC:  BTFSC  FEF.7
3BFE:  BRA    3C18
3C00:  MOVF   FEF,W
3C02:  SUBLW  09
3C04:  BC    3C18
....................          clave[unidad-11]=0; 
3C06:  MOVLW  0B
3C08:  SUBWF  2E,W
3C0A:  CLRF   03
3C0C:  ADDLW  4B
3C0E:  MOVWF  FE9
3C10:  MOVLW  00
3C12:  ADDWFC 03,W
3C14:  MOVWF  FEA
3C16:  CLRF   FEF
....................         
....................       if(unidad<11){             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
3C18:  MOVF   2E,W
3C1A:  SUBLW  0A
3C1C:  BNC   3C3C
....................          unidad=11; 
3C1E:  MOVLW  0B
3C20:  MOVWF  2E
....................          Menu=1; 
3C22:  MOVLW  01
3C24:  MOVWF  2B
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
3C26:  CLRF   4B
3C28:  CLRF   4C
3C2A:  CLRF   4D
3C2C:  CLRF   4E
3C2E:  BSF    2A.7
....................          unidad=11;printf(lcd_putc,"\f"); 
3C30:  MOVLW  0B
3C32:  MOVWF  2E
3C34:  MOVLW  0C
3C36:  MOVWF  xF1
3C38:  CALL   16E8
....................       } 
....................         
....................       if(unidad>14){// Si ya ingreso la nueva contraseña.      
3C3C:  MOVF   2E,W
3C3E:  SUBLW  0E
3C40:  BTFSC  FD8.0
3C42:  BRA    3DBA
....................          lcd_gotoxy(1,1); 
3C44:  MOVLW  01
3C46:  MOVWF  xF2
3C48:  MOVWF  xF3
3C4A:  CALL   167E
....................          printf(lcd_putc,"                    "); 
3C4E:  MOVLW  6A
3C50:  MOVWF  FF6
3C52:  MOVLW  08
3C54:  MOVWF  FF7
3C56:  CALL   174E
....................          lcd_gotoxy(1,2); 
3C5A:  MOVLW  01
3C5C:  MOVWF  xF2
3C5E:  MOVLW  02
3C60:  MOVWF  xF3
3C62:  CALL   167E
....................          printf(lcd_putc,"     Contraseña     "); 
3C66:  MOVLW  80
3C68:  MOVWF  FF6
3C6A:  MOVLW  08
3C6C:  MOVWF  FF7
3C6E:  CALL   174E
....................          lcd_gotoxy(1,3); 
3C72:  MOVLW  01
3C74:  MOVWF  xF2
3C76:  MOVLW  03
3C78:  MOVWF  xF3
3C7A:  CALL   167E
....................          printf(lcd_putc,"     Almacenada     "); 
3C7E:  MOVLW  96
3C80:  MOVWF  FF6
3C82:  MOVLW  08
3C84:  MOVWF  FF7
3C86:  CALL   174E
....................          lcd_gotoxy(1,4); 
3C8A:  MOVLW  01
3C8C:  MOVWF  xF2
3C8E:  MOVLW  04
3C90:  MOVWF  xF3
3C92:  CALL   167E
....................          printf(lcd_putc,"                    "); 
3C96:  MOVLW  AC
3C98:  MOVWF  FF6
3C9A:  MOVLW  08
3C9C:  MOVWF  FF7
3C9E:  CALL   174E
....................          write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
3CA2:  CLRF   FA9
3CA4:  MOVFF  4B,FA8
3CA8:  BCF    FA6.6
3CAA:  BCF    FA6.7
3CAC:  BSF    FA6.2
3CAE:  MOVF   FF2,W
3CB0:  MOVWF  00
3CB2:  BCF    FF2.6
3CB4:  BCF    FF2.7
3CB6:  MOVLB  F
3CB8:  MOVLW  55
3CBA:  MOVWF  FA7
3CBC:  MOVLW  AA
3CBE:  MOVWF  FA7
3CC0:  BSF    FA6.1
3CC2:  BTFSC  FA6.1
3CC4:  BRA    3CC2
3CC6:  BCF    FA6.2
3CC8:  MOVF   00,W
3CCA:  IORWF  FF2,F
3CCC:  MOVLW  14
3CCE:  MOVLB  0
3CD0:  MOVWF  xF7
3CD2:  CALL   0B9E
3CD6:  MOVLW  01
3CD8:  MOVWF  FA9
3CDA:  MOVFF  4C,FA8
3CDE:  BCF    FA6.6
3CE0:  BCF    FA6.7
3CE2:  BSF    FA6.2
3CE4:  MOVF   FF2,W
3CE6:  MOVWF  00
3CE8:  BCF    FF2.6
3CEA:  BCF    FF2.7
3CEC:  MOVLB  F
3CEE:  MOVLW  55
3CF0:  MOVWF  FA7
3CF2:  MOVLW  AA
3CF4:  MOVWF  FA7
3CF6:  BSF    FA6.1
3CF8:  BTFSC  FA6.1
3CFA:  BRA    3CF8
3CFC:  BCF    FA6.2
3CFE:  MOVF   00,W
3D00:  IORWF  FF2,F
3D02:  MOVLW  14
3D04:  MOVLB  0
3D06:  MOVWF  xF7
3D08:  CALL   0B9E
....................          write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
3D0C:  MOVLW  02
3D0E:  MOVWF  FA9
3D10:  MOVFF  4D,FA8
3D14:  BCF    FA6.6
3D16:  BCF    FA6.7
3D18:  BSF    FA6.2
3D1A:  MOVF   FF2,W
3D1C:  MOVWF  00
3D1E:  BCF    FF2.6
3D20:  BCF    FF2.7
3D22:  MOVLB  F
3D24:  MOVLW  55
3D26:  MOVWF  FA7
3D28:  MOVLW  AA
3D2A:  MOVWF  FA7
3D2C:  BSF    FA6.1
3D2E:  BTFSC  FA6.1
3D30:  BRA    3D2E
3D32:  BCF    FA6.2
3D34:  MOVF   00,W
3D36:  IORWF  FF2,F
3D38:  MOVLW  14
3D3A:  MOVLB  0
3D3C:  MOVWF  xF7
3D3E:  CALL   0B9E
3D42:  MOVLW  03
3D44:  MOVWF  FA9
3D46:  MOVFF  4E,FA8
3D4A:  BCF    FA6.6
3D4C:  BCF    FA6.7
3D4E:  BSF    FA6.2
3D50:  MOVF   FF2,W
3D52:  MOVWF  00
3D54:  BCF    FF2.6
3D56:  BCF    FF2.7
3D58:  MOVLB  F
3D5A:  MOVLW  55
3D5C:  MOVWF  FA7
3D5E:  MOVLW  AA
3D60:  MOVWF  FA7
3D62:  BSF    FA6.1
3D64:  BTFSC  FA6.1
3D66:  BRA    3D64
3D68:  BCF    FA6.2
3D6A:  MOVF   00,W
3D6C:  IORWF  FF2,F
3D6E:  MOVLW  14
3D70:  MOVLB  0
3D72:  MOVWF  xF7
3D74:  CALL   0B9E
....................          delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
3D78:  MOVLW  02
3D7A:  MOVWF  xE0
3D7C:  MOVLW  FA
3D7E:  MOVWF  xF7
3D80:  CALL   0B9E
3D84:  DECFSZ xE0,F
3D86:  BRA    3D7C
3D88:  MOVLW  01
3D8A:  MOVWF  2B
3D8C:  CLRF   47
3D8E:  MOVLW  02
3D90:  MOVWF  2F
3D92:  MOVWF  31
....................          contrasena[0]=clave[0];contrasena[1]=clave[1];contrasena[2]=clave[2];contrasena[3]=clave[3]; 
3D94:  MOVFF  4B,4F
3D98:  MOVFF  4C,50
3D9C:  MOVFF  4D,51
3DA0:  MOVFF  4E,52
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
3DA4:  CLRF   4B
3DA6:  CLRF   4C
3DA8:  CLRF   4D
3DAA:  CLRF   4E
3DAC:  BSF    2A.7
....................          unidad=11;printf(lcd_putc,"\f");          
3DAE:  MOVLW  0B
3DB0:  MOVWF  2E
3DB2:  MOVLW  0C
3DB4:  MOVWF  xF1
3DB6:  CALL   16E8
....................       } 
....................    }       
.................... //----------------Fin-Menu6.1--------------------------------------------------------------- 
....................     
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu de tiempo de trabajo de Luz UV 
3DBA:  MOVF   2B,W
3DBC:  SUBLW  04
3DBE:  BTFSS  FD8.2
3DC0:  BRA    3FDC
....................    EliminaRuido(); 
3DC2:  CALL   0004
.................... //   if(Cambio){ 
....................       lcd_gotoxy(1,1); 
3DC6:  MOVLW  01
3DC8:  MOVWF  xF2
3DCA:  MOVWF  xF3
3DCC:  CALL   167E
....................       printf(lcd_putc,"  Duracion Actual   "); 
3DD0:  MOVLW  C2
3DD2:  MOVWF  FF6
3DD4:  MOVLW  08
3DD6:  MOVWF  FF7
3DD8:  CALL   174E
....................       lcd_gotoxy(1,2); 
3DDC:  MOVLW  01
3DDE:  MOVWF  xF2
3DE0:  MOVLW  02
3DE2:  MOVWF  xF3
3DE4:  CALL   167E
....................       printf(lcd_putc,"   Tiempo= %05Lu   ",horas); 
3DE8:  MOVLW  D8
3DEA:  MOVWF  FF6
3DEC:  MOVLW  08
3DEE:  MOVWF  FF7
3DF0:  MOVLW  0B
3DF2:  MOVWF  xE4
3DF4:  CALL   17D6
3DF8:  MOVLW  08
3DFA:  MOVWF  FE9
3DFC:  MOVFF  5B,E1
3E00:  MOVFF  5A,E0
3E04:  CALL   1BAE
3E08:  MOVLW  20
3E0A:  MOVWF  xF1
3E0C:  CALL   16E8
3E10:  MOVLW  20
3E12:  MOVWF  xF1
3E14:  CALL   16E8
3E18:  MOVLW  20
3E1A:  MOVWF  xF1
3E1C:  CALL   16E8
....................       lcd_gotoxy(1,4); 
3E20:  MOVLW  01
3E22:  MOVWF  xF2
3E24:  MOVLW  04
3E26:  MOVWF  xF3
3E28:  CALL   167E
....................       printf(lcd_putc," RESET= Oprima ^ y > "); 
3E2C:  MOVLW  EC
3E2E:  MOVWF  FF6
3E30:  MOVLW  08
3E32:  MOVWF  FF7
3E34:  CALL   174E
....................        
....................       Cambio=OFF; 
3E38:  BCF    2A.7
.................... //   } 
....................     
....................       if(UP && RIGHT){//Si oprime hacia arriba 
3E3A:  BSF    F92.5
3E3C:  BTFSC  F80.5
3E3E:  BRA    3F98
3E40:  BSF    F96.1
3E42:  BTFSC  F84.1
3E44:  BRA    3F98
....................          delay_ms(20); 
3E46:  MOVLW  14
3E48:  MOVWF  xF7
3E4A:  CALL   0B9E
....................          if(UP && RIGHT){ 
3E4E:  BSF    F92.5
3E50:  BTFSC  F80.5
3E52:  BRA    3F98
3E54:  BSF    F96.1
3E56:  BTFSC  F84.1
3E58:  BRA    3F98
....................             delay_ms(200); 
3E5A:  MOVLW  C8
3E5C:  MOVWF  xF7
3E5E:  CALL   0B9E
....................             printf(lcd_putc,"\f"); 
3E62:  MOVLW  0C
3E64:  MOVWF  xF1
3E66:  CALL   16E8
....................             lcd_gotoxy(1,2); 
3E6A:  MOVLW  01
3E6C:  MOVWF  xF2
3E6E:  MOVLW  02
3E70:  MOVWF  xF3
3E72:  CALL   167E
....................             printf(lcd_putc," Reset de tiempo "); 
3E76:  MOVLW  02
3E78:  MOVWF  FF6
3E7A:  MOVLW  09
3E7C:  MOVWF  FF7
3E7E:  CALL   174E
....................             lcd_gotoxy(1,3); 
3E82:  MOVLW  01
3E84:  MOVWF  xF2
3E86:  MOVLW  03
3E88:  MOVWF  xF3
3E8A:  CALL   167E
....................             printf(lcd_putc,"     Exitoso     "); 
3E8E:  MOVLW  14
3E90:  MOVWF  FF6
3E92:  MOVLW  09
3E94:  MOVWF  FF7
3E96:  CALL   174E
....................             write_eeprom(7,0); 
3E9A:  MOVLW  07
3E9C:  MOVWF  FA9
3E9E:  CLRF   FA8
3EA0:  BCF    FA6.6
3EA2:  BCF    FA6.7
3EA4:  BSF    FA6.2
3EA6:  MOVF   FF2,W
3EA8:  MOVWF  00
3EAA:  BCF    FF2.6
3EAC:  BCF    FF2.7
3EAE:  MOVLB  F
3EB0:  MOVLW  55
3EB2:  MOVWF  FA7
3EB4:  MOVLW  AA
3EB6:  MOVWF  FA7
3EB8:  BSF    FA6.1
3EBA:  BTFSC  FA6.1
3EBC:  BRA    3EBA
3EBE:  BCF    FA6.2
3EC0:  MOVF   00,W
3EC2:  IORWF  FF2,F
....................             delay_ms(20); 
3EC4:  MOVLW  14
3EC6:  MOVLB  0
3EC8:  MOVWF  xF7
3ECA:  CALL   0B9E
....................             write_eeprom(8,0); 
3ECE:  MOVLW  08
3ED0:  MOVWF  FA9
3ED2:  CLRF   FA8
3ED4:  BCF    FA6.6
3ED6:  BCF    FA6.7
3ED8:  BSF    FA6.2
3EDA:  MOVF   FF2,W
3EDC:  MOVWF  00
3EDE:  BCF    FF2.6
3EE0:  BCF    FF2.7
3EE2:  MOVLB  F
3EE4:  MOVLW  55
3EE6:  MOVWF  FA7
3EE8:  MOVLW  AA
3EEA:  MOVWF  FA7
3EEC:  BSF    FA6.1
3EEE:  BTFSC  FA6.1
3EF0:  BRA    3EEE
3EF2:  BCF    FA6.2
3EF4:  MOVF   00,W
3EF6:  IORWF  FF2,F
....................             delay_ms(20); 
3EF8:  MOVLW  14
3EFA:  MOVLB  0
3EFC:  MOVWF  xF7
3EFE:  CALL   0B9E
....................             write_eeprom(9,0); 
3F02:  MOVLW  09
3F04:  MOVWF  FA9
3F06:  CLRF   FA8
3F08:  BCF    FA6.6
3F0A:  BCF    FA6.7
3F0C:  BSF    FA6.2
3F0E:  MOVF   FF2,W
3F10:  MOVWF  00
3F12:  BCF    FF2.6
3F14:  BCF    FF2.7
3F16:  MOVLB  F
3F18:  MOVLW  55
3F1A:  MOVWF  FA7
3F1C:  MOVLW  AA
3F1E:  MOVWF  FA7
3F20:  BSF    FA6.1
3F22:  BTFSC  FA6.1
3F24:  BRA    3F22
3F26:  BCF    FA6.2
3F28:  MOVF   00,W
3F2A:  IORWF  FF2,F
....................             delay_ms(20); 
3F2C:  MOVLW  14
3F2E:  MOVLB  0
3F30:  MOVWF  xF7
3F32:  CALL   0B9E
....................             write_eeprom(10,0); 
3F36:  MOVLW  0A
3F38:  MOVWF  FA9
3F3A:  CLRF   FA8
3F3C:  BCF    FA6.6
3F3E:  BCF    FA6.7
3F40:  BSF    FA6.2
3F42:  MOVF   FF2,W
3F44:  MOVWF  00
3F46:  BCF    FF2.6
3F48:  BCF    FF2.7
3F4A:  MOVLB  F
3F4C:  MOVLW  55
3F4E:  MOVWF  FA7
3F50:  MOVLW  AA
3F52:  MOVWF  FA7
3F54:  BSF    FA6.1
3F56:  BTFSC  FA6.1
3F58:  BRA    3F56
3F5A:  BCF    FA6.2
3F5C:  MOVF   00,W
3F5E:  IORWF  FF2,F
....................             delay_ms(700); 
3F60:  MOVLW  04
3F62:  MOVLB  0
3F64:  MOVWF  xE0
3F66:  MOVLW  AF
3F68:  MOVWF  xF7
3F6A:  CALL   0B9E
3F6E:  DECFSZ xE0,F
3F70:  BRA    3F66
....................             segundos=0;minutos=0;horas=0; 
3F72:  CLRF   34
3F74:  CLRF   35
3F76:  CLRF   5B
3F78:  CLRF   5A
....................             delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
3F7A:  MOVLW  1E
3F7C:  MOVWF  xF7
3F7E:  CALL   0B9E
3F82:  MOVLW  01
3F84:  MOVWF  2B
3F86:  CLRF   47
3F88:  MOVLW  02
3F8A:  MOVWF  2F
3F8C:  MOVWF  31
3F8E:  MOVLW  0C
3F90:  MOVWF  xF1
3F92:  CALL   16E8
....................             Cambio=ON; 
3F96:  BSF    2A.7
....................          } 
....................       } 
....................              
....................       if(IZQU){// Si oprime Izquierda 
3F98:  BSF    F96.2
3F9A:  BTFSC  F84.2
3F9C:  BRA    3FDA
....................          delay_ms(20); 
3F9E:  MOVLW  14
3FA0:  MOVWF  xF7
3FA2:  CALL   0B9E
....................          if(IZQU){ 
3FA6:  BSF    F96.2
3FA8:  BTFSC  F84.2
3FAA:  BRA    3FD8
....................             if(Flanco3 == 0){ 
3FAC:  BTFSC  29.6
3FAE:  BRA    3FD8
....................                Flanco3 = 1;delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f");Cambio=ON; 
3FB0:  BSF    29.6
3FB2:  MOVLW  02
3FB4:  MOVWF  xE0
3FB6:  MOVLW  FA
3FB8:  MOVWF  xF7
3FBA:  CALL   0B9E
3FBE:  DECFSZ xE0,F
3FC0:  BRA    3FB6
3FC2:  MOVLW  01
3FC4:  MOVWF  2B
3FC6:  CLRF   47
3FC8:  MOVLW  02
3FCA:  MOVWF  2F
3FCC:  MOVWF  31
3FCE:  MOVLW  0C
3FD0:  MOVWF  xF1
3FD2:  CALL   16E8
3FD6:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
3FD8:  BRA    3FDC
....................          Flanco3 = 0; 
3FDA:  BCF    29.6
....................       } 
....................    } 
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5){ // Menu de Punto Cero 
3FDC:  MOVF   2B,W
3FDE:  SUBLW  05
3FE0:  BTFSS  FD8.2
3FE2:  BRA    423C
....................       EliminaRuido(); 
3FE4:  CALL   0004
.................... //      if(Cambio){ 
....................          lcd_gotoxy(1,1); 
3FE8:  MOVLW  01
3FEA:  MOVWF  xF2
3FEC:  MOVWF  xF3
3FEE:  CALL   167E
....................          printf(lcd_putc,"  Zero Point Config "); 
3FF2:  MOVLW  26
3FF4:  MOVWF  FF6
3FF6:  MOVLW  09
3FF8:  MOVWF  FF7
3FFA:  CALL   174E
....................          lcd_gotoxy(1,2); 
3FFE:  MOVLW  01
4000:  MOVWF  xF2
4002:  MOVLW  02
4004:  MOVWF  xF3
4006:  CALL   167E
....................          printf(lcd_putc,"Presion= %3.2f inH2O ",(Leer_Sensor_Presion(5)*4.02)); 
400A:  MOVLW  05
400C:  MOVWF  xE0
400E:  CALL   20E0
4012:  MOVFF  00,E0
4016:  MOVFF  01,E1
401A:  MOVFF  02,E2
401E:  MOVFF  03,E3
4022:  MOVFF  03,F7
4026:  MOVFF  02,F6
402A:  MOVFF  01,F5
402E:  MOVFF  00,F4
4032:  MOVLW  D7
4034:  MOVWF  xFB
4036:  MOVLW  A3
4038:  MOVWF  xFA
403A:  CLRF   xF9
403C:  MOVLW  81
403E:  MOVWF  xF8
4040:  CALL   228E
4044:  MOVFF  00,E0
4048:  MOVFF  01,E1
404C:  MOVFF  02,E2
4050:  MOVFF  03,E3
4054:  MOVLW  3C
4056:  MOVWF  FF6
4058:  MOVLW  09
405A:  MOVWF  FF7
405C:  MOVLW  09
405E:  MOVWF  xE4
4060:  CALL   17D6
4064:  MOVLW  02
4066:  MOVWF  FE9
4068:  MOVFF  E3,E7
406C:  MOVFF  E2,E6
4070:  MOVFF  E1,E5
4074:  MOVFF  E0,E4
4078:  MOVWF  xE8
407A:  CALL   243A
407E:  MOVLW  4A
4080:  MOVWF  FF6
4082:  MOVLW  09
4084:  MOVWF  FF7
4086:  MOVLW  07
4088:  MOVWF  xE4
408A:  CALL   17D6
....................          lcd_gotoxy(1,3); 
408E:  MOVLW  01
4090:  MOVWF  xF2
4092:  MOVLW  03
4094:  MOVWF  xF3
4096:  CALL   167E
....................          printf(lcd_putc,"    ADC=%2.0f",sensores(0)); 
409A:  CLRF   xF1
409C:  CALL   1C60
40A0:  MOVFF  00,E0
40A4:  MOVFF  01,E1
40A8:  MOVFF  02,E2
40AC:  MOVFF  03,E3
40B0:  MOVLW  52
40B2:  MOVWF  FF6
40B4:  MOVLW  09
40B6:  MOVWF  FF7
40B8:  MOVLW  08
40BA:  MOVWF  xE4
40BC:  CALL   17D6
40C0:  MOVLW  01
40C2:  MOVWF  FE9
40C4:  MOVFF  E3,E7
40C8:  MOVFF  E2,E6
40CC:  MOVFF  E1,E5
40D0:  MOVFF  E0,E4
40D4:  CLRF   xE8
40D6:  CALL   243A
....................          lcd_gotoxy(1,4); 
40DA:  MOVLW  01
40DC:  MOVWF  xF2
40DE:  MOVLW  04
40E0:  MOVWF  xF3
40E2:  CALL   167E
....................          printf(lcd_putc,"    ZF=%2.0f",G); 
40E6:  MOVLW  60
40E8:  MOVWF  FF6
40EA:  MOVLW  09
40EC:  MOVWF  FF7
40EE:  MOVLW  07
40F0:  MOVWF  xE4
40F2:  CALL   17D6
40F6:  MOVLW  01
40F8:  MOVWF  FE9
40FA:  MOVFF  C1,E7
40FE:  MOVFF  C0,E6
4102:  MOVFF  BF,E5
4106:  MOVFF  BE,E4
410A:  CLRF   xE8
410C:  CALL   243A
....................           
....................          Cambio=OFF; 
4110:  BCF    2A.7
.................... //      } 
....................      
....................       if(RIGHT){// Si oprime derecha 
4112:  BSF    F96.1
4114:  BTFSC  F84.1
4116:  BRA    41FC
....................          delay_ms(20); 
4118:  MOVLW  14
411A:  MOVWF  xF7
411C:  CALL   0B9E
....................          if(RIGHT){ 
4120:  BSF    F96.1
4122:  BTFSC  F84.1
4124:  BRA    41FA
....................             if(Flanco1 == 0){ 
4126:  BTFSC  29.4
4128:  BRA    41FA
....................                /*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
412A:  MOVLW  01
412C:  MOVWF  2B
412E:  CLRF   47
4130:  MOVLW  02
4132:  MOVWF  2F
4134:  MOVWF  31
4136:  MOVLW  0B
4138:  MOVWF  2E
413A:  MOVLW  02
413C:  MOVWF  xE0
413E:  MOVLW  FA
4140:  MOVWF  xF7
4142:  CALL   0B9E
4146:  DECFSZ xE0,F
4148:  BRA    413E
414A:  MOVLW  0C
414C:  MOVWF  xF1
414E:  CALL   16E8
....................                G=sensores(0); 
4152:  CLRF   xF1
4154:  CALL   1C60
4158:  MOVFF  03,C1
415C:  MOVFF  02,C0
4160:  MOVFF  01,BF
4164:  MOVFF  00,BE
....................                G16=(int16)G; 
4168:  MOVFF  C1,F7
416C:  MOVFF  C0,F6
4170:  MOVFF  BF,F5
4174:  MOVFF  BE,F4
4178:  CALL   25C0
417C:  MOVFF  02,5D
4180:  MOVFF  01,5C
....................                G_l=G16; G_h=(G16>>8); 
4184:  MOVFF  5C,38
4188:  MOVFF  5D,39
....................                 
....................                write_eeprom(11,G_l); 
418C:  MOVLW  0B
418E:  MOVWF  FA9
4190:  MOVFF  38,FA8
4194:  BCF    FA6.6
4196:  BCF    FA6.7
4198:  BSF    FA6.2
419A:  MOVF   FF2,W
419C:  MOVWF  00
419E:  BCF    FF2.6
41A0:  BCF    FF2.7
41A2:  MOVLB  F
41A4:  MOVLW  55
41A6:  MOVWF  FA7
41A8:  MOVLW  AA
41AA:  MOVWF  FA7
41AC:  BSF    FA6.1
41AE:  BTFSC  FA6.1
41B0:  BRA    41AE
41B2:  BCF    FA6.2
41B4:  MOVF   00,W
41B6:  IORWF  FF2,F
....................                delay_ms(20); 
41B8:  MOVLW  14
41BA:  MOVLB  0
41BC:  MOVWF  xF7
41BE:  CALL   0B9E
....................                write_eeprom(12,G_h);//Guardar valor de Setpoint en eeprom 
41C2:  MOVLW  0C
41C4:  MOVWF  FA9
41C6:  MOVFF  39,FA8
41CA:  BCF    FA6.6
41CC:  BCF    FA6.7
41CE:  BSF    FA6.2
41D0:  MOVF   FF2,W
41D2:  MOVWF  00
41D4:  BCF    FF2.6
41D6:  BCF    FF2.7
41D8:  MOVLB  F
41DA:  MOVLW  55
41DC:  MOVWF  FA7
41DE:  MOVLW  AA
41E0:  MOVWF  FA7
41E2:  BSF    FA6.1
41E4:  BTFSC  FA6.1
41E6:  BRA    41E4
41E8:  BCF    FA6.2
41EA:  MOVF   00,W
41EC:  IORWF  FF2,F
....................                delay_ms(20); 
41EE:  MOVLW  14
41F0:  MOVLB  0
41F2:  MOVWF  xF7
41F4:  CALL   0B9E
....................                Cambio=ON; 
41F8:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
41FA:  BRA    41FE
....................          Flanco1 = 0; 
41FC:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){// Si oprime Izquierda 
41FE:  BSF    F96.2
4200:  BTFSC  F84.2
4202:  BRA    423A
....................          delay_ms(20); 
4204:  MOVLW  14
4206:  MOVWF  xF7
4208:  CALL   0B9E
....................          if(IZQU){ 
420C:  BSF    F96.2
420E:  BTFSC  F84.2
4210:  BRA    4238
....................             if(Flanco3 == 0){ 
4212:  BTFSC  29.6
4214:  BRA    4238
....................                /*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f"); 
4216:  MOVLW  01
4218:  MOVWF  2B
421A:  CLRF   47
421C:  MOVLW  02
421E:  MOVWF  2F
4220:  MOVWF  31
4222:  MOVLW  0B
4224:  MOVWF  2E
4226:  MOVLW  1E
4228:  MOVWF  xF7
422A:  CALL   0B9E
422E:  MOVLW  0C
4230:  MOVWF  xF1
4232:  CALL   16E8
....................                Cambio=ON; 
4236:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
4238:  BRA    423C
....................          Flanco3 = 0; 
423A:  BCF    29.6
....................       } 
....................    } 
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6){ // Menu de seleccion de estado de Alarma 
423C:  MOVF   2B,W
423E:  SUBLW  06
4240:  BTFSS  FD8.2
4242:  BRA    436C
....................    estadoalarma=!estadoalarma;Flanco1 = 1;Menu=1; paso=0; 
4244:  BTG    2A.4
4246:  BSF    29.4
4248:  MOVLW  01
424A:  MOVWF  2B
424C:  CLRF   47
....................                        
....................             if(estadoalarma==1) 
424E:  BTFSS  2A.4
4250:  BRA    42B2
....................             {estadoalarma=1; 
4252:  BSF    2A.4
....................                lcd_gotoxy(1,1); 
4254:  MOVLW  01
4256:  MOVWF  xF2
4258:  MOVWF  xF3
425A:  CALL   167E
....................                printf(lcd_putc,"                    "); 
425E:  MOVLW  6E
4260:  MOVWF  FF6
4262:  MOVLW  09
4264:  MOVWF  FF7
4266:  CALL   174E
....................                lcd_gotoxy(1,2); 
426A:  MOVLW  01
426C:  MOVWF  xF2
426E:  MOVLW  02
4270:  MOVWF  xF3
4272:  CALL   167E
....................                printf(lcd_putc,"        Activo      "); 
4276:  MOVLW  84
4278:  MOVWF  FF6
427A:  MOVLW  09
427C:  MOVWF  FF7
427E:  CALL   174E
....................                lcd_gotoxy(1,3); 
4282:  MOVLW  01
4284:  MOVWF  xF2
4286:  MOVLW  03
4288:  MOVWF  xF3
428A:  CALL   167E
....................                printf(lcd_putc,"        Alarma      "); 
428E:  MOVLW  9A
4290:  MOVWF  FF6
4292:  MOVLW  09
4294:  MOVWF  FF7
4296:  CALL   174E
....................                lcd_gotoxy(1,4); 
429A:  MOVLW  01
429C:  MOVWF  xF2
429E:  MOVLW  04
42A0:  MOVWF  xF3
42A2:  CALL   167E
....................                printf(lcd_putc,"                    ");} 
42A6:  MOVLW  B0
42A8:  MOVWF  FF6
42AA:  MOVLW  09
42AC:  MOVWF  FF7
42AE:  CALL   174E
....................                 
....................             if(estadoalarma==0) 
42B2:  BTFSC  2A.4
42B4:  BRA    4316
....................             {estadoalarma=0; 
42B6:  BCF    2A.4
....................                lcd_gotoxy(1,1); 
42B8:  MOVLW  01
42BA:  MOVWF  xF2
42BC:  MOVWF  xF3
42BE:  CALL   167E
....................                printf(lcd_putc,"                    "); 
42C2:  MOVLW  C6
42C4:  MOVWF  FF6
42C6:  MOVLW  09
42C8:  MOVWF  FF7
42CA:  CALL   174E
....................                lcd_gotoxy(1,2); 
42CE:  MOVLW  01
42D0:  MOVWF  xF2
42D2:  MOVLW  02
42D4:  MOVWF  xF3
42D6:  CALL   167E
....................                printf(lcd_putc,"      Desactivo     "); 
42DA:  MOVLW  DC
42DC:  MOVWF  FF6
42DE:  MOVLW  09
42E0:  MOVWF  FF7
42E2:  CALL   174E
....................                lcd_gotoxy(1,3); 
42E6:  MOVLW  01
42E8:  MOVWF  xF2
42EA:  MOVLW  03
42EC:  MOVWF  xF3
42EE:  CALL   167E
....................                printf(lcd_putc,"       Alarma       "); 
42F2:  MOVLW  F2
42F4:  MOVWF  FF6
42F6:  MOVLW  09
42F8:  MOVWF  FF7
42FA:  CALL   174E
....................                lcd_gotoxy(1,4); 
42FE:  MOVLW  01
4300:  MOVWF  xF2
4302:  MOVLW  04
4304:  MOVWF  xF3
4306:  CALL   167E
....................                printf(lcd_putc,"                    ");} 
430A:  MOVLW  08
430C:  MOVWF  FF6
430E:  MOVLW  0A
4310:  MOVWF  FF7
4312:  CALL   174E
....................               
....................             write_eeprom(4,estadoalarma);delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
4316:  MOVLW  00
4318:  BTFSC  2A.4
431A:  MOVLW  01
431C:  MOVWF  xE0
431E:  MOVLW  04
4320:  MOVWF  FA9
4322:  MOVFF  E0,FA8
4326:  BCF    FA6.6
4328:  BCF    FA6.7
432A:  BSF    FA6.2
432C:  MOVF   FF2,W
432E:  MOVWF  00
4330:  BCF    FF2.6
4332:  BCF    FF2.7
4334:  MOVLB  F
4336:  MOVLW  55
4338:  MOVWF  FA7
433A:  MOVLW  AA
433C:  MOVWF  FA7
433E:  BSF    FA6.1
4340:  BTFSC  FA6.1
4342:  BRA    4340
4344:  BCF    FA6.2
4346:  MOVF   00,W
4348:  IORWF  FF2,F
434A:  MOVLW  04
434C:  MOVLB  0
434E:  MOVWF  xE0
4350:  MOVLW  FA
4352:  MOVWF  xF7
4354:  CALL   0B9E
4358:  DECFSZ xE0,F
435A:  BRA    4350
435C:  MOVLW  02
435E:  MOVWF  2F
4360:  MOVWF  31
4362:  MOVLW  0C
4364:  MOVWF  xF1
4366:  CALL   16E8
....................             Cambio=ON; 
436A:  BSF    2A.7
....................    }       
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu7--------------------------------------------------------------- 
....................    if(Menu == 7){ // Menu de seleccion de Velocidad 
436C:  MOVF   2B,W
436E:  SUBLW  07
4370:  BTFSS  FD8.2
4372:  BRA    450A
....................       if(Vel1>20) 
4374:  MOVF   57,W
4376:  SUBLW  14
4378:  BC    437E
....................          Vel1=20; 
437A:  MOVLW  14
437C:  MOVWF  57
....................       if(Vel1<1) 
437E:  MOVF   57,F
4380:  BNZ   4386
....................          Vel1=1; 
4382:  MOVLW  01
4384:  MOVWF  57
....................        
....................       lcd_gotoxy(1,1); 
4386:  MOVLW  01
4388:  MOVWF  xF2
438A:  MOVWF  xF3
438C:  CALL   167E
....................       printf(lcd_putc,"Seleccione Velocidad"); 
4390:  MOVLW  1E
4392:  MOVWF  FF6
4394:  MOVLW  0A
4396:  MOVWF  FF7
4398:  CALL   174E
....................       lcd_gotoxy(1,2); 
439C:  MOVLW  01
439E:  MOVWF  xF2
43A0:  MOVLW  02
43A2:  MOVWF  xF3
43A4:  CALL   167E
....................       printf(lcd_putc,"   del Ventilador   "); 
43A8:  MOVLW  34
43AA:  MOVWF  FF6
43AC:  MOVLW  0A
43AE:  MOVWF  FF7
43B0:  CALL   174E
....................       lcd_gotoxy(1,3); 
43B4:  MOVLW  01
43B6:  MOVWF  xF2
43B8:  MOVLW  03
43BA:  MOVWF  xF3
43BC:  CALL   167E
....................       printf(lcd_putc,"     Vel: %02u       ",Vel1); 
43C0:  MOVLW  4A
43C2:  MOVWF  FF6
43C4:  MOVLW  0A
43C6:  MOVWF  FF7
43C8:  MOVLW  0A
43CA:  MOVWF  xE4
43CC:  CALL   17D6
43D0:  MOVFF  57,E0
43D4:  MOVLW  01
43D6:  MOVWF  xE1
43D8:  CALL   181C
43DC:  MOVLW  58
43DE:  MOVWF  FF6
43E0:  MOVLW  0A
43E2:  MOVWF  FF7
43E4:  MOVLW  07
43E6:  MOVWF  xE4
43E8:  CALL   17D6
....................       lcd_gotoxy(1,4); 
43EC:  MOVLW  01
43EE:  MOVWF  xF2
43F0:  MOVLW  04
43F2:  MOVWF  xF3
43F4:  CALL   167E
....................       printf(lcd_putc,"                    ");       
43F8:  MOVLW  60
43FA:  MOVWF  FF6
43FC:  MOVLW  0A
43FE:  MOVWF  FF7
4400:  CALL   174E
....................        
....................       if(UP && Vel1<20)//Si oprime hacia arriba 
4404:  BSF    F92.5
4406:  BTFSC  F80.5
4408:  BRA    441A
440A:  MOVF   57,W
440C:  SUBLW  13
440E:  BNC   441A
....................       {   
....................          delay_ms(200);Vel1++; 
4410:  MOVLW  C8
4412:  MOVWF  xF7
4414:  CALL   0B9E
4418:  INCF   57,F
....................       } 
....................              
....................       if(DOWN && Vel1>0)//Si oprime hacia abajo 
441A:  BSF    F96.0
441C:  BTFSC  F84.0
441E:  BRA    442E
4420:  MOVF   57,F
4422:  BZ    442E
....................       {   
....................          delay_ms(200);Vel1--; 
4424:  MOVLW  C8
4426:  MOVWF  xF7
4428:  CALL   0B9E
442C:  DECF   57,F
....................       } 
....................              
....................       if(RIGHT)//Si oprime SET 
442E:  BSF    F96.1
4430:  BTFSC  F84.1
4432:  BRA    4438
....................       {            
....................          VelMotor=Vel1; 
4434:  MOVFF  57,D1
....................       }  
....................              
....................       if(IZQU)//Si oprime boton de Toma. 
4438:  BSF    F96.2
443A:  BTFSC  F84.2
443C:  BRA    450A
....................       {                   
....................          delay_ms(100);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
443E:  MOVLW  64
4440:  MOVWF  xF7
4442:  CALL   0B9E
4446:  MOVLW  02
4448:  MOVWF  2F
444A:  MOVWF  31
444C:  MOVLW  0C
444E:  MOVWF  xF1
4450:  CALL   16E8
....................          write_eeprom(13,Vel1);//Guardar valor de Setpoint en eeprom 
4454:  MOVLW  0D
4456:  MOVWF  FA9
4458:  MOVFF  57,FA8
445C:  BCF    FA6.6
445E:  BCF    FA6.7
4460:  BSF    FA6.2
4462:  MOVF   FF2,W
4464:  MOVWF  00
4466:  BCF    FF2.6
4468:  BCF    FF2.7
446A:  MOVLB  F
446C:  MOVLW  55
446E:  MOVWF  FA7
4470:  MOVLW  AA
4472:  MOVWF  FA7
4474:  BSF    FA6.1
4476:  BTFSC  FA6.1
4478:  BRA    4476
447A:  BCF    FA6.2
447C:  MOVF   00,W
447E:  IORWF  FF2,F
....................          delay_ms(20); 
4480:  MOVLW  14
4482:  MOVLB  0
4484:  MOVWF  xF7
4486:  CALL   0B9E
....................          lcd_gotoxy(1,1); 
448A:  MOVLW  01
448C:  MOVWF  xF2
448E:  MOVWF  xF3
4490:  CALL   167E
....................          printf(lcd_putc,"                    "); 
4494:  MOVLW  76
4496:  MOVWF  FF6
4498:  MOVLW  0A
449A:  MOVWF  FF7
449C:  CALL   174E
....................          lcd_gotoxy(1,2); 
44A0:  MOVLW  01
44A2:  MOVWF  xF2
44A4:  MOVLW  02
44A6:  MOVWF  xF3
44A8:  CALL   167E
....................          printf(lcd_putc,"     Velocidad      "); 
44AC:  MOVLW  8C
44AE:  MOVWF  FF6
44B0:  MOVLW  0A
44B2:  MOVWF  FF7
44B4:  CALL   174E
....................          lcd_gotoxy(1,3); 
44B8:  MOVLW  01
44BA:  MOVWF  xF2
44BC:  MOVLW  03
44BE:  MOVWF  xF3
44C0:  CALL   167E
....................          printf(lcd_putc,"      Almacenada    "); 
44C4:  MOVLW  A2
44C6:  MOVWF  FF6
44C8:  MOVLW  0A
44CA:  MOVWF  FF7
44CC:  CALL   174E
....................          lcd_gotoxy(1,4); 
44D0:  MOVLW  01
44D2:  MOVWF  xF2
44D4:  MOVLW  04
44D6:  MOVWF  xF3
44D8:  CALL   167E
....................          printf(lcd_putc,"                    ");  
44DC:  MOVLW  B8
44DE:  MOVWF  FF6
44E0:  MOVLW  0A
44E2:  MOVWF  FF7
44E4:  CALL   174E
....................          delay_ms(1000); 
44E8:  MOVLW  04
44EA:  MOVWF  xE0
44EC:  MOVLW  FA
44EE:  MOVWF  xF7
44F0:  CALL   0B9E
44F4:  DECFSZ xE0,F
44F6:  BRA    44EC
....................          printf(lcd_putc,"\f"); 
44F8:  MOVLW  0C
44FA:  MOVWF  xF1
44FC:  CALL   16E8
....................          lcd_init(); 
4500:  CALL   0C2E
....................          Menu=1; paso=0; 
4504:  MOVLW  01
4506:  MOVWF  2B
4508:  CLRF   47
....................       } 
....................    }       
.................... //----------------Fin-Menu7--------------------------------------------------------------- 
....................  
.................... //----------------Menu100--------------------------------------------------------------- 
....................    if(Menu == 50){ // Menu de seleccion de Estado de Luz UV    
450A:  MOVF   2B,W
450C:  SUBLW  32
450E:  BTFSS  FD8.2
4510:  GOTO   4C7C
....................    if(Lectura==1){ 
4514:  BTFSS  2A.0
4516:  BRA    4846
....................       Lectura=0; 
4518:  BCF    2A.0
....................       CaidaPresion=Leer_Sensor_Presion(8); 
451A:  MOVLW  08
451C:  MOVWF  xE0
451E:  CALL   20E0
4522:  MOVFF  03,BD
4526:  MOVFF  02,BC
452A:  MOVFF  01,BB
452E:  MOVFF  00,BA
....................       if(Saturacion>=10){ 
4532:  CLRF   xF7
4534:  CLRF   xF6
4536:  MOVLW  20
4538:  MOVWF  xF5
453A:  MOVLW  82
453C:  MOVWF  xF4
453E:  MOVFF  B9,FB
4542:  MOVFF  B8,FA
4546:  MOVFF  B7,F9
454A:  MOVFF  B6,F8
454E:  CALL   109C
4552:  BC    4556
4554:  BNZ   4572
....................          lcd_gotoxy(1,1); 
4556:  MOVLW  01
4558:  MOVWF  xF2
455A:  MOVWF  xF3
455C:  CALL   167E
....................          printf(lcd_putc,"!Verifique Filtro!  ");  
4560:  MOVLW  CE
4562:  MOVWF  FF6
4564:  MOVLW  0A
4566:  MOVWF  FF7
4568:  CALL   174E
....................          ActivaBuzzer=1; 
456C:  MOVLW  01
456E:  MOVWF  53
....................       }else{ 
4570:  BRA    45B2
....................          lcd_gotoxy(1,1); 
4572:  MOVLW  01
4574:  MOVWF  xF2
4576:  MOVWF  xF3
4578:  CALL   167E
....................          printf(lcd_putc,"JPCR HT:%05Lu horas ",horasTrabajo);        
457C:  MOVLW  E4
457E:  MOVWF  FF6
4580:  MOVLW  0A
4582:  MOVWF  FF7
4584:  MOVLW  08
4586:  MOVWF  xE4
4588:  CALL   17D6
458C:  MOVLW  08
458E:  MOVWF  FE9
4590:  MOVFF  D0,E1
4594:  MOVFF  CF,E0
4598:  CALL   1BAE
459C:  MOVLW  F1
459E:  MOVWF  FF6
45A0:  MOVLW  0A
45A2:  MOVWF  FF7
45A4:  MOVLW  07
45A6:  MOVWF  xE4
45A8:  CALL   17D6
....................          Buzzer_off; 
45AC:  BCF    F8B.0
45AE:  BCF    F94.0
....................          ActivaBuzzer=0; 
45B0:  CLRF   53
....................       } 
....................       Saturacion=11*(((float)Vel1-(float)velocidadInicial)/(20.0-(float)velocidadInicial)); 
45B2:  CLRF   xF9
45B4:  MOVFF  57,F8
45B8:  CALL   0CC8
45BC:  MOVFF  00,E0
45C0:  MOVFF  01,E1
45C4:  MOVFF  02,E2
45C8:  MOVFF  03,E3
45CC:  CLRF   xF9
45CE:  MOVFF  46,F8
45D2:  CALL   0CC8
45D6:  BSF    FD8.1
45D8:  MOVFF  E3,FB
45DC:  MOVFF  E2,FA
45E0:  MOVFF  E1,F9
45E4:  MOVFF  E0,F8
45E8:  MOVFF  03,FF
45EC:  MOVFF  02,FE
45F0:  MOVFF  01,FD
45F4:  MOVFF  00,FC
45F8:  CALL   1E5E
45FC:  MOVFF  00,E0
4600:  MOVFF  01,E1
4604:  MOVFF  02,E2
4608:  MOVFF  03,E3
460C:  CLRF   xF9
460E:  MOVFF  46,F8
4612:  CALL   0CC8
4616:  BSF    FD8.1
4618:  CLRF   xFB
461A:  CLRF   xFA
461C:  MOVLW  20
461E:  MOVWF  xF9
4620:  MOVLW  83
4622:  MOVWF  xF8
4624:  MOVFF  03,FF
4628:  MOVFF  02,FE
462C:  MOVFF  01,FD
4630:  MOVFF  00,FC
4634:  CALL   1E5E
4638:  MOVFF  E3,F7
463C:  MOVFF  E2,F6
4640:  MOVFF  E1,F5
4644:  MOVFF  E0,F4
4648:  MOVFF  03,FB
464C:  MOVFF  02,FA
4650:  MOVFF  01,F9
4654:  MOVFF  00,F8
4658:  CALL   1CB6
465C:  CLRF   xF7
465E:  CLRF   xF6
4660:  MOVLW  30
4662:  MOVWF  xF5
4664:  MOVLW  82
4666:  MOVWF  xF4
4668:  MOVFF  03,FB
466C:  MOVFF  02,FA
4670:  MOVFF  01,F9
4674:  MOVFF  00,F8
4678:  CALL   228E
467C:  MOVFF  03,B9
4680:  MOVFF  02,B8
4684:  MOVFF  01,B7
4688:  MOVFF  00,B6
....................        
....................       for(i=0;i<floor(Saturacion);i++) 
468C:  CLRF   40
468E:  MOVFF  B9,E3
4692:  MOVFF  B8,E2
4696:  MOVFF  B7,E1
469A:  MOVFF  B6,E0
469E:  CALL   2932
46A2:  MOVFF  00,E0
46A6:  MOVFF  01,E1
46AA:  MOVFF  02,E2
46AE:  MOVFF  03,E3
46B2:  CLRF   xF9
46B4:  MOVFF  40,F8
46B8:  CALL   0CC8
46BC:  MOVFF  03,F7
46C0:  MOVFF  02,F6
46C4:  MOVFF  01,F5
46C8:  MOVFF  00,F4
46CC:  MOVFF  E3,FB
46D0:  MOVFF  E2,FA
46D4:  MOVFF  E1,F9
46D8:  MOVFF  E0,F8
46DC:  CALL   109C
46E0:  BNC   46FE
....................       { 
....................          lcd_gotoxy(i+8,2); 
46E2:  MOVLW  08
46E4:  ADDWF  40,W
46E6:  MOVWF  xE0
46E8:  MOVWF  xF2
46EA:  MOVLW  02
46EC:  MOVWF  xF3
46EE:  CALL   167E
....................          printf(lcd_putc,"Ñ"); 
46F2:  MOVLW  D1
46F4:  MOVWF  xF1
46F6:  CALL   16E8
....................       } 
46FA:  INCF   40,F
46FC:  BRA    468E
....................        
....................       for(i=floor(Saturacion);i<11;i++){ 
46FE:  MOVFF  B9,E3
4702:  MOVFF  B8,E2
4706:  MOVFF  B7,E1
470A:  MOVFF  B6,E0
470E:  CALL   2932
4712:  MOVFF  03,F7
4716:  MOVFF  02,F6
471A:  MOVFF  01,F5
471E:  MOVFF  00,F4
4722:  CALL   25C0
4726:  MOVFF  01,40
472A:  MOVF   40,W
472C:  SUBLW  0A
472E:  BNC   474C
....................          lcd_gotoxy(i+8,2); 
4730:  MOVLW  08
4732:  ADDWF  40,W
4734:  MOVWF  xE0
4736:  MOVWF  xF2
4738:  MOVLW  02
473A:  MOVWF  xF3
473C:  CALL   167E
....................          printf(lcd_putc," "); 
4740:  MOVLW  20
4742:  MOVWF  xF1
4744:  CALL   16E8
....................       } 
4748:  INCF   40,F
474A:  BRA    472A
....................        
....................       lcd_gotoxy(9,3); 
474C:  MOVLW  09
474E:  MOVWF  xF2
4750:  MOVLW  03
4752:  MOVWF  xF3
4754:  CALL   167E
....................       printf(lcd_putc,"Tempo:%03u:%02u",tempo_minutos,tempo_segundos); 
4758:  MOVLW  FA
475A:  MOVWF  FF6
475C:  MOVLW  0A
475E:  MOVWF  FF7
4760:  MOVLW  06
4762:  MOVWF  xE4
4764:  CALL   17D6
4768:  MOVFF  3A,E0
476C:  MOVLW  03
476E:  MOVWF  xE1
4770:  CALL   181C
4774:  MOVLW  3A
4776:  MOVWF  xF1
4778:  CALL   16E8
477C:  MOVFF  3B,E0
4780:  MOVLW  01
4782:  MOVWF  xE1
4784:  CALL   181C
....................       EliminaRuido(); 
4788:  CALL   0004
....................     
....................       lcd_gotoxy(1,2); 
478C:  MOVLW  01
478E:  MOVWF  xF2
4790:  MOVLW  02
4792:  MOVWF  xF3
4794:  CALL   167E
....................       printf(lcd_putc,"Filtro:"); 
4798:  MOVLW  0A
479A:  MOVWF  FF6
479C:  MOVLW  0B
479E:  MOVWF  FF7
47A0:  CALL   174E
....................        
....................       if(estadomv==1){ 
47A4:  BTFSS  29.2
47A6:  BRA    47C2
....................          lcd_gotoxy(1,4); 
47A8:  MOVLW  01
47AA:  MOVWF  xF2
47AC:  MOVLW  04
47AE:  MOVWF  xF3
47B0:  CALL   167E
....................          printf(lcd_putc,"Motor:ON ");       
47B4:  MOVLW  12
47B6:  MOVWF  FF6
47B8:  MOVLW  0B
47BA:  MOVWF  FF7
47BC:  CALL   174E
....................       }else{ 
47C0:  BRA    47DA
....................          lcd_gotoxy(1,4); 
47C2:  MOVLW  01
47C4:  MOVWF  xF2
47C6:  MOVLW  04
47C8:  MOVWF  xF3
47CA:  CALL   167E
....................          printf(lcd_putc,"Motor:OFF"); 
47CE:  MOVLW  1C
47D0:  MOVWF  FF6
47D2:  MOVLW  0B
47D4:  MOVWF  FF7
47D6:  CALL   174E
....................       } 
....................        
....................       if(estadofl==1){ 
47DA:  BTFSS  29.1
47DC:  BRA    47F8
....................          lcd_gotoxy(1,3); 
47DE:  MOVLW  01
47E0:  MOVWF  xF2
47E2:  MOVLW  03
47E4:  MOVWF  xF3
47E6:  CALL   167E
....................          printf(lcd_putc,"Luz:ON "); 
47EA:  MOVLW  26
47EC:  MOVWF  FF6
47EE:  MOVLW  0B
47F0:  MOVWF  FF7
47F2:  CALL   174E
....................       }else{ 
47F6:  BRA    4810
....................          lcd_gotoxy(1,3); 
47F8:  MOVLW  01
47FA:  MOVWF  xF2
47FC:  MOVLW  03
47FE:  MOVWF  xF3
4800:  CALL   167E
....................          printf(lcd_putc,"Luz:OFF"); 
4804:  MOVLW  2E
4806:  MOVWF  FF6
4808:  MOVLW  0B
480A:  MOVWF  FF7
480C:  CALL   174E
....................       }  
....................        
....................       if(estadouv==1) 
4810:  BTFSS  29.0
4812:  BRA    482E
....................       { 
....................          lcd_gotoxy(13,4); 
4814:  MOVLW  0D
4816:  MOVWF  xF2
4818:  MOVLW  04
481A:  MOVWF  xF3
481C:  CALL   167E
....................          printf(lcd_putc,"UV:ON "); 
4820:  MOVLW  36
4822:  MOVWF  FF6
4824:  MOVLW  0B
4826:  MOVWF  FF7
4828:  CALL   174E
....................       } 
....................       else 
482C:  BRA    4846
....................       {          
....................          lcd_gotoxy(13,4); 
482E:  MOVLW  0D
4830:  MOVWF  xF2
4832:  MOVLW  04
4834:  MOVWF  xF3
4836:  CALL   167E
....................          printf(lcd_putc,"UV:OFF"); 
483A:  MOVLW  3E
483C:  MOVWF  FF6
483E:  MOVLW  0B
4840:  MOVWF  FF7
4842:  CALL   174E
....................       } 
....................    } 
....................      
....................    if(tiempo_cumplido==1){ 
4846:  BTFSS  29.7
4848:  BRA    48E2
....................       if(estadoalarma==1){ 
484A:  BTFSS  2A.4
484C:  BRA    48D8
....................          printf(lcd_putc,"\f"); 
484E:  MOVLW  0C
4850:  MOVWF  xF1
4852:  CALL   16E8
....................          lcd_gotoxy(1,2); 
4856:  MOVLW  01
4858:  MOVWF  xF2
485A:  MOVLW  02
485C:  MOVWF  xF3
485E:  CALL   167E
....................          printf(lcd_putc,"  Temporizador  de  "); 
4862:  MOVLW  46
4864:  MOVWF  FF6
4866:  MOVLW  0B
4868:  MOVWF  FF7
486A:  CALL   174E
....................          lcd_gotoxy(1,3); 
486E:  MOVLW  01
4870:  MOVWF  xF2
4872:  MOVLW  03
4874:  MOVWF  xF3
4876:  CALL   167E
....................          printf(lcd_putc," Luz UV  Finalizado "); 
487A:  MOVLW  5C
487C:  MOVWF  FF6
487E:  MOVLW  0B
4880:  MOVWF  FF7
4882:  CALL   174E
....................          lcd_gotoxy(1,4); 
4886:  MOVLW  01
4888:  MOVWF  xF2
488A:  MOVLW  04
488C:  MOVWF  xF3
488E:  CALL   167E
....................          printf(lcd_putc,"                    "); 
4892:  MOVLW  72
4894:  MOVWF  FF6
4896:  MOVLW  0B
4898:  MOVWF  FF7
489A:  CALL   174E
....................          lcd_gotoxy(1,1); 
489E:  MOVLW  01
48A0:  MOVWF  xF2
48A2:  MOVWF  xF3
48A4:  CALL   167E
....................          printf(lcd_putc,"                    "); 
48A8:  MOVLW  88
48AA:  MOVWF  FF6
48AC:  MOVLW  0B
48AE:  MOVWF  FF7
48B0:  CALL   174E
....................          for(i=0;i<5;i++) 
48B4:  CLRF   40
48B6:  MOVF   40,W
48B8:  SUBLW  04
48BA:  BNC   48D8
....................          { 
....................             Buzzer_on; 
48BC:  BSF    F8B.0
48BE:  BCF    F94.0
....................             delay_ms(200); 
48C0:  MOVLW  C8
48C2:  MOVWF  xF7
48C4:  CALL   0B9E
....................             Buzzer_off; 
48C8:  BCF    F8B.0
48CA:  BCF    F94.0
....................             delay_ms(200); 
48CC:  MOVLW  C8
48CE:  MOVWF  xF7
48D0:  CALL   0B9E
....................          } 
48D4:  INCF   40,F
48D6:  BRA    48B6
....................       } 
....................       tiempo_cumplido=0; 
48D8:  BCF    29.7
....................       printf(lcd_putc,"\f"); 
48DA:  MOVLW  0C
48DC:  MOVWF  xF1
48DE:  CALL   16E8
....................    }    
....................        
....................    if(estadofl==1){ 
48E2:  BTFSS  29.1
48E4:  BRA    4904
....................       Luz_Blanca_on; 
48E6:  BCF    F8A.4
48E8:  BCF    F93.4
....................       if(flagfl==0){ 
48EA:  BTFSC  2A.2
48EC:  BRA    4902
....................          lcd_init();delay_ms(200);lcd_init(); 
48EE:  CALL   0C2E
48F2:  MOVLW  C8
48F4:  MOVWF  xF7
48F6:  CALL   0B9E
48FA:  CALL   0C2E
....................          flagfl=1;Cambio=ON; 
48FE:  BSF    2A.2
4900:  BSF    2A.7
....................       } 
....................    }else{ 
4902:  BRA    4920
....................       Luz_Blanca_off; 
4904:  BSF    F8A.4
4906:  BCF    F93.4
....................       if(flagfl==1){ 
4908:  BTFSS  2A.2
490A:  BRA    4920
....................          lcd_init();delay_ms(200);lcd_init(); 
490C:  CALL   0C2E
4910:  MOVLW  C8
4912:  MOVWF  xF7
4914:  CALL   0B9E
4918:  CALL   0C2E
....................          flagfl=0;Cambio=ON; 
491C:  BCF    2A.2
491E:  BSF    2A.7
....................       } 
....................    } 
....................       Cambio=OFF; 
4920:  BCF    2A.7
....................     
....................    if(estadomv==1){  
4922:  BTFSS  29.2
4924:  BRA    4950
....................       if(flagmv==0){ 
4926:  BTFSC  xC2.0
4928:  BRA    494A
....................          VelMotor=6; 
492A:  MOVLW  06
492C:  MOVWF  xD1
....................          lcd_init();delay_ms(200);lcd_init(); 
492E:  CALL   0C2E
4932:  MOVLW  C8
4934:  MOVWF  xF7
4936:  CALL   0B9E
493A:  CALL   0C2E
....................          flagmv=1;Cambio=ON;delay_ms(200); 
493E:  BSF    xC2.0
4940:  BSF    2A.7
4942:  MOVLW  C8
4944:  MOVWF  xF7
4946:  CALL   0B9E
....................       } 
....................       VelMotor=Vel1; 
494A:  MOVFF  57,D1
....................    }else{ 
494E:  BRA    496A
....................       VelMotor=0; 
4950:  CLRF   xD1
....................       if(flagmv==1){ 
4952:  BTFSS  xC2.0
4954:  BRA    496A
....................          lcd_init();delay_ms(200);lcd_init(); 
4956:  CALL   0C2E
495A:  MOVLW  C8
495C:  MOVWF  xF7
495E:  CALL   0B9E
4962:  CALL   0C2E
....................          flagmv=0;Cambio=ON; 
4966:  BCF    xC2.0
4968:  BSF    2A.7
....................       } 
....................    } 
....................     
....................    if(estadofl==1) 
496A:  BTFSS  29.1
496C:  BRA    498C
....................    { 
....................       Luz_Blanca_on; 
496E:  BCF    F8A.4
4970:  BCF    F93.4
....................       if(flagfl==0) 
4972:  BTFSC  2A.2
4974:  BRA    498A
....................       { 
....................          lcd_init();delay_ms(200);lcd_init(); 
4976:  CALL   0C2E
497A:  MOVLW  C8
497C:  MOVWF  xF7
497E:  CALL   0B9E
4982:  CALL   0C2E
....................          flagfl=1;Cambio=ON; 
4986:  BSF    2A.2
4988:  BSF    2A.7
....................       } 
....................    } 
....................    else 
498A:  BRA    49A8
....................    { 
....................       Luz_Blanca_off; 
498C:  BSF    F8A.4
498E:  BCF    F93.4
....................       if(flagfl==1) 
4990:  BTFSS  2A.2
4992:  BRA    49A8
....................       { 
....................          lcd_init();delay_ms(200);lcd_init(); 
4994:  CALL   0C2E
4998:  MOVLW  C8
499A:  MOVWF  xF7
499C:  CALL   0B9E
49A0:  CALL   0C2E
....................          flagfl=0;Cambio=ON; 
49A4:  BCF    2A.2
49A6:  BSF    2A.7
....................       } 
....................    } 
....................     
....................    if(estadouv==1){ 
49A8:  BTFSS  29.0
49AA:  BRA    4A56
....................       Luz_UV_on; 
49AC:  BCF    F8A.3
49AE:  BCF    F93.3
....................       tiempo_cumplido=0;       
49B0:  BCF    29.7
....................       estadomv=0; 
49B2:  BCF    29.2
....................       VelMotor=0; 
49B4:  CLRF   xD1
....................       estadofl=0; 
49B6:  BCF    29.1
....................       Luz_Blanca_off; 
49B8:  BSF    F8A.4
49BA:  BCF    F93.4
....................       if(flaguv==0){ 
49BC:  BTFSC  2A.1
49BE:  BRA    4A54
....................          lcd_init();delay_ms(200);lcd_init(); 
49C0:  CALL   0C2E
49C4:  MOVLW  C8
49C6:  MOVWF  xF7
49C8:  CALL   0B9E
49CC:  CALL   0C2E
....................          flaguv=1;guardaruv=1;Cambio=ON; 
49D0:  BSF    2A.1
49D2:  MOVLW  01
49D4:  MOVWF  43
49D6:  BSF    2A.7
....................          write_eeprom(22,estadomv);delay_ms(20); 
49D8:  MOVLW  00
49DA:  BTFSC  29.2
49DC:  MOVLW  01
49DE:  MOVWF  xE0
49E0:  MOVLW  16
49E2:  MOVWF  FA9
49E4:  MOVFF  E0,FA8
49E8:  BCF    FA6.6
49EA:  BCF    FA6.7
49EC:  BSF    FA6.2
49EE:  MOVF   FF2,W
49F0:  MOVWF  00
49F2:  BCF    FF2.6
49F4:  BCF    FF2.7
49F6:  MOVLB  F
49F8:  MOVLW  55
49FA:  MOVWF  FA7
49FC:  MOVLW  AA
49FE:  MOVWF  FA7
4A00:  BSF    FA6.1
4A02:  BTFSC  FA6.1
4A04:  BRA    4A02
4A06:  BCF    FA6.2
4A08:  MOVF   00,W
4A0A:  IORWF  FF2,F
4A0C:  MOVLW  14
4A0E:  MOVLB  0
4A10:  MOVWF  xF7
4A12:  CALL   0B9E
....................          write_eeprom(23,estadofl);delay_ms(20); 
4A16:  MOVLW  00
4A18:  BTFSC  29.1
4A1A:  MOVLW  01
4A1C:  MOVWF  xE0
4A1E:  MOVLW  17
4A20:  MOVWF  FA9
4A22:  MOVFF  E0,FA8
4A26:  BCF    FA6.6
4A28:  BCF    FA6.7
4A2A:  BSF    FA6.2
4A2C:  MOVF   FF2,W
4A2E:  MOVWF  00
4A30:  BCF    FF2.6
4A32:  BCF    FF2.7
4A34:  MOVLB  F
4A36:  MOVLW  55
4A38:  MOVWF  FA7
4A3A:  MOVLW  AA
4A3C:  MOVWF  FA7
4A3E:  BSF    FA6.1
4A40:  BTFSC  FA6.1
4A42:  BRA    4A40
4A44:  BCF    FA6.2
4A46:  MOVF   00,W
4A48:  IORWF  FF2,F
4A4A:  MOVLW  14
4A4C:  MOVLB  0
4A4E:  MOVWF  xF7
4A50:  CALL   0B9E
....................       } 
....................    }else{ 
4A54:  BRA    4A78
....................       estadouv=0; 
4A56:  BCF    29.0
....................       Luz_UV_off; 
4A58:  BSF    F8A.3
4A5A:  BCF    F93.3
....................       if(flaguv==1){ 
4A5C:  BTFSS  2A.1
4A5E:  BRA    4A78
....................          lcd_init();delay_ms(200);lcd_init(); 
4A60:  CALL   0C2E
4A64:  MOVLW  C8
4A66:  MOVWF  xF7
4A68:  CALL   0B9E
4A6C:  CALL   0C2E
....................          flaguv=0;guardaruv=1;Cambio=ON; 
4A70:  BCF    2A.1
4A72:  MOVLW  01
4A74:  MOVWF  43
4A76:  BSF    2A.7
....................       } 
....................    } 
....................        
....................    if(tdown>=60){ //Si oprimio tecla abajo por 300ms o mas 
4A78:  MOVF   xC8,F
4A7A:  BNZ   4A82
4A7C:  MOVF   xC7,W
4A7E:  SUBLW  3B
4A80:  BC    4AD4
....................       if(!Flanco){ 
4A82:  BTFSC  29.3
4A84:  BRA    4AD2
....................          estadofl=!estadofl;Flanco = 1;write_eeprom(23,estadofl);delay_ms(300);Cambio=ON; 
4A86:  BTG    29.1
4A88:  BSF    29.3
4A8A:  MOVLW  00
4A8C:  BTFSC  29.1
4A8E:  MOVLW  01
4A90:  MOVWF  xE0
4A92:  MOVLW  17
4A94:  MOVWF  FA9
4A96:  MOVFF  E0,FA8
4A9A:  BCF    FA6.6
4A9C:  BCF    FA6.7
4A9E:  BSF    FA6.2
4AA0:  MOVF   FF2,W
4AA2:  MOVWF  00
4AA4:  BCF    FF2.6
4AA6:  BCF    FF2.7
4AA8:  MOVLB  F
4AAA:  MOVLW  55
4AAC:  MOVWF  FA7
4AAE:  MOVLW  AA
4AB0:  MOVWF  FA7
4AB2:  BSF    FA6.1
4AB4:  BTFSC  FA6.1
4AB6:  BRA    4AB4
4AB8:  BCF    FA6.2
4ABA:  MOVF   00,W
4ABC:  IORWF  FF2,F
4ABE:  MOVLW  02
4AC0:  MOVLB  0
4AC2:  MOVWF  xE0
4AC4:  MOVLW  96
4AC6:  MOVWF  xF7
4AC8:  CALL   0B9E
4ACC:  DECFSZ xE0,F
4ACE:  BRA    4AC4
4AD0:  BSF    2A.7
....................       } 
....................    }else{ 
4AD2:  BRA    4AD6
....................       Flanco=0; 
4AD4:  BCF    29.3
....................    } 
....................     
....................    if(tright>=60){ //Si oprimio tecla derecha por 300ms o mas 
4AD6:  MOVF   xCA,F
4AD8:  BNZ   4AE0
4ADA:  MOVF   xC9,W
4ADC:  SUBLW  3B
4ADE:  BC    4B32
....................       if(!Flanco2){ 
4AE0:  BTFSC  29.5
4AE2:  BRA    4B30
....................          estadomv=!estadomv;Flanco2 = 1;write_eeprom(22,estadomv);delay_ms(300);Cambio=ON; 
4AE4:  BTG    29.2
4AE6:  BSF    29.5
4AE8:  MOVLW  00
4AEA:  BTFSC  29.2
4AEC:  MOVLW  01
4AEE:  MOVWF  xE0
4AF0:  MOVLW  16
4AF2:  MOVWF  FA9
4AF4:  MOVFF  E0,FA8
4AF8:  BCF    FA6.6
4AFA:  BCF    FA6.7
4AFC:  BSF    FA6.2
4AFE:  MOVF   FF2,W
4B00:  MOVWF  00
4B02:  BCF    FF2.6
4B04:  BCF    FF2.7
4B06:  MOVLB  F
4B08:  MOVLW  55
4B0A:  MOVWF  FA7
4B0C:  MOVLW  AA
4B0E:  MOVWF  FA7
4B10:  BSF    FA6.1
4B12:  BTFSC  FA6.1
4B14:  BRA    4B12
4B16:  BCF    FA6.2
4B18:  MOVF   00,W
4B1A:  IORWF  FF2,F
4B1C:  MOVLW  02
4B1E:  MOVLB  0
4B20:  MOVWF  xE0
4B22:  MOVLW  96
4B24:  MOVWF  xF7
4B26:  CALL   0B9E
4B2A:  DECFSZ xE0,F
4B2C:  BRA    4B22
4B2E:  BSF    2A.7
....................       } 
....................    }else{ 
4B30:  BRA    4B34
....................       Flanco2=0; 
4B32:  BCF    29.5
....................    } 
....................     
....................    if(tleft>=60){ //Si oprimio tecla izquierda por 300ms o mas 
4B34:  MOVF   xCC,F
4B36:  BNZ   4B3E
4B38:  MOVF   xCB,W
4B3A:  SUBLW  3B
4B3C:  BC    4B52
....................       if(!Flanco3){ 
4B3E:  BTFSC  29.6
4B40:  BRA    4B50
....................          delay_ms(150);  
4B42:  MOVLW  96
4B44:  MOVWF  xF7
4B46:  CALL   0B9E
....................          estadouv=!estadouv; 
4B4A:  BTG    29.0
....................          Cambio=ON; 
4B4C:  BSF    2A.7
....................          Flanco3=1; 
4B4E:  BSF    29.6
....................       } 
....................    }else{ 
4B50:  BRA    4B54
....................       Flanco3=0; 
4B52:  BCF    29.6
....................    } 
....................     
....................    if(tup>=60){ //Si oprimio tecla arriba por 300ms o mas 
4B54:  MOVF   xC6,F
4B56:  BNZ   4B5E
4B58:  MOVF   xC5,W
4B5A:  SUBLW  3B
4B5C:  BC    4B94
....................       if(!Flanco1){ 
4B5E:  BTFSC  29.4
4B60:  BRA    4B92
....................          delay_ms(200); 
4B62:  MOVLW  C8
4B64:  MOVWF  xF7
4B66:  CALL   0B9E
....................          printf(lcd_putc,"\f"); 
4B6A:  MOVLW  0C
4B6C:  MOVWF  xF1
4B6E:  CALL   16E8
....................          delay_ms(300); 
4B72:  MOVLW  02
4B74:  MOVWF  xE0
4B76:  MOVLW  96
4B78:  MOVWF  xF7
4B7A:  CALL   0B9E
4B7E:  DECFSZ xE0,F
4B80:  BRA    4B76
....................          Menu=1;  
4B82:  MOVLW  01
4B84:  MOVWF  2B
....................          paso=0; 
4B86:  CLRF   47
....................          Flecha=2; 
4B88:  MOVLW  02
4B8A:  MOVWF  2F
....................          Flecha2=2; 
4B8C:  MOVWF  31
....................          Cambio=ON; 
4B8E:  BSF    2A.7
....................          Flanco1=1; 
4B90:  BSF    29.4
....................       } 
....................    }else{ 
4B92:  BRA    4B96
....................       Flanco1=0; 
4B94:  BCF    29.4
....................    } 
....................        
....................    if(guardaruv==1) 
4B96:  DECFSZ 43,W
4B98:  BRA    4C64
....................    { 
....................       write_eeprom(7,segundos);write_eeprom(8,minutos); 
4B9A:  MOVLW  07
4B9C:  MOVWF  FA9
4B9E:  MOVFF  34,FA8
4BA2:  BCF    FA6.6
4BA4:  BCF    FA6.7
4BA6:  BSF    FA6.2
4BA8:  MOVF   FF2,W
4BAA:  MOVWF  00
4BAC:  BCF    FF2.6
4BAE:  BCF    FF2.7
4BB0:  MOVLB  F
4BB2:  MOVLW  55
4BB4:  MOVWF  FA7
4BB6:  MOVLW  AA
4BB8:  MOVWF  FA7
4BBA:  BSF    FA6.1
4BBC:  BTFSC  FA6.1
4BBE:  BRA    4BBC
4BC0:  BCF    FA6.2
4BC2:  MOVF   00,W
4BC4:  IORWF  FF2,F
4BC6:  MOVLW  08
4BC8:  MOVWF  FA9
4BCA:  MOVFF  35,FA8
4BCE:  BCF    FA6.6
4BD0:  BCF    FA6.7
4BD2:  BSF    FA6.2
4BD4:  MOVF   FF2,W
4BD6:  MOVWF  00
4BD8:  BCF    FF2.6
4BDA:  BCF    FF2.7
4BDC:  MOVLW  55
4BDE:  MOVWF  FA7
4BE0:  MOVLW  AA
4BE2:  MOVWF  FA7
4BE4:  BSF    FA6.1
4BE6:  BTFSC  FA6.1
4BE8:  BRA    4BE6
4BEA:  BCF    FA6.2
4BEC:  MOVF   00,W
4BEE:  IORWF  FF2,F
....................       horasL=make8(horas,0); 
4BF0:  MOVFF  5A,36
....................       horasH=make8(horas,1); 
4BF4:  MOVFF  5B,37
....................       write_eeprom(9,horasL); 
4BF8:  MOVLW  09
4BFA:  MOVWF  FA9
4BFC:  MOVFF  36,FA8
4C00:  BCF    FA6.6
4C02:  BCF    FA6.7
4C04:  BSF    FA6.2
4C06:  MOVFF  FF2,00
4C0A:  BCF    FF2.6
4C0C:  BCF    FF2.7
4C0E:  MOVLW  55
4C10:  MOVWF  FA7
4C12:  MOVLW  AA
4C14:  MOVWF  FA7
4C16:  BSF    FA6.1
4C18:  BTFSC  FA6.1
4C1A:  BRA    4C18
4C1C:  BCF    FA6.2
4C1E:  MOVF   00,W
4C20:  IORWF  FF2,F
....................       delay_ms(20); 
4C22:  MOVLW  14
4C24:  MOVLB  0
4C26:  MOVWF  xF7
4C28:  CALL   0B9E
....................       write_eeprom(10,horasH); 
4C2C:  MOVLW  0A
4C2E:  MOVWF  FA9
4C30:  MOVFF  37,FA8
4C34:  BCF    FA6.6
4C36:  BCF    FA6.7
4C38:  BSF    FA6.2
4C3A:  MOVF   FF2,W
4C3C:  MOVWF  00
4C3E:  BCF    FF2.6
4C40:  BCF    FF2.7
4C42:  MOVLB  F
4C44:  MOVLW  55
4C46:  MOVWF  FA7
4C48:  MOVLW  AA
4C4A:  MOVWF  FA7
4C4C:  BSF    FA6.1
4C4E:  BTFSC  FA6.1
4C50:  BRA    4C4E
4C52:  BCF    FA6.2
4C54:  MOVF   00,W
4C56:  IORWF  FF2,F
....................       delay_ms(20); 
4C58:  MOVLW  14
4C5A:  MOVLB  0
4C5C:  MOVWF  xF7
4C5E:  CALL   0B9E
....................       guardaruv=0; 
4C62:  CLRF   43
....................    } 
....................     
....................    if(segundos>=60) 
4C64:  MOVF   34,W
4C66:  SUBLW  3B
4C68:  BC    4C6E
....................    { 
....................       segundos=0;minutos++; 
4C6A:  CLRF   34
4C6C:  INCF   35,F
....................    } 
....................    if(minutos==60) 
4C6E:  MOVF   35,W
4C70:  SUBLW  3C
4C72:  BNZ   4C7C
....................    { 
....................       minutos=0;horas++; 
4C74:  CLRF   35
4C76:  INCF   5A,F
4C78:  BTFSC  FD8.2
4C7A:  INCF   5B,F
....................    }   
....................      
....................    } 
.................... //----------------Fin-Menu100--------------------------------------------------------------   
....................    if(tiemporeset>=60) 
4C7C:  MOVF   42,W
4C7E:  SUBLW  3B
4C80:  BC    4C9A
....................    { 
....................       printf(lcd_putc,"\f"); 
4C82:  MOVLW  0C
4C84:  MOVWF  xF1
4C86:  CALL   16E8
....................       lcd_init(); 
4C8A:  CALL   0C2E
....................       delay_ms(200); 
4C8E:  MOVLW  C8
4C90:  MOVWF  xF7
4C92:  CALL   0B9E
....................       tiemporeset=0; 
4C96:  CLRF   42
....................       Cambio=ON; 
4C98:  BSF    2A.7
....................    }    
....................    } 
4C9A:  GOTO   2E00
.................... } 
....................  
.................... int8 BIT_BYTE(int1 D0, int1 D1, int1 D2, int1 D3, int1 D4, int1 D5, int1 D6, int1 D7){ 
....................    int8 dato; 
4C9E:  SLEEP 
....................    dato= D7*128 + D6*64 + D5*32 + D4*16 + D3*8 + D2*4 + D1*2 +D0*1; // 0 al 255  
....................    return dato;  
.................... } 

Configuration Fuses:
   Word  1: 0E3C   NOIESO NOFCMEN HSPLL PLL5 CPUDIV4 USBDIV
   Word  2: 1E39   NOBROWNOUT NOWDT BORV20 NOPUT WDT32768 VREGEN
   Word  3: 0100   NOPBADEN CCP2C1 NOMCLR NOLPT1OSC
   Word  4: 0080   NOSTVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
