CCS PCH C Compiler, Version 4.104, 5967               03-jul.-20 08:07

               Filename: D:\Laboratorio\Cabina de Flujo Laminar Horizontal\2020\CFLH 120 Universidad de Ibague D4X20 #004588206 OP2020137\Firmware 3.0.0\CabinaCFLH.lst

               ROM used: 16226 bytes (50%)
                         Largest free fragment is 16540
               RAM used: 190 (9%) at main() level
                         228 (11%) worst case
               Stack:    8 worst case (6 in main + 2 for interrupts)

*
0000:  GOTO   2050
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  FF2.4
004A:  GOTO   0054
004E:  BTFSC  FF2.1
0050:  GOTO   01B2
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina de PCR. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz UV, Luz Blanca, Motor Ventilador y Cambio de Contraseña. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... //#fuses XTPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,VREGEN,NOMCLR,NOPUT// PLL1 para 4 MHz 
.................... //#fuses XT,NOWDT,NOPROTECT,NOLVP,NODEBUG,NOVREGEN,NOMCLR// PLL1 para 4 MHz 
.................... //#use delay(clock=48000000) 
.................... //#use delay(clock=20000000) 
.................... #fuses XTPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV4,VREGEN,NOMCLR,NOPUT 
.................... #use delay(clock=16000000) 
*
0198:  MOVLW  04
019A:  SUBWF  xE3,F
019C:  BNC   01B0
019E:  CLRF   FEA
01A0:  MOVLW  E3
01A2:  MOVWF  FE9
01A4:  MOVF   FEF,W
01A6:  BZ    01B0
01A8:  BRA    01AC
01AA:  NOP   
01AC:  DECFSZ FEF,F
01AE:  BRA    01AA
01B0:  RETLW  00
*
07E8:  CLRF   FEA
07EA:  MOVLW  D1
07EC:  MOVWF  FE9
07EE:  MOVF   FEF,W
07F0:  BZ    080E
07F2:  MOVLW  05
07F4:  MOVWF  01
07F6:  CLRF   00
07F8:  DECFSZ 00,F
07FA:  BRA    07F8
07FC:  DECFSZ 01,F
07FE:  BRA    07F6
0800:  MOVLW  2E
0802:  MOVWF  00
0804:  DECFSZ 00,F
0806:  BRA    0804
0808:  BRA    080A
080A:  DECFSZ FEF,F
080C:  BRA    07F2
080E:  RETLW  00
.................... #include <MATH.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
*
1D00:  BCF    xCD.0
....................    y = x; 
1D02:  MOVFF  C1,C6
1D06:  MOVFF  C0,C5
1D0A:  MOVFF  BF,C4
1D0E:  MOVFF  BE,C3
....................  
....................    if (x < 0) 
1D12:  MOVFF  C1,D1
1D16:  MOVFF  C0,D0
1D1A:  MOVFF  BF,CF
1D1E:  MOVFF  BE,CE
1D22:  CLRF   xD5
1D24:  CLRF   xD4
1D26:  CLRF   xD3
1D28:  CLRF   xD2
1D2A:  CALL   0C50
1D2E:  BNC   1D38
....................    { 
....................       s = 1; 
1D30:  BSF    xCD.0
....................       y = -y; 
1D32:  MOVF   xC4,W
1D34:  XORLW  80
1D36:  MOVWF  xC4
....................    } 
....................  
....................    if (y <= 32768.0) 
1D38:  MOVFF  C6,D1
1D3C:  MOVFF  C5,D0
1D40:  MOVFF  C4,CF
1D44:  MOVFF  C3,CE
1D48:  CLRF   xD5
1D4A:  CLRF   xD4
1D4C:  CLRF   xD3
1D4E:  MOVLW  8E
1D50:  MOVWF  xD2
1D52:  CALL   0C50
1D56:  BC    1D5A
1D58:  BNZ   1D8A
....................   res = (float32)(unsigned int16)y; 
1D5A:  MOVFF  C6,D1
1D5E:  MOVFF  C5,D0
1D62:  MOVFF  C4,CF
1D66:  MOVFF  C3,CE
1D6A:  RCALL  1CC8
1D6C:  MOVFF  02,D3
1D70:  MOVFF  01,D2
1D74:  CALL   0A3C
1D78:  MOVFF  03,CA
1D7C:  MOVFF  02,C9
1D80:  MOVFF  01,C8
1D84:  MOVFF  00,C7
....................  
....................  else if (y < 10000000.0) 
1D88:  BRA    1F14
1D8A:  MOVFF  C6,D1
1D8E:  MOVFF  C5,D0
1D92:  MOVFF  C4,CF
1D96:  MOVFF  C3,CE
1D9A:  MOVLW  80
1D9C:  MOVWF  xD5
1D9E:  MOVLW  96
1DA0:  MOVWF  xD4
1DA2:  MOVLW  18
1DA4:  MOVWF  xD3
1DA6:  MOVLW  96
1DA8:  MOVWF  xD2
1DAA:  CALL   0C50
1DAE:  BTFSS  FD8.0
1DB0:  BRA    1F04
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
1DB2:  MOVFF  C6,D1
1DB6:  MOVFF  C5,D0
1DBA:  MOVFF  C4,CF
1DBE:  MOVFF  C3,CE
1DC2:  CLRF   xD5
1DC4:  CLRF   xD4
1DC6:  CLRF   xD3
1DC8:  MOVLW  8E
1DCA:  MOVWF  xD2
1DCC:  CALL   143C
1DD0:  MOVFF  03,D1
1DD4:  MOVFF  02,D0
1DD8:  MOVFF  01,CF
1DDC:  MOVFF  00,CE
1DE0:  RCALL  1CC8
1DE2:  MOVFF  02,CC
1DE6:  MOVFF  01,CB
....................       y = 32768.0*(y/32768.0 - (float32)l); 
1DEA:  MOVFF  C6,D1
1DEE:  MOVFF  C5,D0
1DF2:  MOVFF  C4,CF
1DF6:  MOVFF  C3,CE
1DFA:  CLRF   xD5
1DFC:  CLRF   xD4
1DFE:  CLRF   xD3
1E00:  MOVLW  8E
1E02:  MOVWF  xD2
1E04:  CALL   143C
1E08:  MOVFF  00,CE
1E0C:  MOVFF  01,CF
1E10:  MOVFF  02,D0
1E14:  MOVFF  03,D1
1E18:  MOVFF  CC,D3
1E1C:  MOVFF  CB,D2
1E20:  CALL   0A3C
1E24:  BSF    FD8.1
1E26:  MOVFF  D1,D5
1E2A:  MOVFF  D0,D4
1E2E:  MOVFF  CF,D3
1E32:  MOVFF  CE,D2
1E36:  MOVFF  03,D9
1E3A:  MOVFF  02,D8
1E3E:  MOVFF  01,D7
1E42:  MOVFF  00,D6
1E46:  CALL   1596
1E4A:  CLRF   xD1
1E4C:  CLRF   xD0
1E4E:  CLRF   xCF
1E50:  MOVLW  8E
1E52:  MOVWF  xCE
1E54:  MOVFF  03,D5
1E58:  MOVFF  02,D4
1E5C:  MOVFF  01,D3
1E60:  MOVFF  00,D2
1E64:  RCALL  1996
1E66:  MOVFF  03,C6
1E6A:  MOVFF  02,C5
1E6E:  MOVFF  01,C4
1E72:  MOVFF  00,C3
....................   res = 32768.0*(float32)l; 
1E76:  MOVFF  CC,D3
1E7A:  MOVFF  CB,D2
1E7E:  CALL   0A3C
1E82:  CLRF   xD1
1E84:  CLRF   xD0
1E86:  CLRF   xCF
1E88:  MOVLW  8E
1E8A:  MOVWF  xCE
1E8C:  MOVFF  03,D5
1E90:  MOVFF  02,D4
1E94:  MOVFF  01,D3
1E98:  MOVFF  00,D2
1E9C:  RCALL  1996
1E9E:  MOVFF  03,CA
1EA2:  MOVFF  02,C9
1EA6:  MOVFF  01,C8
1EAA:  MOVFF  00,C7
....................   res += (float32)(unsigned int16)y; 
1EAE:  MOVFF  C6,D1
1EB2:  MOVFF  C5,D0
1EB6:  MOVFF  C4,CF
1EBA:  MOVFF  C3,CE
1EBE:  RCALL  1CC8
1EC0:  MOVFF  02,D3
1EC4:  MOVFF  01,D2
1EC8:  CALL   0A3C
1ECC:  BCF    FD8.1
1ECE:  MOVFF  CA,D5
1ED2:  MOVFF  C9,D4
1ED6:  MOVFF  C8,D3
1EDA:  MOVFF  C7,D2
1EDE:  MOVFF  03,D9
1EE2:  MOVFF  02,D8
1EE6:  MOVFF  01,D7
1EEA:  MOVFF  00,D6
1EEE:  CALL   1596
1EF2:  MOVFF  03,CA
1EF6:  MOVFF  02,C9
1EFA:  MOVFF  01,C8
1EFE:  MOVFF  00,C7
....................  } 
....................  
....................  else 
1F02:  BRA    1F14
....................   res = y; 
1F04:  MOVFF  C6,CA
1F08:  MOVFF  C5,C9
1F0C:  MOVFF  C4,C8
1F10:  MOVFF  C3,C7
....................  
....................  y = y - (float32)(unsigned int16)y; 
1F14:  MOVFF  C6,D1
1F18:  MOVFF  C5,D0
1F1C:  MOVFF  C4,CF
1F20:  MOVFF  C3,CE
1F24:  RCALL  1CC8
1F26:  MOVFF  02,D3
1F2A:  MOVFF  01,D2
1F2E:  CALL   0A3C
1F32:  BSF    FD8.1
1F34:  MOVFF  C6,D5
1F38:  MOVFF  C5,D4
1F3C:  MOVFF  C4,D3
1F40:  MOVFF  C3,D2
1F44:  MOVFF  03,D9
1F48:  MOVFF  02,D8
1F4C:  MOVFF  01,D7
1F50:  MOVFF  00,D6
1F54:  CALL   1596
1F58:  MOVFF  03,C6
1F5C:  MOVFF  02,C5
1F60:  MOVFF  01,C4
1F64:  MOVFF  00,C3
....................  
....................  if (s) 
1F68:  BTFSS  xCD.0
1F6A:  BRA    1F72
....................   res = -res; 
1F6C:  MOVF   xC8,W
1F6E:  XORLW  80
1F70:  MOVWF  xC8
....................  
....................  if (y != 0) 
1F72:  MOVFF  C6,D1
1F76:  MOVFF  C5,D0
1F7A:  MOVFF  C4,CF
1F7E:  MOVFF  C3,CE
1F82:  CLRF   xD5
1F84:  CLRF   xD4
1F86:  CLRF   xD3
1F88:  CLRF   xD2
1F8A:  CALL   0C50
1F8E:  BZ    2000
....................  { 
....................   if (s == 1 && n == 0) 
1F90:  BTFSS  xCD.0
1F92:  BRA    1FC8
1F94:  MOVF   xC2,F
1F96:  BNZ   1FC8
....................    res -= 1.0; 
1F98:  BSF    FD8.1
1F9A:  MOVFF  CA,D5
1F9E:  MOVFF  C9,D4
1FA2:  MOVFF  C8,D3
1FA6:  MOVFF  C7,D2
1FAA:  CLRF   xD9
1FAC:  CLRF   xD8
1FAE:  CLRF   xD7
1FB0:  MOVLW  7F
1FB2:  MOVWF  xD6
1FB4:  CALL   1596
1FB8:  MOVFF  03,CA
1FBC:  MOVFF  02,C9
1FC0:  MOVFF  01,C8
1FC4:  MOVFF  00,C7
....................  
....................   if (s == 0 && n == 1) 
1FC8:  BTFSC  xCD.0
1FCA:  BRA    2000
1FCC:  DECFSZ xC2,W
1FCE:  BRA    2000
....................    res += 1.0; 
1FD0:  BCF    FD8.1
1FD2:  MOVFF  CA,D5
1FD6:  MOVFF  C9,D4
1FDA:  MOVFF  C8,D3
1FDE:  MOVFF  C7,D2
1FE2:  CLRF   xD9
1FE4:  CLRF   xD8
1FE6:  CLRF   xD7
1FE8:  MOVLW  7F
1FEA:  MOVWF  xD6
1FEC:  CALL   1596
1FF0:  MOVFF  03,CA
1FF4:  MOVFF  02,C9
1FF8:  MOVFF  01,C8
1FFC:  MOVFF  00,C7
....................  } 
....................  if (x == 0) 
2000:  MOVFF  C1,D1
2004:  MOVFF  C0,D0
2008:  MOVFF  BF,CF
200C:  MOVFF  BE,CE
2010:  CLRF   xD5
2012:  CLRF   xD4
2014:  CLRF   xD3
2016:  CLRF   xD2
2018:  CALL   0C50
201C:  BNZ   2026
....................     res = 0; 
201E:  CLRF   xCA
2020:  CLRF   xC9
2022:  CLRF   xC8
2024:  CLRF   xC7
....................  
....................  return (res); 
2026:  MOVFF  C7,00
202A:  MOVFF  C8,01
202E:  MOVFF  C9,02
2032:  MOVFF  CA,03
.................... } 
2036:  GOTO   204E (RETURN)
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
203A:  MOVFF  BD,C1
203E:  MOVFF  BC,C0
2042:  MOVFF  BB,BF
2046:  MOVFF  BA,BE
204A:  CLRF   xC2
204C:  BRA    1D00
.................... } 
204E:  RETLW  00
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   UP            !input(PIN_A5) 
.................... #define   DOWN          !input(PIN_E0) 
.................... #define   RIGHT         !input(PIN_E1) 
.................... #define   IZQU          !input(PIN_E2) 
.................... #define   VIDRIO        !input(PIN_A1) 
....................  
.................... // Definición de otros puertos 
.................... #define   Luz_UV_on         output_bit(PIN_B1,0) 
.................... #define   Luz_UV_off        output_bit(PIN_B1,1) 
.................... #define   Luz_Blanca_on     output_bit(PIN_B2,0) 
.................... #define   Luz_Blanca_off    output_bit(PIN_B2,1) 
.................... #define   Motor_L1_on       output_bit(PIN_C2,1) 
.................... #define   Motor_L1_off      output_bit(PIN_C2,0) 
.................... #define   Motor_L2_on       output_bit(PIN_C1,1) 
.................... #define   Motor_L2_off      output_bit(PIN_C1,0) 
.................... #define   Buzzer_on         output_bit(PIN_C0,1) 
.................... #define   Buzzer_off        output_bit(PIN_C0,0) 
.................... #define   ON  1 
.................... #define   OFF 0 
....................  
.................... short estadouv=0,estadofl=0,estadomv=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,tiempo_cumplido=0,Lectura=0,flaguv=0,flagfl=0,estadobuzzer=0,estadoalarma=0; 
.................... int8 Menu=0, n_opcionH=7,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,segundos=0,minutos=0,horasL=0,horasH=0,G_l=0,G_h=0; 
.................... int8 tempo_minutos=0,tempo_segundos=0,tempo_minutos_pro=0,tempo_segundos_pro=0,r=0,q=0,i=0,unidad2=1,tiemporeset=0,guardaruv=0; 
.................... signed int8   paso=0; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... signed  int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 ActivaBuzzer=0; 
.................... int16 tiempos,horas=0,G16=0; 
.................... float PromPresion[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float V1=0.0,Presion=0.0,Saturacion=0.0,CaidaPresion=0.0; 
.................... float G=2; 
.................... short Cambio=ON,flagmv=0; 
....................  
.................... int16 pulsos=0,retardo=0; 
.................... short Cruce=OFF,Purga=OFF; 
.................... int16 tiempocruce=0; 
.................... int8 Porcentaje=0,VelMotor=0; 
.................... float Tcruce=0.0,Tcruce2=0; 
....................  
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN unused;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN enable;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTD")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_d(LCD_READ); 
....................       lcd.rw = 1; 
....................       delay_cycles(30);//30 
....................       lcd.enable = 1; 
....................       delay_cycles(30);//30 
....................       high = lcd.data; 
....................       lcd.enable = 0; 
....................       delay_cycles(30);//30 
....................       lcd.enable = 1; 
....................       delay_us(30);//30 
....................       low = lcd.data; 
....................       lcd.enable = 0; 
....................       set_tris_d(LCD_WRITE); 
....................       return( (high<<4) | low); 
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
0810:  SWAPF  xD2,W
0812:  ANDLW  F0
0814:  MOVWF  00
0816:  MOVLW  0F
0818:  ANDWF  F83,W
081A:  IORWF  00,W
081C:  MOVWF  F83
....................       delay_cycles(30);//30 
081E:  MOVLW  09
0820:  MOVWF  00
0822:  DECFSZ 00,F
0824:  BRA    0822
0826:  BRA    0828
....................       lcd.enable = 1; 
0828:  BSF    F83.3
....................       delay_us(55);//55 
082A:  MOVLW  49
082C:  MOVWF  00
082E:  DECFSZ 00,F
0830:  BRA    082E
....................       lcd.enable = 0; 
0832:  BCF    F83.3
.................... } 
0834:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
0836:  BCF    F83.1
....................       //while ( bit_test(lcd_read_byte(),7)); 
....................       delay_ms(1); 
0838:  MOVLW  01
083A:  MOVWF  xD1
083C:  RCALL  07E8
....................       lcd.rs = address; 
083E:  BTFSS  xCF.0
0840:  BCF    F83.1
0842:  BTFSC  xCF.0
0844:  BSF    F83.1
....................       delay_cycles(30);//30 
0846:  MOVLW  09
0848:  MOVWF  00
084A:  DECFSZ 00,F
084C:  BRA    084A
084E:  BRA    0850
....................       lcd.rw = 0; 
0850:  BCF    F83.2
....................       delay_cycles(30);//30 
0852:  MOVLW  09
0854:  MOVWF  00
0856:  DECFSZ 00,F
0858:  BRA    0856
085A:  BRA    085C
....................       lcd.enable = 0; 
085C:  BCF    F83.3
....................       lcd_send_nibble(n >> 4); 
085E:  SWAPF  xD0,W
0860:  MOVWF  xD1
0862:  MOVLW  0F
0864:  ANDWF  xD1,F
0866:  MOVFF  D1,D2
086A:  RCALL  0810
....................       lcd_send_nibble(n & 0xf); 
086C:  MOVF   xD0,W
086E:  ANDLW  0F
0870:  MOVWF  xD1
0872:  MOVWF  xD2
0874:  RCALL  0810
.................... } 
0876:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_d(LCD_WRITE); 
0878:  MOVLW  00
087A:  MOVWF  F95
....................     lcd.rs = 0; 
087C:  BCF    F83.1
....................     lcd.rw = 0; 
087E:  BCF    F83.2
....................     lcd.enable = 0; 
0880:  BCF    F83.3
....................     delay_ms(15); 
0882:  MOVLW  0F
0884:  MOVWF  xD1
0886:  RCALL  07E8
....................     for(i=1;i<=3;++i) { 
0888:  MOVLW  01
088A:  MOVWF  xBA
088C:  MOVF   xBA,W
088E:  SUBLW  03
0890:  BNC   08A2
....................        lcd_send_nibble(3); 
0892:  MOVLW  03
0894:  MOVWF  xD2
0896:  RCALL  0810
....................        delay_ms(5); 
0898:  MOVLW  05
089A:  MOVWF  xD1
089C:  RCALL  07E8
....................     } 
089E:  INCF   xBA,F
08A0:  BRA    088C
....................     lcd_send_nibble(2); 
08A2:  MOVLW  02
08A4:  MOVWF  xD2
08A6:  RCALL  0810
....................     for(i=0;i<=3;++i) 
08A8:  CLRF   xBA
08AA:  MOVF   xBA,W
08AC:  SUBLW  03
08AE:  BNC   08CE
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
08B0:  CLRF   03
08B2:  MOVF   xBA,W
08B4:  MOVFF  FF2,BB
08B8:  BCF    FF2.7
08BA:  CALL   0096
08BE:  BTFSC  xBB.7
08C0:  BSF    FF2.7
08C2:  MOVWF  xBB
08C4:  CLRF   xCF
08C6:  MOVWF  xD0
08C8:  RCALL  0836
08CA:  INCF   xBA,F
08CC:  BRA    08AA
.................... } 
08CE:  RETLW  00
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
*
08F6:  MOVLW  01
08F8:  SUBWF  xCD,W
08FA:  ADDLW  FC
08FC:  BC    091C
08FE:  ADDLW  04
0900:  GOTO   092C
....................      case 1 : address=0x80;break; 
0904:  MOVLW  80
0906:  MOVWF  xCE
0908:  BRA    091C
....................      case 2 : address=0xc0;break; 
090A:  MOVLW  C0
090C:  MOVWF  xCE
090E:  BRA    091C
....................      case 3 : address=0x94;break; 
0910:  MOVLW  94
0912:  MOVWF  xCE
0914:  BRA    091C
....................      case 4 : address=0xd4;break; 
0916:  MOVLW  D4
0918:  MOVWF  xCE
091A:  BRA    091C
....................    } 
....................    address+=x-1; 
091C:  MOVLW  01
091E:  SUBWF  xCC,W
0920:  ADDWF  xCE,F
....................    lcd_send_byte(0,address); 
0922:  CLRF   xCF
0924:  MOVFF  CE,D0
0928:  RCALL  0836
.................... } 
092A:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
....................    if(c=='ñ') 
*
0958:  MOVF   xCB,W
095A:  SUBLW  F1
095C:  BNZ   0962
....................    { 
....................       c=238; 
095E:  MOVLW  EE
0960:  MOVWF  xCB
....................    } 
....................    if(c=='Ñ') 
0962:  MOVF   xCB,W
0964:  SUBLW  D1
0966:  BNZ   096C
....................    { 
....................       c=255; 
0968:  MOVLW  FF
096A:  MOVWF  xCB
....................    } 
....................     
....................    switch (c) { 
096C:  MOVF   xCB,W
096E:  XORLW  0C
0970:  BZ    097C
0972:  XORLW  06
0974:  BZ    0990
0976:  XORLW  02
0978:  BZ    099E
097A:  BRA    09A8
....................      case '\f'   : lcd_send_byte(0,1); 
097C:  CLRF   xCF
097E:  MOVLW  01
0980:  MOVWF  xD0
0982:  RCALL  0836
....................                    lcdline=1; 
0984:  MOVLW  01
0986:  MOVWF  xB9
....................                    delay_ms(2); 
0988:  MOVLW  02
098A:  MOVWF  xD1
098C:  RCALL  07E8
....................                                            break; 
098E:  BRA    09B4
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
0990:  INCF   xB9,F
0992:  MOVLW  01
0994:  MOVWF  xCC
0996:  MOVFF  B9,CD
099A:  RCALL  08F6
099C:  BRA    09B4
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
099E:  CLRF   xCF
09A0:  MOVLW  10
09A2:  MOVWF  xD0
09A4:  RCALL  0836
09A6:  BRA    09B4
....................      default     : lcd_send_byte(1,c);     break; 
09A8:  MOVLW  01
09AA:  MOVWF  xCF
09AC:  MOVFF  CB,D0
09B0:  RCALL  0836
09B2:  BRA    09B4
....................    } 
.................... } 
09B4:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... #include <Funciones.h> 
.................... void VelocidadMotor(int8 Vel){ 
....................    if(Vel==6){ 
*
1056:  MOVF   xBA,W
1058:  SUBLW  06
105A:  BNZ   1066
....................       Motor_L1_on; 
105C:  BSF    F8B.2
105E:  BCF    F94.2
....................       Motor_L2_on; 
1060:  BSF    F8B.1
1062:  BCF    F94.1
....................    }else if(Vel==5){ 
1064:  BRA    10D8
1066:  MOVF   xBA,W
1068:  SUBLW  05
106A:  BNZ   107A
....................       Porcentaje=15; 
106C:  MOVLW  0F
106E:  MOVWF  xAF
....................       retardo=2000; 
1070:  MOVLW  07
1072:  MOVWF  xAB
1074:  MOVLW  D0
1076:  MOVWF  xAA
....................    }else if(Vel==4){ 
1078:  BRA    10D8
107A:  MOVF   xBA,W
107C:  SUBLW  04
107E:  BNZ   108E
....................       Porcentaje=25; 
1080:  MOVLW  19
1082:  MOVWF  xAF
....................       retardo=3000; 
1084:  MOVLW  0B
1086:  MOVWF  xAB
1088:  MOVLW  B8
108A:  MOVWF  xAA
....................    }else if(Vel==3){ 
108C:  BRA    10D8
108E:  MOVF   xBA,W
1090:  SUBLW  03
1092:  BNZ   10A2
....................       Porcentaje=35; 
1094:  MOVLW  23
1096:  MOVWF  xAF
....................       retardo=3600; 
1098:  MOVLW  0E
109A:  MOVWF  xAB
109C:  MOVLW  10
109E:  MOVWF  xAA
....................    }else if(Vel==2){ 
10A0:  BRA    10D8
10A2:  MOVF   xBA,W
10A4:  SUBLW  02
10A6:  BNZ   10B6
....................       Porcentaje=45; 
10A8:  MOVLW  2D
10AA:  MOVWF  xAF
....................       retardo=4300; 
10AC:  MOVLW  10
10AE:  MOVWF  xAB
10B0:  MOVLW  CC
10B2:  MOVWF  xAA
....................    }else if(Vel==1){ 
10B4:  BRA    10D8
10B6:  DECFSZ xBA,W
10B8:  BRA    10C8
....................       Porcentaje=50; 
10BA:  MOVLW  32
10BC:  MOVWF  xAF
....................       retardo=5000; 
10BE:  MOVLW  13
10C0:  MOVWF  xAB
10C2:  MOVLW  88
10C4:  MOVWF  xAA
....................    }else if(Vel==0){ 
10C6:  BRA    10D8
10C8:  MOVF   xBA,F
10CA:  BNZ   10D8
....................       Porcentaje=100; 
10CC:  MOVLW  64
10CE:  MOVWF  xAF
....................       Motor_L1_off; 
10D0:  BCF    F8B.2
10D2:  BCF    F94.2
....................       Motor_L2_off; 
10D4:  BCF    F8B.1
10D6:  BCF    F94.1
....................    } 
.................... } 
10D8:  RETLW  00
....................  
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {   
....................    if(x==1) 
*
11F0:  DECFSZ xBB,W
11F2:  BRA    120C
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Temporizador UV    ");} 
11F4:  MOVLW  02
11F6:  MOVWF  xCC
11F8:  MOVFF  BC,CD
11FC:  CALL   08F6
1200:  MOVLW  B4
1202:  MOVWF  FF6
1204:  MOVLW  00
1206:  MOVWF  FF7
1208:  CALL   09B6
....................    if(x==2) 
120C:  MOVF   xBB,W
120E:  SUBLW  02
1210:  BNZ   122A
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
1212:  MOVLW  02
1214:  MOVWF  xCC
1216:  MOVFF  BC,CD
121A:  CALL   08F6
121E:  MOVLW  C8
1220:  MOVWF  FF6
1222:  MOVLW  00
1224:  MOVWF  FF7
1226:  CALL   09B6
....................    if(x==3) 
122A:  MOVF   xBB,W
122C:  SUBLW  03
122E:  BNZ   1248
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo Trabajo UV  ");} 
1230:  MOVLW  02
1232:  MOVWF  xCC
1234:  MOVFF  BC,CD
1238:  CALL   08F6
123C:  MOVLW  DC
123E:  MOVWF  FF6
1240:  MOVLW  00
1242:  MOVWF  FF7
1244:  CALL   09B6
....................    if(x==4) 
1248:  MOVF   xBB,W
124A:  SUBLW  04
124C:  BNZ   1266
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Punto Cero         ");} 
124E:  MOVLW  02
1250:  MOVWF  xCC
1252:  MOVFF  BC,CD
1256:  CALL   08F6
125A:  MOVLW  F0
125C:  MOVWF  FF6
125E:  MOVLW  00
1260:  MOVWF  FF7
1262:  CALL   09B6
....................     
....................    if(x==5) 
1266:  MOVF   xBB,W
1268:  SUBLW  05
126A:  BNZ   12A4
....................    {if(estadoalarma==0) 
126C:  BTFSC  17.4
126E:  BRA    1288
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma          OFF");} 
1270:  MOVLW  02
1272:  MOVWF  xCC
1274:  MOVFF  BC,CD
1278:  CALL   08F6
127C:  MOVLW  04
127E:  MOVWF  FF6
1280:  MOVLW  01
1282:  MOVWF  FF7
1284:  CALL   09B6
....................    if(estadoalarma==1) 
1288:  BTFSS  17.4
128A:  BRA    12A4
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma           ON");} 
128C:  MOVLW  02
128E:  MOVWF  xCC
1290:  MOVFF  BC,CD
1294:  CALL   08F6
1298:  MOVLW  18
129A:  MOVWF  FF6
129C:  MOVLW  01
129E:  MOVWF  FF7
12A0:  CALL   09B6
....................    } 
....................     
....................    if(x==6) 
12A4:  MOVF   xBB,W
12A6:  SUBLW  06
12A8:  BNZ   12C2
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Velocidad          ");} 
12AA:  MOVLW  02
12AC:  MOVWF  xCC
12AE:  MOVFF  BC,CD
12B2:  CALL   08F6
12B6:  MOVLW  2C
12B8:  MOVWF  FF6
12BA:  MOVLW  01
12BC:  MOVWF  FF7
12BE:  CALL   09B6
.................... } 
12C2:  RETLW  00
....................  
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
13E6:  RLCF   xBF,W
13E8:  MOVWF  00
13EA:  RLCF   00,F
13EC:  MOVLW  FC
13EE:  ANDWF  00,F
13F0:  MOVFF  00,01
13F4:  MOVF   FC2,W
13F6:  ANDLW  C3
13F8:  IORWF  00,W
13FA:  MOVWF  FC2
13FC:  MOVLW  0A
13FE:  MOVWF  xD1
1400:  CALL   07E8
1404:  BSF    FC2.1
1406:  BTFSC  FC2.1
1408:  BRA    1406
140A:  MOVFF  FC4,03
140E:  MOVFF  FC3,D2
1412:  MOVFF  FC4,D3
1416:  CALL   0A3C
141A:  MOVFF  03,C3
141E:  MOVFF  02,C2
1422:  MOVFF  01,C1
1426:  MOVFF  00,C0
142A:  MOVFF  C0,00
142E:  MOVFF  C1,01
1432:  MOVFF  C2,02
1436:  MOVFF  C3,03
.................... } 
143A:  RETLW  00
....................  
.................... float Leer_Sensor_Presion(int media){ 
*
1800:  CLRF   xBE
1802:  CLRF   xBD
1804:  CLRF   xBC
1806:  CLRF   xBB
....................    float promediopresion=0.0; 
....................     
....................    V1=sensores(0);  
1808:  CLRF   xBF
180A:  RCALL  13E6
180C:  MOVFF  03,97
1810:  MOVFF  02,96
1814:  MOVFF  01,95
1818:  MOVFF  00,94
....................    //V1 = (x_uno*5.0)/1023.0;   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
....................    Presion=(V1/G)-1.0;// Presion=(Voltaje/Ganancia)-1 
181C:  MOVFF  97,D1
1820:  MOVFF  96,D0
1824:  MOVFF  95,CF
1828:  MOVFF  94,CE
182C:  MOVFF  A7,D5
1830:  MOVFF  A6,D4
1834:  MOVFF  A5,D3
1838:  MOVFF  A4,D2
183C:  RCALL  143C
183E:  MOVFF  00,BF
1842:  MOVFF  01,C0
1846:  MOVFF  02,C1
184A:  MOVFF  03,C2
184E:  BSF    FD8.1
1850:  MOVFF  03,D5
1854:  MOVFF  02,D4
1858:  MOVFF  01,D3
185C:  MOVFF  00,D2
1860:  CLRF   xD9
1862:  CLRF   xD8
1864:  CLRF   xD7
1866:  MOVLW  7F
1868:  MOVWF  xD6
186A:  RCALL  1596
186C:  MOVFF  03,9B
1870:  MOVFF  02,9A
1874:  MOVFF  01,99
1878:  MOVFF  00,98
....................     
....................    if(Presion<0.0) 
187C:  MOVFF  9B,D1
1880:  MOVFF  9A,D0
1884:  MOVFF  99,CF
1888:  MOVFF  98,CE
188C:  CLRF   xD5
188E:  CLRF   xD4
1890:  CLRF   xD3
1892:  CLRF   xD2
1894:  CALL   0C50
1898:  BNC   18A2
....................    { 
....................       Presion=0.0; 
189A:  CLRF   x9B
189C:  CLRF   x9A
189E:  CLRF   x99
18A0:  CLRF   x98
....................    } 
....................  
....................    if(r>media-1) 
18A2:  MOVLW  01
18A4:  SUBWF  xBA,W
18A6:  SUBWF  2B,W
18A8:  BZ    18AE
18AA:  BNC   18AE
....................    {r=0;} 
18AC:  CLRF   2B
....................    PromPresion[r]=Presion;r++; 
18AE:  MOVF   2B,W
18B0:  MULLW  04
18B2:  MOVF   FF3,W
18B4:  CLRF   03
18B6:  ADDLW  44
18B8:  MOVWF  FE9
18BA:  MOVLW  00
18BC:  ADDWFC 03,W
18BE:  MOVWF  FEA
18C0:  MOVFF  98,FEF
18C4:  MOVFF  99,FEC
18C8:  MOVFF  9A,FEC
18CC:  MOVFF  9B,FEC
18D0:  INCF   2B,F
....................           
....................    for(q=0;q<=(media-1);q++) 
18D2:  CLRF   2C
18D4:  MOVLW  01
18D6:  SUBWF  xBA,W
18D8:  SUBWF  2C,W
18DA:  BZ    18DE
18DC:  BC    1948
....................    { 
....................       promediopresion+=PromPresion[q]; 
18DE:  MOVF   2C,W
18E0:  MULLW  04
18E2:  MOVF   FF3,W
18E4:  CLRF   03
18E6:  ADDLW  44
18E8:  MOVWF  FE9
18EA:  MOVLW  00
18EC:  ADDWFC 03,W
18EE:  MOVWF  FEA
18F0:  MOVFF  FEF,00
18F4:  MOVFF  FEC,01
18F8:  MOVFF  FEC,02
18FC:  MOVFF  FEC,03
1900:  MOVFF  FEA,C0
1904:  MOVFF  FE9,BF
1908:  BCF    FD8.1
190A:  MOVFF  BE,D5
190E:  MOVFF  BD,D4
1912:  MOVFF  BC,D3
1916:  MOVFF  BB,D2
191A:  MOVFF  03,D9
191E:  MOVFF  02,D8
1922:  MOVFF  01,D7
1926:  MOVFF  00,D6
192A:  RCALL  1596
192C:  MOVFF  C0,FEA
1930:  MOVFF  BF,FE9
1934:  MOVFF  03,BE
1938:  MOVFF  02,BD
193C:  MOVFF  01,BC
1940:  MOVFF  00,BB
....................    }  
1944:  INCF   2C,F
1946:  BRA    18D4
....................    promediopresion=promediopresion/media;    
1948:  CLRF   xD3
194A:  MOVFF  BA,D2
194E:  CALL   0A3C
1952:  MOVFF  BE,D1
1956:  MOVFF  BD,D0
195A:  MOVFF  BC,CF
195E:  MOVFF  BB,CE
1962:  MOVFF  03,D5
1966:  MOVFF  02,D4
196A:  MOVFF  01,D3
196E:  MOVFF  00,D2
1972:  RCALL  143C
1974:  MOVFF  03,BE
1978:  MOVFF  02,BD
197C:  MOVFF  01,BC
1980:  MOVFF  00,BB
....................     
....................    return promediopresion; 
1984:  MOVFF  BB,00
1988:  MOVFF  BC,01
198C:  MOVFF  BD,02
1990:  MOVFF  BE,03
.................... } 
1994:  RETLW  00
....................  
.................... void EliminaRuido(void){ 
....................    /*if(Menu==50){ 
....................       dato[0]=lcd_getc(1,2); 
....................       dato[1]=lcd_getc(2,2); 
....................       dato[2]=lcd_getc(3,2); 
....................       if(dato[0]!=70 || dato[1]!=105 || dato[2]!=108){ 
....................          lcd_init();delay_ms(200);lcd_init(); 
....................          Cambio=ON; 
....................       } 
....................    }*/ 
.................... } 
*
0004:  RETLW  00
....................  
.................... void ConfigInterrupciones (void){ 
....................    lcd_init(); 
*
08D0:  RCALL  0878
....................    set_tris_a(0XFF); 
08D2:  MOVLW  FF
08D4:  MOVWF  F92
....................    set_tris_e(0XFF); 
08D6:  MOVWF  F96
....................    enable_interrupts(INT_EXT_L2H); 
08D8:  BSF    FF2.4
08DA:  BSF    FF1.6
....................    setup_adc_ports(AN0); 
08DC:  MOVF   FC1,W
08DE:  ANDLW  C0
08E0:  IORLW  0E
08E2:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
08E4:  BCF    FC0.0
08E6:  BSF    FC0.1
08E8:  BCF    FC0.2
08EA:  BSF    FC0.7
08EC:  BSF    FC2.0
....................    enable_interrupts(global); 
08EE:  MOVLW  C0
08F0:  IORWF  FF2,F
.................... } 
08F2:  GOTO   21E0 (RETURN)
....................  
.................... void MensajeBienvenida (void){ 
....................    lcd_gotoxy(1,1); 
*
09D6:  MOVLW  01
09D8:  MOVWF  xCC
09DA:  MOVWF  xCD
09DC:  RCALL  08F6
....................    printf(lcd_putc,"CABINA FLUJO LAMINAR"); 
09DE:  MOVLW  40
09E0:  MOVWF  FF6
09E2:  MOVLW  01
09E4:  MOVWF  FF7
09E6:  RCALL  09B6
....................    lcd_gotoxy(1,2); 
09E8:  MOVLW  01
09EA:  MOVWF  xCC
09EC:  MOVLW  02
09EE:  MOVWF  xCD
09F0:  RCALL  08F6
....................    printf(lcd_putc,"     HORIZONTAL     "); 
09F2:  MOVLW  56
09F4:  MOVWF  FF6
09F6:  MOVLW  01
09F8:  MOVWF  FF7
09FA:  RCALL  09B6
....................    lcd_gotoxy(1,3); 
09FC:  MOVLW  01
09FE:  MOVWF  xCC
0A00:  MOVLW  03
0A02:  MOVWF  xCD
0A04:  RCALL  08F6
....................    printf(lcd_putc,"    JP  INGLOBAL    "); 
0A06:  MOVLW  6C
0A08:  MOVWF  FF6
0A0A:  MOVLW  01
0A0C:  MOVWF  FF7
0A0E:  RCALL  09B6
....................    lcd_gotoxy(1,4); 
0A10:  MOVLW  01
0A12:  MOVWF  xCC
0A14:  MOVLW  04
0A16:  MOVWF  xCD
0A18:  RCALL  08F6
....................    printf(lcd_putc,"     REF:JPCH48     "); 
0A1A:  MOVLW  82
0A1C:  MOVWF  FF6
0A1E:  MOVLW  01
0A20:  MOVWF  FF7
0A22:  RCALL  09B6
....................    delay_ms(2000); 
0A24:  MOVLW  08
0A26:  MOVWF  xBA
0A28:  MOVLW  FA
0A2A:  MOVWF  xD1
0A2C:  RCALL  07E8
0A2E:  DECFSZ xBA,F
0A30:  BRA    0A28
....................    printf(lcd_putc,"\f"); 
0A32:  MOVLW  0C
0A34:  MOVWF  xCB
0A36:  RCALL  0958
.................... } 
0A38:  GOTO   21E4 (RETURN)
....................  
.................... void LeeEEPROM (void){ 
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0); 
*
0A72:  MOVFF  FF2,BA
0A76:  BCF    FF2.7
0A78:  CLRF   FA9
0A7A:  BCF    FA6.6
0A7C:  BCF    FA6.7
0A7E:  BSF    FA6.0
0A80:  MOVF   FA8,W
0A82:  BTFSC  xBA.7
0A84:  BSF    FF2.7
0A86:  MOVWF  39
....................    delay_ms(20);  
0A88:  MOVLW  14
0A8A:  MOVWF  xD1
0A8C:  RCALL  07E8
....................    contrasena[1]=read_eeprom(1); 
0A8E:  MOVFF  FF2,BA
0A92:  BCF    FF2.7
0A94:  MOVLW  01
0A96:  MOVWF  FA9
0A98:  BCF    FA6.6
0A9A:  BCF    FA6.7
0A9C:  BSF    FA6.0
0A9E:  MOVF   FA8,W
0AA0:  BTFSC  xBA.7
0AA2:  BSF    FF2.7
0AA4:  MOVWF  3A
....................    delay_ms(20); 
0AA6:  MOVLW  14
0AA8:  MOVWF  xD1
0AAA:  RCALL  07E8
....................    contrasena[2]=read_eeprom(2); 
0AAC:  MOVFF  FF2,BA
0AB0:  BCF    FF2.7
0AB2:  MOVLW  02
0AB4:  MOVWF  FA9
0AB6:  BCF    FA6.6
0AB8:  BCF    FA6.7
0ABA:  BSF    FA6.0
0ABC:  MOVF   FA8,W
0ABE:  BTFSC  xBA.7
0AC0:  BSF    FF2.7
0AC2:  MOVWF  3B
....................    delay_ms(20);  
0AC4:  MOVLW  14
0AC6:  MOVWF  xD1
0AC8:  RCALL  07E8
....................    contrasena[3]=read_eeprom(3); 
0ACA:  MOVFF  FF2,BA
0ACE:  BCF    FF2.7
0AD0:  MOVLW  03
0AD2:  MOVWF  FA9
0AD4:  BCF    FA6.6
0AD6:  BCF    FA6.7
0AD8:  BSF    FA6.0
0ADA:  MOVF   FA8,W
0ADC:  BTFSC  xBA.7
0ADE:  BSF    FF2.7
0AE0:  MOVWF  3C
....................    delay_ms(20); 
0AE2:  MOVLW  14
0AE4:  MOVWF  xD1
0AE6:  RCALL  07E8
....................    estadoalarma=read_eeprom(4); 
0AE8:  MOVFF  FF2,BA
0AEC:  BCF    FF2.7
0AEE:  MOVLW  04
0AF0:  MOVWF  FA9
0AF2:  BCF    FA6.6
0AF4:  BCF    FA6.7
0AF6:  BSF    FA6.0
0AF8:  MOVF   FA8,W
0AFA:  BTFSC  xBA.7
0AFC:  BSF    FF2.7
0AFE:  MOVWF  01
0B00:  BCF    17.4
0B02:  BTFSC  01.0
0B04:  BSF    17.4
....................    delay_ms(20); 
0B06:  MOVLW  14
0B08:  MOVWF  xD1
0B0A:  RCALL  07E8
....................    tempo_minutos=read_eeprom(5); 
0B0C:  MOVFF  FF2,BA
0B10:  BCF    FF2.7
0B12:  MOVLW  05
0B14:  MOVWF  FA9
0B16:  BCF    FA6.6
0B18:  BCF    FA6.7
0B1A:  BSF    FA6.0
0B1C:  MOVF   FA8,W
0B1E:  BTFSC  xBA.7
0B20:  BSF    FF2.7
0B22:  MOVWF  27
....................    delay_ms(20); 
0B24:  MOVLW  14
0B26:  MOVWF  xD1
0B28:  RCALL  07E8
....................    tempo_segundos=read_eeprom(6); 
0B2A:  MOVFF  FF2,BA
0B2E:  BCF    FF2.7
0B30:  MOVLW  06
0B32:  MOVWF  FA9
0B34:  BCF    FA6.6
0B36:  BCF    FA6.7
0B38:  BSF    FA6.0
0B3A:  MOVF   FA8,W
0B3C:  BTFSC  xBA.7
0B3E:  BSF    FF2.7
0B40:  MOVWF  28
....................    delay_ms(20); 
0B42:  MOVLW  14
0B44:  MOVWF  xD1
0B46:  RCALL  07E8
....................    segundos=read_eeprom(7); 
0B48:  MOVFF  FF2,BA
0B4C:  BCF    FF2.7
0B4E:  MOVLW  07
0B50:  MOVWF  FA9
0B52:  BCF    FA6.6
0B54:  BCF    FA6.7
0B56:  BSF    FA6.0
0B58:  MOVF   FA8,W
0B5A:  BTFSC  xBA.7
0B5C:  BSF    FF2.7
0B5E:  MOVWF  21
....................    delay_ms(20); 
0B60:  MOVLW  14
0B62:  MOVWF  xD1
0B64:  RCALL  07E8
....................    minutos=read_eeprom(8); 
0B66:  MOVFF  FF2,BA
0B6A:  BCF    FF2.7
0B6C:  MOVLW  08
0B6E:  MOVWF  FA9
0B70:  BCF    FA6.6
0B72:  BCF    FA6.7
0B74:  BSF    FA6.0
0B76:  MOVF   FA8,W
0B78:  BTFSC  xBA.7
0B7A:  BSF    FF2.7
0B7C:  MOVWF  22
....................    delay_ms(20); 
0B7E:  MOVLW  14
0B80:  MOVWF  xD1
0B82:  RCALL  07E8
....................    horasL=read_eeprom(9); 
0B84:  MOVFF  FF2,BA
0B88:  BCF    FF2.7
0B8A:  MOVLW  09
0B8C:  MOVWF  FA9
0B8E:  BCF    FA6.6
0B90:  BCF    FA6.7
0B92:  BSF    FA6.0
0B94:  MOVF   FA8,W
0B96:  BTFSC  xBA.7
0B98:  BSF    FF2.7
0B9A:  MOVWF  23
....................    delay_ms(20); 
0B9C:  MOVLW  14
0B9E:  MOVWF  xD1
0BA0:  RCALL  07E8
....................    horasH=read_eeprom(10); 
0BA2:  MOVFF  FF2,BA
0BA6:  BCF    FF2.7
0BA8:  MOVLW  0A
0BAA:  MOVWF  FA9
0BAC:  BCF    FA6.6
0BAE:  BCF    FA6.7
0BB0:  BSF    FA6.0
0BB2:  MOVF   FA8,W
0BB4:  BTFSC  xBA.7
0BB6:  BSF    FF2.7
0BB8:  MOVWF  24
....................    delay_ms(20); 
0BBA:  MOVLW  14
0BBC:  MOVWF  xD1
0BBE:  RCALL  07E8
....................    G_l=read_eeprom(11); 
0BC0:  MOVFF  FF2,BA
0BC4:  BCF    FF2.7
0BC6:  MOVLW  0B
0BC8:  MOVWF  FA9
0BCA:  BCF    FA6.6
0BCC:  BCF    FA6.7
0BCE:  BSF    FA6.0
0BD0:  MOVF   FA8,W
0BD2:  BTFSC  xBA.7
0BD4:  BSF    FF2.7
0BD6:  MOVWF  25
....................    delay_ms(20); 
0BD8:  MOVLW  14
0BDA:  MOVWF  xD1
0BDC:  RCALL  07E8
....................    G_h=read_eeprom(12); 
0BDE:  MOVFF  FF2,BA
0BE2:  BCF    FF2.7
0BE4:  MOVLW  0C
0BE6:  MOVWF  FA9
0BE8:  BCF    FA6.6
0BEA:  BCF    FA6.7
0BEC:  BSF    FA6.0
0BEE:  MOVF   FA8,W
0BF0:  BTFSC  xBA.7
0BF2:  BSF    FF2.7
0BF4:  MOVWF  26
....................    delay_ms(20); 
0BF6:  MOVLW  14
0BF8:  MOVWF  xD1
0BFA:  RCALL  07E8
....................    VelMotor=read_eeprom(13); 
0BFC:  MOVFF  FF2,BA
0C00:  BCF    FF2.7
0C02:  MOVLW  0D
0C04:  MOVWF  FA9
0C06:  BCF    FA6.6
0C08:  BCF    FA6.7
0C0A:  BSF    FA6.0
0C0C:  MOVF   FA8,W
0C0E:  BTFSC  xBA.7
0C10:  BSF    FF2.7
0C12:  MOVWF  xB0
....................    delay_ms(20); 
0C14:  MOVLW  14
0C16:  MOVWF  xD1
0C18:  RCALL  07E8
....................    G16=make16(G_h,G_l); 
0C1A:  MOVFF  26,43
0C1E:  MOVFF  25,42
....................    G=G16; 
0C22:  MOVFF  43,D3
0C26:  MOVFF  42,D2
0C2A:  RCALL  0A3C
0C2C:  MOVFF  03,A7
0C30:  MOVFF  02,A6
0C34:  MOVFF  01,A5
0C38:  MOVFF  00,A4
....................    horas=make16(horasH,horasL); 
0C3C:  MOVFF  24,41
0C40:  MOVFF  23,40
....................    tempo_minutos_pro=tempo_minutos;tempo_segundos_pro=tempo_segundos; 
0C44:  MOVFF  27,29
0C48:  MOVFF  28,2A
.................... } 
0C4C:  GOTO   21E8 (RETURN)
....................  
.................... void LimitaValores(void){ 
....................     
....................    if(Contrasena[0]>9 || Contrasena[0]<0){ 
*
0CC6:  BTFSC  39.7
0CC8:  BRA    0CD0
0CCA:  MOVF   39,W
0CCC:  SUBLW  09
0CCE:  BNC   0CD6
0CD0:  BTFSC  39.7
0CD2:  BRA    0CD6
0CD4:  BRA    0D06
....................       Contrasena[0]=0;write_eeprom(0,0);delay_ms(20); 
0CD6:  CLRF   39
0CD8:  CLRF   FA9
0CDA:  CLRF   FA8
0CDC:  BCF    FA6.6
0CDE:  BCF    FA6.7
0CE0:  BSF    FA6.2
0CE2:  MOVF   FF2,W
0CE4:  MOVWF  00
0CE6:  BCF    FF2.7
0CE8:  MOVLB  F
0CEA:  MOVLW  55
0CEC:  MOVWF  FA7
0CEE:  MOVLW  AA
0CF0:  MOVWF  FA7
0CF2:  BSF    FA6.1
0CF4:  BTFSC  FA6.1
0CF6:  BRA    0CF4
0CF8:  BCF    FA6.2
0CFA:  MOVF   00,W
0CFC:  IORWF  FF2,F
0CFE:  MOVLW  14
0D00:  MOVLB  0
0D02:  MOVWF  xD1
0D04:  RCALL  07E8
....................    } 
....................    if(Contrasena[1]>9 || Contrasena[1]<0){ 
0D06:  BTFSC  3A.7
0D08:  BRA    0D10
0D0A:  MOVF   3A,W
0D0C:  SUBLW  09
0D0E:  BNC   0D16
0D10:  BTFSC  3A.7
0D12:  BRA    0D16
0D14:  BRA    0D48
....................       Contrasena[1]=0;write_eeprom(1,0);delay_ms(20); 
0D16:  CLRF   3A
0D18:  MOVLW  01
0D1A:  MOVWF  FA9
0D1C:  CLRF   FA8
0D1E:  BCF    FA6.6
0D20:  BCF    FA6.7
0D22:  BSF    FA6.2
0D24:  MOVF   FF2,W
0D26:  MOVWF  00
0D28:  BCF    FF2.7
0D2A:  MOVLB  F
0D2C:  MOVLW  55
0D2E:  MOVWF  FA7
0D30:  MOVLW  AA
0D32:  MOVWF  FA7
0D34:  BSF    FA6.1
0D36:  BTFSC  FA6.1
0D38:  BRA    0D36
0D3A:  BCF    FA6.2
0D3C:  MOVF   00,W
0D3E:  IORWF  FF2,F
0D40:  MOVLW  14
0D42:  MOVLB  0
0D44:  MOVWF  xD1
0D46:  RCALL  07E8
....................    } 
....................    if(Contrasena[2]>9 || Contrasena[2]<0){ 
0D48:  BTFSC  3B.7
0D4A:  BRA    0D52
0D4C:  MOVF   3B,W
0D4E:  SUBLW  09
0D50:  BNC   0D58
0D52:  BTFSC  3B.7
0D54:  BRA    0D58
0D56:  BRA    0D8A
....................       Contrasena[2]=0;write_eeprom(2,0);delay_ms(20); 
0D58:  CLRF   3B
0D5A:  MOVLW  02
0D5C:  MOVWF  FA9
0D5E:  CLRF   FA8
0D60:  BCF    FA6.6
0D62:  BCF    FA6.7
0D64:  BSF    FA6.2
0D66:  MOVF   FF2,W
0D68:  MOVWF  00
0D6A:  BCF    FF2.7
0D6C:  MOVLB  F
0D6E:  MOVLW  55
0D70:  MOVWF  FA7
0D72:  MOVLW  AA
0D74:  MOVWF  FA7
0D76:  BSF    FA6.1
0D78:  BTFSC  FA6.1
0D7A:  BRA    0D78
0D7C:  BCF    FA6.2
0D7E:  MOVF   00,W
0D80:  IORWF  FF2,F
0D82:  MOVLW  14
0D84:  MOVLB  0
0D86:  MOVWF  xD1
0D88:  RCALL  07E8
....................    } 
....................    if(Contrasena[3]>9 || Contrasena[3]<0){ 
0D8A:  BTFSC  3C.7
0D8C:  BRA    0D94
0D8E:  MOVF   3C,W
0D90:  SUBLW  09
0D92:  BNC   0D9A
0D94:  BTFSC  3C.7
0D96:  BRA    0D9A
0D98:  BRA    0DCC
....................       Contrasena[3]=0;write_eeprom(3,0);delay_ms(20); 
0D9A:  CLRF   3C
0D9C:  MOVLW  03
0D9E:  MOVWF  FA9
0DA0:  CLRF   FA8
0DA2:  BCF    FA6.6
0DA4:  BCF    FA6.7
0DA6:  BSF    FA6.2
0DA8:  MOVF   FF2,W
0DAA:  MOVWF  00
0DAC:  BCF    FF2.7
0DAE:  MOVLB  F
0DB0:  MOVLW  55
0DB2:  MOVWF  FA7
0DB4:  MOVLW  AA
0DB6:  MOVWF  FA7
0DB8:  BSF    FA6.1
0DBA:  BTFSC  FA6.1
0DBC:  BRA    0DBA
0DBE:  BCF    FA6.2
0DC0:  MOVF   00,W
0DC2:  IORWF  FF2,F
0DC4:  MOVLW  14
0DC6:  MOVLB  0
0DC8:  MOVWF  xD1
0DCA:  RCALL  07E8
....................    } 
....................    if(estadoalarma>1){ 
0DCC:  MOVLW  00
0DCE:  BTFSC  17.4
0DD0:  MOVLW  01
0DD2:  SUBLW  01
0DD4:  BC    0E0A
....................       estadoalarma=1;write_eeprom(4,1);delay_ms(20); 
0DD6:  BSF    17.4
0DD8:  MOVLW  04
0DDA:  MOVWF  FA9
0DDC:  MOVLW  01
0DDE:  MOVWF  FA8
0DE0:  BCF    FA6.6
0DE2:  BCF    FA6.7
0DE4:  BSF    FA6.2
0DE6:  MOVF   FF2,W
0DE8:  MOVWF  00
0DEA:  BCF    FF2.7
0DEC:  MOVLB  F
0DEE:  MOVLW  55
0DF0:  MOVWF  FA7
0DF2:  MOVLW  AA
0DF4:  MOVWF  FA7
0DF6:  BSF    FA6.1
0DF8:  BTFSC  FA6.1
0DFA:  BRA    0DF8
0DFC:  BCF    FA6.2
0DFE:  MOVF   00,W
0E00:  IORWF  FF2,F
0E02:  MOVLW  14
0E04:  MOVLB  0
0E06:  MOVWF  xD1
0E08:  RCALL  07E8
....................    } 
....................    if(tempo_minutos>200){ 
0E0A:  MOVF   27,W
0E0C:  SUBLW  C8
0E0E:  BC    0E46
....................       tempo_minutos=20;write_eeprom(5,20);delay_ms(20); 
0E10:  MOVLW  14
0E12:  MOVWF  27
0E14:  MOVLW  05
0E16:  MOVWF  FA9
0E18:  MOVLW  14
0E1A:  MOVWF  FA8
0E1C:  BCF    FA6.6
0E1E:  BCF    FA6.7
0E20:  BSF    FA6.2
0E22:  MOVF   FF2,W
0E24:  MOVWF  00
0E26:  BCF    FF2.7
0E28:  MOVLB  F
0E2A:  MOVLW  55
0E2C:  MOVWF  FA7
0E2E:  MOVLW  AA
0E30:  MOVWF  FA7
0E32:  BSF    FA6.1
0E34:  BTFSC  FA6.1
0E36:  BRA    0E34
0E38:  BCF    FA6.2
0E3A:  MOVF   00,W
0E3C:  IORWF  FF2,F
0E3E:  MOVLW  14
0E40:  MOVLB  0
0E42:  MOVWF  xD1
0E44:  RCALL  07E8
....................    } 
....................    if(tempo_segundos>59){ 
0E46:  MOVF   28,W
0E48:  SUBLW  3B
0E4A:  BC    0E7E
....................       tempo_segundos=0;write_eeprom(6,0);delay_ms(20); 
0E4C:  CLRF   28
0E4E:  MOVLW  06
0E50:  MOVWF  FA9
0E52:  CLRF   FA8
0E54:  BCF    FA6.6
0E56:  BCF    FA6.7
0E58:  BSF    FA6.2
0E5A:  MOVF   FF2,W
0E5C:  MOVWF  00
0E5E:  BCF    FF2.7
0E60:  MOVLB  F
0E62:  MOVLW  55
0E64:  MOVWF  FA7
0E66:  MOVLW  AA
0E68:  MOVWF  FA7
0E6A:  BSF    FA6.1
0E6C:  BTFSC  FA6.1
0E6E:  BRA    0E6C
0E70:  BCF    FA6.2
0E72:  MOVF   00,W
0E74:  IORWF  FF2,F
0E76:  MOVLW  14
0E78:  MOVLB  0
0E7A:  MOVWF  xD1
0E7C:  RCALL  07E8
....................    } 
....................    if(segundos>60){ 
0E7E:  MOVF   21,W
0E80:  SUBLW  3C
0E82:  BC    0EB6
....................       segundos=0;write_eeprom(7,0);delay_ms(20); 
0E84:  CLRF   21
0E86:  MOVLW  07
0E88:  MOVWF  FA9
0E8A:  CLRF   FA8
0E8C:  BCF    FA6.6
0E8E:  BCF    FA6.7
0E90:  BSF    FA6.2
0E92:  MOVF   FF2,W
0E94:  MOVWF  00
0E96:  BCF    FF2.7
0E98:  MOVLB  F
0E9A:  MOVLW  55
0E9C:  MOVWF  FA7
0E9E:  MOVLW  AA
0EA0:  MOVWF  FA7
0EA2:  BSF    FA6.1
0EA4:  BTFSC  FA6.1
0EA6:  BRA    0EA4
0EA8:  BCF    FA6.2
0EAA:  MOVF   00,W
0EAC:  IORWF  FF2,F
0EAE:  MOVLW  14
0EB0:  MOVLB  0
0EB2:  MOVWF  xD1
0EB4:  RCALL  07E8
....................    } 
....................    if(minutos>60){ 
0EB6:  MOVF   22,W
0EB8:  SUBLW  3C
0EBA:  BC    0EEE
....................       minutos=0;write_eeprom(8,0);delay_ms(20); 
0EBC:  CLRF   22
0EBE:  MOVLW  08
0EC0:  MOVWF  FA9
0EC2:  CLRF   FA8
0EC4:  BCF    FA6.6
0EC6:  BCF    FA6.7
0EC8:  BSF    FA6.2
0ECA:  MOVF   FF2,W
0ECC:  MOVWF  00
0ECE:  BCF    FF2.7
0ED0:  MOVLB  F
0ED2:  MOVLW  55
0ED4:  MOVWF  FA7
0ED6:  MOVLW  AA
0ED8:  MOVWF  FA7
0EDA:  BSF    FA6.1
0EDC:  BTFSC  FA6.1
0EDE:  BRA    0EDC
0EE0:  BCF    FA6.2
0EE2:  MOVF   00,W
0EE4:  IORWF  FF2,F
0EE6:  MOVLW  14
0EE8:  MOVLB  0
0EEA:  MOVWF  xD1
0EEC:  RCALL  07E8
....................    } 
....................    if(horas>10000){ 
0EEE:  MOVF   41,W
0EF0:  SUBLW  26
0EF2:  BC    0F64
0EF4:  XORLW  FF
0EF6:  BNZ   0EFE
0EF8:  MOVF   40,W
0EFA:  SUBLW  10
0EFC:  BC    0F64
....................       horas=0;write_eeprom(9,10);delay_ms(20);write_eeprom(10,0);delay_ms(20); 
0EFE:  CLRF   41
0F00:  CLRF   40
0F02:  MOVLW  09
0F04:  MOVWF  FA9
0F06:  MOVLW  0A
0F08:  MOVWF  FA8
0F0A:  BCF    FA6.6
0F0C:  BCF    FA6.7
0F0E:  BSF    FA6.2
0F10:  MOVF   FF2,W
0F12:  MOVWF  00
0F14:  BCF    FF2.7
0F16:  MOVLB  F
0F18:  MOVLW  55
0F1A:  MOVWF  FA7
0F1C:  MOVLW  AA
0F1E:  MOVWF  FA7
0F20:  BSF    FA6.1
0F22:  BTFSC  FA6.1
0F24:  BRA    0F22
0F26:  BCF    FA6.2
0F28:  MOVF   00,W
0F2A:  IORWF  FF2,F
0F2C:  MOVLW  14
0F2E:  MOVLB  0
0F30:  MOVWF  xD1
0F32:  RCALL  07E8
0F34:  MOVLW  0A
0F36:  MOVWF  FA9
0F38:  CLRF   FA8
0F3A:  BCF    FA6.6
0F3C:  BCF    FA6.7
0F3E:  BSF    FA6.2
0F40:  MOVF   FF2,W
0F42:  MOVWF  00
0F44:  BCF    FF2.7
0F46:  MOVLB  F
0F48:  MOVLW  55
0F4A:  MOVWF  FA7
0F4C:  MOVLW  AA
0F4E:  MOVWF  FA7
0F50:  BSF    FA6.1
0F52:  BTFSC  FA6.1
0F54:  BRA    0F52
0F56:  BCF    FA6.2
0F58:  MOVF   00,W
0F5A:  IORWF  FF2,F
0F5C:  MOVLW  14
0F5E:  MOVLB  0
0F60:  MOVWF  xD1
0F62:  RCALL  07E8
....................    } 
....................    if(G>300 || G<200){ 
0F64:  CLRF   xD1
0F66:  CLRF   xD0
0F68:  MOVLW  16
0F6A:  MOVWF  xCF
0F6C:  MOVLW  87
0F6E:  MOVWF  xCE
0F70:  MOVFF  A7,D5
0F74:  MOVFF  A6,D4
0F78:  MOVFF  A5,D3
0F7C:  MOVFF  A4,D2
0F80:  RCALL  0C50
0F82:  BC    0FA4
0F84:  MOVFF  A7,D1
0F88:  MOVFF  A6,D0
0F8C:  MOVFF  A5,CF
0F90:  MOVFF  A4,CE
0F94:  CLRF   xD5
0F96:  CLRF   xD4
0F98:  MOVLW  48
0F9A:  MOVWF  xD3
0F9C:  MOVLW  86
0F9E:  MOVWF  xD2
0FA0:  RCALL  0C50
0FA2:  BNC   1014
....................       G=240;write_eeprom(11,240);delay_ms(20);write_eeprom(12,0);delay_ms(20); 
0FA4:  CLRF   xA7
0FA6:  CLRF   xA6
0FA8:  MOVLW  70
0FAA:  MOVWF  xA5
0FAC:  MOVLW  86
0FAE:  MOVWF  xA4
0FB0:  MOVLW  0B
0FB2:  MOVWF  FA9
0FB4:  MOVLW  F0
0FB6:  MOVWF  FA8
0FB8:  BCF    FA6.6
0FBA:  BCF    FA6.7
0FBC:  BSF    FA6.2
0FBE:  MOVF   FF2,W
0FC0:  MOVWF  00
0FC2:  BCF    FF2.7
0FC4:  MOVLB  F
0FC6:  MOVLW  55
0FC8:  MOVWF  FA7
0FCA:  MOVLW  AA
0FCC:  MOVWF  FA7
0FCE:  BSF    FA6.1
0FD0:  BTFSC  FA6.1
0FD2:  BRA    0FD0
0FD4:  BCF    FA6.2
0FD6:  MOVF   00,W
0FD8:  IORWF  FF2,F
0FDA:  MOVLW  14
0FDC:  MOVLB  0
0FDE:  MOVWF  xD1
0FE0:  RCALL  07E8
0FE2:  MOVLW  0C
0FE4:  MOVWF  FA9
0FE6:  CLRF   FA8
0FE8:  BCF    FA6.6
0FEA:  BCF    FA6.7
0FEC:  BSF    FA6.2
0FEE:  MOVF   FF2,W
0FF0:  MOVWF  00
0FF2:  BCF    FF2.7
0FF4:  MOVLB  F
0FF6:  MOVLW  55
0FF8:  MOVWF  FA7
0FFA:  MOVLW  AA
0FFC:  MOVWF  FA7
0FFE:  BSF    FA6.1
1000:  BTFSC  FA6.1
1002:  BRA    1000
1004:  BCF    FA6.2
1006:  MOVF   00,W
1008:  IORWF  FF2,F
100A:  MOVLW  14
100C:  MOVLB  0
100E:  MOVWF  xD1
1010:  CALL   07E8
....................    } 
....................    if(VelMotor>6){ 
1014:  MOVF   xB0,W
1016:  SUBLW  06
1018:  BC    1052
....................       VelMotor=4;write_eeprom(13,4);delay_ms(20); 
101A:  MOVLW  04
101C:  MOVWF  xB0
101E:  MOVLW  0D
1020:  MOVWF  FA9
1022:  MOVLW  04
1024:  MOVWF  FA8
1026:  BCF    FA6.6
1028:  BCF    FA6.7
102A:  BSF    FA6.2
102C:  MOVF   FF2,W
102E:  MOVWF  00
1030:  BCF    FF2.7
1032:  MOVLB  F
1034:  MOVLW  55
1036:  MOVWF  FA7
1038:  MOVLW  AA
103A:  MOVWF  FA7
103C:  BSF    FA6.1
103E:  BTFSC  FA6.1
1040:  BRA    103E
1042:  BCF    FA6.2
1044:  MOVF   00,W
1046:  IORWF  FF2,F
1048:  MOVLW  14
104A:  MOVLB  0
104C:  MOVWF  xD1
104E:  CALL   07E8
....................    } 
.................... } 
1052:  GOTO   21EC (RETURN)
....................  
....................  
.................... #int_EXT            // Interrupción de encoder para control. 
.................... void ext0() {       // 6 pulsos por vuelta. 
....................    pulsos++; 
*
01B2:  INCF   xA8,F
01B4:  BTFSC  FD8.2
01B6:  INCF   xA9,F
....................    if(pulsos>=120){ 
01B8:  MOVF   xA9,F
01BA:  BNZ   01C2
01BC:  MOVF   xA8,W
01BE:  SUBLW  77
01C0:  BC    0214
....................       pulsos=0; 
01C2:  CLRF   xA9
01C4:  CLRF   xA8
....................       //output_toggle(PIN_C0); 
....................       tiempos=0;tiemporeset++;Lectura=1; 
01C6:  CLRF   3F
01C8:  CLRF   3E
01CA:  INCF   2F,F
01CC:  BSF    17.0
....................     
....................       if(ActivaBuzzer==1){ 
01CE:  DECFSZ 3D,W
01D0:  BRA    01E6
....................          if(estadobuzzer==0){ 
01D2:  BTFSC  17.3
01D4:  BRA    01DC
....................             Buzzer_off; 
01D6:  BCF    F8B.0
01D8:  BCF    F94.0
....................          }else{ 
01DA:  BRA    01E4
....................             if(estadoalarma==1) 
01DC:  BTFSS  17.4
01DE:  BRA    01E4
....................                Buzzer_on; 
01E0:  BSF    F8B.0
01E2:  BCF    F94.0
....................          } 
....................          estadobuzzer=!estadobuzzer; 
01E4:  BTG    17.3
....................       } 
....................    //----------------------------- Tiempo Total-----------------------------// 
....................       if(estadouv==1){ 
01E6:  BTFSS  16.0
01E8:  BRA    0214
....................          segundos++; 
01EA:  INCF   21,F
....................          if(tiempo_cumplido==0){ 
01EC:  BTFSC  16.7
01EE:  BRA    0214
....................             if(tempo_segundos>0){ 
01F0:  MOVF   28,F
01F2:  BZ    01F8
....................                tempo_segundos--; 
01F4:  DECF   28,F
....................             }else{ 
01F6:  BRA    0214
....................                if(tempo_minutos>0){ 
01F8:  MOVF   27,F
01FA:  BZ    0204
....................                   tempo_minutos--; 
01FC:  DECF   27,F
....................                   tempo_segundos=59; 
01FE:  MOVLW  3B
0200:  MOVWF  28
....................                }else{ 
0202:  BRA    0214
....................                   tiempo_cumplido=1; 
0204:  BSF    16.7
....................                   estadouv=0;Luz_UV_off; 
0206:  BCF    16.0
0208:  BSF    F8A.1
020A:  BCF    F93.1
....................                   tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
020C:  MOVFF  29,27
0210:  MOVFF  2A,28
....................                } 
....................             } 
....................          } 
....................       } 
....................    } 
....................    tiempocruce=0; 
0214:  CLRF   xAE
0216:  CLRF   xAD
....................    Cruce=ON; 
0218:  BSF    17.7
....................    if(VelMotor<6){ 
021A:  MOVF   xB0,W
021C:  SUBLW  05
021E:  BNC   024C
....................       if(VelMotor>0 && Porcentaje<100){ 
0220:  MOVF   xB0,F
0222:  BZ    024C
0224:  MOVF   xAF,W
0226:  SUBLW  63
0228:  BNC   024C
....................          delay_us(retardo);       
022A:  MOVFF  AB,E2
022E:  INCF   xE2,F
0230:  DECF   xE2,F
0232:  BTFSC  FD8.2
0234:  BRA    023E
0236:  MOVLW  FF
0238:  MOVWF  xE3
023A:  RCALL  0198
023C:  BRA    0230
023E:  MOVFF  AA,E3
0242:  RCALL  0198
....................          Motor_L1_on; 
0244:  BSF    F8B.2
0246:  BCF    F94.2
....................          Motor_L2_on; 
0248:  BSF    F8B.1
024A:  BCF    F94.1
....................          //delay_us(100);       
....................       } 
....................       //Motor_L1_off; //Se comenta lo de variacion de velocidad debido a que por tamaño de motor se activa con un contactor 
....................       //Motor_L2_off; 
....................    } 
.................... } 
....................  
024C:  BCF    FF2.1
024E:  GOTO   0054
.................... void main () 
.................... { 
*
2050:  CLRF   FF8
2052:  BCF    FD0.7
2054:  BSF    07.7
2056:  CLRF   FEA
2058:  CLRF   FE9
205A:  BCF    16.0
205C:  BCF    16.1
205E:  BCF    16.2
2060:  BCF    16.3
2062:  BCF    16.4
2064:  BCF    16.5
2066:  BCF    16.6
2068:  BCF    16.7
206A:  BCF    17.0
206C:  BCF    17.1
206E:  BCF    17.2
2070:  BCF    17.3
2072:  BCF    17.4
2074:  CLRF   18
2076:  MOVLW  07
2078:  MOVWF  19
207A:  MOVLW  02
207C:  MOVWF  1A
207E:  MOVLW  0B
2080:  MOVWF  1B
2082:  MOVLW  02
2084:  MOVWF  1C
2086:  MOVLW  03
2088:  MOVWF  1D
208A:  MOVLW  02
208C:  MOVWF  1E
208E:  MOVWF  1F
2090:  MOVLW  04
2092:  MOVWF  20
2094:  CLRF   21
2096:  CLRF   22
2098:  CLRF   23
209A:  CLRF   24
209C:  CLRF   25
209E:  CLRF   26
20A0:  CLRF   27
20A2:  CLRF   28
20A4:  CLRF   29
20A6:  CLRF   2A
20A8:  CLRF   2B
20AA:  CLRF   2C
20AC:  CLRF   2D
20AE:  MOVLW  01
20B0:  MOVWF  2E
20B2:  CLRF   2F
20B4:  CLRF   30
20B6:  CLRF   31
20B8:  CLRF   3D
20BA:  CLRF   41
20BC:  CLRF   40
20BE:  CLRF   43
20C0:  CLRF   42
20C2:  CLRF   x97
20C4:  CLRF   x96
20C6:  CLRF   x95
20C8:  CLRF   x94
20CA:  CLRF   x9B
20CC:  CLRF   x9A
20CE:  CLRF   x99
20D0:  CLRF   x98
20D2:  CLRF   x9F
20D4:  CLRF   x9E
20D6:  CLRF   x9D
20D8:  CLRF   x9C
20DA:  CLRF   xA3
20DC:  CLRF   xA2
20DE:  CLRF   xA1
20E0:  CLRF   xA0
20E2:  CLRF   xA7
20E4:  CLRF   xA6
20E6:  CLRF   xA5
20E8:  MOVLW  80
20EA:  MOVWF  xA4
20EC:  BSF    17.5
20EE:  BCF    17.6
20F0:  CLRF   xA9
20F2:  CLRF   xA8
20F4:  CLRF   xAB
20F6:  CLRF   xAA
20F8:  BCF    17.7
20FA:  BCF    xAC.0
20FC:  CLRF   xAE
20FE:  CLRF   xAD
2100:  CLRF   xAF
2102:  CLRF   xB0
2104:  CLRF   xB4
2106:  CLRF   xB3
2108:  CLRF   xB2
210A:  CLRF   xB1
210C:  CLRF   xB8
210E:  CLRF   xB7
2110:  CLRF   xB6
2112:  CLRF   xB5
2114:  MOVF   FC1,W
2116:  ANDLW  C0
2118:  IORLW  0F
211A:  MOVWF  FC1
211C:  MOVLW  07
211E:  MOVWF  FB4
2120:  MOVLW  3E
2122:  MOVWF  32
2124:  MOVLW  20
2126:  MOVWF  33
2128:  MOVLW  5E
212A:  MOVWF  34
212C:  CLRF   35
212E:  CLRF   36
2130:  CLRF   37
2132:  CLRF   38
2134:  CLRF   39
2136:  CLRF   3A
2138:  CLRF   3B
213A:  CLRF   3C
213C:  CLRF   44
213E:  CLRF   45
2140:  CLRF   46
2142:  CLRF   47
2144:  CLRF   48
2146:  CLRF   49
2148:  CLRF   4A
214A:  CLRF   4B
214C:  CLRF   4C
214E:  CLRF   4D
2150:  CLRF   4E
2152:  CLRF   4F
2154:  CLRF   50
2156:  CLRF   51
2158:  CLRF   52
215A:  CLRF   53
215C:  CLRF   54
215E:  CLRF   55
2160:  CLRF   56
2162:  CLRF   57
2164:  CLRF   58
2166:  CLRF   59
2168:  CLRF   5A
216A:  CLRF   5B
216C:  CLRF   5C
216E:  CLRF   5D
2170:  CLRF   5E
2172:  CLRF   5F
2174:  CLRF   x60
2176:  CLRF   x61
2178:  CLRF   x62
217A:  CLRF   x63
217C:  CLRF   x64
217E:  CLRF   x65
2180:  CLRF   x66
2182:  CLRF   x67
2184:  CLRF   x68
2186:  CLRF   x69
2188:  CLRF   x6A
218A:  CLRF   x6B
218C:  CLRF   x6C
218E:  CLRF   x6D
2190:  CLRF   x6E
2192:  CLRF   x6F
2194:  CLRF   x70
2196:  CLRF   x71
2198:  CLRF   x72
219A:  CLRF   x73
219C:  CLRF   x74
219E:  CLRF   x75
21A0:  CLRF   x76
21A2:  CLRF   x77
21A4:  CLRF   x78
21A6:  CLRF   x79
21A8:  CLRF   x7A
21AA:  CLRF   x7B
21AC:  CLRF   x7C
21AE:  CLRF   x7D
21B0:  CLRF   x7E
21B2:  CLRF   x7F
21B4:  CLRF   x80
21B6:  CLRF   x81
21B8:  CLRF   x82
21BA:  CLRF   x83
21BC:  CLRF   x84
21BE:  CLRF   x85
21C0:  CLRF   x86
21C2:  CLRF   x87
21C4:  CLRF   x88
21C6:  CLRF   x89
21C8:  CLRF   x8A
21CA:  CLRF   x8B
21CC:  CLRF   x8C
21CE:  CLRF   x8D
21D0:  CLRF   x8E
21D2:  CLRF   x8F
21D4:  CLRF   x90
21D6:  CLRF   x91
21D8:  CLRF   x92
21DA:  CLRF   x93
....................    ConfigInterrupciones(); 
21DC:  GOTO   08D0
....................    MensajeBienvenida(); 
21E0:  GOTO   09D6
....................    LeeEEPROM();  
21E4:  GOTO   0A72
....................    LimitaValores(); 
21E8:  GOTO   0CC6
....................    VelocidadMotor(0); 
21EC:  CLRF   xBA
21EE:  CALL   1056
....................    Motor_L1_off; 
21F2:  BCF    F8B.2
21F4:  BCF    F94.2
....................    Motor_L2_off; 
21F6:  BCF    F8B.1
21F8:  BCF    F94.1
....................    Tcruce2=83; 
21FA:  CLRF   xB8
21FC:  CLRF   xB7
21FE:  MOVLW  26
2200:  MOVWF  xB6
2202:  MOVLW  85
2204:  MOVWF  xB5
....................    Tcruce=8300; 
2206:  CLRF   xB4
2208:  MOVLW  B0
220A:  MOVWF  xB3
220C:  MOVLW  01
220E:  MOVWF  xB2
2210:  MOVLW  8C
2212:  MOVWF  xB1
....................    while(true){ 
....................           
.................... //------------Menu0------------------------------------------------------------------    
....................    if(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
2214:  MOVF   18,F
2216:  BTFSS  FD8.2
2218:  BRA    261C
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
221A:  MOVLW  01
221C:  MOVWF  xCC
221E:  MOVWF  xCD
2220:  CALL   08F6
....................          printf(lcd_putc,"     Ingrese        "); 
2224:  MOVLW  52
2226:  MOVWF  FF6
2228:  MOVLW  02
222A:  MOVWF  FF7
222C:  CALL   09B6
....................          lcd_gotoxy(1,2); 
2230:  MOVLW  01
2232:  MOVWF  xCC
2234:  MOVLW  02
2236:  MOVWF  xCD
2238:  CALL   08F6
....................          printf(lcd_putc,"    Contraseña      "); 
223C:  MOVLW  68
223E:  MOVWF  FF6
2240:  MOVLW  02
2242:  MOVWF  FF7
2244:  CALL   09B6
....................          lcd_gotoxy(1,3); 
2248:  MOVLW  01
224A:  MOVWF  xCC
224C:  MOVLW  03
224E:  MOVWF  xCD
2250:  CALL   08F6
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2254:  MOVLW  7E
2256:  MOVWF  FF6
2258:  MOVLW  02
225A:  MOVWF  FF7
225C:  MOVLW  0A
225E:  MOVWF  xBE
2260:  CALL   10DA
2264:  MOVFF  35,BA
2268:  MOVLW  1F
226A:  MOVWF  xBB
226C:  CALL   1120
2270:  MOVFF  36,BA
2274:  MOVLW  1F
2276:  MOVWF  xBB
2278:  CALL   1120
227C:  MOVFF  37,BA
2280:  MOVLW  1F
2282:  MOVWF  xBB
2284:  CALL   1120
2288:  MOVFF  38,BA
228C:  MOVLW  1F
228E:  MOVWF  xBB
2290:  CALL   1120
2294:  MOVLW  20
2296:  MOVWF  xCB
2298:  CALL   0958
229C:  MOVLW  20
229E:  MOVWF  xCB
22A0:  CALL   0958
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
22A4:  MOVFF  1B,CC
22A8:  MOVLW  04
22AA:  MOVWF  xCD
22AC:  CALL   08F6
....................          lcd_putc(t[2]); 
22B0:  MOVFF  34,CB
22B4:  CALL   0958
....................           
....................          if(unidad>11&&unidad<14){ 
22B8:  MOVF   1B,W
22BA:  SUBLW  0B
22BC:  BC    22DC
22BE:  MOVF   1B,W
22C0:  SUBLW  0D
22C2:  BNC   22DC
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
22C4:  MOVLW  01
22C6:  SUBWF  1B,W
22C8:  MOVWF  xBA
22CA:  MOVWF  xCC
22CC:  MOVLW  04
22CE:  MOVWF  xCD
22D0:  CALL   08F6
....................             lcd_putc(t[1]); 
22D4:  MOVFF  33,CB
22D8:  CALL   0958
....................          } 
....................           
....................          Cambio=OFF; 
22DC:  BCF    17.5
....................       //} 
....................        
....................       if(UP){//Si oprime hacia arriba 
22DE:  BSF    F92.5
22E0:  BTFSC  F80.5
22E2:  BRA    2316
....................          delay_ms(20); 
22E4:  MOVLW  14
22E6:  MOVWF  xD1
22E8:  CALL   07E8
....................          if(UP){ 
22EC:  BSF    F92.5
22EE:  BTFSC  F80.5
22F0:  BRA    2314
....................             if(Flanco == 0) { 
22F2:  BTFSC  16.3
22F4:  BRA    2314
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
22F6:  MOVLW  0B
22F8:  SUBWF  1B,W
22FA:  CLRF   03
22FC:  ADDLW  35
22FE:  MOVWF  FE9
2300:  MOVLW  00
2302:  ADDWFC 03,W
2304:  MOVWF  FEA
2306:  INCF   FEF,F
2308:  BSF    16.3
230A:  MOVLW  1E
230C:  MOVWF  xD1
230E:  CALL   07E8
2312:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2314:  BRA    2318
....................          Flanco = 0; 
2316:  BCF    16.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
2318:  BSF    F96.0
231A:  BTFSC  F84.0
231C:  BRA    2350
....................          delay_ms(20); 
231E:  MOVLW  14
2320:  MOVWF  xD1
2322:  CALL   07E8
....................          if(DOWN){ 
2326:  BSF    F96.0
2328:  BTFSC  F84.0
232A:  BRA    234E
....................             if(Flanco2 == 0) { 
232C:  BTFSC  16.5
232E:  BRA    234E
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
2330:  MOVLW  0B
2332:  SUBWF  1B,W
2334:  CLRF   03
2336:  ADDLW  35
2338:  MOVWF  FE9
233A:  MOVLW  00
233C:  ADDWFC 03,W
233E:  MOVWF  FEA
2340:  DECF   FEF,F
2342:  BSF    16.5
2344:  MOVLW  1E
2346:  MOVWF  xD1
2348:  CALL   07E8
234C:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
234E:  BRA    2352
....................          Flanco2 = 0; 
2350:  BCF    16.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
2352:  BSF    F96.1
2354:  BTFSC  F84.1
2356:  BRA    2382
....................          delay_ms(20); 
2358:  MOVLW  14
235A:  MOVWF  xD1
235C:  CALL   07E8
....................          if(RIGHT){ 
2360:  BSF    F96.1
2362:  BTFSC  F84.1
2364:  BRA    2380
....................             if(Flanco1 == 0) { 
2366:  BTFSC  16.4
2368:  BRA    2380
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
236A:  BSF    16.4
236C:  INCF   1B,F
236E:  MOVLW  1E
2370:  MOVWF  xD1
2372:  CALL   07E8
2376:  MOVLW  0C
2378:  MOVWF  xCB
237A:  CALL   0958
237E:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2380:  BRA    2384
....................          Flanco1 = 0; 
2382:  BCF    16.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
2384:  BSF    F96.2
2386:  BTFSC  F84.2
2388:  BRA    23B4
....................          delay_ms(150); 
238A:  MOVLW  96
238C:  MOVWF  xD1
238E:  CALL   07E8
....................          if(IZQU){ 
2392:  BSF    F96.2
2394:  BTFSC  F84.2
2396:  BRA    23B2
....................             if(Flanco3 == 0){ 
2398:  BTFSC  16.6
239A:  BRA    23B2
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
239C:  BSF    16.6
239E:  DECF   1B,F
23A0:  MOVLW  1E
23A2:  MOVWF  xD1
23A4:  CALL   07E8
23A8:  MOVLW  0C
23AA:  MOVWF  xCB
23AC:  CALL   0958
23B0:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
23B2:  BRA    23B6
....................         Flanco3 = 0; 
23B4:  BCF    16.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
23B6:  MOVLW  0B
23B8:  SUBWF  1B,W
23BA:  CLRF   03
23BC:  ADDLW  35
23BE:  MOVWF  FE9
23C0:  MOVLW  00
23C2:  ADDWFC 03,W
23C4:  MOVWF  FEA
23C6:  BTFSC  FEF.7
23C8:  BRA    23CC
23CA:  BRA    23E0
....................          clave[unidad-11]=9; 
23CC:  MOVLW  0B
23CE:  SUBWF  1B,W
23D0:  CLRF   03
23D2:  ADDLW  35
23D4:  MOVWF  FE9
23D6:  MOVLW  00
23D8:  ADDWFC 03,W
23DA:  MOVWF  FEA
23DC:  MOVLW  09
23DE:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
23E0:  MOVLW  0B
23E2:  SUBWF  1B,W
23E4:  CLRF   03
23E6:  ADDLW  35
23E8:  MOVWF  FE9
23EA:  MOVLW  00
23EC:  ADDWFC 03,W
23EE:  MOVWF  FEA
23F0:  BTFSC  FEF.7
23F2:  BRA    240C
23F4:  MOVF   FEF,W
23F6:  SUBLW  09
23F8:  BC    240C
....................          clave[unidad-11]=0; 
23FA:  MOVLW  0B
23FC:  SUBWF  1B,W
23FE:  CLRF   03
2400:  ADDLW  35
2402:  MOVWF  FE9
2404:  MOVLW  00
2406:  ADDWFC 03,W
2408:  MOVWF  FEA
240A:  CLRF   FEF
....................         
....................       if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
240C:  MOVF   1B,W
240E:  SUBLW  0A
2410:  BNC   2416
....................          unidad=11; 
2412:  MOVLW  0B
2414:  MOVWF  1B
....................              
....................       if(unidad>14){             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
2416:  MOVF   1B,W
2418:  SUBLW  0E
241A:  BTFSC  FD8.0
241C:  BRA    261C
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2){ // Si Ingresa clave para reset general del sistema. 
241E:  MOVF   35,W
2420:  SUBLW  03
2422:  BNZ   24FE
2424:  MOVF   36,W
2426:  SUBLW  08
2428:  BNZ   24FE
242A:  MOVF   37,W
242C:  SUBLW  09
242E:  BNZ   24FE
2430:  MOVF   38,W
2432:  SUBLW  02
2434:  BNZ   24FE
....................             write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
2436:  CLRF   FA9
2438:  CLRF   FA8
243A:  BCF    FA6.6
243C:  BCF    FA6.7
243E:  BSF    FA6.2
2440:  MOVF   FF2,W
2442:  MOVWF  00
2444:  BCF    FF2.7
2446:  MOVLB  F
2448:  MOVLW  55
244A:  MOVWF  FA7
244C:  MOVLW  AA
244E:  MOVWF  FA7
2450:  BSF    FA6.1
2452:  BTFSC  FA6.1
2454:  BRA    2452
2456:  BCF    FA6.2
2458:  MOVF   00,W
245A:  IORWF  FF2,F
245C:  MOVLW  14
245E:  MOVLB  0
2460:  MOVWF  xD1
2462:  CALL   07E8
2466:  MOVLW  01
2468:  MOVWF  FA9
246A:  CLRF   FA8
246C:  BCF    FA6.6
246E:  BCF    FA6.7
2470:  BSF    FA6.2
2472:  MOVF   FF2,W
2474:  MOVWF  00
2476:  BCF    FF2.7
2478:  MOVLB  F
247A:  MOVLW  55
247C:  MOVWF  FA7
247E:  MOVLW  AA
2480:  MOVWF  FA7
2482:  BSF    FA6.1
2484:  BTFSC  FA6.1
2486:  BRA    2484
2488:  BCF    FA6.2
248A:  MOVF   00,W
248C:  IORWF  FF2,F
248E:  MOVLW  14
2490:  MOVLB  0
2492:  MOVWF  xD1
2494:  CALL   07E8
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
2498:  MOVLW  02
249A:  MOVWF  FA9
249C:  CLRF   FA8
249E:  BCF    FA6.6
24A0:  BCF    FA6.7
24A2:  BSF    FA6.2
24A4:  MOVF   FF2,W
24A6:  MOVWF  00
24A8:  BCF    FF2.7
24AA:  MOVLB  F
24AC:  MOVLW  55
24AE:  MOVWF  FA7
24B0:  MOVLW  AA
24B2:  MOVWF  FA7
24B4:  BSF    FA6.1
24B6:  BTFSC  FA6.1
24B8:  BRA    24B6
24BA:  BCF    FA6.2
24BC:  MOVF   00,W
24BE:  IORWF  FF2,F
24C0:  MOVLW  14
24C2:  MOVLB  0
24C4:  MOVWF  xD1
24C6:  CALL   07E8
24CA:  MOVLW  03
24CC:  MOVWF  FA9
24CE:  CLRF   FA8
24D0:  BCF    FA6.6
24D2:  BCF    FA6.7
24D4:  BSF    FA6.2
24D6:  MOVF   FF2,W
24D8:  MOVWF  00
24DA:  BCF    FF2.7
24DC:  MOVLB  F
24DE:  MOVLW  55
24E0:  MOVWF  FA7
24E2:  MOVLW  AA
24E4:  MOVWF  FA7
24E6:  BSF    FA6.1
24E8:  BTFSC  FA6.1
24EA:  BRA    24E8
24EC:  BCF    FA6.2
24EE:  MOVF   00,W
24F0:  IORWF  FF2,F
24F2:  MOVLW  14
24F4:  MOVLB  0
24F6:  MOVWF  xD1
24F8:  CALL   07E8
....................              reset_cpu(); 
24FC:  RESET
....................          } 
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]){ // Si las claves coinciden pasa a Menu Principal. 
24FE:  MOVF   39,W
2500:  SUBWF  35,W
2502:  BNZ   25A2
2504:  MOVF   3A,W
2506:  SUBWF  36,W
2508:  BNZ   25A2
250A:  MOVF   3B,W
250C:  SUBWF  37,W
250E:  BNZ   25A2
2510:  MOVF   3C,W
2512:  SUBWF  38,W
2514:  BNZ   25A2
....................             lcd_gotoxy(1,1); 
2516:  MOVLW  01
2518:  MOVWF  xCC
251A:  MOVWF  xCD
251C:  CALL   08F6
....................             printf(lcd_putc,"                   "); 
2520:  MOVLW  94
2522:  MOVWF  FF6
2524:  MOVLW  02
2526:  MOVWF  FF7
2528:  CALL   09B6
....................             lcd_gotoxy(1,2); 
252C:  MOVLW  01
252E:  MOVWF  xCC
2530:  MOVLW  02
2532:  MOVWF  xCD
2534:  CALL   08F6
....................             printf(lcd_putc,"     Contraseña    "); 
2538:  MOVLW  A8
253A:  MOVWF  FF6
253C:  MOVLW  02
253E:  MOVWF  FF7
2540:  CALL   09B6
....................             lcd_gotoxy(1,3); 
2544:  MOVLW  01
2546:  MOVWF  xCC
2548:  MOVLW  03
254A:  MOVWF  xCD
254C:  CALL   08F6
....................             printf(lcd_putc,"      Correcta     "); 
2550:  MOVLW  BC
2552:  MOVWF  FF6
2554:  MOVLW  02
2556:  MOVWF  FF7
2558:  CALL   09B6
....................             lcd_gotoxy(1,4); 
255C:  MOVLW  01
255E:  MOVWF  xCC
2560:  MOVLW  04
2562:  MOVWF  xCD
2564:  CALL   08F6
....................             printf(lcd_putc,"                   "); 
2568:  MOVLW  D0
256A:  MOVWF  FF6
256C:  MOVLW  02
256E:  MOVWF  FF7
2570:  CALL   09B6
....................             delay_ms(1000);Menu=50;unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
2574:  MOVLW  04
2576:  MOVWF  xBA
2578:  MOVLW  FA
257A:  MOVWF  xD1
257C:  CALL   07E8
2580:  DECFSZ xBA,F
2582:  BRA    2578
2584:  MOVLW  32
2586:  MOVWF  18
2588:  MOVLW  0B
258A:  MOVWF  1B
258C:  MOVLW  0C
258E:  MOVWF  xCB
2590:  CALL   0958
2594:  BSF    17.5
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
2596:  CLRF   35
2598:  CLRF   36
259A:  CLRF   37
259C:  CLRF   38
259E:  BSF    17.5
....................          } 
....................          else{                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
25A0:  BRA    261C
....................             lcd_gotoxy(1,1); 
25A2:  MOVLW  01
25A4:  MOVWF  xCC
25A6:  MOVWF  xCD
25A8:  CALL   08F6
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
25AC:  MOVLW  01
25AE:  MOVWF  xCC
25B0:  MOVLW  02
25B2:  MOVWF  xCD
25B4:  CALL   08F6
....................             printf(lcd_putc,"     Contraseña    "); 
25B8:  MOVLW  E4
25BA:  MOVWF  FF6
25BC:  MOVLW  02
25BE:  MOVWF  FF7
25C0:  CALL   09B6
....................             lcd_gotoxy(1,3); 
25C4:  MOVLW  01
25C6:  MOVWF  xCC
25C8:  MOVLW  03
25CA:  MOVWF  xCD
25CC:  CALL   08F6
....................             printf(lcd_putc,"     Incorrecta    "); 
25D0:  MOVLW  F8
25D2:  MOVWF  FF6
25D4:  MOVLW  02
25D6:  MOVWF  FF7
25D8:  CALL   09B6
....................             lcd_gotoxy(1,4); 
25DC:  MOVLW  01
25DE:  MOVWF  xCC
25E0:  MOVLW  04
25E2:  MOVWF  xCD
25E4:  CALL   08F6
....................             printf(lcd_putc,"                   "); 
25E8:  MOVLW  0C
25EA:  MOVWF  FF6
25EC:  MOVLW  03
25EE:  MOVWF  FF7
25F0:  CALL   09B6
....................             delay_ms(1000);unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
25F4:  MOVLW  04
25F6:  MOVWF  xBA
25F8:  MOVLW  FA
25FA:  MOVWF  xD1
25FC:  CALL   07E8
2600:  DECFSZ xBA,F
2602:  BRA    25F8
2604:  MOVLW  0B
2606:  MOVWF  1B
2608:  MOVLW  0C
260A:  MOVWF  xCB
260C:  CALL   0958
2610:  BSF    17.5
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
2612:  CLRF   35
2614:  CLRF   36
2616:  CLRF   37
2618:  CLRF   38
261A:  BSF    17.5
....................          } 
....................       } 
....................    } 
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
261C:  DECFSZ 18,W
261E:  BRA    2856
....................       EliminaRuido(); 
2620:  CALL   0004
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
2624:  MOVLW  01
2626:  MOVWF  xCC
2628:  MOVWF  xCD
262A:  CALL   08F6
....................          printf(lcd_putc,"---MENU PRINCIPAL---"); 
262E:  MOVLW  20
2630:  MOVWF  FF6
2632:  MOVLW  03
2634:  MOVWF  FF7
2636:  CALL   09B6
....................          mensajes(1+paso,2); 
263A:  MOVLW  01
263C:  ADDWF  31,W
263E:  MOVWF  xBA
2640:  MOVWF  xBB
2642:  MOVLW  02
2644:  MOVWF  xBC
2646:  CALL   11F0
....................          mensajes(2+paso,3); 
264A:  MOVLW  02
264C:  ADDWF  31,W
264E:  MOVWF  xBA
2650:  MOVWF  xBB
2652:  MOVLW  03
2654:  MOVWF  xBC
2656:  CALL   11F0
....................          mensajes(3+paso,4); 
265A:  MOVLW  03
265C:  ADDWF  31,W
265E:  MOVWF  xBA
2660:  MOVWF  xBB
2662:  MOVLW  04
2664:  MOVWF  xBC
2666:  CALL   11F0
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
266A:  MOVLW  01
266C:  MOVWF  xCC
266E:  MOVFF  1C,CD
2672:  CALL   08F6
....................         lcd_putc(t[0]); 
2676:  MOVFF  32,CB
267A:  CALL   0958
....................  
....................         if(Flecha==2) 
267E:  MOVF   1C,W
2680:  SUBLW  02
2682:  BNZ   26AC
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
2684:  MOVLW  01
2686:  MOVWF  xCC
2688:  MOVLW  04
268A:  MOVWF  xCD
268C:  CALL   08F6
....................             lcd_putc(t[1]); 
2690:  MOVFF  33,CB
2694:  CALL   0958
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
2698:  MOVLW  01
269A:  MOVWF  xCC
269C:  MOVLW  03
269E:  MOVWF  xCD
26A0:  CALL   08F6
....................             lcd_putc(t[1]); 
26A4:  MOVFF  33,CB
26A8:  CALL   0958
....................           } 
....................          
....................         if(Flecha==4) 
26AC:  MOVF   1C,W
26AE:  SUBLW  04
26B0:  BNZ   26DA
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
26B2:  MOVLW  01
26B4:  MOVWF  xCC
26B6:  MOVLW  02
26B8:  MOVWF  xCD
26BA:  CALL   08F6
....................             lcd_putc(t[1]); 
26BE:  MOVFF  33,CB
26C2:  CALL   0958
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
26C6:  MOVLW  01
26C8:  MOVWF  xCC
26CA:  MOVLW  03
26CC:  MOVWF  xCD
26CE:  CALL   08F6
....................             lcd_putc(t[1]); 
26D2:  MOVFF  33,CB
26D6:  CALL   0958
....................           } 
....................          
....................         if(Flecha==3) 
26DA:  MOVF   1C,W
26DC:  SUBLW  03
26DE:  BNZ   2708
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
26E0:  MOVLW  01
26E2:  MOVWF  xCC
26E4:  MOVLW  04
26E6:  MOVWF  xCD
26E8:  CALL   08F6
....................             lcd_putc(t[1]); 
26EC:  MOVFF  33,CB
26F0:  CALL   0958
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
26F4:  MOVLW  01
26F6:  MOVWF  xCC
26F8:  MOVLW  02
26FA:  MOVWF  xCD
26FC:  CALL   08F6
....................             lcd_putc(t[1]); 
2700:  MOVFF  33,CB
2704:  CALL   0958
....................           } 
....................          Cambio=OFF; 
2708:  BCF    17.5
....................      // } 
....................          
....................       if(UP){//Si oprime hacia arriba 
270A:  BSF    F92.5
270C:  BTFSC  F80.5
270E:  BRA    273A
....................          delay_ms(20); 
2710:  MOVLW  14
2712:  MOVWF  xD1
2714:  CALL   07E8
....................          if(UP){ 
2718:  BSF    F92.5
271A:  BTFSC  F80.5
271C:  BRA    2738
....................             if(Flanco == 0){ 
271E:  BTFSC  16.3
2720:  BRA    2738
....................                Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(10);Cambio=ON; 
2722:  DECF   1E,F
2724:  DECF   1C,F
2726:  MOVLW  01
2728:  ADDWF  1C,W
272A:  MOVWF  1D
272C:  BSF    16.3
272E:  MOVLW  0A
2730:  MOVWF  xD1
2732:  CALL   07E8
2736:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2738:  BRA    273C
....................          Flanco = 0; 
273A:  BCF    16.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
273C:  BSF    F96.0
273E:  BTFSC  F84.0
2740:  BRA    276C
....................          delay_ms(20); 
2742:  MOVLW  14
2744:  MOVWF  xD1
2746:  CALL   07E8
....................          if(DOWN){ 
274A:  BSF    F96.0
274C:  BTFSC  F84.0
274E:  BRA    276A
....................             if(Flanco2 == 0){ 
2750:  BTFSC  16.5
2752:  BRA    276A
....................                Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(10);Cambio=ON; 
2754:  INCF   1E,F
2756:  INCF   1C,F
2758:  MOVLW  01
275A:  SUBWF  1C,W
275C:  MOVWF  1D
275E:  BSF    16.5
2760:  MOVLW  0A
2762:  MOVWF  xD1
2764:  CALL   07E8
2768:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
276A:  BRA    276E
....................          Flanco2 = 0; 
276C:  BCF    16.5
....................       } 
....................     
....................          
....................       if(Flecha2>nMenuH){ 
276E:  MOVF   1E,W
2770:  SUBWF  20,W
2772:  BC    2784
....................          paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4; 
2774:  INCF   31,F
2776:  MOVFF  1E,20
277A:  MOVLW  02
277C:  SUBWF  20,W
277E:  MOVWF  1F
2780:  MOVLW  04
2782:  MOVWF  1C
....................       } 
....................          
....................       if(Flecha2<nMenuL){ 
2784:  MOVF   1F,W
2786:  SUBWF  1E,W
2788:  BC    279A
....................          paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2; 
278A:  DECF   31,F
278C:  MOVFF  1E,1F
2790:  MOVLW  02
2792:  ADDWF  1F,W
2794:  MOVWF  20
2796:  MOVLW  02
2798:  MOVWF  1C
....................       } 
....................          
....................       if(Flecha2>n_opcionH){ 
279A:  MOVF   1E,W
279C:  SUBWF  19,W
279E:  BC    27B2
....................          Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2; 
27A0:  MOVFF  1A,1E
27A4:  MOVLW  02
27A6:  MOVWF  1C
27A8:  CLRF   31
27AA:  MOVFF  1E,1F
27AE:  ADDWF  1F,W
27B0:  MOVWF  20
....................       } 
....................          
....................       if(Flecha2<n_opcionL){ 
27B2:  MOVF   1A,W
27B4:  SUBWF  1E,W
27B6:  BC    27CE
....................          Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2; 
27B8:  MOVFF  19,1E
27BC:  MOVLW  04
27BE:  MOVWF  1C
27C0:  SUBWF  19,W
27C2:  MOVWF  31
27C4:  MOVFF  1E,20
27C8:  MOVLW  02
27CA:  SUBWF  20,W
27CC:  MOVWF  1F
....................       } 
....................          
....................       if(paso<0) 
27CE:  BTFSC  31.7
27D0:  BRA    27D4
27D2:  BRA    27D6
....................          paso=0; 
27D4:  CLRF   31
....................           
....................       if(RIGHT){// Si oprime derecha 
27D6:  BSF    F96.1
27D8:  BTFSC  F84.1
27DA:  BRA    2822
....................          delay_ms(20); 
27DC:  MOVLW  14
27DE:  MOVWF  xD1
27E0:  CALL   07E8
....................          if(RIGHT){ 
27E4:  BSF    F96.1
27E6:  BTFSC  F84.1
27E8:  BRA    281E
....................             if(Flanco1 == 0){ 
27EA:  BTFSC  16.4
27EC:  BRA    281E
....................                Flanco1 = 1;Menu=Flecha2;Flecha=3;delay_ms(300);printf(lcd_putc,"\f"); 
27EE:  BSF    16.4
27F0:  MOVFF  1E,18
27F4:  MOVLW  03
27F6:  MOVWF  1C
27F8:  MOVLW  02
27FA:  MOVWF  xBA
27FC:  MOVLW  96
27FE:  MOVWF  xD1
2800:  CALL   07E8
2804:  DECFSZ xBA,F
2806:  BRA    27FC
2808:  MOVLW  0C
280A:  MOVWF  xCB
280C:  CALL   0958
....................                if(Menu==6){ 
2810:  MOVF   18,W
2812:  SUBLW  06
2814:  BNZ   281E
....................                   clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
2816:  CLRF   35
2818:  CLRF   36
281A:  CLRF   37
281C:  CLRF   38
....................                } 
....................             } 
....................          } 
....................          Cambio=ON; 
281E:  BSF    17.5
....................       }else{ 
2820:  BRA    2824
....................         Flanco1 = 0; 
2822:  BCF    16.4
....................       } 
....................              
....................       if(IZQU){ 
2824:  BSF    F96.2
2826:  BTFSC  F84.2
2828:  BRA    2856
....................          delay_ms(20); 
282A:  MOVLW  14
282C:  MOVWF  xD1
282E:  CALL   07E8
....................          if(IZQU){ 
2832:  BSF    F96.2
2834:  BTFSC  F84.2
2836:  BRA    2856
....................             delay_ms(500);Menu=50;printf(lcd_putc,"\f");Cambio=ON; 
2838:  MOVLW  02
283A:  MOVWF  xBA
283C:  MOVLW  FA
283E:  MOVWF  xD1
2840:  CALL   07E8
2844:  DECFSZ xBA,F
2846:  BRA    283C
2848:  MOVLW  32
284A:  MOVWF  18
284C:  MOVLW  0C
284E:  MOVWF  xCB
2850:  CALL   0958
2854:  BSF    17.5
....................          } 
....................       } 
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de tiempo de trabajo de Luz UV    
2856:  MOVF   18,W
2858:  SUBLW  02
285A:  BTFSS  FD8.2
285C:  BRA    2AB2
....................    EliminaRuido(); 
285E:  CALL   0004
....................    //if(Cambio){ 
....................       lcd_gotoxy(1,1); 
2862:  MOVLW  01
2864:  MOVWF  xCC
2866:  MOVWF  xCD
2868:  CALL   08F6
....................       printf(lcd_putc,"    Temporizador     "); 
286C:  MOVLW  36
286E:  MOVWF  FF6
2870:  MOVLW  03
2872:  MOVWF  FF7
2874:  CALL   09B6
....................       lcd_gotoxy(1,2); 
2878:  MOVLW  01
287A:  MOVWF  xCC
287C:  MOVLW  02
287E:  MOVWF  xCD
2880:  CALL   08F6
....................       printf(lcd_putc,"       Luz UV        "); 
2884:  MOVLW  4C
2886:  MOVWF  FF6
2888:  MOVLW  03
288A:  MOVWF  FF7
288C:  CALL   09B6
....................       lcd_gotoxy(6,3); 
2890:  MOVLW  06
2892:  MOVWF  xCC
2894:  MOVLW  03
2896:  MOVWF  xCD
2898:  CALL   08F6
....................       printf(lcd_putc,"%03u:%02u (M:S)  ",tempo_minutos_pro,tempo_segundos_pro);  
289C:  MOVFF  29,BA
28A0:  MOVLW  03
28A2:  MOVWF  xBB
28A4:  CALL   12C4
28A8:  MOVLW  3A
28AA:  MOVWF  xCB
28AC:  CALL   0958
28B0:  MOVFF  2A,BA
28B4:  MOVLW  01
28B6:  MOVWF  xBB
28B8:  CALL   12C4
28BC:  MOVLW  6B
28BE:  MOVWF  FF6
28C0:  MOVLW  03
28C2:  MOVWF  FF7
28C4:  MOVLW  08
28C6:  MOVWF  xBE
28C8:  CALL   10DA
....................        
....................       lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
28CC:  MOVLW  06
28CE:  ADDWF  2E,W
28D0:  MOVWF  xBA
28D2:  MOVWF  xCC
28D4:  MOVLW  04
28D6:  MOVWF  xCD
28D8:  CALL   08F6
....................       lcd_putc(t[2]); 
28DC:  MOVFF  34,CB
28E0:  CALL   0958
....................        
....................       Cambio=OFF; 
28E4:  BCF    17.5
.................... //   } 
....................     
....................    if(UP) 
28E6:  BSF    F92.5
28E8:  BTFSC  F80.5
28EA:  BRA    2938
....................    { 
....................       delay_ms(20); 
28EC:  MOVLW  14
28EE:  MOVWF  xD1
28F0:  CALL   07E8
....................       if(UP){ 
28F4:  BSF    F92.5
28F6:  BTFSC  F80.5
28F8:  BRA    2938
....................          if(unidad2==1) 
28FA:  DECFSZ 2E,W
28FC:  BRA    2918
....................          { 
....................             if(tempo_minutos_pro<240) 
28FE:  MOVF   29,W
2900:  SUBLW  EF
2902:  BNC   2918
....................             { 
....................                tempo_minutos_pro+=5;delay_ms(300); 
2904:  MOVLW  05
2906:  ADDWF  29,F
2908:  MOVLW  02
290A:  MOVWF  xBA
290C:  MOVLW  96
290E:  MOVWF  xD1
2910:  CALL   07E8
2914:  DECFSZ xBA,F
2916:  BRA    290C
....................             } 
....................          } 
....................           
....................          if(unidad2==4) 
2918:  MOVF   2E,W
291A:  SUBLW  04
291C:  BNZ   2936
....................          { 
....................             if(tempo_segundos_pro<59) 
291E:  MOVF   2A,W
2920:  SUBLW  3A
2922:  BNC   2936
....................             { 
....................                tempo_segundos_pro++;delay_ms(300); 
2924:  INCF   2A,F
2926:  MOVLW  02
2928:  MOVWF  xBA
292A:  MOVLW  96
292C:  MOVWF  xD1
292E:  CALL   07E8
2932:  DECFSZ xBA,F
2934:  BRA    292A
....................             } 
....................          }      
....................       Cambio=ON; 
2936:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(DOWN) 
2938:  BSF    F96.0
293A:  BTFSC  F84.0
293C:  BRA    2986
....................    { 
....................       delay_ms(20); 
293E:  MOVLW  14
2940:  MOVWF  xD1
2942:  CALL   07E8
....................       if(DOWN){ 
2946:  BSF    F96.0
2948:  BTFSC  F84.0
294A:  BRA    2986
....................          if(unidad2==1) 
294C:  DECFSZ 2E,W
294E:  BRA    2968
....................          { 
....................             if(tempo_minutos_pro>0) 
2950:  MOVF   29,F
2952:  BZ    2968
....................             { 
....................                tempo_minutos_pro-=5;delay_ms(300); 
2954:  MOVLW  05
2956:  SUBWF  29,F
2958:  MOVLW  02
295A:  MOVWF  xBA
295C:  MOVLW  96
295E:  MOVWF  xD1
2960:  CALL   07E8
2964:  DECFSZ xBA,F
2966:  BRA    295C
....................             }  
....................          } 
....................           
....................          if(unidad2==4) 
2968:  MOVF   2E,W
296A:  SUBLW  04
296C:  BNZ   2984
....................          { 
....................             if(tempo_segundos_pro>0) 
296E:  MOVF   2A,F
2970:  BZ    2984
....................             { 
....................                tempo_segundos_pro--;delay_ms(300); 
2972:  DECF   2A,F
2974:  MOVLW  02
2976:  MOVWF  xBA
2978:  MOVLW  96
297A:  MOVWF  xD1
297C:  CALL   07E8
2980:  DECFSZ xBA,F
2982:  BRA    2978
....................             }    
....................          } 
....................       Cambio=ON; 
2984:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(RIGHT) 
2986:  BSF    F96.1
2988:  BTFSC  F84.1
298A:  BRA    29C8
....................    { 
....................       delay_ms(20); 
298C:  MOVLW  14
298E:  MOVWF  xD1
2990:  CALL   07E8
....................       if(RIGHT){ 
2994:  BSF    F96.1
2996:  BTFSC  F84.1
2998:  BRA    29C8
....................          if(unidad2==1) 
299A:  DECFSZ 2E,W
299C:  BRA    29A4
....................          { 
....................             unidad2=4; 
299E:  MOVLW  04
29A0:  MOVWF  2E
....................          } 
....................          else 
29A2:  BRA    29AE
....................          { 
....................             if(unidad2==4) 
29A4:  MOVF   2E,W
29A6:  SUBLW  04
29A8:  BNZ   29AE
....................             { 
....................                unidad2=1; 
29AA:  MOVLW  01
29AC:  MOVWF  2E
....................             } 
....................          } 
....................       delay_ms(500); 
29AE:  MOVLW  02
29B0:  MOVWF  xBA
29B2:  MOVLW  FA
29B4:  MOVWF  xD1
29B6:  CALL   07E8
29BA:  DECFSZ xBA,F
29BC:  BRA    29B2
....................       printf(lcd_putc,"\f"); 
29BE:  MOVLW  0C
29C0:  MOVWF  xCB
29C2:  CALL   0958
....................       Cambio=ON; 
29C6:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(IZQU) 
29C8:  BSF    F96.2
29CA:  BTFSC  F84.2
29CC:  BRA    2AB2
....................    { 
....................       if(IZQU){ 
29CE:  BSF    F96.2
29D0:  BTFSC  F84.2
29D2:  BRA    2AB2
....................          delay_ms(200); 
29D4:  MOVLW  C8
29D6:  MOVWF  xD1
29D8:  CALL   07E8
....................          printf(lcd_putc,"\f"); 
29DC:  MOVLW  0C
29DE:  MOVWF  xCB
29E0:  CALL   0958
....................          lcd_gotoxy(1,2); 
29E4:  MOVLW  01
29E6:  MOVWF  xCC
29E8:  MOVLW  02
29EA:  MOVWF  xCD
29EC:  CALL   08F6
....................          printf(lcd_putc,"Tiempo Almacenado"); 
29F0:  MOVLW  74
29F2:  MOVWF  FF6
29F4:  MOVLW  03
29F6:  MOVWF  FF7
29F8:  CALL   09B6
....................          lcd_gotoxy(1,3); 
29FC:  MOVLW  01
29FE:  MOVWF  xCC
2A00:  MOVLW  03
2A02:  MOVWF  xCD
2A04:  CALL   08F6
....................          printf(lcd_putc,"  Correctamente  "); 
2A08:  MOVLW  86
2A0A:  MOVWF  FF6
2A0C:  MOVLW  03
2A0E:  MOVWF  FF7
2A10:  CALL   09B6
....................          write_eeprom(5,tempo_minutos_pro); 
2A14:  MOVLW  05
2A16:  MOVWF  FA9
2A18:  MOVFF  29,FA8
2A1C:  BCF    FA6.6
2A1E:  BCF    FA6.7
2A20:  BSF    FA6.2
2A22:  MOVF   FF2,W
2A24:  MOVWF  00
2A26:  BCF    FF2.7
2A28:  MOVLB  F
2A2A:  MOVLW  55
2A2C:  MOVWF  FA7
2A2E:  MOVLW  AA
2A30:  MOVWF  FA7
2A32:  BSF    FA6.1
2A34:  BTFSC  FA6.1
2A36:  BRA    2A34
2A38:  BCF    FA6.2
2A3A:  MOVF   00,W
2A3C:  IORWF  FF2,F
....................          delay_ms(20); 
2A3E:  MOVLW  14
2A40:  MOVLB  0
2A42:  MOVWF  xD1
2A44:  CALL   07E8
....................          write_eeprom(6,tempo_segundos_pro); 
2A48:  MOVLW  06
2A4A:  MOVWF  FA9
2A4C:  MOVFF  2A,FA8
2A50:  BCF    FA6.6
2A52:  BCF    FA6.7
2A54:  BSF    FA6.2
2A56:  MOVF   FF2,W
2A58:  MOVWF  00
2A5A:  BCF    FF2.7
2A5C:  MOVLB  F
2A5E:  MOVLW  55
2A60:  MOVWF  FA7
2A62:  MOVLW  AA
2A64:  MOVWF  FA7
2A66:  BSF    FA6.1
2A68:  BTFSC  FA6.1
2A6A:  BRA    2A68
2A6C:  BCF    FA6.2
2A6E:  MOVF   00,W
2A70:  IORWF  FF2,F
....................          delay_ms(20); 
2A72:  MOVLW  14
2A74:  MOVLB  0
2A76:  MOVWF  xD1
2A78:  CALL   07E8
....................          tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
2A7C:  MOVFF  29,27
2A80:  MOVFF  2A,28
....................          delay_ms(700); 
2A84:  MOVLW  04
2A86:  MOVWF  xBA
2A88:  MOVLW  AF
2A8A:  MOVWF  xD1
2A8C:  CALL   07E8
2A90:  DECFSZ xBA,F
2A92:  BRA    2A88
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2A94:  MOVLW  1E
2A96:  MOVWF  xD1
2A98:  CALL   07E8
2A9C:  MOVLW  01
2A9E:  MOVWF  18
2AA0:  CLRF   31
2AA2:  MOVLW  02
2AA4:  MOVWF  1C
2AA6:  MOVWF  1E
2AA8:  MOVLW  0C
2AAA:  MOVWF  xCB
2AAC:  CALL   0958
....................          Cambio=ON; 
2AB0:  BSF    17.5
....................       } 
....................    }   
....................   } 
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................  
.................... //----------------Menu3--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu para Cambio de Contraseña 
2AB2:  MOVF   18,W
2AB4:  SUBLW  03
2AB6:  BTFSS  FD8.2
2AB8:  BRA    2E04
....................       EliminaRuido(); 
2ABA:  CALL   0004
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
2ABE:  MOVLW  01
2AC0:  MOVWF  xCC
2AC2:  MOVWF  xCD
2AC4:  CALL   08F6
....................          printf(lcd_putc,"     Ingrese        "); 
2AC8:  MOVLW  98
2ACA:  MOVWF  FF6
2ACC:  MOVLW  03
2ACE:  MOVWF  FF7
2AD0:  CALL   09B6
....................          lcd_gotoxy(1,2); 
2AD4:  MOVLW  01
2AD6:  MOVWF  xCC
2AD8:  MOVLW  02
2ADA:  MOVWF  xCD
2ADC:  CALL   08F6
....................          printf(lcd_putc,"    Contraseña      "); 
2AE0:  MOVLW  AE
2AE2:  MOVWF  FF6
2AE4:  MOVLW  03
2AE6:  MOVWF  FF7
2AE8:  CALL   09B6
....................          lcd_gotoxy(1,3); 
2AEC:  MOVLW  01
2AEE:  MOVWF  xCC
2AF0:  MOVLW  03
2AF2:  MOVWF  xCD
2AF4:  CALL   08F6
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2AF8:  MOVLW  C4
2AFA:  MOVWF  FF6
2AFC:  MOVLW  03
2AFE:  MOVWF  FF7
2B00:  MOVLW  0A
2B02:  MOVWF  xBE
2B04:  CALL   10DA
2B08:  MOVFF  35,BA
2B0C:  MOVLW  1F
2B0E:  MOVWF  xBB
2B10:  CALL   1120
2B14:  MOVFF  36,BA
2B18:  MOVLW  1F
2B1A:  MOVWF  xBB
2B1C:  CALL   1120
2B20:  MOVFF  37,BA
2B24:  MOVLW  1F
2B26:  MOVWF  xBB
2B28:  CALL   1120
2B2C:  MOVFF  38,BA
2B30:  MOVLW  1F
2B32:  MOVWF  xBB
2B34:  CALL   1120
2B38:  MOVLW  20
2B3A:  MOVWF  xCB
2B3C:  CALL   0958
2B40:  MOVLW  20
2B42:  MOVWF  xCB
2B44:  CALL   0958
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
2B48:  MOVFF  1B,CC
2B4C:  MOVLW  04
2B4E:  MOVWF  xCD
2B50:  CALL   08F6
....................          lcd_putc(t[2]); 
2B54:  MOVFF  34,CB
2B58:  CALL   0958
....................           
....................          if(unidad>11&&unidad<14){ 
2B5C:  MOVF   1B,W
2B5E:  SUBLW  0B
2B60:  BC    2B80
2B62:  MOVF   1B,W
2B64:  SUBLW  0D
2B66:  BNC   2B80
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2B68:  MOVLW  01
2B6A:  SUBWF  1B,W
2B6C:  MOVWF  xBA
2B6E:  MOVWF  xCC
2B70:  MOVLW  04
2B72:  MOVWF  xCD
2B74:  CALL   08F6
....................             lcd_putc(t[1]); 
2B78:  MOVFF  33,CB
2B7C:  CALL   0958
....................          } 
....................           
....................          Cambio=OFF; 
2B80:  BCF    17.5
....................       //} 
....................        
....................       if(UP){//Si oprime hacia arriba 
2B82:  BSF    F92.5
2B84:  BTFSC  F80.5
2B86:  BRA    2BBA
....................          delay_ms(20); 
2B88:  MOVLW  14
2B8A:  MOVWF  xD1
2B8C:  CALL   07E8
....................          if(UP){ 
2B90:  BSF    F92.5
2B92:  BTFSC  F80.5
2B94:  BRA    2BB8
....................             if(Flanco == 0) { 
2B96:  BTFSC  16.3
2B98:  BRA    2BB8
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
2B9A:  MOVLW  0B
2B9C:  SUBWF  1B,W
2B9E:  CLRF   03
2BA0:  ADDLW  35
2BA2:  MOVWF  FE9
2BA4:  MOVLW  00
2BA6:  ADDWFC 03,W
2BA8:  MOVWF  FEA
2BAA:  INCF   FEF,F
2BAC:  BSF    16.3
2BAE:  MOVLW  1E
2BB0:  MOVWF  xD1
2BB2:  CALL   07E8
2BB6:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2BB8:  BRA    2BBC
....................          Flanco = 0; 
2BBA:  BCF    16.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
2BBC:  BSF    F96.0
2BBE:  BTFSC  F84.0
2BC0:  BRA    2BF4
....................          delay_ms(20); 
2BC2:  MOVLW  14
2BC4:  MOVWF  xD1
2BC6:  CALL   07E8
....................          if(DOWN){ 
2BCA:  BSF    F96.0
2BCC:  BTFSC  F84.0
2BCE:  BRA    2BF2
....................             if(Flanco2 == 0) { 
2BD0:  BTFSC  16.5
2BD2:  BRA    2BF2
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
2BD4:  MOVLW  0B
2BD6:  SUBWF  1B,W
2BD8:  CLRF   03
2BDA:  ADDLW  35
2BDC:  MOVWF  FE9
2BDE:  MOVLW  00
2BE0:  ADDWFC 03,W
2BE2:  MOVWF  FEA
2BE4:  DECF   FEF,F
2BE6:  BSF    16.5
2BE8:  MOVLW  1E
2BEA:  MOVWF  xD1
2BEC:  CALL   07E8
2BF0:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2BF2:  BRA    2BF6
....................          Flanco2 = 0; 
2BF4:  BCF    16.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
2BF6:  BSF    F96.1
2BF8:  BTFSC  F84.1
2BFA:  BRA    2C26
....................          delay_ms(20); 
2BFC:  MOVLW  14
2BFE:  MOVWF  xD1
2C00:  CALL   07E8
....................          if(RIGHT){ 
2C04:  BSF    F96.1
2C06:  BTFSC  F84.1
2C08:  BRA    2C24
....................             if(Flanco1 == 0) { 
2C0A:  BTFSC  16.4
2C0C:  BRA    2C24
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2C0E:  BSF    16.4
2C10:  INCF   1B,F
2C12:  MOVLW  1E
2C14:  MOVWF  xD1
2C16:  CALL   07E8
2C1A:  MOVLW  0C
2C1C:  MOVWF  xCB
2C1E:  CALL   0958
2C22:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2C24:  BRA    2C28
....................          Flanco1 = 0; 
2C26:  BCF    16.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
2C28:  BSF    F96.2
2C2A:  BTFSC  F84.2
2C2C:  BRA    2C58
....................          delay_ms(150); 
2C2E:  MOVLW  96
2C30:  MOVWF  xD1
2C32:  CALL   07E8
....................          if(IZQU){ 
2C36:  BSF    F96.2
2C38:  BTFSC  F84.2
2C3A:  BRA    2C56
....................             if(Flanco3 == 0){ 
2C3C:  BTFSC  16.6
2C3E:  BRA    2C56
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2C40:  BSF    16.6
2C42:  DECF   1B,F
2C44:  MOVLW  1E
2C46:  MOVWF  xD1
2C48:  CALL   07E8
2C4C:  MOVLW  0C
2C4E:  MOVWF  xCB
2C50:  CALL   0958
2C54:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2C56:  BRA    2C5A
....................         Flanco3 = 0; 
2C58:  BCF    16.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
2C5A:  MOVLW  0B
2C5C:  SUBWF  1B,W
2C5E:  CLRF   03
2C60:  ADDLW  35
2C62:  MOVWF  FE9
2C64:  MOVLW  00
2C66:  ADDWFC 03,W
2C68:  MOVWF  FEA
2C6A:  BTFSC  FEF.7
2C6C:  BRA    2C70
2C6E:  BRA    2C84
....................          clave[unidad-11]=9; 
2C70:  MOVLW  0B
2C72:  SUBWF  1B,W
2C74:  CLRF   03
2C76:  ADDLW  35
2C78:  MOVWF  FE9
2C7A:  MOVLW  00
2C7C:  ADDWFC 03,W
2C7E:  MOVWF  FEA
2C80:  MOVLW  09
2C82:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
2C84:  MOVLW  0B
2C86:  SUBWF  1B,W
2C88:  CLRF   03
2C8A:  ADDLW  35
2C8C:  MOVWF  FE9
2C8E:  MOVLW  00
2C90:  ADDWFC 03,W
2C92:  MOVWF  FEA
2C94:  BTFSC  FEF.7
2C96:  BRA    2CB0
2C98:  MOVF   FEF,W
2C9A:  SUBLW  09
2C9C:  BC    2CB0
....................          clave[unidad-11]=0; 
2C9E:  MOVLW  0B
2CA0:  SUBWF  1B,W
2CA2:  CLRF   03
2CA4:  ADDLW  35
2CA6:  MOVWF  FE9
2CA8:  MOVLW  00
2CAA:  ADDWFC 03,W
2CAC:  MOVWF  FEA
2CAE:  CLRF   FEF
....................         
....................       if(unidad<11){             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
2CB0:  MOVF   1B,W
2CB2:  SUBLW  0A
2CB4:  BNC   2CD6
....................          unidad=11; 
2CB6:  MOVLW  0B
2CB8:  MOVWF  1B
....................          Menu=1; 
2CBA:  MOVLW  01
2CBC:  MOVWF  18
....................          paso=0; 
2CBE:  CLRF   31
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
2CC0:  CLRF   35
2CC2:  CLRF   36
2CC4:  CLRF   37
2CC6:  CLRF   38
2CC8:  BSF    17.5
....................          unidad=11;printf(lcd_putc,"\f"); 
2CCA:  MOVLW  0B
2CCC:  MOVWF  1B
2CCE:  MOVLW  0C
2CD0:  MOVWF  xCB
2CD2:  CALL   0958
....................       } 
....................         
....................       if(unidad>14){// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
2CD6:  MOVF   1B,W
2CD8:  SUBLW  0E
2CDA:  BTFSC  FD8.0
2CDC:  BRA    2E04
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]){ 
2CDE:  MOVF   39,W
2CE0:  SUBWF  35,W
2CE2:  BNZ   2D80
2CE4:  MOVF   3A,W
2CE6:  SUBWF  36,W
2CE8:  BNZ   2D80
2CEA:  MOVF   3B,W
2CEC:  SUBWF  37,W
2CEE:  BNZ   2D80
2CF0:  MOVF   3C,W
2CF2:  SUBWF  38,W
2CF4:  BNZ   2D80
....................             lcd_gotoxy(1,1); 
2CF6:  MOVLW  01
2CF8:  MOVWF  xCC
2CFA:  MOVWF  xCD
2CFC:  CALL   08F6
....................             printf(lcd_putc,"                    "); 
2D00:  MOVLW  DA
2D02:  MOVWF  FF6
2D04:  MOVLW  03
2D06:  MOVWF  FF7
2D08:  CALL   09B6
....................             lcd_gotoxy(1,2); 
2D0C:  MOVLW  01
2D0E:  MOVWF  xCC
2D10:  MOVLW  02
2D12:  MOVWF  xCD
2D14:  CALL   08F6
....................             printf(lcd_putc,"     Contraseña     "); 
2D18:  MOVLW  F0
2D1A:  MOVWF  FF6
2D1C:  MOVLW  03
2D1E:  MOVWF  FF7
2D20:  CALL   09B6
....................             lcd_gotoxy(1,3); 
2D24:  MOVLW  01
2D26:  MOVWF  xCC
2D28:  MOVLW  03
2D2A:  MOVWF  xCD
2D2C:  CALL   08F6
....................             printf(lcd_putc,"      Correcta      "); 
2D30:  MOVLW  06
2D32:  MOVWF  FF6
2D34:  MOVLW  04
2D36:  MOVWF  FF7
2D38:  CALL   09B6
....................             lcd_gotoxy(1,4); 
2D3C:  MOVLW  01
2D3E:  MOVWF  xCC
2D40:  MOVLW  04
2D42:  MOVWF  xCD
2D44:  CALL   08F6
....................             printf(lcd_putc,"                    "); 
2D48:  MOVLW  1C
2D4A:  MOVWF  FF6
2D4C:  MOVLW  04
2D4E:  MOVWF  FF7
2D50:  CALL   09B6
....................             delay_ms(500);Menu=61;unidad=11;printf(lcd_putc,"\f"); 
2D54:  MOVLW  02
2D56:  MOVWF  xBA
2D58:  MOVLW  FA
2D5A:  MOVWF  xD1
2D5C:  CALL   07E8
2D60:  DECFSZ xBA,F
2D62:  BRA    2D58
2D64:  MOVLW  3D
2D66:  MOVWF  18
2D68:  MOVLW  0B
2D6A:  MOVWF  1B
2D6C:  MOVLW  0C
2D6E:  MOVWF  xCB
2D70:  CALL   0958
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
2D74:  CLRF   35
2D76:  CLRF   36
2D78:  CLRF   37
2D7A:  CLRF   38
2D7C:  BSF    17.5
....................          }else{ 
2D7E:  BRA    2E04
....................             lcd_gotoxy(1,1); 
2D80:  MOVLW  01
2D82:  MOVWF  xCC
2D84:  MOVWF  xCD
2D86:  CALL   08F6
....................             printf(lcd_putc,"                    "); 
2D8A:  MOVLW  32
2D8C:  MOVWF  FF6
2D8E:  MOVLW  04
2D90:  MOVWF  FF7
2D92:  CALL   09B6
....................             lcd_gotoxy(1,2); 
2D96:  MOVLW  01
2D98:  MOVWF  xCC
2D9A:  MOVLW  02
2D9C:  MOVWF  xCD
2D9E:  CALL   08F6
....................             printf(lcd_putc,"     Contraseña     "); 
2DA2:  MOVLW  48
2DA4:  MOVWF  FF6
2DA6:  MOVLW  04
2DA8:  MOVWF  FF7
2DAA:  CALL   09B6
....................             lcd_gotoxy(1,3); 
2DAE:  MOVLW  01
2DB0:  MOVWF  xCC
2DB2:  MOVLW  03
2DB4:  MOVWF  xCD
2DB6:  CALL   08F6
....................             printf(lcd_putc,"     Incorrecta     "); 
2DBA:  MOVLW  5E
2DBC:  MOVWF  FF6
2DBE:  MOVLW  04
2DC0:  MOVWF  FF7
2DC2:  CALL   09B6
....................             lcd_gotoxy(1,4); 
2DC6:  MOVLW  01
2DC8:  MOVWF  xCC
2DCA:  MOVLW  04
2DCC:  MOVWF  xCD
2DCE:  CALL   08F6
....................             printf(lcd_putc,"                    "); 
2DD2:  MOVLW  74
2DD4:  MOVWF  FF6
2DD6:  MOVLW  04
2DD8:  MOVWF  FF7
2DDA:  CALL   09B6
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
2DDE:  MOVLW  02
2DE0:  MOVWF  xBA
2DE2:  MOVLW  FA
2DE4:  MOVWF  xD1
2DE6:  CALL   07E8
2DEA:  DECFSZ xBA,F
2DEC:  BRA    2DE2
2DEE:  MOVLW  0B
2DF0:  MOVWF  1B
2DF2:  MOVLW  0C
2DF4:  MOVWF  xCB
2DF6:  CALL   0958
2DFA:  BSF    17.5
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
2DFC:  CLRF   35
2DFE:  CLRF   36
2E00:  CLRF   37
2E02:  CLRF   38
....................          } 
....................       } 
....................    }       
.................... //----------------Fin-Menu3--------------------------------------------------------------- 
....................  
.................... //----------------Menu6.1--------------------------------------------------------------- 
....................    if(Menu == 61){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
2E04:  MOVF   18,W
2E06:  SUBLW  3D
2E08:  BTFSS  FD8.2
2E0A:  BRA    3194
....................       EliminaRuido(); 
2E0C:  CALL   0004
.................... //      if(Cambio){ 
....................          lcd_gotoxy(1,1); 
2E10:  MOVLW  01
2E12:  MOVWF  xCC
2E14:  MOVWF  xCD
2E16:  CALL   08F6
....................          printf(lcd_putc,"   Ingrese Nueva    "); 
2E1A:  MOVLW  8A
2E1C:  MOVWF  FF6
2E1E:  MOVLW  04
2E20:  MOVWF  FF7
2E22:  CALL   09B6
....................          lcd_gotoxy(1,2); 
2E26:  MOVLW  01
2E28:  MOVWF  xCC
2E2A:  MOVLW  02
2E2C:  MOVWF  xCD
2E2E:  CALL   08F6
....................          printf(lcd_putc,"     Contraseña     "); 
2E32:  MOVLW  A0
2E34:  MOVWF  FF6
2E36:  MOVLW  04
2E38:  MOVWF  FF7
2E3A:  CALL   09B6
....................          lcd_gotoxy(1,3); 
2E3E:  MOVLW  01
2E40:  MOVWF  xCC
2E42:  MOVLW  03
2E44:  MOVWF  xCD
2E46:  CALL   08F6
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2E4A:  MOVLW  B6
2E4C:  MOVWF  FF6
2E4E:  MOVLW  04
2E50:  MOVWF  FF7
2E52:  MOVLW  0A
2E54:  MOVWF  xBE
2E56:  CALL   10DA
2E5A:  MOVFF  35,BA
2E5E:  MOVLW  1F
2E60:  MOVWF  xBB
2E62:  CALL   1120
2E66:  MOVFF  36,BA
2E6A:  MOVLW  1F
2E6C:  MOVWF  xBB
2E6E:  CALL   1120
2E72:  MOVFF  37,BA
2E76:  MOVLW  1F
2E78:  MOVWF  xBB
2E7A:  CALL   1120
2E7E:  MOVFF  38,BA
2E82:  MOVLW  1F
2E84:  MOVWF  xBB
2E86:  CALL   1120
2E8A:  MOVLW  20
2E8C:  MOVWF  xCB
2E8E:  CALL   0958
2E92:  MOVLW  20
2E94:  MOVWF  xCB
2E96:  CALL   0958
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
2E9A:  MOVFF  1B,CC
2E9E:  MOVLW  04
2EA0:  MOVWF  xCD
2EA2:  CALL   08F6
....................          lcd_putc(t[2]); 
2EA6:  MOVFF  34,CB
2EAA:  CALL   0958
....................           
....................          if(unidad>11&&unidad<14){ 
2EAE:  MOVF   1B,W
2EB0:  SUBLW  0B
2EB2:  BC    2ED2
2EB4:  MOVF   1B,W
2EB6:  SUBLW  0D
2EB8:  BNC   2ED2
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2EBA:  MOVLW  01
2EBC:  SUBWF  1B,W
2EBE:  MOVWF  xBA
2EC0:  MOVWF  xCC
2EC2:  MOVLW  04
2EC4:  MOVWF  xCD
2EC6:  CALL   08F6
....................             lcd_putc(t[1]); 
2ECA:  MOVFF  33,CB
2ECE:  CALL   0958
....................          } 
....................           
....................          Cambio=OFF; 
2ED2:  BCF    17.5
.................... //      } 
....................        
....................       if(UP){//Si oprime hacia arriba 
2ED4:  BSF    F92.5
2ED6:  BTFSC  F80.5
2ED8:  BRA    2F0C
....................          delay_ms(20); 
2EDA:  MOVLW  14
2EDC:  MOVWF  xD1
2EDE:  CALL   07E8
....................          if(UP){ 
2EE2:  BSF    F92.5
2EE4:  BTFSC  F80.5
2EE6:  BRA    2F0A
....................             if(Flanco == 0) { 
2EE8:  BTFSC  16.3
2EEA:  BRA    2F0A
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
2EEC:  MOVLW  0B
2EEE:  SUBWF  1B,W
2EF0:  CLRF   03
2EF2:  ADDLW  35
2EF4:  MOVWF  FE9
2EF6:  MOVLW  00
2EF8:  ADDWFC 03,W
2EFA:  MOVWF  FEA
2EFC:  INCF   FEF,F
2EFE:  BSF    16.3
2F00:  MOVLW  1E
2F02:  MOVWF  xD1
2F04:  CALL   07E8
2F08:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2F0A:  BRA    2F0E
....................          Flanco = 0; 
2F0C:  BCF    16.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
2F0E:  BSF    F96.0
2F10:  BTFSC  F84.0
2F12:  BRA    2F46
....................          delay_ms(20); 
2F14:  MOVLW  14
2F16:  MOVWF  xD1
2F18:  CALL   07E8
....................          if(DOWN){ 
2F1C:  BSF    F96.0
2F1E:  BTFSC  F84.0
2F20:  BRA    2F44
....................             if(Flanco2 == 0) { 
2F22:  BTFSC  16.5
2F24:  BRA    2F44
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
2F26:  MOVLW  0B
2F28:  SUBWF  1B,W
2F2A:  CLRF   03
2F2C:  ADDLW  35
2F2E:  MOVWF  FE9
2F30:  MOVLW  00
2F32:  ADDWFC 03,W
2F34:  MOVWF  FEA
2F36:  DECF   FEF,F
2F38:  BSF    16.5
2F3A:  MOVLW  1E
2F3C:  MOVWF  xD1
2F3E:  CALL   07E8
2F42:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2F44:  BRA    2F48
....................          Flanco2 = 0; 
2F46:  BCF    16.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
2F48:  BSF    F96.1
2F4A:  BTFSC  F84.1
2F4C:  BRA    2F70
....................          if(RIGHT){ 
2F4E:  BSF    F96.1
2F50:  BTFSC  F84.1
2F52:  BRA    2F6E
....................             if(Flanco1 == 0) { 
2F54:  BTFSC  16.4
2F56:  BRA    2F6E
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2F58:  BSF    16.4
2F5A:  INCF   1B,F
2F5C:  MOVLW  1E
2F5E:  MOVWF  xD1
2F60:  CALL   07E8
2F64:  MOVLW  0C
2F66:  MOVWF  xCB
2F68:  CALL   0958
2F6C:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2F6E:  BRA    2F72
....................          Flanco1 = 0; 
2F70:  BCF    16.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
2F72:  BSF    F96.2
2F74:  BTFSC  F84.2
2F76:  BRA    2FA2
....................          delay_ms(150); 
2F78:  MOVLW  96
2F7A:  MOVWF  xD1
2F7C:  CALL   07E8
....................          if(IZQU){ 
2F80:  BSF    F96.2
2F82:  BTFSC  F84.2
2F84:  BRA    2FA0
....................             if(Flanco3 == 0){ 
2F86:  BTFSC  16.6
2F88:  BRA    2FA0
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2F8A:  BSF    16.6
2F8C:  DECF   1B,F
2F8E:  MOVLW  1E
2F90:  MOVWF  xD1
2F92:  CALL   07E8
2F96:  MOVLW  0C
2F98:  MOVWF  xCB
2F9A:  CALL   0958
2F9E:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2FA0:  BRA    2FA4
....................         Flanco3 = 0; 
2FA2:  BCF    16.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
2FA4:  MOVLW  0B
2FA6:  SUBWF  1B,W
2FA8:  CLRF   03
2FAA:  ADDLW  35
2FAC:  MOVWF  FE9
2FAE:  MOVLW  00
2FB0:  ADDWFC 03,W
2FB2:  MOVWF  FEA
2FB4:  BTFSC  FEF.7
2FB6:  BRA    2FBA
2FB8:  BRA    2FCE
....................          clave[unidad-11]=9; 
2FBA:  MOVLW  0B
2FBC:  SUBWF  1B,W
2FBE:  CLRF   03
2FC0:  ADDLW  35
2FC2:  MOVWF  FE9
2FC4:  MOVLW  00
2FC6:  ADDWFC 03,W
2FC8:  MOVWF  FEA
2FCA:  MOVLW  09
2FCC:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
2FCE:  MOVLW  0B
2FD0:  SUBWF  1B,W
2FD2:  CLRF   03
2FD4:  ADDLW  35
2FD6:  MOVWF  FE9
2FD8:  MOVLW  00
2FDA:  ADDWFC 03,W
2FDC:  MOVWF  FEA
2FDE:  BTFSC  FEF.7
2FE0:  BRA    2FFA
2FE2:  MOVF   FEF,W
2FE4:  SUBLW  09
2FE6:  BC    2FFA
....................          clave[unidad-11]=0; 
2FE8:  MOVLW  0B
2FEA:  SUBWF  1B,W
2FEC:  CLRF   03
2FEE:  ADDLW  35
2FF0:  MOVWF  FE9
2FF2:  MOVLW  00
2FF4:  ADDWFC 03,W
2FF6:  MOVWF  FEA
2FF8:  CLRF   FEF
....................         
....................       if(unidad<11){             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
2FFA:  MOVF   1B,W
2FFC:  SUBLW  0A
2FFE:  BNC   301E
....................          unidad=11; 
3000:  MOVLW  0B
3002:  MOVWF  1B
....................          Menu=1; 
3004:  MOVLW  01
3006:  MOVWF  18
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
3008:  CLRF   35
300A:  CLRF   36
300C:  CLRF   37
300E:  CLRF   38
3010:  BSF    17.5
....................          unidad=11;printf(lcd_putc,"\f"); 
3012:  MOVLW  0B
3014:  MOVWF  1B
3016:  MOVLW  0C
3018:  MOVWF  xCB
301A:  CALL   0958
....................       } 
....................         
....................       if(unidad>14){// Si ya ingreso la nueva contraseña.      
301E:  MOVF   1B,W
3020:  SUBLW  0E
3022:  BTFSC  FD8.0
3024:  BRA    3194
....................          lcd_gotoxy(1,1); 
3026:  MOVLW  01
3028:  MOVWF  xCC
302A:  MOVWF  xCD
302C:  CALL   08F6
....................          printf(lcd_putc,"                    "); 
3030:  MOVLW  CC
3032:  MOVWF  FF6
3034:  MOVLW  04
3036:  MOVWF  FF7
3038:  CALL   09B6
....................          lcd_gotoxy(1,2); 
303C:  MOVLW  01
303E:  MOVWF  xCC
3040:  MOVLW  02
3042:  MOVWF  xCD
3044:  CALL   08F6
....................          printf(lcd_putc,"     Contraseña     "); 
3048:  MOVLW  E2
304A:  MOVWF  FF6
304C:  MOVLW  04
304E:  MOVWF  FF7
3050:  CALL   09B6
....................          lcd_gotoxy(1,3); 
3054:  MOVLW  01
3056:  MOVWF  xCC
3058:  MOVLW  03
305A:  MOVWF  xCD
305C:  CALL   08F6
....................          printf(lcd_putc,"     Almacenada     "); 
3060:  MOVLW  F8
3062:  MOVWF  FF6
3064:  MOVLW  04
3066:  MOVWF  FF7
3068:  CALL   09B6
....................          lcd_gotoxy(1,4); 
306C:  MOVLW  01
306E:  MOVWF  xCC
3070:  MOVLW  04
3072:  MOVWF  xCD
3074:  CALL   08F6
....................          printf(lcd_putc,"                    "); 
3078:  MOVLW  0E
307A:  MOVWF  FF6
307C:  MOVLW  05
307E:  MOVWF  FF7
3080:  CALL   09B6
....................          write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
3084:  CLRF   FA9
3086:  MOVFF  35,FA8
308A:  BCF    FA6.6
308C:  BCF    FA6.7
308E:  BSF    FA6.2
3090:  MOVF   FF2,W
3092:  MOVWF  00
3094:  BCF    FF2.7
3096:  MOVLB  F
3098:  MOVLW  55
309A:  MOVWF  FA7
309C:  MOVLW  AA
309E:  MOVWF  FA7
30A0:  BSF    FA6.1
30A2:  BTFSC  FA6.1
30A4:  BRA    30A2
30A6:  BCF    FA6.2
30A8:  MOVF   00,W
30AA:  IORWF  FF2,F
30AC:  MOVLW  14
30AE:  MOVLB  0
30B0:  MOVWF  xD1
30B2:  CALL   07E8
30B6:  MOVLW  01
30B8:  MOVWF  FA9
30BA:  MOVFF  36,FA8
30BE:  BCF    FA6.6
30C0:  BCF    FA6.7
30C2:  BSF    FA6.2
30C4:  MOVF   FF2,W
30C6:  MOVWF  00
30C8:  BCF    FF2.7
30CA:  MOVLB  F
30CC:  MOVLW  55
30CE:  MOVWF  FA7
30D0:  MOVLW  AA
30D2:  MOVWF  FA7
30D4:  BSF    FA6.1
30D6:  BTFSC  FA6.1
30D8:  BRA    30D6
30DA:  BCF    FA6.2
30DC:  MOVF   00,W
30DE:  IORWF  FF2,F
30E0:  MOVLW  14
30E2:  MOVLB  0
30E4:  MOVWF  xD1
30E6:  CALL   07E8
....................          write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
30EA:  MOVLW  02
30EC:  MOVWF  FA9
30EE:  MOVFF  37,FA8
30F2:  BCF    FA6.6
30F4:  BCF    FA6.7
30F6:  BSF    FA6.2
30F8:  MOVF   FF2,W
30FA:  MOVWF  00
30FC:  BCF    FF2.7
30FE:  MOVLB  F
3100:  MOVLW  55
3102:  MOVWF  FA7
3104:  MOVLW  AA
3106:  MOVWF  FA7
3108:  BSF    FA6.1
310A:  BTFSC  FA6.1
310C:  BRA    310A
310E:  BCF    FA6.2
3110:  MOVF   00,W
3112:  IORWF  FF2,F
3114:  MOVLW  14
3116:  MOVLB  0
3118:  MOVWF  xD1
311A:  CALL   07E8
311E:  MOVLW  03
3120:  MOVWF  FA9
3122:  MOVFF  38,FA8
3126:  BCF    FA6.6
3128:  BCF    FA6.7
312A:  BSF    FA6.2
312C:  MOVF   FF2,W
312E:  MOVWF  00
3130:  BCF    FF2.7
3132:  MOVLB  F
3134:  MOVLW  55
3136:  MOVWF  FA7
3138:  MOVLW  AA
313A:  MOVWF  FA7
313C:  BSF    FA6.1
313E:  BTFSC  FA6.1
3140:  BRA    313E
3142:  BCF    FA6.2
3144:  MOVF   00,W
3146:  IORWF  FF2,F
3148:  MOVLW  14
314A:  MOVLB  0
314C:  MOVWF  xD1
314E:  CALL   07E8
....................          delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
3152:  MOVLW  02
3154:  MOVWF  xBA
3156:  MOVLW  FA
3158:  MOVWF  xD1
315A:  CALL   07E8
315E:  DECFSZ xBA,F
3160:  BRA    3156
3162:  MOVLW  01
3164:  MOVWF  18
3166:  CLRF   31
3168:  MOVLW  02
316A:  MOVWF  1C
316C:  MOVWF  1E
....................          contrasena[0]=clave[0];contrasena[1]=clave[1];contrasena[2]=clave[2];contrasena[3]=clave[3]; 
316E:  MOVFF  35,39
3172:  MOVFF  36,3A
3176:  MOVFF  37,3B
317A:  MOVFF  38,3C
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
317E:  CLRF   35
3180:  CLRF   36
3182:  CLRF   37
3184:  CLRF   38
3186:  BSF    17.5
....................          unidad=11;printf(lcd_putc,"\f");          
3188:  MOVLW  0B
318A:  MOVWF  1B
318C:  MOVLW  0C
318E:  MOVWF  xCB
3190:  CALL   0958
....................       } 
....................    }       
.................... //----------------Fin-Menu6.1--------------------------------------------------------------- 
....................     
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu de tiempo de trabajo de Luz UV 
3194:  MOVF   18,W
3196:  SUBLW  04
3198:  BTFSS  FD8.2
319A:  BRA    33AE
....................    EliminaRuido(); 
319C:  CALL   0004
.................... //   if(Cambio){ 
....................       lcd_gotoxy(1,1); 
31A0:  MOVLW  01
31A2:  MOVWF  xCC
31A4:  MOVWF  xCD
31A6:  CALL   08F6
....................       printf(lcd_putc,"  Duracion Actual   "); 
31AA:  MOVLW  24
31AC:  MOVWF  FF6
31AE:  MOVLW  05
31B0:  MOVWF  FF7
31B2:  CALL   09B6
....................       lcd_gotoxy(1,2); 
31B6:  MOVLW  01
31B8:  MOVWF  xCC
31BA:  MOVLW  02
31BC:  MOVWF  xCD
31BE:  CALL   08F6
....................       printf(lcd_putc,"   Tiempo= %05Lu   ",horas); 
31C2:  MOVLW  3A
31C4:  MOVWF  FF6
31C6:  MOVLW  05
31C8:  MOVWF  FF7
31CA:  MOVLW  0B
31CC:  MOVWF  xBE
31CE:  CALL   10DA
31D2:  MOVLW  08
31D4:  MOVWF  FE9
31D6:  MOVFF  41,BB
31DA:  MOVFF  40,BA
31DE:  GOTO   1330
31E2:  MOVLW  20
31E4:  MOVWF  xCB
31E6:  CALL   0958
31EA:  MOVLW  20
31EC:  MOVWF  xCB
31EE:  CALL   0958
31F2:  MOVLW  20
31F4:  MOVWF  xCB
31F6:  CALL   0958
....................       lcd_gotoxy(1,4); 
31FA:  MOVLW  01
31FC:  MOVWF  xCC
31FE:  MOVLW  04
3200:  MOVWF  xCD
3202:  CALL   08F6
....................       printf(lcd_putc," RESET= Oprima ^ y > "); 
3206:  MOVLW  4E
3208:  MOVWF  FF6
320A:  MOVLW  05
320C:  MOVWF  FF7
320E:  CALL   09B6
....................        
....................       Cambio=OFF; 
3212:  BCF    17.5
.................... //   } 
....................     
....................       if(UP && RIGHT){//Si oprime hacia arriba 
3214:  BSF    F92.5
3216:  BTFSC  F80.5
3218:  BRA    336A
321A:  BSF    F96.1
321C:  BTFSC  F84.1
321E:  BRA    336A
....................          delay_ms(20); 
3220:  MOVLW  14
3222:  MOVWF  xD1
3224:  CALL   07E8
....................          if(UP && RIGHT){ 
3228:  BSF    F92.5
322A:  BTFSC  F80.5
322C:  BRA    336A
322E:  BSF    F96.1
3230:  BTFSC  F84.1
3232:  BRA    336A
....................             delay_ms(200); 
3234:  MOVLW  C8
3236:  MOVWF  xD1
3238:  CALL   07E8
....................             printf(lcd_putc,"\f"); 
323C:  MOVLW  0C
323E:  MOVWF  xCB
3240:  CALL   0958
....................             lcd_gotoxy(1,2); 
3244:  MOVLW  01
3246:  MOVWF  xCC
3248:  MOVLW  02
324A:  MOVWF  xCD
324C:  CALL   08F6
....................             printf(lcd_putc," Reset de tiempo "); 
3250:  MOVLW  64
3252:  MOVWF  FF6
3254:  MOVLW  05
3256:  MOVWF  FF7
3258:  CALL   09B6
....................             lcd_gotoxy(1,3); 
325C:  MOVLW  01
325E:  MOVWF  xCC
3260:  MOVLW  03
3262:  MOVWF  xCD
3264:  CALL   08F6
....................             printf(lcd_putc,"     Exitoso     "); 
3268:  MOVLW  76
326A:  MOVWF  FF6
326C:  MOVLW  05
326E:  MOVWF  FF7
3270:  CALL   09B6
....................             write_eeprom(7,0); 
3274:  MOVLW  07
3276:  MOVWF  FA9
3278:  CLRF   FA8
327A:  BCF    FA6.6
327C:  BCF    FA6.7
327E:  BSF    FA6.2
3280:  MOVF   FF2,W
3282:  MOVWF  00
3284:  BCF    FF2.7
3286:  MOVLB  F
3288:  MOVLW  55
328A:  MOVWF  FA7
328C:  MOVLW  AA
328E:  MOVWF  FA7
3290:  BSF    FA6.1
3292:  BTFSC  FA6.1
3294:  BRA    3292
3296:  BCF    FA6.2
3298:  MOVF   00,W
329A:  IORWF  FF2,F
....................             delay_ms(20); 
329C:  MOVLW  14
329E:  MOVLB  0
32A0:  MOVWF  xD1
32A2:  CALL   07E8
....................             write_eeprom(8,0); 
32A6:  MOVLW  08
32A8:  MOVWF  FA9
32AA:  CLRF   FA8
32AC:  BCF    FA6.6
32AE:  BCF    FA6.7
32B0:  BSF    FA6.2
32B2:  MOVF   FF2,W
32B4:  MOVWF  00
32B6:  BCF    FF2.7
32B8:  MOVLB  F
32BA:  MOVLW  55
32BC:  MOVWF  FA7
32BE:  MOVLW  AA
32C0:  MOVWF  FA7
32C2:  BSF    FA6.1
32C4:  BTFSC  FA6.1
32C6:  BRA    32C4
32C8:  BCF    FA6.2
32CA:  MOVF   00,W
32CC:  IORWF  FF2,F
....................             delay_ms(20); 
32CE:  MOVLW  14
32D0:  MOVLB  0
32D2:  MOVWF  xD1
32D4:  CALL   07E8
....................             write_eeprom(9,0); 
32D8:  MOVLW  09
32DA:  MOVWF  FA9
32DC:  CLRF   FA8
32DE:  BCF    FA6.6
32E0:  BCF    FA6.7
32E2:  BSF    FA6.2
32E4:  MOVF   FF2,W
32E6:  MOVWF  00
32E8:  BCF    FF2.7
32EA:  MOVLB  F
32EC:  MOVLW  55
32EE:  MOVWF  FA7
32F0:  MOVLW  AA
32F2:  MOVWF  FA7
32F4:  BSF    FA6.1
32F6:  BTFSC  FA6.1
32F8:  BRA    32F6
32FA:  BCF    FA6.2
32FC:  MOVF   00,W
32FE:  IORWF  FF2,F
....................             delay_ms(20); 
3300:  MOVLW  14
3302:  MOVLB  0
3304:  MOVWF  xD1
3306:  CALL   07E8
....................             write_eeprom(10,0); 
330A:  MOVLW  0A
330C:  MOVWF  FA9
330E:  CLRF   FA8
3310:  BCF    FA6.6
3312:  BCF    FA6.7
3314:  BSF    FA6.2
3316:  MOVF   FF2,W
3318:  MOVWF  00
331A:  BCF    FF2.7
331C:  MOVLB  F
331E:  MOVLW  55
3320:  MOVWF  FA7
3322:  MOVLW  AA
3324:  MOVWF  FA7
3326:  BSF    FA6.1
3328:  BTFSC  FA6.1
332A:  BRA    3328
332C:  BCF    FA6.2
332E:  MOVF   00,W
3330:  IORWF  FF2,F
....................             delay_ms(700); 
3332:  MOVLW  04
3334:  MOVLB  0
3336:  MOVWF  xBA
3338:  MOVLW  AF
333A:  MOVWF  xD1
333C:  CALL   07E8
3340:  DECFSZ xBA,F
3342:  BRA    3338
....................             segundos=0;minutos=0;horas=0; 
3344:  CLRF   21
3346:  CLRF   22
3348:  CLRF   41
334A:  CLRF   40
....................             delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
334C:  MOVLW  1E
334E:  MOVWF  xD1
3350:  CALL   07E8
3354:  MOVLW  01
3356:  MOVWF  18
3358:  CLRF   31
335A:  MOVLW  02
335C:  MOVWF  1C
335E:  MOVWF  1E
3360:  MOVLW  0C
3362:  MOVWF  xCB
3364:  CALL   0958
....................             Cambio=ON; 
3368:  BSF    17.5
....................          } 
....................       } 
....................              
....................       if(IZQU){// Si oprime Izquierda 
336A:  BSF    F96.2
336C:  BTFSC  F84.2
336E:  BRA    33AC
....................          delay_ms(20); 
3370:  MOVLW  14
3372:  MOVWF  xD1
3374:  CALL   07E8
....................          if(IZQU){ 
3378:  BSF    F96.2
337A:  BTFSC  F84.2
337C:  BRA    33AA
....................             if(Flanco3 == 0){ 
337E:  BTFSC  16.6
3380:  BRA    33AA
....................                Flanco3 = 1;delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f");Cambio=ON; 
3382:  BSF    16.6
3384:  MOVLW  02
3386:  MOVWF  xBA
3388:  MOVLW  FA
338A:  MOVWF  xD1
338C:  CALL   07E8
3390:  DECFSZ xBA,F
3392:  BRA    3388
3394:  MOVLW  01
3396:  MOVWF  18
3398:  CLRF   31
339A:  MOVLW  02
339C:  MOVWF  1C
339E:  MOVWF  1E
33A0:  MOVLW  0C
33A2:  MOVWF  xCB
33A4:  CALL   0958
33A8:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
33AA:  BRA    33AE
....................          Flanco3 = 0; 
33AC:  BCF    16.6
....................       } 
....................    } 
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5){ // Menu de Punto Cero 
33AE:  MOVF   18,W
33B0:  SUBLW  05
33B2:  BTFSS  FD8.2
33B4:  BRA    360A
....................       EliminaRuido(); 
33B6:  CALL   0004
.................... //      if(Cambio){ 
....................          lcd_gotoxy(1,1); 
33BA:  MOVLW  01
33BC:  MOVWF  xCC
33BE:  MOVWF  xCD
33C0:  CALL   08F6
....................          printf(lcd_putc,"  Zero Point Config "); 
33C4:  MOVLW  88
33C6:  MOVWF  FF6
33C8:  MOVLW  05
33CA:  MOVWF  FF7
33CC:  CALL   09B6
....................          lcd_gotoxy(1,2); 
33D0:  MOVLW  01
33D2:  MOVWF  xCC
33D4:  MOVLW  02
33D6:  MOVWF  xCD
33D8:  CALL   08F6
....................          printf(lcd_putc,"Presion= %3.2f inH2O ",(Leer_Sensor_Presion(5)*4.02)); 
33DC:  MOVLW  05
33DE:  MOVWF  xBA
33E0:  CALL   1800
33E4:  MOVFF  00,BA
33E8:  MOVFF  01,BB
33EC:  MOVFF  02,BC
33F0:  MOVFF  03,BD
33F4:  MOVFF  03,D1
33F8:  MOVFF  02,D0
33FC:  MOVFF  01,CF
3400:  MOVFF  00,CE
3404:  MOVLW  D7
3406:  MOVWF  xD5
3408:  MOVLW  A3
340A:  MOVWF  xD4
340C:  CLRF   xD3
340E:  MOVLW  81
3410:  MOVWF  xD2
3412:  CALL   1996
3416:  MOVFF  00,BA
341A:  MOVFF  01,BB
341E:  MOVFF  02,BC
3422:  MOVFF  03,BD
3426:  MOVLW  9E
3428:  MOVWF  FF6
342A:  MOVLW  05
342C:  MOVWF  FF7
342E:  MOVLW  09
3430:  MOVWF  xBE
3432:  CALL   10DA
3436:  MOVLW  02
3438:  MOVWF  FE9
343A:  MOVFF  BD,C1
343E:  MOVFF  BC,C0
3442:  MOVFF  BB,BF
3446:  MOVFF  BA,BE
344A:  MOVWF  xC2
344C:  CALL   1B42
3450:  MOVLW  AC
3452:  MOVWF  FF6
3454:  MOVLW  05
3456:  MOVWF  FF7
3458:  MOVLW  07
345A:  MOVWF  xBE
345C:  CALL   10DA
....................          lcd_gotoxy(1,3); 
3460:  MOVLW  01
3462:  MOVWF  xCC
3464:  MOVLW  03
3466:  MOVWF  xCD
3468:  CALL   08F6
....................          printf(lcd_putc,"    ADC=%2.0f",sensores(0)); 
346C:  CLRF   xBF
346E:  CALL   13E6
3472:  MOVFF  00,BA
3476:  MOVFF  01,BB
347A:  MOVFF  02,BC
347E:  MOVFF  03,BD
3482:  MOVLW  B4
3484:  MOVWF  FF6
3486:  MOVLW  05
3488:  MOVWF  FF7
348A:  MOVLW  08
348C:  MOVWF  xBE
348E:  CALL   10DA
3492:  MOVLW  01
3494:  MOVWF  FE9
3496:  MOVFF  BD,C1
349A:  MOVFF  BC,C0
349E:  MOVFF  BB,BF
34A2:  MOVFF  BA,BE
34A6:  CLRF   xC2
34A8:  CALL   1B42
....................          lcd_gotoxy(1,4); 
34AC:  MOVLW  01
34AE:  MOVWF  xCC
34B0:  MOVLW  04
34B2:  MOVWF  xCD
34B4:  CALL   08F6
....................          printf(lcd_putc,"    ZF=%2.0f",G); 
34B8:  MOVLW  C2
34BA:  MOVWF  FF6
34BC:  MOVLW  05
34BE:  MOVWF  FF7
34C0:  MOVLW  07
34C2:  MOVWF  xBE
34C4:  CALL   10DA
34C8:  MOVLW  01
34CA:  MOVWF  FE9
34CC:  MOVFF  A7,C1
34D0:  MOVFF  A6,C0
34D4:  MOVFF  A5,BF
34D8:  MOVFF  A4,BE
34DC:  CLRF   xC2
34DE:  CALL   1B42
....................           
....................          Cambio=OFF; 
34E2:  BCF    17.5
.................... //      } 
....................      
....................       if(RIGHT){// Si oprime derecha 
34E4:  BSF    F96.1
34E6:  BTFSC  F84.1
34E8:  BRA    35CA
....................          delay_ms(20); 
34EA:  MOVLW  14
34EC:  MOVWF  xD1
34EE:  CALL   07E8
....................          if(RIGHT){ 
34F2:  BSF    F96.1
34F4:  BTFSC  F84.1
34F6:  BRA    35C8
....................             if(Flanco1 == 0){ 
34F8:  BTFSC  16.4
34FA:  BRA    35C8
....................                /*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
34FC:  MOVLW  01
34FE:  MOVWF  18
3500:  CLRF   31
3502:  MOVLW  02
3504:  MOVWF  1C
3506:  MOVWF  1E
3508:  MOVLW  0B
350A:  MOVWF  1B
350C:  MOVLW  02
350E:  MOVWF  xBA
3510:  MOVLW  FA
3512:  MOVWF  xD1
3514:  CALL   07E8
3518:  DECFSZ xBA,F
351A:  BRA    3510
351C:  MOVLW  0C
351E:  MOVWF  xCB
3520:  CALL   0958
....................                G=sensores(0); 
3524:  CLRF   xBF
3526:  CALL   13E6
352A:  MOVFF  03,A7
352E:  MOVFF  02,A6
3532:  MOVFF  01,A5
3536:  MOVFF  00,A4
....................                G16=(int16)G; 
353A:  MOVFF  A7,D1
353E:  MOVFF  A6,D0
3542:  MOVFF  A5,CF
3546:  MOVFF  A4,CE
354A:  CALL   1CC8
354E:  MOVFF  02,43
3552:  MOVFF  01,42
....................                G_l=G16; G_h=(G16>>8); 
3556:  MOVFF  42,25
355A:  MOVFF  43,26
....................                 
....................                write_eeprom(11,G_l); 
355E:  MOVLW  0B
3560:  MOVWF  FA9
3562:  MOVFF  25,FA8
3566:  BCF    FA6.6
3568:  BCF    FA6.7
356A:  BSF    FA6.2
356C:  MOVF   FF2,W
356E:  MOVWF  00
3570:  BCF    FF2.7
3572:  MOVLB  F
3574:  MOVLW  55
3576:  MOVWF  FA7
3578:  MOVLW  AA
357A:  MOVWF  FA7
357C:  BSF    FA6.1
357E:  BTFSC  FA6.1
3580:  BRA    357E
3582:  BCF    FA6.2
3584:  MOVF   00,W
3586:  IORWF  FF2,F
....................                delay_ms(20); 
3588:  MOVLW  14
358A:  MOVLB  0
358C:  MOVWF  xD1
358E:  CALL   07E8
....................                write_eeprom(12,G_h);//Guardar valor de Setpoint en eeprom 
3592:  MOVLW  0C
3594:  MOVWF  FA9
3596:  MOVFF  26,FA8
359A:  BCF    FA6.6
359C:  BCF    FA6.7
359E:  BSF    FA6.2
35A0:  MOVF   FF2,W
35A2:  MOVWF  00
35A4:  BCF    FF2.7
35A6:  MOVLB  F
35A8:  MOVLW  55
35AA:  MOVWF  FA7
35AC:  MOVLW  AA
35AE:  MOVWF  FA7
35B0:  BSF    FA6.1
35B2:  BTFSC  FA6.1
35B4:  BRA    35B2
35B6:  BCF    FA6.2
35B8:  MOVF   00,W
35BA:  IORWF  FF2,F
....................                delay_ms(20); 
35BC:  MOVLW  14
35BE:  MOVLB  0
35C0:  MOVWF  xD1
35C2:  CALL   07E8
....................                Cambio=ON; 
35C6:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
35C8:  BRA    35CC
....................          Flanco1 = 0; 
35CA:  BCF    16.4
....................       } 
....................              
....................       if(IZQU){// Si oprime Izquierda 
35CC:  BSF    F96.2
35CE:  BTFSC  F84.2
35D0:  BRA    3608
....................          delay_ms(20); 
35D2:  MOVLW  14
35D4:  MOVWF  xD1
35D6:  CALL   07E8
....................          if(IZQU){ 
35DA:  BSF    F96.2
35DC:  BTFSC  F84.2
35DE:  BRA    3606
....................             if(Flanco3 == 0){ 
35E0:  BTFSC  16.6
35E2:  BRA    3606
....................                /*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f"); 
35E4:  MOVLW  01
35E6:  MOVWF  18
35E8:  CLRF   31
35EA:  MOVLW  02
35EC:  MOVWF  1C
35EE:  MOVWF  1E
35F0:  MOVLW  0B
35F2:  MOVWF  1B
35F4:  MOVLW  1E
35F6:  MOVWF  xD1
35F8:  CALL   07E8
35FC:  MOVLW  0C
35FE:  MOVWF  xCB
3600:  CALL   0958
....................                Cambio=ON; 
3604:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
3606:  BRA    360A
....................          Flanco3 = 0; 
3608:  BCF    16.6
....................       } 
....................    } 
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6){ // Menu de seleccion de estado de Alarma 
360A:  MOVF   18,W
360C:  SUBLW  06
360E:  BTFSS  FD8.2
3610:  BRA    3738
....................    estadoalarma=!estadoalarma;Flanco1 = 1;Menu=1; paso=0; 
3612:  BTG    17.4
3614:  BSF    16.4
3616:  MOVLW  01
3618:  MOVWF  18
361A:  CLRF   31
....................                        
....................             if(estadoalarma==1) 
361C:  BTFSS  17.4
361E:  BRA    3680
....................             {estadoalarma=1; 
3620:  BSF    17.4
....................                lcd_gotoxy(1,1); 
3622:  MOVLW  01
3624:  MOVWF  xCC
3626:  MOVWF  xCD
3628:  CALL   08F6
....................                printf(lcd_putc,"                    "); 
362C:  MOVLW  D0
362E:  MOVWF  FF6
3630:  MOVLW  05
3632:  MOVWF  FF7
3634:  CALL   09B6
....................                lcd_gotoxy(1,2); 
3638:  MOVLW  01
363A:  MOVWF  xCC
363C:  MOVLW  02
363E:  MOVWF  xCD
3640:  CALL   08F6
....................                printf(lcd_putc,"        Activo      "); 
3644:  MOVLW  E6
3646:  MOVWF  FF6
3648:  MOVLW  05
364A:  MOVWF  FF7
364C:  CALL   09B6
....................                lcd_gotoxy(1,3); 
3650:  MOVLW  01
3652:  MOVWF  xCC
3654:  MOVLW  03
3656:  MOVWF  xCD
3658:  CALL   08F6
....................                printf(lcd_putc,"        Alarma      "); 
365C:  MOVLW  FC
365E:  MOVWF  FF6
3660:  MOVLW  05
3662:  MOVWF  FF7
3664:  CALL   09B6
....................                lcd_gotoxy(1,4); 
3668:  MOVLW  01
366A:  MOVWF  xCC
366C:  MOVLW  04
366E:  MOVWF  xCD
3670:  CALL   08F6
....................                printf(lcd_putc,"                    ");} 
3674:  MOVLW  12
3676:  MOVWF  FF6
3678:  MOVLW  06
367A:  MOVWF  FF7
367C:  CALL   09B6
....................                 
....................             if(estadoalarma==0) 
3680:  BTFSC  17.4
3682:  BRA    36E4
....................             {estadoalarma=0; 
3684:  BCF    17.4
....................                lcd_gotoxy(1,1); 
3686:  MOVLW  01
3688:  MOVWF  xCC
368A:  MOVWF  xCD
368C:  CALL   08F6
....................                printf(lcd_putc,"                    "); 
3690:  MOVLW  28
3692:  MOVWF  FF6
3694:  MOVLW  06
3696:  MOVWF  FF7
3698:  CALL   09B6
....................                lcd_gotoxy(1,2); 
369C:  MOVLW  01
369E:  MOVWF  xCC
36A0:  MOVLW  02
36A2:  MOVWF  xCD
36A4:  CALL   08F6
....................                printf(lcd_putc,"      Desactivo     "); 
36A8:  MOVLW  3E
36AA:  MOVWF  FF6
36AC:  MOVLW  06
36AE:  MOVWF  FF7
36B0:  CALL   09B6
....................                lcd_gotoxy(1,3); 
36B4:  MOVLW  01
36B6:  MOVWF  xCC
36B8:  MOVLW  03
36BA:  MOVWF  xCD
36BC:  CALL   08F6
....................                printf(lcd_putc,"       Alarma       "); 
36C0:  MOVLW  54
36C2:  MOVWF  FF6
36C4:  MOVLW  06
36C6:  MOVWF  FF7
36C8:  CALL   09B6
....................                lcd_gotoxy(1,4); 
36CC:  MOVLW  01
36CE:  MOVWF  xCC
36D0:  MOVLW  04
36D2:  MOVWF  xCD
36D4:  CALL   08F6
....................                printf(lcd_putc,"                    ");} 
36D8:  MOVLW  6A
36DA:  MOVWF  FF6
36DC:  MOVLW  06
36DE:  MOVWF  FF7
36E0:  CALL   09B6
....................               
....................             write_eeprom(4,estadoalarma);delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
36E4:  MOVLW  00
36E6:  BTFSC  17.4
36E8:  MOVLW  01
36EA:  MOVWF  xBA
36EC:  MOVLW  04
36EE:  MOVWF  FA9
36F0:  MOVFF  BA,FA8
36F4:  BCF    FA6.6
36F6:  BCF    FA6.7
36F8:  BSF    FA6.2
36FA:  MOVF   FF2,W
36FC:  MOVWF  00
36FE:  BCF    FF2.7
3700:  MOVLB  F
3702:  MOVLW  55
3704:  MOVWF  FA7
3706:  MOVLW  AA
3708:  MOVWF  FA7
370A:  BSF    FA6.1
370C:  BTFSC  FA6.1
370E:  BRA    370C
3710:  BCF    FA6.2
3712:  MOVF   00,W
3714:  IORWF  FF2,F
3716:  MOVLW  04
3718:  MOVLB  0
371A:  MOVWF  xBA
371C:  MOVLW  FA
371E:  MOVWF  xD1
3720:  CALL   07E8
3724:  DECFSZ xBA,F
3726:  BRA    371C
3728:  MOVLW  02
372A:  MOVWF  1C
372C:  MOVWF  1E
372E:  MOVLW  0C
3730:  MOVWF  xCB
3732:  CALL   0958
....................             Cambio=ON; 
3736:  BSF    17.5
....................    }       
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu7--------------------------------------------------------------- 
....................    if(Menu == 7){ // Menu de seleccion de Velocidad 
3738:  MOVF   18,W
373A:  SUBLW  07
373C:  BTFSS  FD8.2
373E:  BRA    38D8
....................       if(VelMotor>6)VelMotor=6; 
3740:  MOVF   xB0,W
3742:  SUBLW  06
3744:  BC    374A
3746:  MOVLW  06
3748:  MOVWF  xB0
....................       if(VelMotor<1)VelMotor=1; 
374A:  MOVF   xB0,F
374C:  BNZ   3752
374E:  MOVLW  01
3750:  MOVWF  xB0
....................        
....................       lcd_gotoxy(1,1); 
3752:  MOVLW  01
3754:  MOVWF  xCC
3756:  MOVWF  xCD
3758:  CALL   08F6
....................       printf(lcd_putc,"Seleccione Velocidad"); 
375C:  MOVLW  80
375E:  MOVWF  FF6
3760:  MOVLW  06
3762:  MOVWF  FF7
3764:  CALL   09B6
....................       lcd_gotoxy(1,2); 
3768:  MOVLW  01
376A:  MOVWF  xCC
376C:  MOVLW  02
376E:  MOVWF  xCD
3770:  CALL   08F6
....................       printf(lcd_putc,"   del Ventilador   "); 
3774:  MOVLW  96
3776:  MOVWF  FF6
3778:  MOVLW  06
377A:  MOVWF  FF7
377C:  CALL   09B6
....................       lcd_gotoxy(1,3); 
3780:  MOVLW  01
3782:  MOVWF  xCC
3784:  MOVLW  03
3786:  MOVWF  xCD
3788:  CALL   08F6
....................       printf(lcd_putc,"     Vel: %u       ",VelMotor); 
378C:  MOVLW  AC
378E:  MOVWF  FF6
3790:  MOVLW  06
3792:  MOVWF  FF7
3794:  MOVLW  0A
3796:  MOVWF  xBE
3798:  CALL   10DA
379C:  MOVFF  B0,BA
37A0:  MOVLW  1B
37A2:  MOVWF  xBB
37A4:  CALL   12C4
37A8:  MOVLW  B8
37AA:  MOVWF  FF6
37AC:  MOVLW  06
37AE:  MOVWF  FF7
37B0:  MOVLW  07
37B2:  MOVWF  xBE
37B4:  CALL   10DA
....................       lcd_gotoxy(1,4); 
37B8:  MOVLW  01
37BA:  MOVWF  xCC
37BC:  MOVLW  04
37BE:  MOVWF  xCD
37C0:  CALL   08F6
....................       printf(lcd_putc,"                    ");       
37C4:  MOVLW  C0
37C6:  MOVWF  FF6
37C8:  MOVLW  06
37CA:  MOVWF  FF7
37CC:  CALL   09B6
....................        
....................       if(UP && VelMotor<6)//Si oprime hacia arriba 
37D0:  BSF    F92.5
37D2:  BTFSC  F80.5
37D4:  BRA    37E6
37D6:  MOVF   xB0,W
37D8:  SUBLW  05
37DA:  BNC   37E6
....................       {   
....................          delay_ms(100);VelMotor++; 
37DC:  MOVLW  64
37DE:  MOVWF  xD1
37E0:  CALL   07E8
37E4:  INCF   xB0,F
....................       } 
....................              
....................       if(DOWN && VelMotor>0)//Si oprime hacia abajo 
37E6:  BSF    F96.0
37E8:  BTFSC  F84.0
37EA:  BRA    37FA
37EC:  MOVF   xB0,F
37EE:  BZ    37FA
....................       {   
....................          delay_ms(100);VelMotor--; 
37F0:  MOVLW  64
37F2:  MOVWF  xD1
37F4:  CALL   07E8
37F8:  DECF   xB0,F
....................       } 
....................              
....................       if(RIGHT)//Si oprime SET 
37FA:  BSF    F96.1
37FC:  BTFSC  F84.1
37FE:  BRA    3808
....................       {            
....................          VelocidadMotor(VelMotor); 
3800:  MOVFF  B0,BA
3804:  CALL   1056
....................       }  
....................              
....................       if(IZQU)//Si oprime boton de Toma. 
3808:  BSF    F96.2
380A:  BTFSC  F84.2
380C:  BRA    38D8
....................       {                   
....................          delay_ms(100);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
380E:  MOVLW  64
3810:  MOVWF  xD1
3812:  CALL   07E8
3816:  MOVLW  02
3818:  MOVWF  1C
381A:  MOVWF  1E
381C:  MOVLW  0C
381E:  MOVWF  xCB
3820:  CALL   0958
....................          write_eeprom(13,VelMotor);//Guardar valor de Setpoint en eeprom 
3824:  MOVLW  0D
3826:  MOVWF  FA9
3828:  MOVFF  B0,FA8
382C:  BCF    FA6.6
382E:  BCF    FA6.7
3830:  BSF    FA6.2
3832:  MOVF   FF2,W
3834:  MOVWF  00
3836:  BCF    FF2.7
3838:  MOVLB  F
383A:  MOVLW  55
383C:  MOVWF  FA7
383E:  MOVLW  AA
3840:  MOVWF  FA7
3842:  BSF    FA6.1
3844:  BTFSC  FA6.1
3846:  BRA    3844
3848:  BCF    FA6.2
384A:  MOVF   00,W
384C:  IORWF  FF2,F
....................          delay_ms(20); 
384E:  MOVLW  14
3850:  MOVLB  0
3852:  MOVWF  xD1
3854:  CALL   07E8
....................          lcd_gotoxy(1,1); 
3858:  MOVLW  01
385A:  MOVWF  xCC
385C:  MOVWF  xCD
385E:  CALL   08F6
....................          printf(lcd_putc,"                    "); 
3862:  MOVLW  D6
3864:  MOVWF  FF6
3866:  MOVLW  06
3868:  MOVWF  FF7
386A:  CALL   09B6
....................          lcd_gotoxy(1,2); 
386E:  MOVLW  01
3870:  MOVWF  xCC
3872:  MOVLW  02
3874:  MOVWF  xCD
3876:  CALL   08F6
....................          printf(lcd_putc,"     Velocidad      "); 
387A:  MOVLW  EC
387C:  MOVWF  FF6
387E:  MOVLW  06
3880:  MOVWF  FF7
3882:  CALL   09B6
....................          lcd_gotoxy(1,3); 
3886:  MOVLW  01
3888:  MOVWF  xCC
388A:  MOVLW  03
388C:  MOVWF  xCD
388E:  CALL   08F6
....................          printf(lcd_putc,"      Almacenada    "); 
3892:  MOVLW  02
3894:  MOVWF  FF6
3896:  MOVLW  07
3898:  MOVWF  FF7
389A:  CALL   09B6
....................          lcd_gotoxy(1,4); 
389E:  MOVLW  01
38A0:  MOVWF  xCC
38A2:  MOVLW  04
38A4:  MOVWF  xCD
38A6:  CALL   08F6
....................          printf(lcd_putc,"                    ");  
38AA:  MOVLW  18
38AC:  MOVWF  FF6
38AE:  MOVLW  07
38B0:  MOVWF  FF7
38B2:  CALL   09B6
....................          delay_ms(1000); 
38B6:  MOVLW  04
38B8:  MOVWF  xBA
38BA:  MOVLW  FA
38BC:  MOVWF  xD1
38BE:  CALL   07E8
38C2:  DECFSZ xBA,F
38C4:  BRA    38BA
....................          printf(lcd_putc,"\f"); 
38C6:  MOVLW  0C
38C8:  MOVWF  xCB
38CA:  CALL   0958
....................          lcd_init(); 
38CE:  CALL   0878
....................          Menu=1; paso=0; 
38D2:  MOVLW  01
38D4:  MOVWF  18
38D6:  CLRF   31
....................       } 
....................    }       
.................... //----------------Fin-Menu7--------------------------------------------------------------- 
....................  
.................... //----------------Menu100--------------------------------------------------------------- 
....................    if(Menu == 50){ // Menu de seleccion de Estado de Luz UV    
38D8:  MOVF   18,W
38DA:  SUBLW  32
38DC:  BTFSS  FD8.2
38DE:  BRA    3F44
....................    if(Lectura==1){ 
38E0:  BTFSS  17.0
38E2:  BRA    3B3A
....................       Lectura=0; 
38E4:  BCF    17.0
....................       CaidaPresion=Leer_Sensor_Presion(5); 
38E6:  MOVLW  05
38E8:  MOVWF  xBA
38EA:  CALL   1800
38EE:  MOVFF  03,A3
38F2:  MOVFF  02,A2
38F6:  MOVFF  01,A1
38FA:  MOVFF  00,A0
....................       lcd_gotoxy(1,1); 
38FE:  MOVLW  01
3900:  MOVWF  xCC
3902:  MOVWF  xCD
3904:  CALL   08F6
....................       printf(lcd_putc,"JPCR DP:%3.2f inH2O ",(CaidaPresion*4.02));    //   
3908:  MOVFF  A3,D1
390C:  MOVFF  A2,D0
3910:  MOVFF  A1,CF
3914:  MOVFF  A0,CE
3918:  MOVLW  D7
391A:  MOVWF  xD5
391C:  MOVLW  A3
391E:  MOVWF  xD4
3920:  CLRF   xD3
3922:  MOVLW  81
3924:  MOVWF  xD2
3926:  CALL   1996
392A:  MOVFF  00,BA
392E:  MOVFF  01,BB
3932:  MOVFF  02,BC
3936:  MOVFF  03,BD
393A:  MOVLW  2E
393C:  MOVWF  FF6
393E:  MOVLW  07
3940:  MOVWF  FF7
3942:  MOVLW  08
3944:  MOVWF  xBE
3946:  CALL   10DA
394A:  MOVLW  02
394C:  MOVWF  FE9
394E:  MOVFF  BD,C1
3952:  MOVFF  BC,C0
3956:  MOVFF  BB,BF
395A:  MOVFF  BA,BE
395E:  MOVWF  xC2
3960:  CALL   1B42
3964:  MOVLW  3B
3966:  MOVWF  FF6
3968:  MOVLW  07
396A:  MOVWF  FF7
396C:  MOVLW  07
396E:  MOVWF  xBE
3970:  CALL   10DA
....................       //Saturacion=((CaidaPresion-0.07462)/0.15)*11; 
....................       Saturacion=((CaidaPresion-0.1243)/0.29)*20; 
3974:  BSF    FD8.1
3976:  MOVFF  A3,D5
397A:  MOVFF  A2,D4
397E:  MOVFF  A1,D3
3982:  MOVFF  A0,D2
3986:  CLRF   xD9
3988:  MOVLW  91
398A:  MOVWF  xD8
398C:  MOVLW  7E
398E:  MOVWF  xD7
3990:  MOVLW  7B
3992:  MOVWF  xD6
3994:  CALL   1596
3998:  MOVFF  00,BA
399C:  MOVFF  01,BB
39A0:  MOVFF  02,BC
39A4:  MOVFF  03,BD
39A8:  MOVFF  03,D1
39AC:  MOVFF  02,D0
39B0:  MOVFF  01,CF
39B4:  MOVFF  00,CE
39B8:  MOVLW  E1
39BA:  MOVWF  xD5
39BC:  MOVLW  7A
39BE:  MOVWF  xD4
39C0:  MOVLW  14
39C2:  MOVWF  xD3
39C4:  MOVLW  7D
39C6:  MOVWF  xD2
39C8:  CALL   143C
39CC:  MOVFF  00,BA
39D0:  MOVFF  01,BB
39D4:  MOVFF  02,BC
39D8:  MOVFF  03,BD
39DC:  MOVFF  03,D1
39E0:  MOVFF  02,D0
39E4:  MOVFF  01,CF
39E8:  MOVFF  00,CE
39EC:  CLRF   xD5
39EE:  CLRF   xD4
39F0:  MOVLW  20
39F2:  MOVWF  xD3
39F4:  MOVLW  83
39F6:  MOVWF  xD2
39F8:  CALL   1996
39FC:  MOVFF  03,9F
3A00:  MOVFF  02,9E
3A04:  MOVFF  01,9D
3A08:  MOVFF  00,9C
....................        
....................       if(Saturacion>11) 
3A0C:  CLRF   xD1
3A0E:  CLRF   xD0
3A10:  MOVLW  30
3A12:  MOVWF  xCF
3A14:  MOVLW  82
3A16:  MOVWF  xCE
3A18:  MOVFF  9F,D5
3A1C:  MOVFF  9E,D4
3A20:  MOVFF  9D,D3
3A24:  MOVFF  9C,D2
3A28:  CALL   0C50
3A2C:  BNC   3A3A
....................       { 
....................          Saturacion=11; 
3A2E:  CLRF   x9F
3A30:  CLRF   x9E
3A32:  MOVLW  30
3A34:  MOVWF  x9D
3A36:  MOVLW  82
3A38:  MOVWF  x9C
....................       } 
....................        
....................       for(i=0;i<floor(Saturacion);i++) 
3A3A:  CLRF   2D
3A3C:  MOVFF  9F,BD
3A40:  MOVFF  9E,BC
3A44:  MOVFF  9D,BB
3A48:  MOVFF  9C,BA
3A4C:  CALL   203A
3A50:  MOVFF  00,BA
3A54:  MOVFF  01,BB
3A58:  MOVFF  02,BC
3A5C:  MOVFF  03,BD
3A60:  CLRF   xD3
3A62:  MOVFF  2D,D2
3A66:  CALL   0A3C
3A6A:  MOVFF  03,D1
3A6E:  MOVFF  02,D0
3A72:  MOVFF  01,CF
3A76:  MOVFF  00,CE
3A7A:  MOVFF  BD,D5
3A7E:  MOVFF  BC,D4
3A82:  MOVFF  BB,D3
3A86:  MOVFF  BA,D2
3A8A:  CALL   0C50
3A8E:  BNC   3AAC
....................       { 
....................          lcd_gotoxy(i+8,2); 
3A90:  MOVLW  08
3A92:  ADDWF  2D,W
3A94:  MOVWF  xBA
3A96:  MOVWF  xCC
3A98:  MOVLW  02
3A9A:  MOVWF  xCD
3A9C:  CALL   08F6
....................          printf(lcd_putc,"Ñ"); 
3AA0:  MOVLW  D1
3AA2:  MOVWF  xCB
3AA4:  CALL   0958
....................       } 
3AA8:  INCF   2D,F
3AAA:  BRA    3A3C
....................        
....................       for(i=floor(Saturacion);i<11;i++) 
3AAC:  MOVFF  9F,BD
3AB0:  MOVFF  9E,BC
3AB4:  MOVFF  9D,BB
3AB8:  MOVFF  9C,BA
3ABC:  CALL   203A
3AC0:  MOVFF  03,D1
3AC4:  MOVFF  02,D0
3AC8:  MOVFF  01,CF
3ACC:  MOVFF  00,CE
3AD0:  CALL   1CC8
3AD4:  MOVFF  01,2D
3AD8:  MOVF   2D,W
3ADA:  SUBLW  0A
3ADC:  BNC   3AFA
....................       { 
....................          lcd_gotoxy(i+8,2); 
3ADE:  MOVLW  08
3AE0:  ADDWF  2D,W
3AE2:  MOVWF  xBA
3AE4:  MOVWF  xCC
3AE6:  MOVLW  02
3AE8:  MOVWF  xCD
3AEA:  CALL   08F6
....................          printf(lcd_putc," "); 
3AEE:  MOVLW  20
3AF0:  MOVWF  xCB
3AF2:  CALL   0958
....................       } 
3AF6:  INCF   2D,F
3AF8:  BRA    3AD8
....................        
....................       lcd_gotoxy(9,3); 
3AFA:  MOVLW  09
3AFC:  MOVWF  xCC
3AFE:  MOVLW  03
3B00:  MOVWF  xCD
3B02:  CALL   08F6
....................       printf(lcd_putc,"Tempo:%03u:%02u",tempo_minutos,tempo_segundos); 
3B06:  MOVLW  44
3B08:  MOVWF  FF6
3B0A:  MOVLW  07
3B0C:  MOVWF  FF7
3B0E:  MOVLW  06
3B10:  MOVWF  xBE
3B12:  CALL   10DA
3B16:  MOVFF  27,BA
3B1A:  MOVLW  03
3B1C:  MOVWF  xBB
3B1E:  CALL   12C4
3B22:  MOVLW  3A
3B24:  MOVWF  xCB
3B26:  CALL   0958
3B2A:  MOVFF  28,BA
3B2E:  MOVLW  01
3B30:  MOVWF  xBB
3B32:  CALL   12C4
....................       EliminaRuido(); 
3B36:  CALL   0004
....................    } 
....................      
....................    if(tiempo_cumplido==1) 
3B3A:  BTFSS  16.7
3B3C:  BRA    3BD6
....................    { 
....................       if(estadoalarma==1) 
3B3E:  BTFSS  17.4
3B40:  BRA    3BCC
....................       { 
....................          printf(lcd_putc,"\f"); 
3B42:  MOVLW  0C
3B44:  MOVWF  xCB
3B46:  CALL   0958
....................          lcd_gotoxy(1,2); 
3B4A:  MOVLW  01
3B4C:  MOVWF  xCC
3B4E:  MOVLW  02
3B50:  MOVWF  xCD
3B52:  CALL   08F6
....................          printf(lcd_putc,"  Temporizador  de  "); 
3B56:  MOVLW  54
3B58:  MOVWF  FF6
3B5A:  MOVLW  07
3B5C:  MOVWF  FF7
3B5E:  CALL   09B6
....................          lcd_gotoxy(1,3); 
3B62:  MOVLW  01
3B64:  MOVWF  xCC
3B66:  MOVLW  03
3B68:  MOVWF  xCD
3B6A:  CALL   08F6
....................          printf(lcd_putc," Luz UV  Finalizado "); 
3B6E:  MOVLW  6A
3B70:  MOVWF  FF6
3B72:  MOVLW  07
3B74:  MOVWF  FF7
3B76:  CALL   09B6
....................          lcd_gotoxy(1,4); 
3B7A:  MOVLW  01
3B7C:  MOVWF  xCC
3B7E:  MOVLW  04
3B80:  MOVWF  xCD
3B82:  CALL   08F6
....................          printf(lcd_putc,"                    "); 
3B86:  MOVLW  80
3B88:  MOVWF  FF6
3B8A:  MOVLW  07
3B8C:  MOVWF  FF7
3B8E:  CALL   09B6
....................          lcd_gotoxy(1,1); 
3B92:  MOVLW  01
3B94:  MOVWF  xCC
3B96:  MOVWF  xCD
3B98:  CALL   08F6
....................          printf(lcd_putc,"                    "); 
3B9C:  MOVLW  96
3B9E:  MOVWF  FF6
3BA0:  MOVLW  07
3BA2:  MOVWF  FF7
3BA4:  CALL   09B6
....................          for(i=0;i<5;i++) 
3BA8:  CLRF   2D
3BAA:  MOVF   2D,W
3BAC:  SUBLW  04
3BAE:  BNC   3BCC
....................          { 
....................             Buzzer_on; 
3BB0:  BSF    F8B.0
3BB2:  BCF    F94.0
....................             delay_ms(200); 
3BB4:  MOVLW  C8
3BB6:  MOVWF  xD1
3BB8:  CALL   07E8
....................             Buzzer_off; 
3BBC:  BCF    F8B.0
3BBE:  BCF    F94.0
....................             delay_ms(200); 
3BC0:  MOVLW  C8
3BC2:  MOVWF  xD1
3BC4:  CALL   07E8
....................          } 
3BC8:  INCF   2D,F
3BCA:  BRA    3BAA
....................       } 
....................       tiempo_cumplido=0; 
3BCC:  BCF    16.7
....................       printf(lcd_putc,"\f"); 
3BCE:  MOVLW  0C
3BD0:  MOVWF  xCB
3BD2:  CALL   0958
....................    } 
....................     
....................    if(CaidaPresion>=0.285)//Maxima caida de Presion = 1.2inH20 = 0.29kPa 
3BD6:  MOVLW  85
3BD8:  MOVWF  xD1
3BDA:  MOVLW  EB
3BDC:  MOVWF  xD0
3BDE:  MOVLW  11
3BE0:  MOVWF  xCF
3BE2:  MOVLW  7D
3BE4:  MOVWF  xCE
3BE6:  MOVFF  A3,D5
3BEA:  MOVFF  A2,D4
3BEE:  MOVFF  A1,D3
3BF2:  MOVFF  A0,D2
3BF6:  CALL   0C50
3BFA:  BC    3BFE
3BFC:  BNZ   3C04
....................    {  
....................       ActivaBuzzer=1; 
3BFE:  MOVLW  01
3C00:  MOVWF  3D
....................    } 
....................    else 
3C02:  BRA    3C0A
....................    { 
....................       ActivaBuzzer=0; 
3C04:  CLRF   3D
....................       Buzzer_off; 
3C06:  BCF    F8B.0
3C08:  BCF    F94.0
....................    } 
....................        
....................    //if(Cambio){ 
....................       lcd_gotoxy(1,2); 
3C0A:  MOVLW  01
3C0C:  MOVWF  xCC
3C0E:  MOVLW  02
3C10:  MOVWF  xCD
3C12:  CALL   08F6
....................       printf(lcd_putc,"Filtro:"); 
3C16:  MOVLW  AC
3C18:  MOVWF  FF6
3C1A:  MOVLW  07
3C1C:  MOVWF  FF7
3C1E:  CALL   09B6
....................        
....................       if(estadomv==1) 
3C22:  BTFSS  16.2
3C24:  BRA    3C40
....................       { 
....................          lcd_gotoxy(1,4); 
3C26:  MOVLW  01
3C28:  MOVWF  xCC
3C2A:  MOVLW  04
3C2C:  MOVWF  xCD
3C2E:  CALL   08F6
....................          printf(lcd_putc,"Motor:ON ");       
3C32:  MOVLW  B4
3C34:  MOVWF  FF6
3C36:  MOVLW  07
3C38:  MOVWF  FF7
3C3A:  CALL   09B6
....................       } 
....................       else 
3C3E:  BRA    3C58
....................       { 
....................          lcd_gotoxy(1,4); 
3C40:  MOVLW  01
3C42:  MOVWF  xCC
3C44:  MOVLW  04
3C46:  MOVWF  xCD
3C48:  CALL   08F6
....................          printf(lcd_putc,"Motor:OFF"); 
3C4C:  MOVLW  BE
3C4E:  MOVWF  FF6
3C50:  MOVLW  07
3C52:  MOVWF  FF7
3C54:  CALL   09B6
....................       } 
....................        
....................       if(estadouv==1) 
3C58:  BTFSS  16.0
3C5A:  BRA    3C76
....................       { 
....................          lcd_gotoxy(13,4); 
3C5C:  MOVLW  0D
3C5E:  MOVWF  xCC
3C60:  MOVLW  04
3C62:  MOVWF  xCD
3C64:  CALL   08F6
....................          printf(lcd_putc,"UV:ON "); 
3C68:  MOVLW  C8
3C6A:  MOVWF  FF6
3C6C:  MOVLW  07
3C6E:  MOVWF  FF7
3C70:  CALL   09B6
....................       } 
....................       else 
3C74:  BRA    3C8E
....................       {          
....................          lcd_gotoxy(13,4); 
3C76:  MOVLW  0D
3C78:  MOVWF  xCC
3C7A:  MOVLW  04
3C7C:  MOVWF  xCD
3C7E:  CALL   08F6
....................          printf(lcd_putc,"UV:OFF"); 
3C82:  MOVLW  D0
3C84:  MOVWF  FF6
3C86:  MOVLW  07
3C88:  MOVWF  FF7
3C8A:  CALL   09B6
....................       } 
....................        
....................       if(estadofl==1) 
3C8E:  BTFSS  16.1
3C90:  BRA    3CAC
....................       { 
....................          lcd_gotoxy(1,3); 
3C92:  MOVLW  01
3C94:  MOVWF  xCC
3C96:  MOVLW  03
3C98:  MOVWF  xCD
3C9A:  CALL   08F6
....................          printf(lcd_putc,"Luz:ON "); 
3C9E:  MOVLW  D8
3CA0:  MOVWF  FF6
3CA2:  MOVLW  07
3CA4:  MOVWF  FF7
3CA6:  CALL   09B6
....................       } 
....................       else 
3CAA:  BRA    3CC4
....................       { 
....................          lcd_gotoxy(1,3); 
3CAC:  MOVLW  01
3CAE:  MOVWF  xCC
3CB0:  MOVLW  03
3CB2:  MOVWF  xCD
3CB4:  CALL   08F6
....................          printf(lcd_putc,"Luz:OFF"); 
3CB8:  MOVLW  E0
3CBA:  MOVWF  FF6
3CBC:  MOVLW  07
3CBE:  MOVWF  FF7
3CC0:  CALL   09B6
....................       }  
....................       Cambio=OFF; 
3CC4:  BCF    17.5
....................    //} 
....................     
....................    if(estadomv==1){  
3CC6:  BTFSS  16.2
3CC8:  BRA    3CF4
....................       if(flagmv==0){ 
3CCA:  BTFSC  17.6
3CCC:  BRA    3CEA
....................          VelocidadMotor(6);lcd_init();delay_ms(200);lcd_init();flagmv=1;Cambio=ON; 
3CCE:  MOVLW  06
3CD0:  MOVWF  xBA
3CD2:  CALL   1056
3CD6:  CALL   0878
3CDA:  MOVLW  C8
3CDC:  MOVWF  xD1
3CDE:  CALL   07E8
3CE2:  CALL   0878
3CE6:  BSF    17.6
3CE8:  BSF    17.5
....................       } 
....................       VelocidadMotor(VelMotor); 
3CEA:  MOVFF  B0,BA
3CEE:  CALL   1056
....................    }else{ 
3CF2:  BRA    3D12
....................       VelocidadMotor(0); 
3CF4:  CLRF   xBA
3CF6:  CALL   1056
....................       if(flagmv==1){ 
3CFA:  BTFSS  17.6
3CFC:  BRA    3D12
....................          lcd_init();delay_ms(200);lcd_init();flagmv=0;Cambio=ON; 
3CFE:  CALL   0878
3D02:  MOVLW  C8
3D04:  MOVWF  xD1
3D06:  CALL   07E8
3D0A:  CALL   0878
3D0E:  BCF    17.6
3D10:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(estadouv==1){ 
3D12:  BTFSS  16.0
3D14:  BRA    3D48
....................       estadomv=0; 
3D16:  BCF    16.2
....................       VelocidadMotor(0); 
3D18:  CLRF   xBA
3D1A:  CALL   1056
....................       estadofl=0; 
3D1E:  BCF    16.1
....................       Luz_Blanca_off; 
3D20:  BSF    F8A.2
3D22:  BCF    F93.2
....................       Luz_UV_on; 
3D24:  BCF    F8A.1
3D26:  BCF    F93.1
....................       tiempo_cumplido=0; 
3D28:  BCF    16.7
....................       if(flaguv==0){ 
3D2A:  BTFSC  17.1
3D2C:  BRA    3D46
....................          lcd_init();delay_ms(200);lcd_init();flaguv=1;guardaruv=1;Cambio=ON; 
3D2E:  CALL   0878
3D32:  MOVLW  C8
3D34:  MOVWF  xD1
3D36:  CALL   07E8
3D3A:  CALL   0878
3D3E:  BSF    17.1
3D40:  MOVLW  01
3D42:  MOVWF  30
3D44:  BSF    17.5
....................       } 
....................    }else{ 
3D46:  BRA    3D6A
....................       estadouv=0; 
3D48:  BCF    16.0
....................       Luz_UV_off; 
3D4A:  BSF    F8A.1
3D4C:  BCF    F93.1
....................       if(flaguv==1){ 
3D4E:  BTFSS  17.1
3D50:  BRA    3D6A
....................          lcd_init();delay_ms(200);lcd_init();flaguv=0;guardaruv=1;Cambio=ON; 
3D52:  CALL   0878
3D56:  MOVLW  C8
3D58:  MOVWF  xD1
3D5A:  CALL   07E8
3D5E:  CALL   0878
3D62:  BCF    17.1
3D64:  MOVLW  01
3D66:  MOVWF  30
3D68:  BSF    17.5
....................       } 
....................    } 
....................        
....................    if(estadofl==1) 
3D6A:  BTFSS  16.1
3D6C:  BRA    3D8C
....................    { 
....................       Luz_Blanca_on; 
3D6E:  BCF    F8A.2
3D70:  BCF    F93.2
....................       if(flagfl==0) 
3D72:  BTFSC  17.2
3D74:  BRA    3D8A
....................       { 
....................          lcd_init();delay_ms(200);lcd_init();flagfl=1;Cambio=ON; 
3D76:  CALL   0878
3D7A:  MOVLW  C8
3D7C:  MOVWF  xD1
3D7E:  CALL   07E8
3D82:  CALL   0878
3D86:  BSF    17.2
3D88:  BSF    17.5
....................       } 
....................    } 
....................    else 
3D8A:  BRA    3DA8
....................    { 
....................       Luz_Blanca_off; 
3D8C:  BSF    F8A.2
3D8E:  BCF    F93.2
....................       if(flagfl==1) 
3D90:  BTFSS  17.2
3D92:  BRA    3DA8
....................       { 
....................          lcd_init();delay_ms(200);lcd_init();flagfl=0;Cambio=ON; 
3D94:  CALL   0878
3D98:  MOVLW  C8
3D9A:  MOVWF  xD1
3D9C:  CALL   07E8
3DA0:  CALL   0878
3DA4:  BCF    17.2
3DA6:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(DOWN)//Si oprime hacia arriba 
3DA8:  BSF    F96.0
3DAA:  BTFSC  F84.0
3DAC:  BRA    3DD8
....................    { 
....................       delay_ms(20); 
3DAE:  MOVLW  14
3DB0:  MOVWF  xD1
3DB2:  CALL   07E8
....................       if(DOWN){ 
3DB6:  BSF    F96.0
3DB8:  BTFSC  F84.0
3DBA:  BRA    3DD6
....................          if(Flanco == 0) 
3DBC:  BTFSC  16.3
3DBE:  BRA    3DD6
....................          { 
....................             estadofl=!estadofl;Flanco = 1;delay_ms(300);Cambio=ON; 
3DC0:  BTG    16.1
3DC2:  BSF    16.3
3DC4:  MOVLW  02
3DC6:  MOVWF  xBA
3DC8:  MOVLW  96
3DCA:  MOVWF  xD1
3DCC:  CALL   07E8
3DD0:  DECFSZ xBA,F
3DD2:  BRA    3DC8
3DD4:  BSF    17.5
....................          } 
....................       } 
....................    } 
....................    else 
3DD6:  BRA    3DDA
....................    { 
....................       Flanco = 0; 
3DD8:  BCF    16.3
....................    } 
....................     
....................    if(RIGHT)//Si oprime hacia abajo 
3DDA:  BSF    F96.1
3DDC:  BTFSC  F84.1
3DDE:  BRA    3E0A
....................    { 
....................       delay_ms(20); 
3DE0:  MOVLW  14
3DE2:  MOVWF  xD1
3DE4:  CALL   07E8
....................       if(RIGHT){ 
3DE8:  BSF    F96.1
3DEA:  BTFSC  F84.1
3DEC:  BRA    3E08
....................          if(Flanco1 == 0) 
3DEE:  BTFSC  16.4
3DF0:  BRA    3E08
....................          { 
....................             estadomv=!estadomv;Flanco1 = 1;delay_ms(300);Cambio=ON; 
3DF2:  BTG    16.2
3DF4:  BSF    16.4
3DF6:  MOVLW  02
3DF8:  MOVWF  xBA
3DFA:  MOVLW  96
3DFC:  MOVWF  xD1
3DFE:  CALL   07E8
3E02:  DECFSZ xBA,F
3E04:  BRA    3DFA
3E06:  BSF    17.5
....................          } 
....................       } 
....................    } 
....................    else 
3E08:  BRA    3E0C
....................    { 
....................       Flanco1 = 0; 
3E0A:  BCF    16.4
....................    } 
....................     
....................    if(IZQU)//Si oprime hacia izquierda 
3E0C:  BSF    F96.2
3E0E:  BTFSC  F84.2
3E10:  BRA    3E2C
....................    { 
....................       delay_ms(20); 
3E12:  MOVLW  14
3E14:  MOVWF  xD1
3E16:  CALL   07E8
....................       if(IZQU){ 
3E1A:  BSF    F96.2
3E1C:  BTFSC  F84.2
3E1E:  BRA    3E2C
....................          delay_ms(150);  
3E20:  MOVLW  96
3E22:  MOVWF  xD1
3E24:  CALL   07E8
....................          estadouv=!estadouv; 
3E28:  BTG    16.0
....................          Cambio=ON; 
3E2A:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(UP)//Si oprime hacia izquierda 
3E2C:  BSF    F92.5
3E2E:  BTFSC  F80.5
3E30:  BRA    3E66
....................    { 
....................       delay_ms(20); 
3E32:  MOVLW  14
3E34:  MOVWF  xD1
3E36:  CALL   07E8
....................       if(UP){ 
3E3A:  BSF    F92.5
3E3C:  BTFSC  F80.5
3E3E:  BRA    3E66
....................          printf(lcd_putc,"\f"); 
3E40:  MOVLW  0C
3E42:  MOVWF  xCB
3E44:  CALL   0958
....................          delay_ms(300); 
3E48:  MOVLW  02
3E4A:  MOVWF  xBA
3E4C:  MOVLW  96
3E4E:  MOVWF  xD1
3E50:  CALL   07E8
3E54:  DECFSZ xBA,F
3E56:  BRA    3E4C
....................          Menu=1;  
3E58:  MOVLW  01
3E5A:  MOVWF  18
....................          paso=0; 
3E5C:  CLRF   31
....................          Flecha=2; 
3E5E:  MOVLW  02
3E60:  MOVWF  1C
....................          Flecha2=2; 
3E62:  MOVWF  1E
....................          Cambio=ON; 
3E64:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(guardaruv==1) 
3E66:  DECFSZ 30,W
3E68:  BRA    3F2C
....................    { 
....................       write_eeprom(7,segundos);write_eeprom(8,minutos); 
3E6A:  MOVLW  07
3E6C:  MOVWF  FA9
3E6E:  MOVFF  21,FA8
3E72:  BCF    FA6.6
3E74:  BCF    FA6.7
3E76:  BSF    FA6.2
3E78:  MOVF   FF2,W
3E7A:  MOVWF  00
3E7C:  BCF    FF2.7
3E7E:  MOVLB  F
3E80:  MOVLW  55
3E82:  MOVWF  FA7
3E84:  MOVLW  AA
3E86:  MOVWF  FA7
3E88:  BSF    FA6.1
3E8A:  BTFSC  FA6.1
3E8C:  BRA    3E8A
3E8E:  BCF    FA6.2
3E90:  MOVF   00,W
3E92:  IORWF  FF2,F
3E94:  MOVLW  08
3E96:  MOVWF  FA9
3E98:  MOVFF  22,FA8
3E9C:  BCF    FA6.6
3E9E:  BCF    FA6.7
3EA0:  BSF    FA6.2
3EA2:  MOVF   FF2,W
3EA4:  MOVWF  00
3EA6:  BCF    FF2.7
3EA8:  MOVLW  55
3EAA:  MOVWF  FA7
3EAC:  MOVLW  AA
3EAE:  MOVWF  FA7
3EB0:  BSF    FA6.1
3EB2:  BTFSC  FA6.1
3EB4:  BRA    3EB2
3EB6:  BCF    FA6.2
3EB8:  MOVF   00,W
3EBA:  IORWF  FF2,F
....................       horasL=make8(horas,0); 
3EBC:  MOVFF  40,23
....................       horasH=make8(horas,1); 
3EC0:  MOVFF  41,24
....................       write_eeprom(9,horasL); 
3EC4:  MOVLW  09
3EC6:  MOVWF  FA9
3EC8:  MOVFF  23,FA8
3ECC:  BCF    FA6.6
3ECE:  BCF    FA6.7
3ED0:  BSF    FA6.2
3ED2:  MOVFF  FF2,00
3ED6:  BCF    FF2.7
3ED8:  MOVLW  55
3EDA:  MOVWF  FA7
3EDC:  MOVLW  AA
3EDE:  MOVWF  FA7
3EE0:  BSF    FA6.1
3EE2:  BTFSC  FA6.1
3EE4:  BRA    3EE2
3EE6:  BCF    FA6.2
3EE8:  MOVF   00,W
3EEA:  IORWF  FF2,F
....................       delay_ms(20); 
3EEC:  MOVLW  14
3EEE:  MOVLB  0
3EF0:  MOVWF  xD1
3EF2:  CALL   07E8
....................       write_eeprom(10,horasH); 
3EF6:  MOVLW  0A
3EF8:  MOVWF  FA9
3EFA:  MOVFF  24,FA8
3EFE:  BCF    FA6.6
3F00:  BCF    FA6.7
3F02:  BSF    FA6.2
3F04:  MOVF   FF2,W
3F06:  MOVWF  00
3F08:  BCF    FF2.7
3F0A:  MOVLB  F
3F0C:  MOVLW  55
3F0E:  MOVWF  FA7
3F10:  MOVLW  AA
3F12:  MOVWF  FA7
3F14:  BSF    FA6.1
3F16:  BTFSC  FA6.1
3F18:  BRA    3F16
3F1A:  BCF    FA6.2
3F1C:  MOVF   00,W
3F1E:  IORWF  FF2,F
....................       delay_ms(20); 
3F20:  MOVLW  14
3F22:  MOVLB  0
3F24:  MOVWF  xD1
3F26:  CALL   07E8
....................       guardaruv=0; 
3F2A:  CLRF   30
....................    } 
....................     
....................    if(segundos>=60) 
3F2C:  MOVF   21,W
3F2E:  SUBLW  3B
3F30:  BC    3F36
....................    { 
....................       segundos=0;minutos++; 
3F32:  CLRF   21
3F34:  INCF   22,F
....................    } 
....................    if(minutos==60) 
3F36:  MOVF   22,W
3F38:  SUBLW  3C
3F3A:  BNZ   3F44
....................    { 
....................       minutos=0;horas++; 
3F3C:  CLRF   22
3F3E:  INCF   40,F
3F40:  BTFSC  FD8.2
3F42:  INCF   41,F
....................    }   
....................      
....................    } 
.................... //----------------Fin-Menu100--------------------------------------------------------------   
....................    if(tiemporeset>=60) 
3F44:  MOVF   2F,W
3F46:  SUBLW  3B
3F48:  BC    3F5E
....................    { 
....................       lcd_init();delay_ms(200);lcd_init(); 
3F4A:  CALL   0878
3F4E:  MOVLW  C8
3F50:  MOVWF  xD1
3F52:  CALL   07E8
3F56:  CALL   0878
....................       tiemporeset=0; 
3F5A:  CLRF   2F
....................       Cambio=ON; 
3F5C:  BSF    17.5
....................    }    
....................    } 
3F5E:  GOTO   2214
.................... } 
....................  
3F62:  SLEEP 

Configuration Fuses:
   Word  1: C238   XTPLL IESO FCMEN PLL1 CPUDIV4 USBDIV
   Word  2: 1E3F   BROWNOUT NOWDT BORV20 NOPUT WDT32768 VREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
