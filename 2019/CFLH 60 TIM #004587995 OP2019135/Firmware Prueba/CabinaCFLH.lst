CCS PCH C Compiler, Version 4.104, 5967               16-sept.-19 14:07

               Filename: H:\JP\JP\Laboratorio\Cabina de Flujo Laminar Horizontal\2019\CFLH 60 TIM #004587995 OP2019135\Firmware Prueba\CabinaCFLH.lst

               ROM used: 16160 bytes (49%)
                         Largest free fragment is 16606
               RAM used: 190 (9%) at main() level
                         228 (11%) worst case
               Stack:    8 worst case (6 in main + 2 for interrupts)

*
0000:  GOTO   2034
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  FF2.4
004A:  GOTO   0054
004E:  BTFSC  FF2.1
0050:  GOTO   01B2
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina de PCR. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz UV, Luz Blanca, Motor Ventilador y Cambio de Contraseña. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... //#fuses XTPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,VREGEN,NOMCLR,NOPUT// PLL1 para 4 MHz 
.................... //#fuses XT,NOWDT,NOPROTECT,NOLVP,NODEBUG,NOVREGEN,NOMCLR// PLL1 para 4 MHz 
.................... //#use delay(clock=48000000) 
.................... //#use delay(clock=20000000) 
.................... #fuses XTPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV4,VREGEN,NOMCLR,NOPUT 
.................... #use delay(clock=16000000) 
*
0198:  MOVLW  04
019A:  SUBWF  xE3,F
019C:  BNC   01B0
019E:  CLRF   FEA
01A0:  MOVLW  E3
01A2:  MOVWF  FE9
01A4:  MOVF   FEF,W
01A6:  BZ    01B0
01A8:  BRA    01AC
01AA:  NOP   
01AC:  DECFSZ FEF,F
01AE:  BRA    01AA
01B0:  RETLW  00
*
07F2:  CLRF   FEA
07F4:  MOVLW  D1
07F6:  MOVWF  FE9
07F8:  MOVF   FEF,W
07FA:  BZ    0818
07FC:  MOVLW  05
07FE:  MOVWF  01
0800:  CLRF   00
0802:  DECFSZ 00,F
0804:  BRA    0802
0806:  DECFSZ 01,F
0808:  BRA    0800
080A:  MOVLW  2E
080C:  MOVWF  00
080E:  DECFSZ 00,F
0810:  BRA    080E
0812:  BRA    0814
0814:  DECFSZ FEF,F
0816:  BRA    07FC
0818:  RETLW  00
.................... #include <MATH.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
*
1CE4:  BCF    xCD.0
....................    y = x; 
1CE6:  MOVFF  C1,C6
1CEA:  MOVFF  C0,C5
1CEE:  MOVFF  BF,C4
1CF2:  MOVFF  BE,C3
....................  
....................    if (x < 0) 
1CF6:  MOVFF  C1,D1
1CFA:  MOVFF  C0,D0
1CFE:  MOVFF  BF,CF
1D02:  MOVFF  BE,CE
1D06:  CLRF   xD5
1D08:  CLRF   xD4
1D0A:  CLRF   xD3
1D0C:  CLRF   xD2
1D0E:  CALL   0C5A
1D12:  BNC   1D1C
....................    { 
....................       s = 1; 
1D14:  BSF    xCD.0
....................       y = -y; 
1D16:  MOVF   xC4,W
1D18:  XORLW  80
1D1A:  MOVWF  xC4
....................    } 
....................  
....................    if (y <= 32768.0) 
1D1C:  MOVFF  C6,D1
1D20:  MOVFF  C5,D0
1D24:  MOVFF  C4,CF
1D28:  MOVFF  C3,CE
1D2C:  CLRF   xD5
1D2E:  CLRF   xD4
1D30:  CLRF   xD3
1D32:  MOVLW  8E
1D34:  MOVWF  xD2
1D36:  CALL   0C5A
1D3A:  BC    1D3E
1D3C:  BNZ   1D6E
....................   res = (float32)(unsigned int16)y; 
1D3E:  MOVFF  C6,D1
1D42:  MOVFF  C5,D0
1D46:  MOVFF  C4,CF
1D4A:  MOVFF  C3,CE
1D4E:  RCALL  1CAC
1D50:  MOVFF  02,D3
1D54:  MOVFF  01,D2
1D58:  CALL   0A46
1D5C:  MOVFF  03,CA
1D60:  MOVFF  02,C9
1D64:  MOVFF  01,C8
1D68:  MOVFF  00,C7
....................  
....................  else if (y < 10000000.0) 
1D6C:  BRA    1EF8
1D6E:  MOVFF  C6,D1
1D72:  MOVFF  C5,D0
1D76:  MOVFF  C4,CF
1D7A:  MOVFF  C3,CE
1D7E:  MOVLW  80
1D80:  MOVWF  xD5
1D82:  MOVLW  96
1D84:  MOVWF  xD4
1D86:  MOVLW  18
1D88:  MOVWF  xD3
1D8A:  MOVLW  96
1D8C:  MOVWF  xD2
1D8E:  CALL   0C5A
1D92:  BTFSS  FD8.0
1D94:  BRA    1EE8
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
1D96:  MOVFF  C6,D1
1D9A:  MOVFF  C5,D0
1D9E:  MOVFF  C4,CF
1DA2:  MOVFF  C3,CE
1DA6:  CLRF   xD5
1DA8:  CLRF   xD4
1DAA:  CLRF   xD3
1DAC:  MOVLW  8E
1DAE:  MOVWF  xD2
1DB0:  CALL   1420
1DB4:  MOVFF  03,D1
1DB8:  MOVFF  02,D0
1DBC:  MOVFF  01,CF
1DC0:  MOVFF  00,CE
1DC4:  RCALL  1CAC
1DC6:  MOVFF  02,CC
1DCA:  MOVFF  01,CB
....................       y = 32768.0*(y/32768.0 - (float32)l); 
1DCE:  MOVFF  C6,D1
1DD2:  MOVFF  C5,D0
1DD6:  MOVFF  C4,CF
1DDA:  MOVFF  C3,CE
1DDE:  CLRF   xD5
1DE0:  CLRF   xD4
1DE2:  CLRF   xD3
1DE4:  MOVLW  8E
1DE6:  MOVWF  xD2
1DE8:  CALL   1420
1DEC:  MOVFF  00,CE
1DF0:  MOVFF  01,CF
1DF4:  MOVFF  02,D0
1DF8:  MOVFF  03,D1
1DFC:  MOVFF  CC,D3
1E00:  MOVFF  CB,D2
1E04:  CALL   0A46
1E08:  BSF    FD8.1
1E0A:  MOVFF  D1,D5
1E0E:  MOVFF  D0,D4
1E12:  MOVFF  CF,D3
1E16:  MOVFF  CE,D2
1E1A:  MOVFF  03,D9
1E1E:  MOVFF  02,D8
1E22:  MOVFF  01,D7
1E26:  MOVFF  00,D6
1E2A:  CALL   157A
1E2E:  CLRF   xD1
1E30:  CLRF   xD0
1E32:  CLRF   xCF
1E34:  MOVLW  8E
1E36:  MOVWF  xCE
1E38:  MOVFF  03,D5
1E3C:  MOVFF  02,D4
1E40:  MOVFF  01,D3
1E44:  MOVFF  00,D2
1E48:  RCALL  197A
1E4A:  MOVFF  03,C6
1E4E:  MOVFF  02,C5
1E52:  MOVFF  01,C4
1E56:  MOVFF  00,C3
....................   res = 32768.0*(float32)l; 
1E5A:  MOVFF  CC,D3
1E5E:  MOVFF  CB,D2
1E62:  CALL   0A46
1E66:  CLRF   xD1
1E68:  CLRF   xD0
1E6A:  CLRF   xCF
1E6C:  MOVLW  8E
1E6E:  MOVWF  xCE
1E70:  MOVFF  03,D5
1E74:  MOVFF  02,D4
1E78:  MOVFF  01,D3
1E7C:  MOVFF  00,D2
1E80:  RCALL  197A
1E82:  MOVFF  03,CA
1E86:  MOVFF  02,C9
1E8A:  MOVFF  01,C8
1E8E:  MOVFF  00,C7
....................   res += (float32)(unsigned int16)y; 
1E92:  MOVFF  C6,D1
1E96:  MOVFF  C5,D0
1E9A:  MOVFF  C4,CF
1E9E:  MOVFF  C3,CE
1EA2:  RCALL  1CAC
1EA4:  MOVFF  02,D3
1EA8:  MOVFF  01,D2
1EAC:  CALL   0A46
1EB0:  BCF    FD8.1
1EB2:  MOVFF  CA,D5
1EB6:  MOVFF  C9,D4
1EBA:  MOVFF  C8,D3
1EBE:  MOVFF  C7,D2
1EC2:  MOVFF  03,D9
1EC6:  MOVFF  02,D8
1ECA:  MOVFF  01,D7
1ECE:  MOVFF  00,D6
1ED2:  CALL   157A
1ED6:  MOVFF  03,CA
1EDA:  MOVFF  02,C9
1EDE:  MOVFF  01,C8
1EE2:  MOVFF  00,C7
....................  } 
....................  
....................  else 
1EE6:  BRA    1EF8
....................   res = y; 
1EE8:  MOVFF  C6,CA
1EEC:  MOVFF  C5,C9
1EF0:  MOVFF  C4,C8
1EF4:  MOVFF  C3,C7
....................  
....................  y = y - (float32)(unsigned int16)y; 
1EF8:  MOVFF  C6,D1
1EFC:  MOVFF  C5,D0
1F00:  MOVFF  C4,CF
1F04:  MOVFF  C3,CE
1F08:  RCALL  1CAC
1F0A:  MOVFF  02,D3
1F0E:  MOVFF  01,D2
1F12:  CALL   0A46
1F16:  BSF    FD8.1
1F18:  MOVFF  C6,D5
1F1C:  MOVFF  C5,D4
1F20:  MOVFF  C4,D3
1F24:  MOVFF  C3,D2
1F28:  MOVFF  03,D9
1F2C:  MOVFF  02,D8
1F30:  MOVFF  01,D7
1F34:  MOVFF  00,D6
1F38:  CALL   157A
1F3C:  MOVFF  03,C6
1F40:  MOVFF  02,C5
1F44:  MOVFF  01,C4
1F48:  MOVFF  00,C3
....................  
....................  if (s) 
1F4C:  BTFSS  xCD.0
1F4E:  BRA    1F56
....................   res = -res; 
1F50:  MOVF   xC8,W
1F52:  XORLW  80
1F54:  MOVWF  xC8
....................  
....................  if (y != 0) 
1F56:  MOVFF  C6,D1
1F5A:  MOVFF  C5,D0
1F5E:  MOVFF  C4,CF
1F62:  MOVFF  C3,CE
1F66:  CLRF   xD5
1F68:  CLRF   xD4
1F6A:  CLRF   xD3
1F6C:  CLRF   xD2
1F6E:  CALL   0C5A
1F72:  BZ    1FE4
....................  { 
....................   if (s == 1 && n == 0) 
1F74:  BTFSS  xCD.0
1F76:  BRA    1FAC
1F78:  MOVF   xC2,F
1F7A:  BNZ   1FAC
....................    res -= 1.0; 
1F7C:  BSF    FD8.1
1F7E:  MOVFF  CA,D5
1F82:  MOVFF  C9,D4
1F86:  MOVFF  C8,D3
1F8A:  MOVFF  C7,D2
1F8E:  CLRF   xD9
1F90:  CLRF   xD8
1F92:  CLRF   xD7
1F94:  MOVLW  7F
1F96:  MOVWF  xD6
1F98:  CALL   157A
1F9C:  MOVFF  03,CA
1FA0:  MOVFF  02,C9
1FA4:  MOVFF  01,C8
1FA8:  MOVFF  00,C7
....................  
....................   if (s == 0 && n == 1) 
1FAC:  BTFSC  xCD.0
1FAE:  BRA    1FE4
1FB0:  DECFSZ xC2,W
1FB2:  BRA    1FE4
....................    res += 1.0; 
1FB4:  BCF    FD8.1
1FB6:  MOVFF  CA,D5
1FBA:  MOVFF  C9,D4
1FBE:  MOVFF  C8,D3
1FC2:  MOVFF  C7,D2
1FC6:  CLRF   xD9
1FC8:  CLRF   xD8
1FCA:  CLRF   xD7
1FCC:  MOVLW  7F
1FCE:  MOVWF  xD6
1FD0:  CALL   157A
1FD4:  MOVFF  03,CA
1FD8:  MOVFF  02,C9
1FDC:  MOVFF  01,C8
1FE0:  MOVFF  00,C7
....................  } 
....................  if (x == 0) 
1FE4:  MOVFF  C1,D1
1FE8:  MOVFF  C0,D0
1FEC:  MOVFF  BF,CF
1FF0:  MOVFF  BE,CE
1FF4:  CLRF   xD5
1FF6:  CLRF   xD4
1FF8:  CLRF   xD3
1FFA:  CLRF   xD2
1FFC:  CALL   0C5A
2000:  BNZ   200A
....................     res = 0; 
2002:  CLRF   xCA
2004:  CLRF   xC9
2006:  CLRF   xC8
2008:  CLRF   xC7
....................  
....................  return (res); 
200A:  MOVFF  C7,00
200E:  MOVFF  C8,01
2012:  MOVFF  C9,02
2016:  MOVFF  CA,03
.................... } 
201A:  GOTO   2032 (RETURN)
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
201E:  MOVFF  BD,C1
2022:  MOVFF  BC,C0
2026:  MOVFF  BB,BF
202A:  MOVFF  BA,BE
202E:  CLRF   xC2
2030:  BRA    1CE4
.................... } 
2032:  RETLW  00
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   UP            !input(PIN_A5) 
.................... #define   DOWN          !input(PIN_E0) 
.................... #define   RIGHT         !input(PIN_E1) 
.................... #define   IZQU          !input(PIN_E2) 
.................... #define   VIDRIO        !input(PIN_A1) 
....................  
.................... // Definición de otros puertos 
.................... #define   Luz_UV_on         output_bit(PIN_B1,0) 
.................... #define   Luz_UV_off        output_bit(PIN_B1,1) 
.................... #define   Luz_Blanca_on     output_bit(PIN_B2,0) 
.................... #define   Luz_Blanca_off    output_bit(PIN_B2,1) 
.................... #define   Motor_L1_on       output_bit(PIN_C2,1) 
.................... #define   Motor_L1_off      output_bit(PIN_C2,0) 
.................... #define   Motor_L2_on       output_bit(PIN_C1,1) 
.................... #define   Motor_L2_off      output_bit(PIN_C1,0) 
.................... #define   Buzzer_on         output_bit(PIN_C0,1) 
.................... #define   Buzzer_off        output_bit(PIN_C0,0) 
.................... #define   ON  1 
.................... #define   OFF 0 
....................  
.................... short estadouv=0,estadofl=0,estadomv=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,tiempo_cumplido=0,Lectura=0,flaguv=0,flagfl=0,estadobuzzer=0,estadoalarma=0; 
.................... int8 Menu=0, n_opcionH=7,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,segundos=0,minutos=0,horasL=0,horasH=0,G_l=0,G_h=0; 
.................... int8 tempo_minutos=0,tempo_segundos=0,tempo_minutos_pro=0,tempo_segundos_pro=0,r=0,q=0,i=0,unidad2=1,tiemporeset=0,guardaruv=0; 
.................... signed int8   paso=0; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... signed  int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 ActivaBuzzer=0; 
.................... int16 tiempos,horas=0,G16=0; 
.................... float PromPresion[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float V1=0.0,Presion=0.0,Saturacion=0.0,CaidaPresion=0.0; 
.................... float G=2; 
.................... short Cambio=ON,flagmv=0; 
....................  
.................... int16 pulsos=0,retardo=0; 
.................... short Cruce=OFF,Purga=OFF; 
.................... int16 tiempocruce=0; 
.................... int8 Porcentaje=0,VelMotor=0; 
.................... float Tcruce=0.0,Tcruce2=0; 
....................  
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN unused;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN enable;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTD")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_d(LCD_READ); 
....................       lcd.rw = 1; 
....................       delay_cycles(30);//30 
....................       lcd.enable = 1; 
....................       delay_cycles(30);//30 
....................       high = lcd.data; 
....................       lcd.enable = 0; 
....................       delay_cycles(30);//30 
....................       lcd.enable = 1; 
....................       delay_us(30);//30 
....................       low = lcd.data; 
....................       lcd.enable = 0; 
....................       set_tris_d(LCD_WRITE); 
....................       return( (high<<4) | low); 
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
081A:  SWAPF  xD2,W
081C:  ANDLW  F0
081E:  MOVWF  00
0820:  MOVLW  0F
0822:  ANDWF  F83,W
0824:  IORWF  00,W
0826:  MOVWF  F83
....................       delay_cycles(30);//30 
0828:  MOVLW  09
082A:  MOVWF  00
082C:  DECFSZ 00,F
082E:  BRA    082C
0830:  BRA    0832
....................       lcd.enable = 1; 
0832:  BSF    F83.3
....................       delay_us(55);//55 
0834:  MOVLW  49
0836:  MOVWF  00
0838:  DECFSZ 00,F
083A:  BRA    0838
....................       lcd.enable = 0; 
083C:  BCF    F83.3
.................... } 
083E:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
0840:  BCF    F83.1
....................       //while ( bit_test(lcd_read_byte(),7)); 
....................       delay_ms(1); 
0842:  MOVLW  01
0844:  MOVWF  xD1
0846:  RCALL  07F2
....................       lcd.rs = address; 
0848:  BTFSS  xCF.0
084A:  BCF    F83.1
084C:  BTFSC  xCF.0
084E:  BSF    F83.1
....................       delay_cycles(30);//30 
0850:  MOVLW  09
0852:  MOVWF  00
0854:  DECFSZ 00,F
0856:  BRA    0854
0858:  BRA    085A
....................       lcd.rw = 0; 
085A:  BCF    F83.2
....................       delay_cycles(30);//30 
085C:  MOVLW  09
085E:  MOVWF  00
0860:  DECFSZ 00,F
0862:  BRA    0860
0864:  BRA    0866
....................       lcd.enable = 0; 
0866:  BCF    F83.3
....................       lcd_send_nibble(n >> 4); 
0868:  SWAPF  xD0,W
086A:  MOVWF  xD1
086C:  MOVLW  0F
086E:  ANDWF  xD1,F
0870:  MOVFF  D1,D2
0874:  RCALL  081A
....................       lcd_send_nibble(n & 0xf); 
0876:  MOVF   xD0,W
0878:  ANDLW  0F
087A:  MOVWF  xD1
087C:  MOVWF  xD2
087E:  RCALL  081A
.................... } 
0880:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_d(LCD_WRITE); 
0882:  MOVLW  00
0884:  MOVWF  F95
....................     lcd.rs = 0; 
0886:  BCF    F83.1
....................     lcd.rw = 0; 
0888:  BCF    F83.2
....................     lcd.enable = 0; 
088A:  BCF    F83.3
....................     delay_ms(15); 
088C:  MOVLW  0F
088E:  MOVWF  xD1
0890:  RCALL  07F2
....................     for(i=1;i<=3;++i) { 
0892:  MOVLW  01
0894:  MOVWF  xBA
0896:  MOVF   xBA,W
0898:  SUBLW  03
089A:  BNC   08AC
....................        lcd_send_nibble(3); 
089C:  MOVLW  03
089E:  MOVWF  xD2
08A0:  RCALL  081A
....................        delay_ms(5); 
08A2:  MOVLW  05
08A4:  MOVWF  xD1
08A6:  RCALL  07F2
....................     } 
08A8:  INCF   xBA,F
08AA:  BRA    0896
....................     lcd_send_nibble(2); 
08AC:  MOVLW  02
08AE:  MOVWF  xD2
08B0:  RCALL  081A
....................     for(i=0;i<=3;++i) 
08B2:  CLRF   xBA
08B4:  MOVF   xBA,W
08B6:  SUBLW  03
08B8:  BNC   08D8
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
08BA:  CLRF   03
08BC:  MOVF   xBA,W
08BE:  MOVFF  FF2,BB
08C2:  BCF    FF2.7
08C4:  CALL   0096
08C8:  BTFSC  xBB.7
08CA:  BSF    FF2.7
08CC:  MOVWF  xBB
08CE:  CLRF   xCF
08D0:  MOVWF  xD0
08D2:  RCALL  0840
08D4:  INCF   xBA,F
08D6:  BRA    08B4
.................... } 
08D8:  RETLW  00
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
*
0900:  MOVLW  01
0902:  SUBWF  xCD,W
0904:  ADDLW  FC
0906:  BC    0926
0908:  ADDLW  04
090A:  GOTO   0936
....................      case 1 : address=0x80;break; 
090E:  MOVLW  80
0910:  MOVWF  xCE
0912:  BRA    0926
....................      case 2 : address=0xc0;break; 
0914:  MOVLW  C0
0916:  MOVWF  xCE
0918:  BRA    0926
....................      case 3 : address=0x94;break; 
091A:  MOVLW  94
091C:  MOVWF  xCE
091E:  BRA    0926
....................      case 4 : address=0xd4;break; 
0920:  MOVLW  D4
0922:  MOVWF  xCE
0924:  BRA    0926
....................    } 
....................    address+=x-1; 
0926:  MOVLW  01
0928:  SUBWF  xCC,W
092A:  ADDWF  xCE,F
....................    lcd_send_byte(0,address); 
092C:  CLRF   xCF
092E:  MOVFF  CE,D0
0932:  RCALL  0840
.................... } 
0934:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
....................    if(c=='ñ') 
*
0962:  MOVF   xCB,W
0964:  SUBLW  F1
0966:  BNZ   096C
....................    { 
....................       c=238; 
0968:  MOVLW  EE
096A:  MOVWF  xCB
....................    } 
....................    if(c=='Ñ') 
096C:  MOVF   xCB,W
096E:  SUBLW  D1
0970:  BNZ   0976
....................    { 
....................       c=255; 
0972:  MOVLW  FF
0974:  MOVWF  xCB
....................    } 
....................     
....................    switch (c) { 
0976:  MOVF   xCB,W
0978:  XORLW  0C
097A:  BZ    0986
097C:  XORLW  06
097E:  BZ    099A
0980:  XORLW  02
0982:  BZ    09A8
0984:  BRA    09B2
....................      case '\f'   : lcd_send_byte(0,1); 
0986:  CLRF   xCF
0988:  MOVLW  01
098A:  MOVWF  xD0
098C:  RCALL  0840
....................                    lcdline=1; 
098E:  MOVLW  01
0990:  MOVWF  xB9
....................                    delay_ms(2); 
0992:  MOVLW  02
0994:  MOVWF  xD1
0996:  RCALL  07F2
....................                                            break; 
0998:  BRA    09BE
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
099A:  INCF   xB9,F
099C:  MOVLW  01
099E:  MOVWF  xCC
09A0:  MOVFF  B9,CD
09A4:  RCALL  0900
09A6:  BRA    09BE
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
09A8:  CLRF   xCF
09AA:  MOVLW  10
09AC:  MOVWF  xD0
09AE:  RCALL  0840
09B0:  BRA    09BE
....................      default     : lcd_send_byte(1,c);     break; 
09B2:  MOVLW  01
09B4:  MOVWF  xCF
09B6:  MOVFF  CB,D0
09BA:  RCALL  0840
09BC:  BRA    09BE
....................    } 
.................... } 
09BE:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... #include <Funciones.h> 
.................... void VelocidadMotor(int8 Vel){ 
....................    if(Vel==6){ 
*
1040:  MOVF   xBA,W
1042:  SUBLW  06
1044:  BNZ   1052
....................       Porcentaje=0; 
1046:  CLRF   xAF
....................       retardo=1000; 
1048:  MOVLW  03
104A:  MOVWF  xAB
104C:  MOVLW  E8
104E:  MOVWF  xAA
....................    }else if(Vel==5){ 
1050:  BRA    10BC
1052:  MOVF   xBA,W
1054:  SUBLW  05
1056:  BNZ   1066
....................       Porcentaje=15; 
1058:  MOVLW  0F
105A:  MOVWF  xAF
....................       retardo=2000; 
105C:  MOVLW  07
105E:  MOVWF  xAB
1060:  MOVLW  D0
1062:  MOVWF  xAA
....................    }else if(Vel==4){ 
1064:  BRA    10BC
1066:  MOVF   xBA,W
1068:  SUBLW  04
106A:  BNZ   107A
....................       Porcentaje=25; 
106C:  MOVLW  19
106E:  MOVWF  xAF
....................       retardo=3000; 
1070:  MOVLW  0B
1072:  MOVWF  xAB
1074:  MOVLW  B8
1076:  MOVWF  xAA
....................    }else if(Vel==3){ 
1078:  BRA    10BC
107A:  MOVF   xBA,W
107C:  SUBLW  03
107E:  BNZ   108E
....................       Porcentaje=35; 
1080:  MOVLW  23
1082:  MOVWF  xAF
....................       retardo=3600; 
1084:  MOVLW  0E
1086:  MOVWF  xAB
1088:  MOVLW  10
108A:  MOVWF  xAA
....................    }else if(Vel==2){ 
108C:  BRA    10BC
108E:  MOVF   xBA,W
1090:  SUBLW  02
1092:  BNZ   10A2
....................       Porcentaje=45; 
1094:  MOVLW  2D
1096:  MOVWF  xAF
....................       retardo=4300; 
1098:  MOVLW  10
109A:  MOVWF  xAB
109C:  MOVLW  CC
109E:  MOVWF  xAA
....................    }else if(Vel==1){ 
10A0:  BRA    10BC
10A2:  DECFSZ xBA,W
10A4:  BRA    10B4
....................       Porcentaje=50; 
10A6:  MOVLW  32
10A8:  MOVWF  xAF
....................       retardo=5000; 
10AA:  MOVLW  13
10AC:  MOVWF  xAB
10AE:  MOVLW  88
10B0:  MOVWF  xAA
....................    }else if(Vel==0){ 
10B2:  BRA    10BC
10B4:  MOVF   xBA,F
10B6:  BNZ   10BC
....................       Porcentaje=100; 
10B8:  MOVLW  64
10BA:  MOVWF  xAF
....................    } 
.................... } 
10BC:  RETLW  00
....................  
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {   
....................    if(x==1) 
*
11D4:  DECFSZ xBB,W
11D6:  BRA    11F0
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Temporizador UV    ");} 
11D8:  MOVLW  02
11DA:  MOVWF  xCC
11DC:  MOVFF  BC,CD
11E0:  CALL   0900
11E4:  MOVLW  B4
11E6:  MOVWF  FF6
11E8:  MOVLW  00
11EA:  MOVWF  FF7
11EC:  CALL   09C0
....................    if(x==2) 
11F0:  MOVF   xBB,W
11F2:  SUBLW  02
11F4:  BNZ   120E
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
11F6:  MOVLW  02
11F8:  MOVWF  xCC
11FA:  MOVFF  BC,CD
11FE:  CALL   0900
1202:  MOVLW  C8
1204:  MOVWF  FF6
1206:  MOVLW  00
1208:  MOVWF  FF7
120A:  CALL   09C0
....................    if(x==3) 
120E:  MOVF   xBB,W
1210:  SUBLW  03
1212:  BNZ   122C
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo Trabajo UV  ");} 
1214:  MOVLW  02
1216:  MOVWF  xCC
1218:  MOVFF  BC,CD
121C:  CALL   0900
1220:  MOVLW  DC
1222:  MOVWF  FF6
1224:  MOVLW  00
1226:  MOVWF  FF7
1228:  CALL   09C0
....................    if(x==4) 
122C:  MOVF   xBB,W
122E:  SUBLW  04
1230:  BNZ   124A
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Punto Cero         ");} 
1232:  MOVLW  02
1234:  MOVWF  xCC
1236:  MOVFF  BC,CD
123A:  CALL   0900
123E:  MOVLW  F0
1240:  MOVWF  FF6
1242:  MOVLW  00
1244:  MOVWF  FF7
1246:  CALL   09C0
....................     
....................    if(x==5) 
124A:  MOVF   xBB,W
124C:  SUBLW  05
124E:  BNZ   1288
....................    {if(estadoalarma==0) 
1250:  BTFSC  17.4
1252:  BRA    126C
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma          OFF");} 
1254:  MOVLW  02
1256:  MOVWF  xCC
1258:  MOVFF  BC,CD
125C:  CALL   0900
1260:  MOVLW  04
1262:  MOVWF  FF6
1264:  MOVLW  01
1266:  MOVWF  FF7
1268:  CALL   09C0
....................    if(estadoalarma==1) 
126C:  BTFSS  17.4
126E:  BRA    1288
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma           ON");} 
1270:  MOVLW  02
1272:  MOVWF  xCC
1274:  MOVFF  BC,CD
1278:  CALL   0900
127C:  MOVLW  18
127E:  MOVWF  FF6
1280:  MOVLW  01
1282:  MOVWF  FF7
1284:  CALL   09C0
....................    } 
....................     
....................    if(x==6) 
1288:  MOVF   xBB,W
128A:  SUBLW  06
128C:  BNZ   12A6
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Velocidad         ");} 
128E:  MOVLW  02
1290:  MOVWF  xCC
1292:  MOVFF  BC,CD
1296:  CALL   0900
129A:  MOVLW  2C
129C:  MOVWF  FF6
129E:  MOVLW  01
12A0:  MOVWF  FF7
12A2:  CALL   09C0
.................... } 
12A6:  RETLW  00
....................  
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
13CA:  RLCF   xBF,W
13CC:  MOVWF  00
13CE:  RLCF   00,F
13D0:  MOVLW  FC
13D2:  ANDWF  00,F
13D4:  MOVFF  00,01
13D8:  MOVF   FC2,W
13DA:  ANDLW  C3
13DC:  IORWF  00,W
13DE:  MOVWF  FC2
13E0:  MOVLW  0A
13E2:  MOVWF  xD1
13E4:  CALL   07F2
13E8:  BSF    FC2.1
13EA:  BTFSC  FC2.1
13EC:  BRA    13EA
13EE:  MOVFF  FC4,03
13F2:  MOVFF  FC3,D2
13F6:  MOVFF  FC4,D3
13FA:  CALL   0A46
13FE:  MOVFF  03,C3
1402:  MOVFF  02,C2
1406:  MOVFF  01,C1
140A:  MOVFF  00,C0
140E:  MOVFF  C0,00
1412:  MOVFF  C1,01
1416:  MOVFF  C2,02
141A:  MOVFF  C3,03
.................... } 
141E:  RETLW  00
....................  
.................... float Leer_Sensor_Presion(int media){ 
*
17E4:  CLRF   xBE
17E6:  CLRF   xBD
17E8:  CLRF   xBC
17EA:  CLRF   xBB
....................    float promediopresion=0.0; 
....................     
....................    V1=sensores(0);  
17EC:  CLRF   xBF
17EE:  RCALL  13CA
17F0:  MOVFF  03,97
17F4:  MOVFF  02,96
17F8:  MOVFF  01,95
17FC:  MOVFF  00,94
....................    //V1 = (x_uno*5.0)/1023.0;   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
....................    Presion=(V1/G)-1.0;// Presion=(Voltaje/Ganancia)-1 
1800:  MOVFF  97,D1
1804:  MOVFF  96,D0
1808:  MOVFF  95,CF
180C:  MOVFF  94,CE
1810:  MOVFF  A7,D5
1814:  MOVFF  A6,D4
1818:  MOVFF  A5,D3
181C:  MOVFF  A4,D2
1820:  RCALL  1420
1822:  MOVFF  00,BF
1826:  MOVFF  01,C0
182A:  MOVFF  02,C1
182E:  MOVFF  03,C2
1832:  BSF    FD8.1
1834:  MOVFF  03,D5
1838:  MOVFF  02,D4
183C:  MOVFF  01,D3
1840:  MOVFF  00,D2
1844:  CLRF   xD9
1846:  CLRF   xD8
1848:  CLRF   xD7
184A:  MOVLW  7F
184C:  MOVWF  xD6
184E:  RCALL  157A
1850:  MOVFF  03,9B
1854:  MOVFF  02,9A
1858:  MOVFF  01,99
185C:  MOVFF  00,98
....................     
....................    if(Presion<0.0) 
1860:  MOVFF  9B,D1
1864:  MOVFF  9A,D0
1868:  MOVFF  99,CF
186C:  MOVFF  98,CE
1870:  CLRF   xD5
1872:  CLRF   xD4
1874:  CLRF   xD3
1876:  CLRF   xD2
1878:  CALL   0C5A
187C:  BNC   1886
....................    { 
....................       Presion=0.0; 
187E:  CLRF   x9B
1880:  CLRF   x9A
1882:  CLRF   x99
1884:  CLRF   x98
....................    } 
....................  
....................    if(r>media-1) 
1886:  MOVLW  01
1888:  SUBWF  xBA,W
188A:  SUBWF  2B,W
188C:  BZ    1892
188E:  BNC   1892
....................    {r=0;} 
1890:  CLRF   2B
....................    PromPresion[r]=Presion;r++; 
1892:  MOVF   2B,W
1894:  MULLW  04
1896:  MOVF   FF3,W
1898:  CLRF   03
189A:  ADDLW  44
189C:  MOVWF  FE9
189E:  MOVLW  00
18A0:  ADDWFC 03,W
18A2:  MOVWF  FEA
18A4:  MOVFF  98,FEF
18A8:  MOVFF  99,FEC
18AC:  MOVFF  9A,FEC
18B0:  MOVFF  9B,FEC
18B4:  INCF   2B,F
....................           
....................    for(q=0;q<=(media-1);q++) 
18B6:  CLRF   2C
18B8:  MOVLW  01
18BA:  SUBWF  xBA,W
18BC:  SUBWF  2C,W
18BE:  BZ    18C2
18C0:  BC    192C
....................    { 
....................       promediopresion+=PromPresion[q]; 
18C2:  MOVF   2C,W
18C4:  MULLW  04
18C6:  MOVF   FF3,W
18C8:  CLRF   03
18CA:  ADDLW  44
18CC:  MOVWF  FE9
18CE:  MOVLW  00
18D0:  ADDWFC 03,W
18D2:  MOVWF  FEA
18D4:  MOVFF  FEF,00
18D8:  MOVFF  FEC,01
18DC:  MOVFF  FEC,02
18E0:  MOVFF  FEC,03
18E4:  MOVFF  FEA,C0
18E8:  MOVFF  FE9,BF
18EC:  BCF    FD8.1
18EE:  MOVFF  BE,D5
18F2:  MOVFF  BD,D4
18F6:  MOVFF  BC,D3
18FA:  MOVFF  BB,D2
18FE:  MOVFF  03,D9
1902:  MOVFF  02,D8
1906:  MOVFF  01,D7
190A:  MOVFF  00,D6
190E:  RCALL  157A
1910:  MOVFF  C0,FEA
1914:  MOVFF  BF,FE9
1918:  MOVFF  03,BE
191C:  MOVFF  02,BD
1920:  MOVFF  01,BC
1924:  MOVFF  00,BB
....................    }  
1928:  INCF   2C,F
192A:  BRA    18B8
....................    promediopresion=promediopresion/media;    
192C:  CLRF   xD3
192E:  MOVFF  BA,D2
1932:  CALL   0A46
1936:  MOVFF  BE,D1
193A:  MOVFF  BD,D0
193E:  MOVFF  BC,CF
1942:  MOVFF  BB,CE
1946:  MOVFF  03,D5
194A:  MOVFF  02,D4
194E:  MOVFF  01,D3
1952:  MOVFF  00,D2
1956:  RCALL  1420
1958:  MOVFF  03,BE
195C:  MOVFF  02,BD
1960:  MOVFF  01,BC
1964:  MOVFF  00,BB
....................     
....................    return promediopresion; 
1968:  MOVFF  BB,00
196C:  MOVFF  BC,01
1970:  MOVFF  BD,02
1974:  MOVFF  BE,03
.................... } 
1978:  RETLW  00
....................  
.................... void EliminaRuido(void){ 
....................    /*if(Menu==50){ 
....................       dato[0]=lcd_getc(1,2); 
....................       dato[1]=lcd_getc(2,2); 
....................       dato[2]=lcd_getc(3,2); 
....................       if(dato[0]!=70 || dato[1]!=105 || dato[2]!=108){ 
....................          lcd_init();delay_ms(200);lcd_init(); 
....................          Cambio=ON; 
....................       } 
....................    }*/ 
.................... } 
*
0004:  RETLW  00
....................  
.................... void ConfigInterrupciones (void){ 
....................    lcd_init(); 
*
08DA:  RCALL  0882
....................    set_tris_a(0XFF); 
08DC:  MOVLW  FF
08DE:  MOVWF  F92
....................    set_tris_e(0XFF); 
08E0:  MOVWF  F96
....................    enable_interrupts(INT_EXT_L2H); 
08E2:  BSF    FF2.4
08E4:  BSF    FF1.6
....................    setup_adc_ports(AN0); 
08E6:  MOVF   FC1,W
08E8:  ANDLW  C0
08EA:  IORLW  0E
08EC:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
08EE:  BCF    FC0.0
08F0:  BSF    FC0.1
08F2:  BCF    FC0.2
08F4:  BSF    FC0.7
08F6:  BSF    FC2.0
....................    enable_interrupts(global); 
08F8:  MOVLW  C0
08FA:  IORWF  FF2,F
.................... } 
08FC:  GOTO   21C4 (RETURN)
....................  
.................... void MensajeBienvenida (void){ 
....................    lcd_gotoxy(1,1); 
*
09E0:  MOVLW  01
09E2:  MOVWF  xCC
09E4:  MOVWF  xCD
09E6:  RCALL  0900
....................    printf(lcd_putc,"CABINA FLUJO LAMINAR"); 
09E8:  MOVLW  40
09EA:  MOVWF  FF6
09EC:  MOVLW  01
09EE:  MOVWF  FF7
09F0:  RCALL  09C0
....................    lcd_gotoxy(1,2); 
09F2:  MOVLW  01
09F4:  MOVWF  xCC
09F6:  MOVLW  02
09F8:  MOVWF  xCD
09FA:  RCALL  0900
....................    printf(lcd_putc,"     HORIZONTAL     "); 
09FC:  MOVLW  56
09FE:  MOVWF  FF6
0A00:  MOVLW  01
0A02:  MOVWF  FF7
0A04:  RCALL  09C0
....................    lcd_gotoxy(1,3); 
0A06:  MOVLW  01
0A08:  MOVWF  xCC
0A0A:  MOVLW  03
0A0C:  MOVWF  xCD
0A0E:  RCALL  0900
....................    printf(lcd_putc,"    JP  INGLOBAL    "); 
0A10:  MOVLW  6C
0A12:  MOVWF  FF6
0A14:  MOVLW  01
0A16:  MOVWF  FF7
0A18:  RCALL  09C0
....................    lcd_gotoxy(1,4); 
0A1A:  MOVLW  01
0A1C:  MOVWF  xCC
0A1E:  MOVLW  04
0A20:  MOVWF  xCD
0A22:  RCALL  0900
....................    printf(lcd_putc,"     REF:JPCH24     "); 
0A24:  MOVLW  82
0A26:  MOVWF  FF6
0A28:  MOVLW  01
0A2A:  MOVWF  FF7
0A2C:  RCALL  09C0
....................    delay_ms(2000); 
0A2E:  MOVLW  08
0A30:  MOVWF  xBA
0A32:  MOVLW  FA
0A34:  MOVWF  xD1
0A36:  RCALL  07F2
0A38:  DECFSZ xBA,F
0A3A:  BRA    0A32
....................    printf(lcd_putc,"\f"); 
0A3C:  MOVLW  0C
0A3E:  MOVWF  xCB
0A40:  RCALL  0962
.................... } 
0A42:  GOTO   21C8 (RETURN)
....................  
.................... void LeeEEPROM (void){ 
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0); 
*
0A7C:  MOVFF  FF2,BA
0A80:  BCF    FF2.7
0A82:  CLRF   FA9
0A84:  BCF    FA6.6
0A86:  BCF    FA6.7
0A88:  BSF    FA6.0
0A8A:  MOVF   FA8,W
0A8C:  BTFSC  xBA.7
0A8E:  BSF    FF2.7
0A90:  MOVWF  39
....................    delay_ms(20);  
0A92:  MOVLW  14
0A94:  MOVWF  xD1
0A96:  RCALL  07F2
....................    contrasena[1]=read_eeprom(1); 
0A98:  MOVFF  FF2,BA
0A9C:  BCF    FF2.7
0A9E:  MOVLW  01
0AA0:  MOVWF  FA9
0AA2:  BCF    FA6.6
0AA4:  BCF    FA6.7
0AA6:  BSF    FA6.0
0AA8:  MOVF   FA8,W
0AAA:  BTFSC  xBA.7
0AAC:  BSF    FF2.7
0AAE:  MOVWF  3A
....................    delay_ms(20); 
0AB0:  MOVLW  14
0AB2:  MOVWF  xD1
0AB4:  RCALL  07F2
....................    contrasena[2]=read_eeprom(2); 
0AB6:  MOVFF  FF2,BA
0ABA:  BCF    FF2.7
0ABC:  MOVLW  02
0ABE:  MOVWF  FA9
0AC0:  BCF    FA6.6
0AC2:  BCF    FA6.7
0AC4:  BSF    FA6.0
0AC6:  MOVF   FA8,W
0AC8:  BTFSC  xBA.7
0ACA:  BSF    FF2.7
0ACC:  MOVWF  3B
....................    delay_ms(20);  
0ACE:  MOVLW  14
0AD0:  MOVWF  xD1
0AD2:  RCALL  07F2
....................    contrasena[3]=read_eeprom(3); 
0AD4:  MOVFF  FF2,BA
0AD8:  BCF    FF2.7
0ADA:  MOVLW  03
0ADC:  MOVWF  FA9
0ADE:  BCF    FA6.6
0AE0:  BCF    FA6.7
0AE2:  BSF    FA6.0
0AE4:  MOVF   FA8,W
0AE6:  BTFSC  xBA.7
0AE8:  BSF    FF2.7
0AEA:  MOVWF  3C
....................    delay_ms(20); 
0AEC:  MOVLW  14
0AEE:  MOVWF  xD1
0AF0:  RCALL  07F2
....................    estadoalarma=read_eeprom(4); 
0AF2:  MOVFF  FF2,BA
0AF6:  BCF    FF2.7
0AF8:  MOVLW  04
0AFA:  MOVWF  FA9
0AFC:  BCF    FA6.6
0AFE:  BCF    FA6.7
0B00:  BSF    FA6.0
0B02:  MOVF   FA8,W
0B04:  BTFSC  xBA.7
0B06:  BSF    FF2.7
0B08:  MOVWF  01
0B0A:  BCF    17.4
0B0C:  BTFSC  01.0
0B0E:  BSF    17.4
....................    delay_ms(20); 
0B10:  MOVLW  14
0B12:  MOVWF  xD1
0B14:  RCALL  07F2
....................    tempo_minutos=read_eeprom(5); 
0B16:  MOVFF  FF2,BA
0B1A:  BCF    FF2.7
0B1C:  MOVLW  05
0B1E:  MOVWF  FA9
0B20:  BCF    FA6.6
0B22:  BCF    FA6.7
0B24:  BSF    FA6.0
0B26:  MOVF   FA8,W
0B28:  BTFSC  xBA.7
0B2A:  BSF    FF2.7
0B2C:  MOVWF  27
....................    delay_ms(20); 
0B2E:  MOVLW  14
0B30:  MOVWF  xD1
0B32:  RCALL  07F2
....................    tempo_segundos=read_eeprom(6); 
0B34:  MOVFF  FF2,BA
0B38:  BCF    FF2.7
0B3A:  MOVLW  06
0B3C:  MOVWF  FA9
0B3E:  BCF    FA6.6
0B40:  BCF    FA6.7
0B42:  BSF    FA6.0
0B44:  MOVF   FA8,W
0B46:  BTFSC  xBA.7
0B48:  BSF    FF2.7
0B4A:  MOVWF  28
....................    delay_ms(20); 
0B4C:  MOVLW  14
0B4E:  MOVWF  xD1
0B50:  RCALL  07F2
....................    segundos=read_eeprom(7); 
0B52:  MOVFF  FF2,BA
0B56:  BCF    FF2.7
0B58:  MOVLW  07
0B5A:  MOVWF  FA9
0B5C:  BCF    FA6.6
0B5E:  BCF    FA6.7
0B60:  BSF    FA6.0
0B62:  MOVF   FA8,W
0B64:  BTFSC  xBA.7
0B66:  BSF    FF2.7
0B68:  MOVWF  21
....................    delay_ms(20); 
0B6A:  MOVLW  14
0B6C:  MOVWF  xD1
0B6E:  RCALL  07F2
....................    minutos=read_eeprom(8); 
0B70:  MOVFF  FF2,BA
0B74:  BCF    FF2.7
0B76:  MOVLW  08
0B78:  MOVWF  FA9
0B7A:  BCF    FA6.6
0B7C:  BCF    FA6.7
0B7E:  BSF    FA6.0
0B80:  MOVF   FA8,W
0B82:  BTFSC  xBA.7
0B84:  BSF    FF2.7
0B86:  MOVWF  22
....................    delay_ms(20); 
0B88:  MOVLW  14
0B8A:  MOVWF  xD1
0B8C:  RCALL  07F2
....................    horasL=read_eeprom(9); 
0B8E:  MOVFF  FF2,BA
0B92:  BCF    FF2.7
0B94:  MOVLW  09
0B96:  MOVWF  FA9
0B98:  BCF    FA6.6
0B9A:  BCF    FA6.7
0B9C:  BSF    FA6.0
0B9E:  MOVF   FA8,W
0BA0:  BTFSC  xBA.7
0BA2:  BSF    FF2.7
0BA4:  MOVWF  23
....................    delay_ms(20); 
0BA6:  MOVLW  14
0BA8:  MOVWF  xD1
0BAA:  RCALL  07F2
....................    horasH=read_eeprom(10); 
0BAC:  MOVFF  FF2,BA
0BB0:  BCF    FF2.7
0BB2:  MOVLW  0A
0BB4:  MOVWF  FA9
0BB6:  BCF    FA6.6
0BB8:  BCF    FA6.7
0BBA:  BSF    FA6.0
0BBC:  MOVF   FA8,W
0BBE:  BTFSC  xBA.7
0BC0:  BSF    FF2.7
0BC2:  MOVWF  24
....................    delay_ms(20); 
0BC4:  MOVLW  14
0BC6:  MOVWF  xD1
0BC8:  RCALL  07F2
....................    G_l=read_eeprom(11); 
0BCA:  MOVFF  FF2,BA
0BCE:  BCF    FF2.7
0BD0:  MOVLW  0B
0BD2:  MOVWF  FA9
0BD4:  BCF    FA6.6
0BD6:  BCF    FA6.7
0BD8:  BSF    FA6.0
0BDA:  MOVF   FA8,W
0BDC:  BTFSC  xBA.7
0BDE:  BSF    FF2.7
0BE0:  MOVWF  25
....................    delay_ms(20); 
0BE2:  MOVLW  14
0BE4:  MOVWF  xD1
0BE6:  RCALL  07F2
....................    G_h=read_eeprom(12); 
0BE8:  MOVFF  FF2,BA
0BEC:  BCF    FF2.7
0BEE:  MOVLW  0C
0BF0:  MOVWF  FA9
0BF2:  BCF    FA6.6
0BF4:  BCF    FA6.7
0BF6:  BSF    FA6.0
0BF8:  MOVF   FA8,W
0BFA:  BTFSC  xBA.7
0BFC:  BSF    FF2.7
0BFE:  MOVWF  26
....................    delay_ms(20); 
0C00:  MOVLW  14
0C02:  MOVWF  xD1
0C04:  RCALL  07F2
....................    VelMotor=read_eeprom(13); 
0C06:  MOVFF  FF2,BA
0C0A:  BCF    FF2.7
0C0C:  MOVLW  0D
0C0E:  MOVWF  FA9
0C10:  BCF    FA6.6
0C12:  BCF    FA6.7
0C14:  BSF    FA6.0
0C16:  MOVF   FA8,W
0C18:  BTFSC  xBA.7
0C1A:  BSF    FF2.7
0C1C:  MOVWF  xB0
....................    delay_ms(20); 
0C1E:  MOVLW  14
0C20:  MOVWF  xD1
0C22:  RCALL  07F2
....................    G16=make16(G_h,G_l); 
0C24:  MOVFF  26,43
0C28:  MOVFF  25,42
....................    G=G16; 
0C2C:  MOVFF  43,D3
0C30:  MOVFF  42,D2
0C34:  RCALL  0A46
0C36:  MOVFF  03,A7
0C3A:  MOVFF  02,A6
0C3E:  MOVFF  01,A5
0C42:  MOVFF  00,A4
....................    horas=make16(horasH,horasL); 
0C46:  MOVFF  24,41
0C4A:  MOVFF  23,40
....................    tempo_minutos_pro=tempo_minutos;tempo_segundos_pro=tempo_segundos; 
0C4E:  MOVFF  27,29
0C52:  MOVFF  28,2A
.................... } 
0C56:  GOTO   21CC (RETURN)
....................  
.................... void LimitaValores(void){ 
....................     
....................    if(Contrasena[0]>9 || Contrasena[0]<0){ 
*
0CD0:  BTFSC  39.7
0CD2:  BRA    0CDA
0CD4:  MOVF   39,W
0CD6:  SUBLW  09
0CD8:  BNC   0CE0
0CDA:  BTFSC  39.7
0CDC:  BRA    0CE0
0CDE:  BRA    0D10
....................       Contrasena[0]=0;write_eeprom(0,0);delay_ms(20); 
0CE0:  CLRF   39
0CE2:  CLRF   FA9
0CE4:  CLRF   FA8
0CE6:  BCF    FA6.6
0CE8:  BCF    FA6.7
0CEA:  BSF    FA6.2
0CEC:  MOVF   FF2,W
0CEE:  MOVWF  00
0CF0:  BCF    FF2.7
0CF2:  MOVLB  F
0CF4:  MOVLW  55
0CF6:  MOVWF  FA7
0CF8:  MOVLW  AA
0CFA:  MOVWF  FA7
0CFC:  BSF    FA6.1
0CFE:  BTFSC  FA6.1
0D00:  BRA    0CFE
0D02:  BCF    FA6.2
0D04:  MOVF   00,W
0D06:  IORWF  FF2,F
0D08:  MOVLW  14
0D0A:  MOVLB  0
0D0C:  MOVWF  xD1
0D0E:  RCALL  07F2
....................    } 
....................    if(Contrasena[1]>9 || Contrasena[1]<0){ 
0D10:  BTFSC  3A.7
0D12:  BRA    0D1A
0D14:  MOVF   3A,W
0D16:  SUBLW  09
0D18:  BNC   0D20
0D1A:  BTFSC  3A.7
0D1C:  BRA    0D20
0D1E:  BRA    0D52
....................       Contrasena[1]=0;write_eeprom(1,0);delay_ms(20); 
0D20:  CLRF   3A
0D22:  MOVLW  01
0D24:  MOVWF  FA9
0D26:  CLRF   FA8
0D28:  BCF    FA6.6
0D2A:  BCF    FA6.7
0D2C:  BSF    FA6.2
0D2E:  MOVF   FF2,W
0D30:  MOVWF  00
0D32:  BCF    FF2.7
0D34:  MOVLB  F
0D36:  MOVLW  55
0D38:  MOVWF  FA7
0D3A:  MOVLW  AA
0D3C:  MOVWF  FA7
0D3E:  BSF    FA6.1
0D40:  BTFSC  FA6.1
0D42:  BRA    0D40
0D44:  BCF    FA6.2
0D46:  MOVF   00,W
0D48:  IORWF  FF2,F
0D4A:  MOVLW  14
0D4C:  MOVLB  0
0D4E:  MOVWF  xD1
0D50:  RCALL  07F2
....................    } 
....................    if(Contrasena[2]>9 || Contrasena[2]<0){ 
0D52:  BTFSC  3B.7
0D54:  BRA    0D5C
0D56:  MOVF   3B,W
0D58:  SUBLW  09
0D5A:  BNC   0D62
0D5C:  BTFSC  3B.7
0D5E:  BRA    0D62
0D60:  BRA    0D94
....................       Contrasena[2]=0;write_eeprom(2,0);delay_ms(20); 
0D62:  CLRF   3B
0D64:  MOVLW  02
0D66:  MOVWF  FA9
0D68:  CLRF   FA8
0D6A:  BCF    FA6.6
0D6C:  BCF    FA6.7
0D6E:  BSF    FA6.2
0D70:  MOVF   FF2,W
0D72:  MOVWF  00
0D74:  BCF    FF2.7
0D76:  MOVLB  F
0D78:  MOVLW  55
0D7A:  MOVWF  FA7
0D7C:  MOVLW  AA
0D7E:  MOVWF  FA7
0D80:  BSF    FA6.1
0D82:  BTFSC  FA6.1
0D84:  BRA    0D82
0D86:  BCF    FA6.2
0D88:  MOVF   00,W
0D8A:  IORWF  FF2,F
0D8C:  MOVLW  14
0D8E:  MOVLB  0
0D90:  MOVWF  xD1
0D92:  RCALL  07F2
....................    } 
....................    if(Contrasena[3]>9 || Contrasena[3]<0){ 
0D94:  BTFSC  3C.7
0D96:  BRA    0D9E
0D98:  MOVF   3C,W
0D9A:  SUBLW  09
0D9C:  BNC   0DA4
0D9E:  BTFSC  3C.7
0DA0:  BRA    0DA4
0DA2:  BRA    0DD6
....................       Contrasena[3]=0;write_eeprom(3,0);delay_ms(20); 
0DA4:  CLRF   3C
0DA6:  MOVLW  03
0DA8:  MOVWF  FA9
0DAA:  CLRF   FA8
0DAC:  BCF    FA6.6
0DAE:  BCF    FA6.7
0DB0:  BSF    FA6.2
0DB2:  MOVF   FF2,W
0DB4:  MOVWF  00
0DB6:  BCF    FF2.7
0DB8:  MOVLB  F
0DBA:  MOVLW  55
0DBC:  MOVWF  FA7
0DBE:  MOVLW  AA
0DC0:  MOVWF  FA7
0DC2:  BSF    FA6.1
0DC4:  BTFSC  FA6.1
0DC6:  BRA    0DC4
0DC8:  BCF    FA6.2
0DCA:  MOVF   00,W
0DCC:  IORWF  FF2,F
0DCE:  MOVLW  14
0DD0:  MOVLB  0
0DD2:  MOVWF  xD1
0DD4:  RCALL  07F2
....................    } 
....................    if(estadoalarma>1){ 
0DD6:  MOVLW  00
0DD8:  BTFSC  17.4
0DDA:  MOVLW  01
0DDC:  SUBLW  01
0DDE:  BC    0E14
....................       estadoalarma=1;write_eeprom(4,1);delay_ms(20); 
0DE0:  BSF    17.4
0DE2:  MOVLW  04
0DE4:  MOVWF  FA9
0DE6:  MOVLW  01
0DE8:  MOVWF  FA8
0DEA:  BCF    FA6.6
0DEC:  BCF    FA6.7
0DEE:  BSF    FA6.2
0DF0:  MOVF   FF2,W
0DF2:  MOVWF  00
0DF4:  BCF    FF2.7
0DF6:  MOVLB  F
0DF8:  MOVLW  55
0DFA:  MOVWF  FA7
0DFC:  MOVLW  AA
0DFE:  MOVWF  FA7
0E00:  BSF    FA6.1
0E02:  BTFSC  FA6.1
0E04:  BRA    0E02
0E06:  BCF    FA6.2
0E08:  MOVF   00,W
0E0A:  IORWF  FF2,F
0E0C:  MOVLW  14
0E0E:  MOVLB  0
0E10:  MOVWF  xD1
0E12:  RCALL  07F2
....................    } 
....................    if(tempo_minutos>200){ 
0E14:  MOVF   27,W
0E16:  SUBLW  C8
0E18:  BC    0E50
....................       tempo_minutos=20;write_eeprom(5,20);delay_ms(20); 
0E1A:  MOVLW  14
0E1C:  MOVWF  27
0E1E:  MOVLW  05
0E20:  MOVWF  FA9
0E22:  MOVLW  14
0E24:  MOVWF  FA8
0E26:  BCF    FA6.6
0E28:  BCF    FA6.7
0E2A:  BSF    FA6.2
0E2C:  MOVF   FF2,W
0E2E:  MOVWF  00
0E30:  BCF    FF2.7
0E32:  MOVLB  F
0E34:  MOVLW  55
0E36:  MOVWF  FA7
0E38:  MOVLW  AA
0E3A:  MOVWF  FA7
0E3C:  BSF    FA6.1
0E3E:  BTFSC  FA6.1
0E40:  BRA    0E3E
0E42:  BCF    FA6.2
0E44:  MOVF   00,W
0E46:  IORWF  FF2,F
0E48:  MOVLW  14
0E4A:  MOVLB  0
0E4C:  MOVWF  xD1
0E4E:  RCALL  07F2
....................    } 
....................    if(tempo_segundos>59){ 
0E50:  MOVF   28,W
0E52:  SUBLW  3B
0E54:  BC    0E88
....................       tempo_segundos=0;write_eeprom(6,0);delay_ms(20); 
0E56:  CLRF   28
0E58:  MOVLW  06
0E5A:  MOVWF  FA9
0E5C:  CLRF   FA8
0E5E:  BCF    FA6.6
0E60:  BCF    FA6.7
0E62:  BSF    FA6.2
0E64:  MOVF   FF2,W
0E66:  MOVWF  00
0E68:  BCF    FF2.7
0E6A:  MOVLB  F
0E6C:  MOVLW  55
0E6E:  MOVWF  FA7
0E70:  MOVLW  AA
0E72:  MOVWF  FA7
0E74:  BSF    FA6.1
0E76:  BTFSC  FA6.1
0E78:  BRA    0E76
0E7A:  BCF    FA6.2
0E7C:  MOVF   00,W
0E7E:  IORWF  FF2,F
0E80:  MOVLW  14
0E82:  MOVLB  0
0E84:  MOVWF  xD1
0E86:  RCALL  07F2
....................    } 
....................    if(segundos>60){ 
0E88:  MOVF   21,W
0E8A:  SUBLW  3C
0E8C:  BC    0EC0
....................       segundos=0;write_eeprom(7,0);delay_ms(20); 
0E8E:  CLRF   21
0E90:  MOVLW  07
0E92:  MOVWF  FA9
0E94:  CLRF   FA8
0E96:  BCF    FA6.6
0E98:  BCF    FA6.7
0E9A:  BSF    FA6.2
0E9C:  MOVF   FF2,W
0E9E:  MOVWF  00
0EA0:  BCF    FF2.7
0EA2:  MOVLB  F
0EA4:  MOVLW  55
0EA6:  MOVWF  FA7
0EA8:  MOVLW  AA
0EAA:  MOVWF  FA7
0EAC:  BSF    FA6.1
0EAE:  BTFSC  FA6.1
0EB0:  BRA    0EAE
0EB2:  BCF    FA6.2
0EB4:  MOVF   00,W
0EB6:  IORWF  FF2,F
0EB8:  MOVLW  14
0EBA:  MOVLB  0
0EBC:  MOVWF  xD1
0EBE:  RCALL  07F2
....................    } 
....................    if(minutos>60){ 
0EC0:  MOVF   22,W
0EC2:  SUBLW  3C
0EC4:  BC    0EF8
....................       minutos=0;write_eeprom(8,0);delay_ms(20); 
0EC6:  CLRF   22
0EC8:  MOVLW  08
0ECA:  MOVWF  FA9
0ECC:  CLRF   FA8
0ECE:  BCF    FA6.6
0ED0:  BCF    FA6.7
0ED2:  BSF    FA6.2
0ED4:  MOVF   FF2,W
0ED6:  MOVWF  00
0ED8:  BCF    FF2.7
0EDA:  MOVLB  F
0EDC:  MOVLW  55
0EDE:  MOVWF  FA7
0EE0:  MOVLW  AA
0EE2:  MOVWF  FA7
0EE4:  BSF    FA6.1
0EE6:  BTFSC  FA6.1
0EE8:  BRA    0EE6
0EEA:  BCF    FA6.2
0EEC:  MOVF   00,W
0EEE:  IORWF  FF2,F
0EF0:  MOVLW  14
0EF2:  MOVLB  0
0EF4:  MOVWF  xD1
0EF6:  RCALL  07F2
....................    } 
....................    if(horas>10000){ 
0EF8:  MOVF   41,W
0EFA:  SUBLW  26
0EFC:  BC    0F6E
0EFE:  XORLW  FF
0F00:  BNZ   0F08
0F02:  MOVF   40,W
0F04:  SUBLW  10
0F06:  BC    0F6E
....................       horas=0;write_eeprom(9,10);delay_ms(20);write_eeprom(10,0);delay_ms(20); 
0F08:  CLRF   41
0F0A:  CLRF   40
0F0C:  MOVLW  09
0F0E:  MOVWF  FA9
0F10:  MOVLW  0A
0F12:  MOVWF  FA8
0F14:  BCF    FA6.6
0F16:  BCF    FA6.7
0F18:  BSF    FA6.2
0F1A:  MOVF   FF2,W
0F1C:  MOVWF  00
0F1E:  BCF    FF2.7
0F20:  MOVLB  F
0F22:  MOVLW  55
0F24:  MOVWF  FA7
0F26:  MOVLW  AA
0F28:  MOVWF  FA7
0F2A:  BSF    FA6.1
0F2C:  BTFSC  FA6.1
0F2E:  BRA    0F2C
0F30:  BCF    FA6.2
0F32:  MOVF   00,W
0F34:  IORWF  FF2,F
0F36:  MOVLW  14
0F38:  MOVLB  0
0F3A:  MOVWF  xD1
0F3C:  RCALL  07F2
0F3E:  MOVLW  0A
0F40:  MOVWF  FA9
0F42:  CLRF   FA8
0F44:  BCF    FA6.6
0F46:  BCF    FA6.7
0F48:  BSF    FA6.2
0F4A:  MOVF   FF2,W
0F4C:  MOVWF  00
0F4E:  BCF    FF2.7
0F50:  MOVLB  F
0F52:  MOVLW  55
0F54:  MOVWF  FA7
0F56:  MOVLW  AA
0F58:  MOVWF  FA7
0F5A:  BSF    FA6.1
0F5C:  BTFSC  FA6.1
0F5E:  BRA    0F5C
0F60:  BCF    FA6.2
0F62:  MOVF   00,W
0F64:  IORWF  FF2,F
0F66:  MOVLW  14
0F68:  MOVLB  0
0F6A:  MOVWF  xD1
0F6C:  RCALL  07F2
....................    } 
....................    if(G>240){ 
0F6E:  CLRF   xD1
0F70:  CLRF   xD0
0F72:  MOVLW  70
0F74:  MOVWF  xCF
0F76:  MOVLW  86
0F78:  MOVWF  xCE
0F7A:  MOVFF  A7,D5
0F7E:  MOVFF  A6,D4
0F82:  MOVFF  A5,D3
0F86:  MOVFF  A4,D2
0F8A:  RCALL  0C5A
0F8C:  BNC   0FFE
....................       G=240;write_eeprom(11,240);delay_ms(20);write_eeprom(12,0);delay_ms(20); 
0F8E:  CLRF   xA7
0F90:  CLRF   xA6
0F92:  MOVLW  70
0F94:  MOVWF  xA5
0F96:  MOVLW  86
0F98:  MOVWF  xA4
0F9A:  MOVLW  0B
0F9C:  MOVWF  FA9
0F9E:  MOVLW  F0
0FA0:  MOVWF  FA8
0FA2:  BCF    FA6.6
0FA4:  BCF    FA6.7
0FA6:  BSF    FA6.2
0FA8:  MOVF   FF2,W
0FAA:  MOVWF  00
0FAC:  BCF    FF2.7
0FAE:  MOVLB  F
0FB0:  MOVLW  55
0FB2:  MOVWF  FA7
0FB4:  MOVLW  AA
0FB6:  MOVWF  FA7
0FB8:  BSF    FA6.1
0FBA:  BTFSC  FA6.1
0FBC:  BRA    0FBA
0FBE:  BCF    FA6.2
0FC0:  MOVF   00,W
0FC2:  IORWF  FF2,F
0FC4:  MOVLW  14
0FC6:  MOVLB  0
0FC8:  MOVWF  xD1
0FCA:  RCALL  07F2
0FCC:  MOVLW  0C
0FCE:  MOVWF  FA9
0FD0:  CLRF   FA8
0FD2:  BCF    FA6.6
0FD4:  BCF    FA6.7
0FD6:  BSF    FA6.2
0FD8:  MOVF   FF2,W
0FDA:  MOVWF  00
0FDC:  BCF    FF2.7
0FDE:  MOVLB  F
0FE0:  MOVLW  55
0FE2:  MOVWF  FA7
0FE4:  MOVLW  AA
0FE6:  MOVWF  FA7
0FE8:  BSF    FA6.1
0FEA:  BTFSC  FA6.1
0FEC:  BRA    0FEA
0FEE:  BCF    FA6.2
0FF0:  MOVF   00,W
0FF2:  IORWF  FF2,F
0FF4:  MOVLW  14
0FF6:  MOVLB  0
0FF8:  MOVWF  xD1
0FFA:  CALL   07F2
....................    } 
....................    if(VelMotor>6){ 
0FFE:  MOVF   xB0,W
1000:  SUBLW  06
1002:  BC    103C
....................       VelMotor=4;write_eeprom(13,4);delay_ms(20); 
1004:  MOVLW  04
1006:  MOVWF  xB0
1008:  MOVLW  0D
100A:  MOVWF  FA9
100C:  MOVLW  04
100E:  MOVWF  FA8
1010:  BCF    FA6.6
1012:  BCF    FA6.7
1014:  BSF    FA6.2
1016:  MOVF   FF2,W
1018:  MOVWF  00
101A:  BCF    FF2.7
101C:  MOVLB  F
101E:  MOVLW  55
1020:  MOVWF  FA7
1022:  MOVLW  AA
1024:  MOVWF  FA7
1026:  BSF    FA6.1
1028:  BTFSC  FA6.1
102A:  BRA    1028
102C:  BCF    FA6.2
102E:  MOVF   00,W
1030:  IORWF  FF2,F
1032:  MOVLW  14
1034:  MOVLB  0
1036:  MOVWF  xD1
1038:  CALL   07F2
....................    } 
.................... } 
103C:  GOTO   21D0 (RETURN)
....................  
....................  
.................... #int_EXT            // Interrupción de encoder para control. 
.................... void ext0() {       // 6 pulsos por vuelta. 
....................    pulsos++; 
*
01B2:  INCF   xA8,F
01B4:  BTFSC  FD8.2
01B6:  INCF   xA9,F
....................    if(pulsos>=120){ 
01B8:  MOVF   xA9,F
01BA:  BNZ   01C2
01BC:  MOVF   xA8,W
01BE:  SUBLW  77
01C0:  BC    0214
....................       pulsos=0; 
01C2:  CLRF   xA9
01C4:  CLRF   xA8
....................       //output_toggle(PIN_C0); 
....................       tiempos=0;tiemporeset++;Lectura=1; 
01C6:  CLRF   3F
01C8:  CLRF   3E
01CA:  INCF   2F,F
01CC:  BSF    17.0
....................     
....................       if(ActivaBuzzer==1){ 
01CE:  DECFSZ 3D,W
01D0:  BRA    01E6
....................          if(estadobuzzer==0){ 
01D2:  BTFSC  17.3
01D4:  BRA    01DC
....................             Buzzer_off; 
01D6:  BCF    F8B.0
01D8:  BCF    F94.0
....................          }else{ 
01DA:  BRA    01E4
....................             if(estadoalarma==1) 
01DC:  BTFSS  17.4
01DE:  BRA    01E4
....................                Buzzer_on; 
01E0:  BSF    F8B.0
01E2:  BCF    F94.0
....................          } 
....................          estadobuzzer=!estadobuzzer; 
01E4:  BTG    17.3
....................       } 
....................    //----------------------------- Tiempo Total-----------------------------// 
....................       if(estadouv==1){ 
01E6:  BTFSS  16.0
01E8:  BRA    0214
....................          segundos++; 
01EA:  INCF   21,F
....................          if(tiempo_cumplido==0){ 
01EC:  BTFSC  16.7
01EE:  BRA    0214
....................             if(tempo_segundos>0){ 
01F0:  MOVF   28,F
01F2:  BZ    01F8
....................                tempo_segundos--; 
01F4:  DECF   28,F
....................             }else{ 
01F6:  BRA    0214
....................                if(tempo_minutos>0){ 
01F8:  MOVF   27,F
01FA:  BZ    0204
....................                   tempo_minutos--; 
01FC:  DECF   27,F
....................                   tempo_segundos=59; 
01FE:  MOVLW  3B
0200:  MOVWF  28
....................                }else{ 
0202:  BRA    0214
....................                   tiempo_cumplido=1; 
0204:  BSF    16.7
....................                   estadouv=0;Luz_UV_off; 
0206:  BCF    16.0
0208:  BSF    F8A.1
020A:  BCF    F93.1
....................                   tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
020C:  MOVFF  29,27
0210:  MOVFF  2A,28
....................                } 
....................             } 
....................          } 
....................       } 
....................    } 
....................    tiempocruce=0; 
0214:  CLRF   xAE
0216:  CLRF   xAD
....................    Cruce=ON; 
0218:  BSF    17.7
....................    if(VelMotor>0 && Porcentaje<100){ 
021A:  MOVF   xB0,F
021C:  BZ    024E
021E:  MOVF   xAF,W
0220:  SUBLW  63
0222:  BNC   024E
....................       delay_us(retardo);       
0224:  MOVFF  AB,E2
0228:  INCF   xE2,F
022A:  DECF   xE2,F
022C:  BTFSC  FD8.2
022E:  BRA    0238
0230:  MOVLW  FF
0232:  MOVWF  xE3
0234:  RCALL  0198
0236:  BRA    022A
0238:  MOVFF  AA,E3
023C:  RCALL  0198
....................       Motor_L1_on; 
023E:  BSF    F8B.2
0240:  BCF    F94.2
....................       Motor_L2_on; 
0242:  BSF    F8B.1
0244:  BCF    F94.1
....................       delay_us(100);       
0246:  MOVLW  85
0248:  MOVWF  00
024A:  DECFSZ 00,F
024C:  BRA    024A
....................    } 
....................    Motor_L1_off; 
024E:  BCF    F8B.2
0250:  BCF    F94.2
....................    Motor_L2_off; 
0252:  BCF    F8B.1
0254:  BCF    F94.1
.................... } 
....................  
0256:  BCF    FF2.1
0258:  GOTO   0054
.................... void main () 
.................... { 
*
2034:  CLRF   FF8
2036:  BCF    FD0.7
2038:  BSF    07.7
203A:  CLRF   FEA
203C:  CLRF   FE9
203E:  BCF    16.0
2040:  BCF    16.1
2042:  BCF    16.2
2044:  BCF    16.3
2046:  BCF    16.4
2048:  BCF    16.5
204A:  BCF    16.6
204C:  BCF    16.7
204E:  BCF    17.0
2050:  BCF    17.1
2052:  BCF    17.2
2054:  BCF    17.3
2056:  BCF    17.4
2058:  CLRF   18
205A:  MOVLW  07
205C:  MOVWF  19
205E:  MOVLW  02
2060:  MOVWF  1A
2062:  MOVLW  0B
2064:  MOVWF  1B
2066:  MOVLW  02
2068:  MOVWF  1C
206A:  MOVLW  03
206C:  MOVWF  1D
206E:  MOVLW  02
2070:  MOVWF  1E
2072:  MOVWF  1F
2074:  MOVLW  04
2076:  MOVWF  20
2078:  CLRF   21
207A:  CLRF   22
207C:  CLRF   23
207E:  CLRF   24
2080:  CLRF   25
2082:  CLRF   26
2084:  CLRF   27
2086:  CLRF   28
2088:  CLRF   29
208A:  CLRF   2A
208C:  CLRF   2B
208E:  CLRF   2C
2090:  CLRF   2D
2092:  MOVLW  01
2094:  MOVWF  2E
2096:  CLRF   2F
2098:  CLRF   30
209A:  CLRF   31
209C:  CLRF   3D
209E:  CLRF   41
20A0:  CLRF   40
20A2:  CLRF   43
20A4:  CLRF   42
20A6:  CLRF   x97
20A8:  CLRF   x96
20AA:  CLRF   x95
20AC:  CLRF   x94
20AE:  CLRF   x9B
20B0:  CLRF   x9A
20B2:  CLRF   x99
20B4:  CLRF   x98
20B6:  CLRF   x9F
20B8:  CLRF   x9E
20BA:  CLRF   x9D
20BC:  CLRF   x9C
20BE:  CLRF   xA3
20C0:  CLRF   xA2
20C2:  CLRF   xA1
20C4:  CLRF   xA0
20C6:  CLRF   xA7
20C8:  CLRF   xA6
20CA:  CLRF   xA5
20CC:  MOVLW  80
20CE:  MOVWF  xA4
20D0:  BSF    17.5
20D2:  BCF    17.6
20D4:  CLRF   xA9
20D6:  CLRF   xA8
20D8:  CLRF   xAB
20DA:  CLRF   xAA
20DC:  BCF    17.7
20DE:  BCF    xAC.0
20E0:  CLRF   xAE
20E2:  CLRF   xAD
20E4:  CLRF   xAF
20E6:  CLRF   xB0
20E8:  CLRF   xB4
20EA:  CLRF   xB3
20EC:  CLRF   xB2
20EE:  CLRF   xB1
20F0:  CLRF   xB8
20F2:  CLRF   xB7
20F4:  CLRF   xB6
20F6:  CLRF   xB5
20F8:  MOVF   FC1,W
20FA:  ANDLW  C0
20FC:  IORLW  0F
20FE:  MOVWF  FC1
2100:  MOVLW  07
2102:  MOVWF  FB4
2104:  MOVLW  3E
2106:  MOVWF  32
2108:  MOVLW  20
210A:  MOVWF  33
210C:  MOVLW  5E
210E:  MOVWF  34
2110:  CLRF   35
2112:  CLRF   36
2114:  CLRF   37
2116:  CLRF   38
2118:  CLRF   39
211A:  CLRF   3A
211C:  CLRF   3B
211E:  CLRF   3C
2120:  CLRF   44
2122:  CLRF   45
2124:  CLRF   46
2126:  CLRF   47
2128:  CLRF   48
212A:  CLRF   49
212C:  CLRF   4A
212E:  CLRF   4B
2130:  CLRF   4C
2132:  CLRF   4D
2134:  CLRF   4E
2136:  CLRF   4F
2138:  CLRF   50
213A:  CLRF   51
213C:  CLRF   52
213E:  CLRF   53
2140:  CLRF   54
2142:  CLRF   55
2144:  CLRF   56
2146:  CLRF   57
2148:  CLRF   58
214A:  CLRF   59
214C:  CLRF   5A
214E:  CLRF   5B
2150:  CLRF   5C
2152:  CLRF   5D
2154:  CLRF   5E
2156:  CLRF   5F
2158:  CLRF   x60
215A:  CLRF   x61
215C:  CLRF   x62
215E:  CLRF   x63
2160:  CLRF   x64
2162:  CLRF   x65
2164:  CLRF   x66
2166:  CLRF   x67
2168:  CLRF   x68
216A:  CLRF   x69
216C:  CLRF   x6A
216E:  CLRF   x6B
2170:  CLRF   x6C
2172:  CLRF   x6D
2174:  CLRF   x6E
2176:  CLRF   x6F
2178:  CLRF   x70
217A:  CLRF   x71
217C:  CLRF   x72
217E:  CLRF   x73
2180:  CLRF   x74
2182:  CLRF   x75
2184:  CLRF   x76
2186:  CLRF   x77
2188:  CLRF   x78
218A:  CLRF   x79
218C:  CLRF   x7A
218E:  CLRF   x7B
2190:  CLRF   x7C
2192:  CLRF   x7D
2194:  CLRF   x7E
2196:  CLRF   x7F
2198:  CLRF   x80
219A:  CLRF   x81
219C:  CLRF   x82
219E:  CLRF   x83
21A0:  CLRF   x84
21A2:  CLRF   x85
21A4:  CLRF   x86
21A6:  CLRF   x87
21A8:  CLRF   x88
21AA:  CLRF   x89
21AC:  CLRF   x8A
21AE:  CLRF   x8B
21B0:  CLRF   x8C
21B2:  CLRF   x8D
21B4:  CLRF   x8E
21B6:  CLRF   x8F
21B8:  CLRF   x90
21BA:  CLRF   x91
21BC:  CLRF   x92
21BE:  CLRF   x93
....................    ConfigInterrupciones(); 
21C0:  GOTO   08DA
....................    MensajeBienvenida(); 
21C4:  GOTO   09E0
....................    LeeEEPROM();  
21C8:  GOTO   0A7C
....................    LimitaValores(); 
21CC:  GOTO   0CD0
....................    VelocidadMotor(0); 
21D0:  CLRF   xBA
21D2:  CALL   1040
....................    Motor_L1_off; 
21D6:  BCF    F8B.2
21D8:  BCF    F94.2
....................    Motor_L2_off; 
21DA:  BCF    F8B.1
21DC:  BCF    F94.1
....................    Tcruce2=83; 
21DE:  CLRF   xB8
21E0:  CLRF   xB7
21E2:  MOVLW  26
21E4:  MOVWF  xB6
21E6:  MOVLW  85
21E8:  MOVWF  xB5
....................    Tcruce=8300; 
21EA:  CLRF   xB4
21EC:  MOVLW  B0
21EE:  MOVWF  xB3
21F0:  MOVLW  01
21F2:  MOVWF  xB2
21F4:  MOVLW  8C
21F6:  MOVWF  xB1
....................    while(true){ 
....................           
.................... //------------Menu0------------------------------------------------------------------    
....................    if(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
21F8:  MOVF   18,F
21FA:  BTFSS  FD8.2
21FC:  BRA    2600
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
21FE:  MOVLW  01
2200:  MOVWF  xCC
2202:  MOVWF  xCD
2204:  CALL   0900
....................          printf(lcd_putc,"     Ingrese        "); 
2208:  MOVLW  5C
220A:  MOVWF  FF6
220C:  MOVLW  02
220E:  MOVWF  FF7
2210:  CALL   09C0
....................          lcd_gotoxy(1,2); 
2214:  MOVLW  01
2216:  MOVWF  xCC
2218:  MOVLW  02
221A:  MOVWF  xCD
221C:  CALL   0900
....................          printf(lcd_putc,"    Contraseña      "); 
2220:  MOVLW  72
2222:  MOVWF  FF6
2224:  MOVLW  02
2226:  MOVWF  FF7
2228:  CALL   09C0
....................          lcd_gotoxy(1,3); 
222C:  MOVLW  01
222E:  MOVWF  xCC
2230:  MOVLW  03
2232:  MOVWF  xCD
2234:  CALL   0900
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2238:  MOVLW  88
223A:  MOVWF  FF6
223C:  MOVLW  02
223E:  MOVWF  FF7
2240:  MOVLW  0A
2242:  MOVWF  xBE
2244:  CALL   10BE
2248:  MOVFF  35,BA
224C:  MOVLW  1F
224E:  MOVWF  xBB
2250:  CALL   1104
2254:  MOVFF  36,BA
2258:  MOVLW  1F
225A:  MOVWF  xBB
225C:  CALL   1104
2260:  MOVFF  37,BA
2264:  MOVLW  1F
2266:  MOVWF  xBB
2268:  CALL   1104
226C:  MOVFF  38,BA
2270:  MOVLW  1F
2272:  MOVWF  xBB
2274:  CALL   1104
2278:  MOVLW  20
227A:  MOVWF  xCB
227C:  CALL   0962
2280:  MOVLW  20
2282:  MOVWF  xCB
2284:  CALL   0962
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
2288:  MOVFF  1B,CC
228C:  MOVLW  04
228E:  MOVWF  xCD
2290:  CALL   0900
....................          lcd_putc(t[2]); 
2294:  MOVFF  34,CB
2298:  CALL   0962
....................           
....................          if(unidad>11&&unidad<14){ 
229C:  MOVF   1B,W
229E:  SUBLW  0B
22A0:  BC    22C0
22A2:  MOVF   1B,W
22A4:  SUBLW  0D
22A6:  BNC   22C0
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
22A8:  MOVLW  01
22AA:  SUBWF  1B,W
22AC:  MOVWF  xBA
22AE:  MOVWF  xCC
22B0:  MOVLW  04
22B2:  MOVWF  xCD
22B4:  CALL   0900
....................             lcd_putc(t[1]); 
22B8:  MOVFF  33,CB
22BC:  CALL   0962
....................          } 
....................           
....................          Cambio=OFF; 
22C0:  BCF    17.5
....................       //} 
....................        
....................       if(UP){//Si oprime hacia arriba 
22C2:  BSF    F92.5
22C4:  BTFSC  F80.5
22C6:  BRA    22FA
....................          delay_ms(20); 
22C8:  MOVLW  14
22CA:  MOVWF  xD1
22CC:  CALL   07F2
....................          if(UP){ 
22D0:  BSF    F92.5
22D2:  BTFSC  F80.5
22D4:  BRA    22F8
....................             if(Flanco == 0) { 
22D6:  BTFSC  16.3
22D8:  BRA    22F8
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
22DA:  MOVLW  0B
22DC:  SUBWF  1B,W
22DE:  CLRF   03
22E0:  ADDLW  35
22E2:  MOVWF  FE9
22E4:  MOVLW  00
22E6:  ADDWFC 03,W
22E8:  MOVWF  FEA
22EA:  INCF   FEF,F
22EC:  BSF    16.3
22EE:  MOVLW  1E
22F0:  MOVWF  xD1
22F2:  CALL   07F2
22F6:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
22F8:  BRA    22FC
....................          Flanco = 0; 
22FA:  BCF    16.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
22FC:  BSF    F96.0
22FE:  BTFSC  F84.0
2300:  BRA    2334
....................          delay_ms(20); 
2302:  MOVLW  14
2304:  MOVWF  xD1
2306:  CALL   07F2
....................          if(DOWN){ 
230A:  BSF    F96.0
230C:  BTFSC  F84.0
230E:  BRA    2332
....................             if(Flanco2 == 0) { 
2310:  BTFSC  16.5
2312:  BRA    2332
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
2314:  MOVLW  0B
2316:  SUBWF  1B,W
2318:  CLRF   03
231A:  ADDLW  35
231C:  MOVWF  FE9
231E:  MOVLW  00
2320:  ADDWFC 03,W
2322:  MOVWF  FEA
2324:  DECF   FEF,F
2326:  BSF    16.5
2328:  MOVLW  1E
232A:  MOVWF  xD1
232C:  CALL   07F2
2330:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2332:  BRA    2336
....................          Flanco2 = 0; 
2334:  BCF    16.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
2336:  BSF    F96.1
2338:  BTFSC  F84.1
233A:  BRA    2366
....................          delay_ms(20); 
233C:  MOVLW  14
233E:  MOVWF  xD1
2340:  CALL   07F2
....................          if(RIGHT){ 
2344:  BSF    F96.1
2346:  BTFSC  F84.1
2348:  BRA    2364
....................             if(Flanco1 == 0) { 
234A:  BTFSC  16.4
234C:  BRA    2364
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
234E:  BSF    16.4
2350:  INCF   1B,F
2352:  MOVLW  1E
2354:  MOVWF  xD1
2356:  CALL   07F2
235A:  MOVLW  0C
235C:  MOVWF  xCB
235E:  CALL   0962
2362:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2364:  BRA    2368
....................          Flanco1 = 0; 
2366:  BCF    16.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
2368:  BSF    F96.2
236A:  BTFSC  F84.2
236C:  BRA    2398
....................          delay_ms(150); 
236E:  MOVLW  96
2370:  MOVWF  xD1
2372:  CALL   07F2
....................          if(IZQU){ 
2376:  BSF    F96.2
2378:  BTFSC  F84.2
237A:  BRA    2396
....................             if(Flanco3 == 0){ 
237C:  BTFSC  16.6
237E:  BRA    2396
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2380:  BSF    16.6
2382:  DECF   1B,F
2384:  MOVLW  1E
2386:  MOVWF  xD1
2388:  CALL   07F2
238C:  MOVLW  0C
238E:  MOVWF  xCB
2390:  CALL   0962
2394:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2396:  BRA    239A
....................         Flanco3 = 0; 
2398:  BCF    16.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
239A:  MOVLW  0B
239C:  SUBWF  1B,W
239E:  CLRF   03
23A0:  ADDLW  35
23A2:  MOVWF  FE9
23A4:  MOVLW  00
23A6:  ADDWFC 03,W
23A8:  MOVWF  FEA
23AA:  BTFSC  FEF.7
23AC:  BRA    23B0
23AE:  BRA    23C4
....................          clave[unidad-11]=9; 
23B0:  MOVLW  0B
23B2:  SUBWF  1B,W
23B4:  CLRF   03
23B6:  ADDLW  35
23B8:  MOVWF  FE9
23BA:  MOVLW  00
23BC:  ADDWFC 03,W
23BE:  MOVWF  FEA
23C0:  MOVLW  09
23C2:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
23C4:  MOVLW  0B
23C6:  SUBWF  1B,W
23C8:  CLRF   03
23CA:  ADDLW  35
23CC:  MOVWF  FE9
23CE:  MOVLW  00
23D0:  ADDWFC 03,W
23D2:  MOVWF  FEA
23D4:  BTFSC  FEF.7
23D6:  BRA    23F0
23D8:  MOVF   FEF,W
23DA:  SUBLW  09
23DC:  BC    23F0
....................          clave[unidad-11]=0; 
23DE:  MOVLW  0B
23E0:  SUBWF  1B,W
23E2:  CLRF   03
23E4:  ADDLW  35
23E6:  MOVWF  FE9
23E8:  MOVLW  00
23EA:  ADDWFC 03,W
23EC:  MOVWF  FEA
23EE:  CLRF   FEF
....................         
....................       if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
23F0:  MOVF   1B,W
23F2:  SUBLW  0A
23F4:  BNC   23FA
....................          unidad=11; 
23F6:  MOVLW  0B
23F8:  MOVWF  1B
....................              
....................       if(unidad>14){             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
23FA:  MOVF   1B,W
23FC:  SUBLW  0E
23FE:  BTFSC  FD8.0
2400:  BRA    2600
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2){ // Si Ingresa clave para reset general del sistema. 
2402:  MOVF   35,W
2404:  SUBLW  03
2406:  BNZ   24E2
2408:  MOVF   36,W
240A:  SUBLW  08
240C:  BNZ   24E2
240E:  MOVF   37,W
2410:  SUBLW  09
2412:  BNZ   24E2
2414:  MOVF   38,W
2416:  SUBLW  02
2418:  BNZ   24E2
....................             write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
241A:  CLRF   FA9
241C:  CLRF   FA8
241E:  BCF    FA6.6
2420:  BCF    FA6.7
2422:  BSF    FA6.2
2424:  MOVF   FF2,W
2426:  MOVWF  00
2428:  BCF    FF2.7
242A:  MOVLB  F
242C:  MOVLW  55
242E:  MOVWF  FA7
2430:  MOVLW  AA
2432:  MOVWF  FA7
2434:  BSF    FA6.1
2436:  BTFSC  FA6.1
2438:  BRA    2436
243A:  BCF    FA6.2
243C:  MOVF   00,W
243E:  IORWF  FF2,F
2440:  MOVLW  14
2442:  MOVLB  0
2444:  MOVWF  xD1
2446:  CALL   07F2
244A:  MOVLW  01
244C:  MOVWF  FA9
244E:  CLRF   FA8
2450:  BCF    FA6.6
2452:  BCF    FA6.7
2454:  BSF    FA6.2
2456:  MOVF   FF2,W
2458:  MOVWF  00
245A:  BCF    FF2.7
245C:  MOVLB  F
245E:  MOVLW  55
2460:  MOVWF  FA7
2462:  MOVLW  AA
2464:  MOVWF  FA7
2466:  BSF    FA6.1
2468:  BTFSC  FA6.1
246A:  BRA    2468
246C:  BCF    FA6.2
246E:  MOVF   00,W
2470:  IORWF  FF2,F
2472:  MOVLW  14
2474:  MOVLB  0
2476:  MOVWF  xD1
2478:  CALL   07F2
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
247C:  MOVLW  02
247E:  MOVWF  FA9
2480:  CLRF   FA8
2482:  BCF    FA6.6
2484:  BCF    FA6.7
2486:  BSF    FA6.2
2488:  MOVF   FF2,W
248A:  MOVWF  00
248C:  BCF    FF2.7
248E:  MOVLB  F
2490:  MOVLW  55
2492:  MOVWF  FA7
2494:  MOVLW  AA
2496:  MOVWF  FA7
2498:  BSF    FA6.1
249A:  BTFSC  FA6.1
249C:  BRA    249A
249E:  BCF    FA6.2
24A0:  MOVF   00,W
24A2:  IORWF  FF2,F
24A4:  MOVLW  14
24A6:  MOVLB  0
24A8:  MOVWF  xD1
24AA:  CALL   07F2
24AE:  MOVLW  03
24B0:  MOVWF  FA9
24B2:  CLRF   FA8
24B4:  BCF    FA6.6
24B6:  BCF    FA6.7
24B8:  BSF    FA6.2
24BA:  MOVF   FF2,W
24BC:  MOVWF  00
24BE:  BCF    FF2.7
24C0:  MOVLB  F
24C2:  MOVLW  55
24C4:  MOVWF  FA7
24C6:  MOVLW  AA
24C8:  MOVWF  FA7
24CA:  BSF    FA6.1
24CC:  BTFSC  FA6.1
24CE:  BRA    24CC
24D0:  BCF    FA6.2
24D2:  MOVF   00,W
24D4:  IORWF  FF2,F
24D6:  MOVLW  14
24D8:  MOVLB  0
24DA:  MOVWF  xD1
24DC:  CALL   07F2
....................              reset_cpu(); 
24E0:  RESET
....................          } 
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]){ // Si las claves coinciden pasa a Menu Principal. 
24E2:  MOVF   39,W
24E4:  SUBWF  35,W
24E6:  BNZ   2586
24E8:  MOVF   3A,W
24EA:  SUBWF  36,W
24EC:  BNZ   2586
24EE:  MOVF   3B,W
24F0:  SUBWF  37,W
24F2:  BNZ   2586
24F4:  MOVF   3C,W
24F6:  SUBWF  38,W
24F8:  BNZ   2586
....................             lcd_gotoxy(1,1); 
24FA:  MOVLW  01
24FC:  MOVWF  xCC
24FE:  MOVWF  xCD
2500:  CALL   0900
....................             printf(lcd_putc,"                   "); 
2504:  MOVLW  9E
2506:  MOVWF  FF6
2508:  MOVLW  02
250A:  MOVWF  FF7
250C:  CALL   09C0
....................             lcd_gotoxy(1,2); 
2510:  MOVLW  01
2512:  MOVWF  xCC
2514:  MOVLW  02
2516:  MOVWF  xCD
2518:  CALL   0900
....................             printf(lcd_putc,"     Contraseña    "); 
251C:  MOVLW  B2
251E:  MOVWF  FF6
2520:  MOVLW  02
2522:  MOVWF  FF7
2524:  CALL   09C0
....................             lcd_gotoxy(1,3); 
2528:  MOVLW  01
252A:  MOVWF  xCC
252C:  MOVLW  03
252E:  MOVWF  xCD
2530:  CALL   0900
....................             printf(lcd_putc,"      Correcta     "); 
2534:  MOVLW  C6
2536:  MOVWF  FF6
2538:  MOVLW  02
253A:  MOVWF  FF7
253C:  CALL   09C0
....................             lcd_gotoxy(1,4); 
2540:  MOVLW  01
2542:  MOVWF  xCC
2544:  MOVLW  04
2546:  MOVWF  xCD
2548:  CALL   0900
....................             printf(lcd_putc,"                   "); 
254C:  MOVLW  DA
254E:  MOVWF  FF6
2550:  MOVLW  02
2552:  MOVWF  FF7
2554:  CALL   09C0
....................             delay_ms(1000);Menu=50;unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
2558:  MOVLW  04
255A:  MOVWF  xBA
255C:  MOVLW  FA
255E:  MOVWF  xD1
2560:  CALL   07F2
2564:  DECFSZ xBA,F
2566:  BRA    255C
2568:  MOVLW  32
256A:  MOVWF  18
256C:  MOVLW  0B
256E:  MOVWF  1B
2570:  MOVLW  0C
2572:  MOVWF  xCB
2574:  CALL   0962
2578:  BSF    17.5
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
257A:  CLRF   35
257C:  CLRF   36
257E:  CLRF   37
2580:  CLRF   38
2582:  BSF    17.5
....................          } 
....................          else{                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
2584:  BRA    2600
....................             lcd_gotoxy(1,1); 
2586:  MOVLW  01
2588:  MOVWF  xCC
258A:  MOVWF  xCD
258C:  CALL   0900
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
2590:  MOVLW  01
2592:  MOVWF  xCC
2594:  MOVLW  02
2596:  MOVWF  xCD
2598:  CALL   0900
....................             printf(lcd_putc,"     Contraseña    "); 
259C:  MOVLW  EE
259E:  MOVWF  FF6
25A0:  MOVLW  02
25A2:  MOVWF  FF7
25A4:  CALL   09C0
....................             lcd_gotoxy(1,3); 
25A8:  MOVLW  01
25AA:  MOVWF  xCC
25AC:  MOVLW  03
25AE:  MOVWF  xCD
25B0:  CALL   0900
....................             printf(lcd_putc,"     Incorrecta    "); 
25B4:  MOVLW  02
25B6:  MOVWF  FF6
25B8:  MOVLW  03
25BA:  MOVWF  FF7
25BC:  CALL   09C0
....................             lcd_gotoxy(1,4); 
25C0:  MOVLW  01
25C2:  MOVWF  xCC
25C4:  MOVLW  04
25C6:  MOVWF  xCD
25C8:  CALL   0900
....................             printf(lcd_putc,"                   "); 
25CC:  MOVLW  16
25CE:  MOVWF  FF6
25D0:  MOVLW  03
25D2:  MOVWF  FF7
25D4:  CALL   09C0
....................             delay_ms(1000);unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
25D8:  MOVLW  04
25DA:  MOVWF  xBA
25DC:  MOVLW  FA
25DE:  MOVWF  xD1
25E0:  CALL   07F2
25E4:  DECFSZ xBA,F
25E6:  BRA    25DC
25E8:  MOVLW  0B
25EA:  MOVWF  1B
25EC:  MOVLW  0C
25EE:  MOVWF  xCB
25F0:  CALL   0962
25F4:  BSF    17.5
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
25F6:  CLRF   35
25F8:  CLRF   36
25FA:  CLRF   37
25FC:  CLRF   38
25FE:  BSF    17.5
....................          } 
....................       } 
....................    } 
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
2600:  DECFSZ 18,W
2602:  BRA    283A
....................       EliminaRuido(); 
2604:  CALL   0004
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
2608:  MOVLW  01
260A:  MOVWF  xCC
260C:  MOVWF  xCD
260E:  CALL   0900
....................          printf(lcd_putc,"---MENU PRINCIPAL---"); 
2612:  MOVLW  2A
2614:  MOVWF  FF6
2616:  MOVLW  03
2618:  MOVWF  FF7
261A:  CALL   09C0
....................          mensajes(1+paso,2); 
261E:  MOVLW  01
2620:  ADDWF  31,W
2622:  MOVWF  xBA
2624:  MOVWF  xBB
2626:  MOVLW  02
2628:  MOVWF  xBC
262A:  CALL   11D4
....................          mensajes(2+paso,3); 
262E:  MOVLW  02
2630:  ADDWF  31,W
2632:  MOVWF  xBA
2634:  MOVWF  xBB
2636:  MOVLW  03
2638:  MOVWF  xBC
263A:  CALL   11D4
....................          mensajes(3+paso,4); 
263E:  MOVLW  03
2640:  ADDWF  31,W
2642:  MOVWF  xBA
2644:  MOVWF  xBB
2646:  MOVLW  04
2648:  MOVWF  xBC
264A:  CALL   11D4
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
264E:  MOVLW  01
2650:  MOVWF  xCC
2652:  MOVFF  1C,CD
2656:  CALL   0900
....................         lcd_putc(t[0]); 
265A:  MOVFF  32,CB
265E:  CALL   0962
....................  
....................         if(Flecha==2) 
2662:  MOVF   1C,W
2664:  SUBLW  02
2666:  BNZ   2690
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
2668:  MOVLW  01
266A:  MOVWF  xCC
266C:  MOVLW  04
266E:  MOVWF  xCD
2670:  CALL   0900
....................             lcd_putc(t[1]); 
2674:  MOVFF  33,CB
2678:  CALL   0962
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
267C:  MOVLW  01
267E:  MOVWF  xCC
2680:  MOVLW  03
2682:  MOVWF  xCD
2684:  CALL   0900
....................             lcd_putc(t[1]); 
2688:  MOVFF  33,CB
268C:  CALL   0962
....................           } 
....................          
....................         if(Flecha==4) 
2690:  MOVF   1C,W
2692:  SUBLW  04
2694:  BNZ   26BE
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
2696:  MOVLW  01
2698:  MOVWF  xCC
269A:  MOVLW  02
269C:  MOVWF  xCD
269E:  CALL   0900
....................             lcd_putc(t[1]); 
26A2:  MOVFF  33,CB
26A6:  CALL   0962
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
26AA:  MOVLW  01
26AC:  MOVWF  xCC
26AE:  MOVLW  03
26B0:  MOVWF  xCD
26B2:  CALL   0900
....................             lcd_putc(t[1]); 
26B6:  MOVFF  33,CB
26BA:  CALL   0962
....................           } 
....................          
....................         if(Flecha==3) 
26BE:  MOVF   1C,W
26C0:  SUBLW  03
26C2:  BNZ   26EC
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
26C4:  MOVLW  01
26C6:  MOVWF  xCC
26C8:  MOVLW  04
26CA:  MOVWF  xCD
26CC:  CALL   0900
....................             lcd_putc(t[1]); 
26D0:  MOVFF  33,CB
26D4:  CALL   0962
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
26D8:  MOVLW  01
26DA:  MOVWF  xCC
26DC:  MOVLW  02
26DE:  MOVWF  xCD
26E0:  CALL   0900
....................             lcd_putc(t[1]); 
26E4:  MOVFF  33,CB
26E8:  CALL   0962
....................           } 
....................          Cambio=OFF; 
26EC:  BCF    17.5
....................      // } 
....................          
....................       if(UP){//Si oprime hacia arriba 
26EE:  BSF    F92.5
26F0:  BTFSC  F80.5
26F2:  BRA    271E
....................          delay_ms(20); 
26F4:  MOVLW  14
26F6:  MOVWF  xD1
26F8:  CALL   07F2
....................          if(UP){ 
26FC:  BSF    F92.5
26FE:  BTFSC  F80.5
2700:  BRA    271C
....................             if(Flanco == 0){ 
2702:  BTFSC  16.3
2704:  BRA    271C
....................                Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30);Cambio=ON; 
2706:  DECF   1E,F
2708:  DECF   1C,F
270A:  MOVLW  01
270C:  ADDWF  1C,W
270E:  MOVWF  1D
2710:  BSF    16.3
2712:  MOVLW  1E
2714:  MOVWF  xD1
2716:  CALL   07F2
271A:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
271C:  BRA    2720
....................          Flanco = 0; 
271E:  BCF    16.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
2720:  BSF    F96.0
2722:  BTFSC  F84.0
2724:  BRA    2750
....................          delay_ms(20); 
2726:  MOVLW  14
2728:  MOVWF  xD1
272A:  CALL   07F2
....................          if(DOWN){ 
272E:  BSF    F96.0
2730:  BTFSC  F84.0
2732:  BRA    274E
....................             if(Flanco2 == 0){ 
2734:  BTFSC  16.5
2736:  BRA    274E
....................                Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30);Cambio=ON; 
2738:  INCF   1E,F
273A:  INCF   1C,F
273C:  MOVLW  01
273E:  SUBWF  1C,W
2740:  MOVWF  1D
2742:  BSF    16.5
2744:  MOVLW  1E
2746:  MOVWF  xD1
2748:  CALL   07F2
274C:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
274E:  BRA    2752
....................          Flanco2 = 0; 
2750:  BCF    16.5
....................       } 
....................     
....................          
....................       if(Flecha2>nMenuH){ 
2752:  MOVF   1E,W
2754:  SUBWF  20,W
2756:  BC    2768
....................          paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4; 
2758:  INCF   31,F
275A:  MOVFF  1E,20
275E:  MOVLW  02
2760:  SUBWF  20,W
2762:  MOVWF  1F
2764:  MOVLW  04
2766:  MOVWF  1C
....................       } 
....................          
....................       if(Flecha2<nMenuL){ 
2768:  MOVF   1F,W
276A:  SUBWF  1E,W
276C:  BC    277E
....................          paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2; 
276E:  DECF   31,F
2770:  MOVFF  1E,1F
2774:  MOVLW  02
2776:  ADDWF  1F,W
2778:  MOVWF  20
277A:  MOVLW  02
277C:  MOVWF  1C
....................       } 
....................          
....................       if(Flecha2>n_opcionH){ 
277E:  MOVF   1E,W
2780:  SUBWF  19,W
2782:  BC    2796
....................          Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2; 
2784:  MOVFF  1A,1E
2788:  MOVLW  02
278A:  MOVWF  1C
278C:  CLRF   31
278E:  MOVFF  1E,1F
2792:  ADDWF  1F,W
2794:  MOVWF  20
....................       } 
....................          
....................       if(Flecha2<n_opcionL){ 
2796:  MOVF   1A,W
2798:  SUBWF  1E,W
279A:  BC    27B2
....................          Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2; 
279C:  MOVFF  19,1E
27A0:  MOVLW  04
27A2:  MOVWF  1C
27A4:  SUBWF  19,W
27A6:  MOVWF  31
27A8:  MOVFF  1E,20
27AC:  MOVLW  02
27AE:  SUBWF  20,W
27B0:  MOVWF  1F
....................       } 
....................          
....................       if(paso<0) 
27B2:  BTFSC  31.7
27B4:  BRA    27B8
27B6:  BRA    27BA
....................          paso=0; 
27B8:  CLRF   31
....................           
....................       if(RIGHT){// Si oprime derecha 
27BA:  BSF    F96.1
27BC:  BTFSC  F84.1
27BE:  BRA    2806
....................          delay_ms(20); 
27C0:  MOVLW  14
27C2:  MOVWF  xD1
27C4:  CALL   07F2
....................          if(RIGHT){ 
27C8:  BSF    F96.1
27CA:  BTFSC  F84.1
27CC:  BRA    2802
....................             if(Flanco1 == 0){ 
27CE:  BTFSC  16.4
27D0:  BRA    2802
....................                Flanco1 = 1;Menu=Flecha2;Flecha=3;delay_ms(300);printf(lcd_putc,"\f"); 
27D2:  BSF    16.4
27D4:  MOVFF  1E,18
27D8:  MOVLW  03
27DA:  MOVWF  1C
27DC:  MOVLW  02
27DE:  MOVWF  xBA
27E0:  MOVLW  96
27E2:  MOVWF  xD1
27E4:  CALL   07F2
27E8:  DECFSZ xBA,F
27EA:  BRA    27E0
27EC:  MOVLW  0C
27EE:  MOVWF  xCB
27F0:  CALL   0962
....................                if(Menu==6){ 
27F4:  MOVF   18,W
27F6:  SUBLW  06
27F8:  BNZ   2802
....................                   clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
27FA:  CLRF   35
27FC:  CLRF   36
27FE:  CLRF   37
2800:  CLRF   38
....................                } 
....................             } 
....................          } 
....................          Cambio=ON; 
2802:  BSF    17.5
....................       }else{ 
2804:  BRA    2808
....................         Flanco1 = 0; 
2806:  BCF    16.4
....................       } 
....................              
....................       if(IZQU){ 
2808:  BSF    F96.2
280A:  BTFSC  F84.2
280C:  BRA    283A
....................          delay_ms(20); 
280E:  MOVLW  14
2810:  MOVWF  xD1
2812:  CALL   07F2
....................          if(IZQU){ 
2816:  BSF    F96.2
2818:  BTFSC  F84.2
281A:  BRA    283A
....................             delay_ms(500);Menu=50;printf(lcd_putc,"\f");Cambio=ON; 
281C:  MOVLW  02
281E:  MOVWF  xBA
2820:  MOVLW  FA
2822:  MOVWF  xD1
2824:  CALL   07F2
2828:  DECFSZ xBA,F
282A:  BRA    2820
282C:  MOVLW  32
282E:  MOVWF  18
2830:  MOVLW  0C
2832:  MOVWF  xCB
2834:  CALL   0962
2838:  BSF    17.5
....................          } 
....................       } 
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de tiempo de trabajo de Luz UV    
283A:  MOVF   18,W
283C:  SUBLW  02
283E:  BTFSS  FD8.2
2840:  BRA    2A96
....................    EliminaRuido(); 
2842:  CALL   0004
....................    //if(Cambio){ 
....................       lcd_gotoxy(1,1); 
2846:  MOVLW  01
2848:  MOVWF  xCC
284A:  MOVWF  xCD
284C:  CALL   0900
....................       printf(lcd_putc,"    Temporizador     "); 
2850:  MOVLW  40
2852:  MOVWF  FF6
2854:  MOVLW  03
2856:  MOVWF  FF7
2858:  CALL   09C0
....................       lcd_gotoxy(1,2); 
285C:  MOVLW  01
285E:  MOVWF  xCC
2860:  MOVLW  02
2862:  MOVWF  xCD
2864:  CALL   0900
....................       printf(lcd_putc,"       Luz UV        "); 
2868:  MOVLW  56
286A:  MOVWF  FF6
286C:  MOVLW  03
286E:  MOVWF  FF7
2870:  CALL   09C0
....................       lcd_gotoxy(6,3); 
2874:  MOVLW  06
2876:  MOVWF  xCC
2878:  MOVLW  03
287A:  MOVWF  xCD
287C:  CALL   0900
....................       printf(lcd_putc,"%03u:%02u (M:S)  ",tempo_minutos_pro,tempo_segundos_pro);  
2880:  MOVFF  29,BA
2884:  MOVLW  03
2886:  MOVWF  xBB
2888:  CALL   12A8
288C:  MOVLW  3A
288E:  MOVWF  xCB
2890:  CALL   0962
2894:  MOVFF  2A,BA
2898:  MOVLW  01
289A:  MOVWF  xBB
289C:  CALL   12A8
28A0:  MOVLW  75
28A2:  MOVWF  FF6
28A4:  MOVLW  03
28A6:  MOVWF  FF7
28A8:  MOVLW  08
28AA:  MOVWF  xBE
28AC:  CALL   10BE
....................        
....................       lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
28B0:  MOVLW  06
28B2:  ADDWF  2E,W
28B4:  MOVWF  xBA
28B6:  MOVWF  xCC
28B8:  MOVLW  04
28BA:  MOVWF  xCD
28BC:  CALL   0900
....................       lcd_putc(t[2]); 
28C0:  MOVFF  34,CB
28C4:  CALL   0962
....................        
....................       Cambio=OFF; 
28C8:  BCF    17.5
.................... //   } 
....................     
....................    if(UP) 
28CA:  BSF    F92.5
28CC:  BTFSC  F80.5
28CE:  BRA    291C
....................    { 
....................       delay_ms(20); 
28D0:  MOVLW  14
28D2:  MOVWF  xD1
28D4:  CALL   07F2
....................       if(UP){ 
28D8:  BSF    F92.5
28DA:  BTFSC  F80.5
28DC:  BRA    291C
....................          if(unidad2==1) 
28DE:  DECFSZ 2E,W
28E0:  BRA    28FC
....................          { 
....................             if(tempo_minutos_pro<240) 
28E2:  MOVF   29,W
28E4:  SUBLW  EF
28E6:  BNC   28FC
....................             { 
....................                tempo_minutos_pro+=5;delay_ms(300); 
28E8:  MOVLW  05
28EA:  ADDWF  29,F
28EC:  MOVLW  02
28EE:  MOVWF  xBA
28F0:  MOVLW  96
28F2:  MOVWF  xD1
28F4:  CALL   07F2
28F8:  DECFSZ xBA,F
28FA:  BRA    28F0
....................             } 
....................          } 
....................           
....................          if(unidad2==4) 
28FC:  MOVF   2E,W
28FE:  SUBLW  04
2900:  BNZ   291A
....................          { 
....................             if(tempo_segundos_pro<59) 
2902:  MOVF   2A,W
2904:  SUBLW  3A
2906:  BNC   291A
....................             { 
....................                tempo_segundos_pro++;delay_ms(300); 
2908:  INCF   2A,F
290A:  MOVLW  02
290C:  MOVWF  xBA
290E:  MOVLW  96
2910:  MOVWF  xD1
2912:  CALL   07F2
2916:  DECFSZ xBA,F
2918:  BRA    290E
....................             } 
....................          }      
....................       Cambio=ON; 
291A:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(DOWN) 
291C:  BSF    F96.0
291E:  BTFSC  F84.0
2920:  BRA    296A
....................    { 
....................       delay_ms(20); 
2922:  MOVLW  14
2924:  MOVWF  xD1
2926:  CALL   07F2
....................       if(DOWN){ 
292A:  BSF    F96.0
292C:  BTFSC  F84.0
292E:  BRA    296A
....................          if(unidad2==1) 
2930:  DECFSZ 2E,W
2932:  BRA    294C
....................          { 
....................             if(tempo_minutos_pro>0) 
2934:  MOVF   29,F
2936:  BZ    294C
....................             { 
....................                tempo_minutos_pro-=5;delay_ms(300); 
2938:  MOVLW  05
293A:  SUBWF  29,F
293C:  MOVLW  02
293E:  MOVWF  xBA
2940:  MOVLW  96
2942:  MOVWF  xD1
2944:  CALL   07F2
2948:  DECFSZ xBA,F
294A:  BRA    2940
....................             }  
....................          } 
....................           
....................          if(unidad2==4) 
294C:  MOVF   2E,W
294E:  SUBLW  04
2950:  BNZ   2968
....................          { 
....................             if(tempo_segundos_pro>0) 
2952:  MOVF   2A,F
2954:  BZ    2968
....................             { 
....................                tempo_segundos_pro--;delay_ms(300); 
2956:  DECF   2A,F
2958:  MOVLW  02
295A:  MOVWF  xBA
295C:  MOVLW  96
295E:  MOVWF  xD1
2960:  CALL   07F2
2964:  DECFSZ xBA,F
2966:  BRA    295C
....................             }    
....................          } 
....................       Cambio=ON; 
2968:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(RIGHT) 
296A:  BSF    F96.1
296C:  BTFSC  F84.1
296E:  BRA    29AC
....................    { 
....................       delay_ms(20); 
2970:  MOVLW  14
2972:  MOVWF  xD1
2974:  CALL   07F2
....................       if(RIGHT){ 
2978:  BSF    F96.1
297A:  BTFSC  F84.1
297C:  BRA    29AC
....................          if(unidad2==1) 
297E:  DECFSZ 2E,W
2980:  BRA    2988
....................          { 
....................             unidad2=4; 
2982:  MOVLW  04
2984:  MOVWF  2E
....................          } 
....................          else 
2986:  BRA    2992
....................          { 
....................             if(unidad2==4) 
2988:  MOVF   2E,W
298A:  SUBLW  04
298C:  BNZ   2992
....................             { 
....................                unidad2=1; 
298E:  MOVLW  01
2990:  MOVWF  2E
....................             } 
....................          } 
....................       delay_ms(500); 
2992:  MOVLW  02
2994:  MOVWF  xBA
2996:  MOVLW  FA
2998:  MOVWF  xD1
299A:  CALL   07F2
299E:  DECFSZ xBA,F
29A0:  BRA    2996
....................       printf(lcd_putc,"\f"); 
29A2:  MOVLW  0C
29A4:  MOVWF  xCB
29A6:  CALL   0962
....................       Cambio=ON; 
29AA:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(IZQU) 
29AC:  BSF    F96.2
29AE:  BTFSC  F84.2
29B0:  BRA    2A96
....................    { 
....................       if(IZQU){ 
29B2:  BSF    F96.2
29B4:  BTFSC  F84.2
29B6:  BRA    2A96
....................          delay_ms(200); 
29B8:  MOVLW  C8
29BA:  MOVWF  xD1
29BC:  CALL   07F2
....................          printf(lcd_putc,"\f"); 
29C0:  MOVLW  0C
29C2:  MOVWF  xCB
29C4:  CALL   0962
....................          lcd_gotoxy(1,2); 
29C8:  MOVLW  01
29CA:  MOVWF  xCC
29CC:  MOVLW  02
29CE:  MOVWF  xCD
29D0:  CALL   0900
....................          printf(lcd_putc,"Tiempo Almacenado"); 
29D4:  MOVLW  7E
29D6:  MOVWF  FF6
29D8:  MOVLW  03
29DA:  MOVWF  FF7
29DC:  CALL   09C0
....................          lcd_gotoxy(1,3); 
29E0:  MOVLW  01
29E2:  MOVWF  xCC
29E4:  MOVLW  03
29E6:  MOVWF  xCD
29E8:  CALL   0900
....................          printf(lcd_putc,"  Correctamente  "); 
29EC:  MOVLW  90
29EE:  MOVWF  FF6
29F0:  MOVLW  03
29F2:  MOVWF  FF7
29F4:  CALL   09C0
....................          write_eeprom(5,tempo_minutos_pro); 
29F8:  MOVLW  05
29FA:  MOVWF  FA9
29FC:  MOVFF  29,FA8
2A00:  BCF    FA6.6
2A02:  BCF    FA6.7
2A04:  BSF    FA6.2
2A06:  MOVF   FF2,W
2A08:  MOVWF  00
2A0A:  BCF    FF2.7
2A0C:  MOVLB  F
2A0E:  MOVLW  55
2A10:  MOVWF  FA7
2A12:  MOVLW  AA
2A14:  MOVWF  FA7
2A16:  BSF    FA6.1
2A18:  BTFSC  FA6.1
2A1A:  BRA    2A18
2A1C:  BCF    FA6.2
2A1E:  MOVF   00,W
2A20:  IORWF  FF2,F
....................          delay_ms(20); 
2A22:  MOVLW  14
2A24:  MOVLB  0
2A26:  MOVWF  xD1
2A28:  CALL   07F2
....................          write_eeprom(6,tempo_segundos_pro); 
2A2C:  MOVLW  06
2A2E:  MOVWF  FA9
2A30:  MOVFF  2A,FA8
2A34:  BCF    FA6.6
2A36:  BCF    FA6.7
2A38:  BSF    FA6.2
2A3A:  MOVF   FF2,W
2A3C:  MOVWF  00
2A3E:  BCF    FF2.7
2A40:  MOVLB  F
2A42:  MOVLW  55
2A44:  MOVWF  FA7
2A46:  MOVLW  AA
2A48:  MOVWF  FA7
2A4A:  BSF    FA6.1
2A4C:  BTFSC  FA6.1
2A4E:  BRA    2A4C
2A50:  BCF    FA6.2
2A52:  MOVF   00,W
2A54:  IORWF  FF2,F
....................          delay_ms(20); 
2A56:  MOVLW  14
2A58:  MOVLB  0
2A5A:  MOVWF  xD1
2A5C:  CALL   07F2
....................          tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
2A60:  MOVFF  29,27
2A64:  MOVFF  2A,28
....................          delay_ms(700); 
2A68:  MOVLW  04
2A6A:  MOVWF  xBA
2A6C:  MOVLW  AF
2A6E:  MOVWF  xD1
2A70:  CALL   07F2
2A74:  DECFSZ xBA,F
2A76:  BRA    2A6C
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2A78:  MOVLW  1E
2A7A:  MOVWF  xD1
2A7C:  CALL   07F2
2A80:  MOVLW  01
2A82:  MOVWF  18
2A84:  CLRF   31
2A86:  MOVLW  02
2A88:  MOVWF  1C
2A8A:  MOVWF  1E
2A8C:  MOVLW  0C
2A8E:  MOVWF  xCB
2A90:  CALL   0962
....................          Cambio=ON; 
2A94:  BSF    17.5
....................       } 
....................    }   
....................   } 
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................  
.................... //----------------Menu3--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu para Cambio de Contraseña 
2A96:  MOVF   18,W
2A98:  SUBLW  03
2A9A:  BTFSS  FD8.2
2A9C:  BRA    2DE8
....................       EliminaRuido(); 
2A9E:  CALL   0004
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
2AA2:  MOVLW  01
2AA4:  MOVWF  xCC
2AA6:  MOVWF  xCD
2AA8:  CALL   0900
....................          printf(lcd_putc,"     Ingrese        "); 
2AAC:  MOVLW  A2
2AAE:  MOVWF  FF6
2AB0:  MOVLW  03
2AB2:  MOVWF  FF7
2AB4:  CALL   09C0
....................          lcd_gotoxy(1,2); 
2AB8:  MOVLW  01
2ABA:  MOVWF  xCC
2ABC:  MOVLW  02
2ABE:  MOVWF  xCD
2AC0:  CALL   0900
....................          printf(lcd_putc,"    Contraseña      "); 
2AC4:  MOVLW  B8
2AC6:  MOVWF  FF6
2AC8:  MOVLW  03
2ACA:  MOVWF  FF7
2ACC:  CALL   09C0
....................          lcd_gotoxy(1,3); 
2AD0:  MOVLW  01
2AD2:  MOVWF  xCC
2AD4:  MOVLW  03
2AD6:  MOVWF  xCD
2AD8:  CALL   0900
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2ADC:  MOVLW  CE
2ADE:  MOVWF  FF6
2AE0:  MOVLW  03
2AE2:  MOVWF  FF7
2AE4:  MOVLW  0A
2AE6:  MOVWF  xBE
2AE8:  CALL   10BE
2AEC:  MOVFF  35,BA
2AF0:  MOVLW  1F
2AF2:  MOVWF  xBB
2AF4:  CALL   1104
2AF8:  MOVFF  36,BA
2AFC:  MOVLW  1F
2AFE:  MOVWF  xBB
2B00:  CALL   1104
2B04:  MOVFF  37,BA
2B08:  MOVLW  1F
2B0A:  MOVWF  xBB
2B0C:  CALL   1104
2B10:  MOVFF  38,BA
2B14:  MOVLW  1F
2B16:  MOVWF  xBB
2B18:  CALL   1104
2B1C:  MOVLW  20
2B1E:  MOVWF  xCB
2B20:  CALL   0962
2B24:  MOVLW  20
2B26:  MOVWF  xCB
2B28:  CALL   0962
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
2B2C:  MOVFF  1B,CC
2B30:  MOVLW  04
2B32:  MOVWF  xCD
2B34:  CALL   0900
....................          lcd_putc(t[2]); 
2B38:  MOVFF  34,CB
2B3C:  CALL   0962
....................           
....................          if(unidad>11&&unidad<14){ 
2B40:  MOVF   1B,W
2B42:  SUBLW  0B
2B44:  BC    2B64
2B46:  MOVF   1B,W
2B48:  SUBLW  0D
2B4A:  BNC   2B64
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2B4C:  MOVLW  01
2B4E:  SUBWF  1B,W
2B50:  MOVWF  xBA
2B52:  MOVWF  xCC
2B54:  MOVLW  04
2B56:  MOVWF  xCD
2B58:  CALL   0900
....................             lcd_putc(t[1]); 
2B5C:  MOVFF  33,CB
2B60:  CALL   0962
....................          } 
....................           
....................          Cambio=OFF; 
2B64:  BCF    17.5
....................       //} 
....................        
....................       if(UP){//Si oprime hacia arriba 
2B66:  BSF    F92.5
2B68:  BTFSC  F80.5
2B6A:  BRA    2B9E
....................          delay_ms(20); 
2B6C:  MOVLW  14
2B6E:  MOVWF  xD1
2B70:  CALL   07F2
....................          if(UP){ 
2B74:  BSF    F92.5
2B76:  BTFSC  F80.5
2B78:  BRA    2B9C
....................             if(Flanco == 0) { 
2B7A:  BTFSC  16.3
2B7C:  BRA    2B9C
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
2B7E:  MOVLW  0B
2B80:  SUBWF  1B,W
2B82:  CLRF   03
2B84:  ADDLW  35
2B86:  MOVWF  FE9
2B88:  MOVLW  00
2B8A:  ADDWFC 03,W
2B8C:  MOVWF  FEA
2B8E:  INCF   FEF,F
2B90:  BSF    16.3
2B92:  MOVLW  1E
2B94:  MOVWF  xD1
2B96:  CALL   07F2
2B9A:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2B9C:  BRA    2BA0
....................          Flanco = 0; 
2B9E:  BCF    16.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
2BA0:  BSF    F96.0
2BA2:  BTFSC  F84.0
2BA4:  BRA    2BD8
....................          delay_ms(20); 
2BA6:  MOVLW  14
2BA8:  MOVWF  xD1
2BAA:  CALL   07F2
....................          if(DOWN){ 
2BAE:  BSF    F96.0
2BB0:  BTFSC  F84.0
2BB2:  BRA    2BD6
....................             if(Flanco2 == 0) { 
2BB4:  BTFSC  16.5
2BB6:  BRA    2BD6
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
2BB8:  MOVLW  0B
2BBA:  SUBWF  1B,W
2BBC:  CLRF   03
2BBE:  ADDLW  35
2BC0:  MOVWF  FE9
2BC2:  MOVLW  00
2BC4:  ADDWFC 03,W
2BC6:  MOVWF  FEA
2BC8:  DECF   FEF,F
2BCA:  BSF    16.5
2BCC:  MOVLW  1E
2BCE:  MOVWF  xD1
2BD0:  CALL   07F2
2BD4:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2BD6:  BRA    2BDA
....................          Flanco2 = 0; 
2BD8:  BCF    16.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
2BDA:  BSF    F96.1
2BDC:  BTFSC  F84.1
2BDE:  BRA    2C0A
....................          delay_ms(20); 
2BE0:  MOVLW  14
2BE2:  MOVWF  xD1
2BE4:  CALL   07F2
....................          if(RIGHT){ 
2BE8:  BSF    F96.1
2BEA:  BTFSC  F84.1
2BEC:  BRA    2C08
....................             if(Flanco1 == 0) { 
2BEE:  BTFSC  16.4
2BF0:  BRA    2C08
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2BF2:  BSF    16.4
2BF4:  INCF   1B,F
2BF6:  MOVLW  1E
2BF8:  MOVWF  xD1
2BFA:  CALL   07F2
2BFE:  MOVLW  0C
2C00:  MOVWF  xCB
2C02:  CALL   0962
2C06:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2C08:  BRA    2C0C
....................          Flanco1 = 0; 
2C0A:  BCF    16.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
2C0C:  BSF    F96.2
2C0E:  BTFSC  F84.2
2C10:  BRA    2C3C
....................          delay_ms(150); 
2C12:  MOVLW  96
2C14:  MOVWF  xD1
2C16:  CALL   07F2
....................          if(IZQU){ 
2C1A:  BSF    F96.2
2C1C:  BTFSC  F84.2
2C1E:  BRA    2C3A
....................             if(Flanco3 == 0){ 
2C20:  BTFSC  16.6
2C22:  BRA    2C3A
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2C24:  BSF    16.6
2C26:  DECF   1B,F
2C28:  MOVLW  1E
2C2A:  MOVWF  xD1
2C2C:  CALL   07F2
2C30:  MOVLW  0C
2C32:  MOVWF  xCB
2C34:  CALL   0962
2C38:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2C3A:  BRA    2C3E
....................         Flanco3 = 0; 
2C3C:  BCF    16.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
2C3E:  MOVLW  0B
2C40:  SUBWF  1B,W
2C42:  CLRF   03
2C44:  ADDLW  35
2C46:  MOVWF  FE9
2C48:  MOVLW  00
2C4A:  ADDWFC 03,W
2C4C:  MOVWF  FEA
2C4E:  BTFSC  FEF.7
2C50:  BRA    2C54
2C52:  BRA    2C68
....................          clave[unidad-11]=9; 
2C54:  MOVLW  0B
2C56:  SUBWF  1B,W
2C58:  CLRF   03
2C5A:  ADDLW  35
2C5C:  MOVWF  FE9
2C5E:  MOVLW  00
2C60:  ADDWFC 03,W
2C62:  MOVWF  FEA
2C64:  MOVLW  09
2C66:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
2C68:  MOVLW  0B
2C6A:  SUBWF  1B,W
2C6C:  CLRF   03
2C6E:  ADDLW  35
2C70:  MOVWF  FE9
2C72:  MOVLW  00
2C74:  ADDWFC 03,W
2C76:  MOVWF  FEA
2C78:  BTFSC  FEF.7
2C7A:  BRA    2C94
2C7C:  MOVF   FEF,W
2C7E:  SUBLW  09
2C80:  BC    2C94
....................          clave[unidad-11]=0; 
2C82:  MOVLW  0B
2C84:  SUBWF  1B,W
2C86:  CLRF   03
2C88:  ADDLW  35
2C8A:  MOVWF  FE9
2C8C:  MOVLW  00
2C8E:  ADDWFC 03,W
2C90:  MOVWF  FEA
2C92:  CLRF   FEF
....................         
....................       if(unidad<11){             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
2C94:  MOVF   1B,W
2C96:  SUBLW  0A
2C98:  BNC   2CBA
....................          unidad=11; 
2C9A:  MOVLW  0B
2C9C:  MOVWF  1B
....................          Menu=1; 
2C9E:  MOVLW  01
2CA0:  MOVWF  18
....................          paso=0; 
2CA2:  CLRF   31
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
2CA4:  CLRF   35
2CA6:  CLRF   36
2CA8:  CLRF   37
2CAA:  CLRF   38
2CAC:  BSF    17.5
....................          unidad=11;printf(lcd_putc,"\f"); 
2CAE:  MOVLW  0B
2CB0:  MOVWF  1B
2CB2:  MOVLW  0C
2CB4:  MOVWF  xCB
2CB6:  CALL   0962
....................       } 
....................         
....................       if(unidad>14){// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
2CBA:  MOVF   1B,W
2CBC:  SUBLW  0E
2CBE:  BTFSC  FD8.0
2CC0:  BRA    2DE8
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]){ 
2CC2:  MOVF   39,W
2CC4:  SUBWF  35,W
2CC6:  BNZ   2D64
2CC8:  MOVF   3A,W
2CCA:  SUBWF  36,W
2CCC:  BNZ   2D64
2CCE:  MOVF   3B,W
2CD0:  SUBWF  37,W
2CD2:  BNZ   2D64
2CD4:  MOVF   3C,W
2CD6:  SUBWF  38,W
2CD8:  BNZ   2D64
....................             lcd_gotoxy(1,1); 
2CDA:  MOVLW  01
2CDC:  MOVWF  xCC
2CDE:  MOVWF  xCD
2CE0:  CALL   0900
....................             printf(lcd_putc,"                    "); 
2CE4:  MOVLW  E4
2CE6:  MOVWF  FF6
2CE8:  MOVLW  03
2CEA:  MOVWF  FF7
2CEC:  CALL   09C0
....................             lcd_gotoxy(1,2); 
2CF0:  MOVLW  01
2CF2:  MOVWF  xCC
2CF4:  MOVLW  02
2CF6:  MOVWF  xCD
2CF8:  CALL   0900
....................             printf(lcd_putc,"     Contraseña     "); 
2CFC:  MOVLW  FA
2CFE:  MOVWF  FF6
2D00:  MOVLW  03
2D02:  MOVWF  FF7
2D04:  CALL   09C0
....................             lcd_gotoxy(1,3); 
2D08:  MOVLW  01
2D0A:  MOVWF  xCC
2D0C:  MOVLW  03
2D0E:  MOVWF  xCD
2D10:  CALL   0900
....................             printf(lcd_putc,"      Correcta      "); 
2D14:  MOVLW  10
2D16:  MOVWF  FF6
2D18:  MOVLW  04
2D1A:  MOVWF  FF7
2D1C:  CALL   09C0
....................             lcd_gotoxy(1,4); 
2D20:  MOVLW  01
2D22:  MOVWF  xCC
2D24:  MOVLW  04
2D26:  MOVWF  xCD
2D28:  CALL   0900
....................             printf(lcd_putc,"                    "); 
2D2C:  MOVLW  26
2D2E:  MOVWF  FF6
2D30:  MOVLW  04
2D32:  MOVWF  FF7
2D34:  CALL   09C0
....................             delay_ms(500);Menu=61;unidad=11;printf(lcd_putc,"\f"); 
2D38:  MOVLW  02
2D3A:  MOVWF  xBA
2D3C:  MOVLW  FA
2D3E:  MOVWF  xD1
2D40:  CALL   07F2
2D44:  DECFSZ xBA,F
2D46:  BRA    2D3C
2D48:  MOVLW  3D
2D4A:  MOVWF  18
2D4C:  MOVLW  0B
2D4E:  MOVWF  1B
2D50:  MOVLW  0C
2D52:  MOVWF  xCB
2D54:  CALL   0962
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
2D58:  CLRF   35
2D5A:  CLRF   36
2D5C:  CLRF   37
2D5E:  CLRF   38
2D60:  BSF    17.5
....................          }else{ 
2D62:  BRA    2DE8
....................             lcd_gotoxy(1,1); 
2D64:  MOVLW  01
2D66:  MOVWF  xCC
2D68:  MOVWF  xCD
2D6A:  CALL   0900
....................             printf(lcd_putc,"                    "); 
2D6E:  MOVLW  3C
2D70:  MOVWF  FF6
2D72:  MOVLW  04
2D74:  MOVWF  FF7
2D76:  CALL   09C0
....................             lcd_gotoxy(1,2); 
2D7A:  MOVLW  01
2D7C:  MOVWF  xCC
2D7E:  MOVLW  02
2D80:  MOVWF  xCD
2D82:  CALL   0900
....................             printf(lcd_putc,"     Contraseña     "); 
2D86:  MOVLW  52
2D88:  MOVWF  FF6
2D8A:  MOVLW  04
2D8C:  MOVWF  FF7
2D8E:  CALL   09C0
....................             lcd_gotoxy(1,3); 
2D92:  MOVLW  01
2D94:  MOVWF  xCC
2D96:  MOVLW  03
2D98:  MOVWF  xCD
2D9A:  CALL   0900
....................             printf(lcd_putc,"     Incorrecta     "); 
2D9E:  MOVLW  68
2DA0:  MOVWF  FF6
2DA2:  MOVLW  04
2DA4:  MOVWF  FF7
2DA6:  CALL   09C0
....................             lcd_gotoxy(1,4); 
2DAA:  MOVLW  01
2DAC:  MOVWF  xCC
2DAE:  MOVLW  04
2DB0:  MOVWF  xCD
2DB2:  CALL   0900
....................             printf(lcd_putc,"                    "); 
2DB6:  MOVLW  7E
2DB8:  MOVWF  FF6
2DBA:  MOVLW  04
2DBC:  MOVWF  FF7
2DBE:  CALL   09C0
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
2DC2:  MOVLW  02
2DC4:  MOVWF  xBA
2DC6:  MOVLW  FA
2DC8:  MOVWF  xD1
2DCA:  CALL   07F2
2DCE:  DECFSZ xBA,F
2DD0:  BRA    2DC6
2DD2:  MOVLW  0B
2DD4:  MOVWF  1B
2DD6:  MOVLW  0C
2DD8:  MOVWF  xCB
2DDA:  CALL   0962
2DDE:  BSF    17.5
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
2DE0:  CLRF   35
2DE2:  CLRF   36
2DE4:  CLRF   37
2DE6:  CLRF   38
....................          } 
....................       } 
....................    }       
.................... //----------------Fin-Menu3--------------------------------------------------------------- 
....................  
.................... //----------------Menu6.1--------------------------------------------------------------- 
....................    if(Menu == 61){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
2DE8:  MOVF   18,W
2DEA:  SUBLW  3D
2DEC:  BTFSS  FD8.2
2DEE:  BRA    3178
....................       EliminaRuido(); 
2DF0:  CALL   0004
.................... //      if(Cambio){ 
....................          lcd_gotoxy(1,1); 
2DF4:  MOVLW  01
2DF6:  MOVWF  xCC
2DF8:  MOVWF  xCD
2DFA:  CALL   0900
....................          printf(lcd_putc,"   Ingrese Nueva    "); 
2DFE:  MOVLW  94
2E00:  MOVWF  FF6
2E02:  MOVLW  04
2E04:  MOVWF  FF7
2E06:  CALL   09C0
....................          lcd_gotoxy(1,2); 
2E0A:  MOVLW  01
2E0C:  MOVWF  xCC
2E0E:  MOVLW  02
2E10:  MOVWF  xCD
2E12:  CALL   0900
....................          printf(lcd_putc,"     Contraseña     "); 
2E16:  MOVLW  AA
2E18:  MOVWF  FF6
2E1A:  MOVLW  04
2E1C:  MOVWF  FF7
2E1E:  CALL   09C0
....................          lcd_gotoxy(1,3); 
2E22:  MOVLW  01
2E24:  MOVWF  xCC
2E26:  MOVLW  03
2E28:  MOVWF  xCD
2E2A:  CALL   0900
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2E2E:  MOVLW  C0
2E30:  MOVWF  FF6
2E32:  MOVLW  04
2E34:  MOVWF  FF7
2E36:  MOVLW  0A
2E38:  MOVWF  xBE
2E3A:  CALL   10BE
2E3E:  MOVFF  35,BA
2E42:  MOVLW  1F
2E44:  MOVWF  xBB
2E46:  CALL   1104
2E4A:  MOVFF  36,BA
2E4E:  MOVLW  1F
2E50:  MOVWF  xBB
2E52:  CALL   1104
2E56:  MOVFF  37,BA
2E5A:  MOVLW  1F
2E5C:  MOVWF  xBB
2E5E:  CALL   1104
2E62:  MOVFF  38,BA
2E66:  MOVLW  1F
2E68:  MOVWF  xBB
2E6A:  CALL   1104
2E6E:  MOVLW  20
2E70:  MOVWF  xCB
2E72:  CALL   0962
2E76:  MOVLW  20
2E78:  MOVWF  xCB
2E7A:  CALL   0962
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
2E7E:  MOVFF  1B,CC
2E82:  MOVLW  04
2E84:  MOVWF  xCD
2E86:  CALL   0900
....................          lcd_putc(t[2]); 
2E8A:  MOVFF  34,CB
2E8E:  CALL   0962
....................           
....................          if(unidad>11&&unidad<14){ 
2E92:  MOVF   1B,W
2E94:  SUBLW  0B
2E96:  BC    2EB6
2E98:  MOVF   1B,W
2E9A:  SUBLW  0D
2E9C:  BNC   2EB6
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2E9E:  MOVLW  01
2EA0:  SUBWF  1B,W
2EA2:  MOVWF  xBA
2EA4:  MOVWF  xCC
2EA6:  MOVLW  04
2EA8:  MOVWF  xCD
2EAA:  CALL   0900
....................             lcd_putc(t[1]); 
2EAE:  MOVFF  33,CB
2EB2:  CALL   0962
....................          } 
....................           
....................          Cambio=OFF; 
2EB6:  BCF    17.5
.................... //      } 
....................        
....................       if(UP){//Si oprime hacia arriba 
2EB8:  BSF    F92.5
2EBA:  BTFSC  F80.5
2EBC:  BRA    2EF0
....................          delay_ms(20); 
2EBE:  MOVLW  14
2EC0:  MOVWF  xD1
2EC2:  CALL   07F2
....................          if(UP){ 
2EC6:  BSF    F92.5
2EC8:  BTFSC  F80.5
2ECA:  BRA    2EEE
....................             if(Flanco == 0) { 
2ECC:  BTFSC  16.3
2ECE:  BRA    2EEE
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
2ED0:  MOVLW  0B
2ED2:  SUBWF  1B,W
2ED4:  CLRF   03
2ED6:  ADDLW  35
2ED8:  MOVWF  FE9
2EDA:  MOVLW  00
2EDC:  ADDWFC 03,W
2EDE:  MOVWF  FEA
2EE0:  INCF   FEF,F
2EE2:  BSF    16.3
2EE4:  MOVLW  1E
2EE6:  MOVWF  xD1
2EE8:  CALL   07F2
2EEC:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2EEE:  BRA    2EF2
....................          Flanco = 0; 
2EF0:  BCF    16.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
2EF2:  BSF    F96.0
2EF4:  BTFSC  F84.0
2EF6:  BRA    2F2A
....................          delay_ms(20); 
2EF8:  MOVLW  14
2EFA:  MOVWF  xD1
2EFC:  CALL   07F2
....................          if(DOWN){ 
2F00:  BSF    F96.0
2F02:  BTFSC  F84.0
2F04:  BRA    2F28
....................             if(Flanco2 == 0) { 
2F06:  BTFSC  16.5
2F08:  BRA    2F28
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
2F0A:  MOVLW  0B
2F0C:  SUBWF  1B,W
2F0E:  CLRF   03
2F10:  ADDLW  35
2F12:  MOVWF  FE9
2F14:  MOVLW  00
2F16:  ADDWFC 03,W
2F18:  MOVWF  FEA
2F1A:  DECF   FEF,F
2F1C:  BSF    16.5
2F1E:  MOVLW  1E
2F20:  MOVWF  xD1
2F22:  CALL   07F2
2F26:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2F28:  BRA    2F2C
....................          Flanco2 = 0; 
2F2A:  BCF    16.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
2F2C:  BSF    F96.1
2F2E:  BTFSC  F84.1
2F30:  BRA    2F54
....................          if(RIGHT){ 
2F32:  BSF    F96.1
2F34:  BTFSC  F84.1
2F36:  BRA    2F52
....................             if(Flanco1 == 0) { 
2F38:  BTFSC  16.4
2F3A:  BRA    2F52
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2F3C:  BSF    16.4
2F3E:  INCF   1B,F
2F40:  MOVLW  1E
2F42:  MOVWF  xD1
2F44:  CALL   07F2
2F48:  MOVLW  0C
2F4A:  MOVWF  xCB
2F4C:  CALL   0962
2F50:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2F52:  BRA    2F56
....................          Flanco1 = 0; 
2F54:  BCF    16.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
2F56:  BSF    F96.2
2F58:  BTFSC  F84.2
2F5A:  BRA    2F86
....................          delay_ms(150); 
2F5C:  MOVLW  96
2F5E:  MOVWF  xD1
2F60:  CALL   07F2
....................          if(IZQU){ 
2F64:  BSF    F96.2
2F66:  BTFSC  F84.2
2F68:  BRA    2F84
....................             if(Flanco3 == 0){ 
2F6A:  BTFSC  16.6
2F6C:  BRA    2F84
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2F6E:  BSF    16.6
2F70:  DECF   1B,F
2F72:  MOVLW  1E
2F74:  MOVWF  xD1
2F76:  CALL   07F2
2F7A:  MOVLW  0C
2F7C:  MOVWF  xCB
2F7E:  CALL   0962
2F82:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2F84:  BRA    2F88
....................         Flanco3 = 0; 
2F86:  BCF    16.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
2F88:  MOVLW  0B
2F8A:  SUBWF  1B,W
2F8C:  CLRF   03
2F8E:  ADDLW  35
2F90:  MOVWF  FE9
2F92:  MOVLW  00
2F94:  ADDWFC 03,W
2F96:  MOVWF  FEA
2F98:  BTFSC  FEF.7
2F9A:  BRA    2F9E
2F9C:  BRA    2FB2
....................          clave[unidad-11]=9; 
2F9E:  MOVLW  0B
2FA0:  SUBWF  1B,W
2FA2:  CLRF   03
2FA4:  ADDLW  35
2FA6:  MOVWF  FE9
2FA8:  MOVLW  00
2FAA:  ADDWFC 03,W
2FAC:  MOVWF  FEA
2FAE:  MOVLW  09
2FB0:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
2FB2:  MOVLW  0B
2FB4:  SUBWF  1B,W
2FB6:  CLRF   03
2FB8:  ADDLW  35
2FBA:  MOVWF  FE9
2FBC:  MOVLW  00
2FBE:  ADDWFC 03,W
2FC0:  MOVWF  FEA
2FC2:  BTFSC  FEF.7
2FC4:  BRA    2FDE
2FC6:  MOVF   FEF,W
2FC8:  SUBLW  09
2FCA:  BC    2FDE
....................          clave[unidad-11]=0; 
2FCC:  MOVLW  0B
2FCE:  SUBWF  1B,W
2FD0:  CLRF   03
2FD2:  ADDLW  35
2FD4:  MOVWF  FE9
2FD6:  MOVLW  00
2FD8:  ADDWFC 03,W
2FDA:  MOVWF  FEA
2FDC:  CLRF   FEF
....................         
....................       if(unidad<11){             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
2FDE:  MOVF   1B,W
2FE0:  SUBLW  0A
2FE2:  BNC   3002
....................          unidad=11; 
2FE4:  MOVLW  0B
2FE6:  MOVWF  1B
....................          Menu=1; 
2FE8:  MOVLW  01
2FEA:  MOVWF  18
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
2FEC:  CLRF   35
2FEE:  CLRF   36
2FF0:  CLRF   37
2FF2:  CLRF   38
2FF4:  BSF    17.5
....................          unidad=11;printf(lcd_putc,"\f"); 
2FF6:  MOVLW  0B
2FF8:  MOVWF  1B
2FFA:  MOVLW  0C
2FFC:  MOVWF  xCB
2FFE:  CALL   0962
....................       } 
....................         
....................       if(unidad>14){// Si ya ingreso la nueva contraseña.      
3002:  MOVF   1B,W
3004:  SUBLW  0E
3006:  BTFSC  FD8.0
3008:  BRA    3178
....................          lcd_gotoxy(1,1); 
300A:  MOVLW  01
300C:  MOVWF  xCC
300E:  MOVWF  xCD
3010:  CALL   0900
....................          printf(lcd_putc,"                    "); 
3014:  MOVLW  D6
3016:  MOVWF  FF6
3018:  MOVLW  04
301A:  MOVWF  FF7
301C:  CALL   09C0
....................          lcd_gotoxy(1,2); 
3020:  MOVLW  01
3022:  MOVWF  xCC
3024:  MOVLW  02
3026:  MOVWF  xCD
3028:  CALL   0900
....................          printf(lcd_putc,"     Contraseña     "); 
302C:  MOVLW  EC
302E:  MOVWF  FF6
3030:  MOVLW  04
3032:  MOVWF  FF7
3034:  CALL   09C0
....................          lcd_gotoxy(1,3); 
3038:  MOVLW  01
303A:  MOVWF  xCC
303C:  MOVLW  03
303E:  MOVWF  xCD
3040:  CALL   0900
....................          printf(lcd_putc,"     Almacenada     "); 
3044:  MOVLW  02
3046:  MOVWF  FF6
3048:  MOVLW  05
304A:  MOVWF  FF7
304C:  CALL   09C0
....................          lcd_gotoxy(1,4); 
3050:  MOVLW  01
3052:  MOVWF  xCC
3054:  MOVLW  04
3056:  MOVWF  xCD
3058:  CALL   0900
....................          printf(lcd_putc,"                    "); 
305C:  MOVLW  18
305E:  MOVWF  FF6
3060:  MOVLW  05
3062:  MOVWF  FF7
3064:  CALL   09C0
....................          write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
3068:  CLRF   FA9
306A:  MOVFF  35,FA8
306E:  BCF    FA6.6
3070:  BCF    FA6.7
3072:  BSF    FA6.2
3074:  MOVF   FF2,W
3076:  MOVWF  00
3078:  BCF    FF2.7
307A:  MOVLB  F
307C:  MOVLW  55
307E:  MOVWF  FA7
3080:  MOVLW  AA
3082:  MOVWF  FA7
3084:  BSF    FA6.1
3086:  BTFSC  FA6.1
3088:  BRA    3086
308A:  BCF    FA6.2
308C:  MOVF   00,W
308E:  IORWF  FF2,F
3090:  MOVLW  14
3092:  MOVLB  0
3094:  MOVWF  xD1
3096:  CALL   07F2
309A:  MOVLW  01
309C:  MOVWF  FA9
309E:  MOVFF  36,FA8
30A2:  BCF    FA6.6
30A4:  BCF    FA6.7
30A6:  BSF    FA6.2
30A8:  MOVF   FF2,W
30AA:  MOVWF  00
30AC:  BCF    FF2.7
30AE:  MOVLB  F
30B0:  MOVLW  55
30B2:  MOVWF  FA7
30B4:  MOVLW  AA
30B6:  MOVWF  FA7
30B8:  BSF    FA6.1
30BA:  BTFSC  FA6.1
30BC:  BRA    30BA
30BE:  BCF    FA6.2
30C0:  MOVF   00,W
30C2:  IORWF  FF2,F
30C4:  MOVLW  14
30C6:  MOVLB  0
30C8:  MOVWF  xD1
30CA:  CALL   07F2
....................          write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
30CE:  MOVLW  02
30D0:  MOVWF  FA9
30D2:  MOVFF  37,FA8
30D6:  BCF    FA6.6
30D8:  BCF    FA6.7
30DA:  BSF    FA6.2
30DC:  MOVF   FF2,W
30DE:  MOVWF  00
30E0:  BCF    FF2.7
30E2:  MOVLB  F
30E4:  MOVLW  55
30E6:  MOVWF  FA7
30E8:  MOVLW  AA
30EA:  MOVWF  FA7
30EC:  BSF    FA6.1
30EE:  BTFSC  FA6.1
30F0:  BRA    30EE
30F2:  BCF    FA6.2
30F4:  MOVF   00,W
30F6:  IORWF  FF2,F
30F8:  MOVLW  14
30FA:  MOVLB  0
30FC:  MOVWF  xD1
30FE:  CALL   07F2
3102:  MOVLW  03
3104:  MOVWF  FA9
3106:  MOVFF  38,FA8
310A:  BCF    FA6.6
310C:  BCF    FA6.7
310E:  BSF    FA6.2
3110:  MOVF   FF2,W
3112:  MOVWF  00
3114:  BCF    FF2.7
3116:  MOVLB  F
3118:  MOVLW  55
311A:  MOVWF  FA7
311C:  MOVLW  AA
311E:  MOVWF  FA7
3120:  BSF    FA6.1
3122:  BTFSC  FA6.1
3124:  BRA    3122
3126:  BCF    FA6.2
3128:  MOVF   00,W
312A:  IORWF  FF2,F
312C:  MOVLW  14
312E:  MOVLB  0
3130:  MOVWF  xD1
3132:  CALL   07F2
....................          delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
3136:  MOVLW  02
3138:  MOVWF  xBA
313A:  MOVLW  FA
313C:  MOVWF  xD1
313E:  CALL   07F2
3142:  DECFSZ xBA,F
3144:  BRA    313A
3146:  MOVLW  01
3148:  MOVWF  18
314A:  CLRF   31
314C:  MOVLW  02
314E:  MOVWF  1C
3150:  MOVWF  1E
....................          contrasena[0]=clave[0];contrasena[1]=clave[1];contrasena[2]=clave[2];contrasena[3]=clave[3]; 
3152:  MOVFF  35,39
3156:  MOVFF  36,3A
315A:  MOVFF  37,3B
315E:  MOVFF  38,3C
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
3162:  CLRF   35
3164:  CLRF   36
3166:  CLRF   37
3168:  CLRF   38
316A:  BSF    17.5
....................          unidad=11;printf(lcd_putc,"\f");          
316C:  MOVLW  0B
316E:  MOVWF  1B
3170:  MOVLW  0C
3172:  MOVWF  xCB
3174:  CALL   0962
....................       } 
....................    }       
.................... //----------------Fin-Menu6.1--------------------------------------------------------------- 
....................     
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu de tiempo de trabajo de Luz UV 
3178:  MOVF   18,W
317A:  SUBLW  04
317C:  BTFSS  FD8.2
317E:  BRA    3392
....................    EliminaRuido(); 
3180:  CALL   0004
.................... //   if(Cambio){ 
....................       lcd_gotoxy(1,1); 
3184:  MOVLW  01
3186:  MOVWF  xCC
3188:  MOVWF  xCD
318A:  CALL   0900
....................       printf(lcd_putc,"  Duracion Actual   "); 
318E:  MOVLW  2E
3190:  MOVWF  FF6
3192:  MOVLW  05
3194:  MOVWF  FF7
3196:  CALL   09C0
....................       lcd_gotoxy(1,2); 
319A:  MOVLW  01
319C:  MOVWF  xCC
319E:  MOVLW  02
31A0:  MOVWF  xCD
31A2:  CALL   0900
....................       printf(lcd_putc,"   Tiempo= %05Lu   ",horas); 
31A6:  MOVLW  44
31A8:  MOVWF  FF6
31AA:  MOVLW  05
31AC:  MOVWF  FF7
31AE:  MOVLW  0B
31B0:  MOVWF  xBE
31B2:  CALL   10BE
31B6:  MOVLW  08
31B8:  MOVWF  FE9
31BA:  MOVFF  41,BB
31BE:  MOVFF  40,BA
31C2:  GOTO   1314
31C6:  MOVLW  20
31C8:  MOVWF  xCB
31CA:  CALL   0962
31CE:  MOVLW  20
31D0:  MOVWF  xCB
31D2:  CALL   0962
31D6:  MOVLW  20
31D8:  MOVWF  xCB
31DA:  CALL   0962
....................       lcd_gotoxy(1,4); 
31DE:  MOVLW  01
31E0:  MOVWF  xCC
31E2:  MOVLW  04
31E4:  MOVWF  xCD
31E6:  CALL   0900
....................       printf(lcd_putc," RESET= Oprima ^ y > "); 
31EA:  MOVLW  58
31EC:  MOVWF  FF6
31EE:  MOVLW  05
31F0:  MOVWF  FF7
31F2:  CALL   09C0
....................        
....................       Cambio=OFF; 
31F6:  BCF    17.5
.................... //   } 
....................     
....................       if(UP && RIGHT){//Si oprime hacia arriba 
31F8:  BSF    F92.5
31FA:  BTFSC  F80.5
31FC:  BRA    334E
31FE:  BSF    F96.1
3200:  BTFSC  F84.1
3202:  BRA    334E
....................          delay_ms(20); 
3204:  MOVLW  14
3206:  MOVWF  xD1
3208:  CALL   07F2
....................          if(UP && RIGHT){ 
320C:  BSF    F92.5
320E:  BTFSC  F80.5
3210:  BRA    334E
3212:  BSF    F96.1
3214:  BTFSC  F84.1
3216:  BRA    334E
....................             delay_ms(200); 
3218:  MOVLW  C8
321A:  MOVWF  xD1
321C:  CALL   07F2
....................             printf(lcd_putc,"\f"); 
3220:  MOVLW  0C
3222:  MOVWF  xCB
3224:  CALL   0962
....................             lcd_gotoxy(1,2); 
3228:  MOVLW  01
322A:  MOVWF  xCC
322C:  MOVLW  02
322E:  MOVWF  xCD
3230:  CALL   0900
....................             printf(lcd_putc," Reset de tiempo "); 
3234:  MOVLW  6E
3236:  MOVWF  FF6
3238:  MOVLW  05
323A:  MOVWF  FF7
323C:  CALL   09C0
....................             lcd_gotoxy(1,3); 
3240:  MOVLW  01
3242:  MOVWF  xCC
3244:  MOVLW  03
3246:  MOVWF  xCD
3248:  CALL   0900
....................             printf(lcd_putc,"     Exitoso     "); 
324C:  MOVLW  80
324E:  MOVWF  FF6
3250:  MOVLW  05
3252:  MOVWF  FF7
3254:  CALL   09C0
....................             write_eeprom(7,0); 
3258:  MOVLW  07
325A:  MOVWF  FA9
325C:  CLRF   FA8
325E:  BCF    FA6.6
3260:  BCF    FA6.7
3262:  BSF    FA6.2
3264:  MOVF   FF2,W
3266:  MOVWF  00
3268:  BCF    FF2.7
326A:  MOVLB  F
326C:  MOVLW  55
326E:  MOVWF  FA7
3270:  MOVLW  AA
3272:  MOVWF  FA7
3274:  BSF    FA6.1
3276:  BTFSC  FA6.1
3278:  BRA    3276
327A:  BCF    FA6.2
327C:  MOVF   00,W
327E:  IORWF  FF2,F
....................             delay_ms(20); 
3280:  MOVLW  14
3282:  MOVLB  0
3284:  MOVWF  xD1
3286:  CALL   07F2
....................             write_eeprom(8,0); 
328A:  MOVLW  08
328C:  MOVWF  FA9
328E:  CLRF   FA8
3290:  BCF    FA6.6
3292:  BCF    FA6.7
3294:  BSF    FA6.2
3296:  MOVF   FF2,W
3298:  MOVWF  00
329A:  BCF    FF2.7
329C:  MOVLB  F
329E:  MOVLW  55
32A0:  MOVWF  FA7
32A2:  MOVLW  AA
32A4:  MOVWF  FA7
32A6:  BSF    FA6.1
32A8:  BTFSC  FA6.1
32AA:  BRA    32A8
32AC:  BCF    FA6.2
32AE:  MOVF   00,W
32B0:  IORWF  FF2,F
....................             delay_ms(20); 
32B2:  MOVLW  14
32B4:  MOVLB  0
32B6:  MOVWF  xD1
32B8:  CALL   07F2
....................             write_eeprom(9,0); 
32BC:  MOVLW  09
32BE:  MOVWF  FA9
32C0:  CLRF   FA8
32C2:  BCF    FA6.6
32C4:  BCF    FA6.7
32C6:  BSF    FA6.2
32C8:  MOVF   FF2,W
32CA:  MOVWF  00
32CC:  BCF    FF2.7
32CE:  MOVLB  F
32D0:  MOVLW  55
32D2:  MOVWF  FA7
32D4:  MOVLW  AA
32D6:  MOVWF  FA7
32D8:  BSF    FA6.1
32DA:  BTFSC  FA6.1
32DC:  BRA    32DA
32DE:  BCF    FA6.2
32E0:  MOVF   00,W
32E2:  IORWF  FF2,F
....................             delay_ms(20); 
32E4:  MOVLW  14
32E6:  MOVLB  0
32E8:  MOVWF  xD1
32EA:  CALL   07F2
....................             write_eeprom(10,0); 
32EE:  MOVLW  0A
32F0:  MOVWF  FA9
32F2:  CLRF   FA8
32F4:  BCF    FA6.6
32F6:  BCF    FA6.7
32F8:  BSF    FA6.2
32FA:  MOVF   FF2,W
32FC:  MOVWF  00
32FE:  BCF    FF2.7
3300:  MOVLB  F
3302:  MOVLW  55
3304:  MOVWF  FA7
3306:  MOVLW  AA
3308:  MOVWF  FA7
330A:  BSF    FA6.1
330C:  BTFSC  FA6.1
330E:  BRA    330C
3310:  BCF    FA6.2
3312:  MOVF   00,W
3314:  IORWF  FF2,F
....................             delay_ms(700); 
3316:  MOVLW  04
3318:  MOVLB  0
331A:  MOVWF  xBA
331C:  MOVLW  AF
331E:  MOVWF  xD1
3320:  CALL   07F2
3324:  DECFSZ xBA,F
3326:  BRA    331C
....................             segundos=0;minutos=0;horas=0; 
3328:  CLRF   21
332A:  CLRF   22
332C:  CLRF   41
332E:  CLRF   40
....................             delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
3330:  MOVLW  1E
3332:  MOVWF  xD1
3334:  CALL   07F2
3338:  MOVLW  01
333A:  MOVWF  18
333C:  CLRF   31
333E:  MOVLW  02
3340:  MOVWF  1C
3342:  MOVWF  1E
3344:  MOVLW  0C
3346:  MOVWF  xCB
3348:  CALL   0962
....................             Cambio=ON; 
334C:  BSF    17.5
....................          } 
....................       } 
....................              
....................       if(IZQU){// Si oprime Izquierda 
334E:  BSF    F96.2
3350:  BTFSC  F84.2
3352:  BRA    3390
....................          delay_ms(20); 
3354:  MOVLW  14
3356:  MOVWF  xD1
3358:  CALL   07F2
....................          if(IZQU){ 
335C:  BSF    F96.2
335E:  BTFSC  F84.2
3360:  BRA    338E
....................             if(Flanco3 == 0){ 
3362:  BTFSC  16.6
3364:  BRA    338E
....................                Flanco3 = 1;delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f");Cambio=ON; 
3366:  BSF    16.6
3368:  MOVLW  02
336A:  MOVWF  xBA
336C:  MOVLW  FA
336E:  MOVWF  xD1
3370:  CALL   07F2
3374:  DECFSZ xBA,F
3376:  BRA    336C
3378:  MOVLW  01
337A:  MOVWF  18
337C:  CLRF   31
337E:  MOVLW  02
3380:  MOVWF  1C
3382:  MOVWF  1E
3384:  MOVLW  0C
3386:  MOVWF  xCB
3388:  CALL   0962
338C:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
338E:  BRA    3392
....................          Flanco3 = 0; 
3390:  BCF    16.6
....................       } 
....................    } 
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5){ // Menu de Punto Cero 
3392:  MOVF   18,W
3394:  SUBLW  05
3396:  BTFSS  FD8.2
3398:  BRA    35EE
....................       EliminaRuido(); 
339A:  CALL   0004
.................... //      if(Cambio){ 
....................          lcd_gotoxy(1,1); 
339E:  MOVLW  01
33A0:  MOVWF  xCC
33A2:  MOVWF  xCD
33A4:  CALL   0900
....................          printf(lcd_putc,"  Zero Point Config "); 
33A8:  MOVLW  92
33AA:  MOVWF  FF6
33AC:  MOVLW  05
33AE:  MOVWF  FF7
33B0:  CALL   09C0
....................          lcd_gotoxy(1,2); 
33B4:  MOVLW  01
33B6:  MOVWF  xCC
33B8:  MOVLW  02
33BA:  MOVWF  xCD
33BC:  CALL   0900
....................          printf(lcd_putc,"Presion= %3.2f inH2O ",(Leer_Sensor_Presion(5)*4.02)); 
33C0:  MOVLW  05
33C2:  MOVWF  xBA
33C4:  CALL   17E4
33C8:  MOVFF  00,BA
33CC:  MOVFF  01,BB
33D0:  MOVFF  02,BC
33D4:  MOVFF  03,BD
33D8:  MOVFF  03,D1
33DC:  MOVFF  02,D0
33E0:  MOVFF  01,CF
33E4:  MOVFF  00,CE
33E8:  MOVLW  D7
33EA:  MOVWF  xD5
33EC:  MOVLW  A3
33EE:  MOVWF  xD4
33F0:  CLRF   xD3
33F2:  MOVLW  81
33F4:  MOVWF  xD2
33F6:  CALL   197A
33FA:  MOVFF  00,BA
33FE:  MOVFF  01,BB
3402:  MOVFF  02,BC
3406:  MOVFF  03,BD
340A:  MOVLW  A8
340C:  MOVWF  FF6
340E:  MOVLW  05
3410:  MOVWF  FF7
3412:  MOVLW  09
3414:  MOVWF  xBE
3416:  CALL   10BE
341A:  MOVLW  02
341C:  MOVWF  FE9
341E:  MOVFF  BD,C1
3422:  MOVFF  BC,C0
3426:  MOVFF  BB,BF
342A:  MOVFF  BA,BE
342E:  MOVWF  xC2
3430:  CALL   1B26
3434:  MOVLW  B6
3436:  MOVWF  FF6
3438:  MOVLW  05
343A:  MOVWF  FF7
343C:  MOVLW  07
343E:  MOVWF  xBE
3440:  CALL   10BE
....................          lcd_gotoxy(1,3); 
3444:  MOVLW  01
3446:  MOVWF  xCC
3448:  MOVLW  03
344A:  MOVWF  xCD
344C:  CALL   0900
....................          printf(lcd_putc,"    ADC=%2.0f",sensores(0)); 
3450:  CLRF   xBF
3452:  CALL   13CA
3456:  MOVFF  00,BA
345A:  MOVFF  01,BB
345E:  MOVFF  02,BC
3462:  MOVFF  03,BD
3466:  MOVLW  BE
3468:  MOVWF  FF6
346A:  MOVLW  05
346C:  MOVWF  FF7
346E:  MOVLW  08
3470:  MOVWF  xBE
3472:  CALL   10BE
3476:  MOVLW  01
3478:  MOVWF  FE9
347A:  MOVFF  BD,C1
347E:  MOVFF  BC,C0
3482:  MOVFF  BB,BF
3486:  MOVFF  BA,BE
348A:  CLRF   xC2
348C:  CALL   1B26
....................          lcd_gotoxy(1,4); 
3490:  MOVLW  01
3492:  MOVWF  xCC
3494:  MOVLW  04
3496:  MOVWF  xCD
3498:  CALL   0900
....................          printf(lcd_putc,"    ZF=%2.0f",G); 
349C:  MOVLW  CC
349E:  MOVWF  FF6
34A0:  MOVLW  05
34A2:  MOVWF  FF7
34A4:  MOVLW  07
34A6:  MOVWF  xBE
34A8:  CALL   10BE
34AC:  MOVLW  01
34AE:  MOVWF  FE9
34B0:  MOVFF  A7,C1
34B4:  MOVFF  A6,C0
34B8:  MOVFF  A5,BF
34BC:  MOVFF  A4,BE
34C0:  CLRF   xC2
34C2:  CALL   1B26
....................           
....................          Cambio=OFF; 
34C6:  BCF    17.5
.................... //      } 
....................      
....................       if(RIGHT){// Si oprime derecha 
34C8:  BSF    F96.1
34CA:  BTFSC  F84.1
34CC:  BRA    35AE
....................          delay_ms(20); 
34CE:  MOVLW  14
34D0:  MOVWF  xD1
34D2:  CALL   07F2
....................          if(RIGHT){ 
34D6:  BSF    F96.1
34D8:  BTFSC  F84.1
34DA:  BRA    35AC
....................             if(Flanco1 == 0){ 
34DC:  BTFSC  16.4
34DE:  BRA    35AC
....................                /*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
34E0:  MOVLW  01
34E2:  MOVWF  18
34E4:  CLRF   31
34E6:  MOVLW  02
34E8:  MOVWF  1C
34EA:  MOVWF  1E
34EC:  MOVLW  0B
34EE:  MOVWF  1B
34F0:  MOVLW  02
34F2:  MOVWF  xBA
34F4:  MOVLW  FA
34F6:  MOVWF  xD1
34F8:  CALL   07F2
34FC:  DECFSZ xBA,F
34FE:  BRA    34F4
3500:  MOVLW  0C
3502:  MOVWF  xCB
3504:  CALL   0962
....................                G=sensores(0); 
3508:  CLRF   xBF
350A:  CALL   13CA
350E:  MOVFF  03,A7
3512:  MOVFF  02,A6
3516:  MOVFF  01,A5
351A:  MOVFF  00,A4
....................                G16=(int16)G; 
351E:  MOVFF  A7,D1
3522:  MOVFF  A6,D0
3526:  MOVFF  A5,CF
352A:  MOVFF  A4,CE
352E:  CALL   1CAC
3532:  MOVFF  02,43
3536:  MOVFF  01,42
....................                G_l=G16; G_h=(G16>>8); 
353A:  MOVFF  42,25
353E:  MOVFF  43,26
....................                 
....................                write_eeprom(11,G_l); 
3542:  MOVLW  0B
3544:  MOVWF  FA9
3546:  MOVFF  25,FA8
354A:  BCF    FA6.6
354C:  BCF    FA6.7
354E:  BSF    FA6.2
3550:  MOVF   FF2,W
3552:  MOVWF  00
3554:  BCF    FF2.7
3556:  MOVLB  F
3558:  MOVLW  55
355A:  MOVWF  FA7
355C:  MOVLW  AA
355E:  MOVWF  FA7
3560:  BSF    FA6.1
3562:  BTFSC  FA6.1
3564:  BRA    3562
3566:  BCF    FA6.2
3568:  MOVF   00,W
356A:  IORWF  FF2,F
....................                delay_ms(20); 
356C:  MOVLW  14
356E:  MOVLB  0
3570:  MOVWF  xD1
3572:  CALL   07F2
....................                write_eeprom(12,G_h);//Guardar valor de Setpoint en eeprom 
3576:  MOVLW  0C
3578:  MOVWF  FA9
357A:  MOVFF  26,FA8
357E:  BCF    FA6.6
3580:  BCF    FA6.7
3582:  BSF    FA6.2
3584:  MOVF   FF2,W
3586:  MOVWF  00
3588:  BCF    FF2.7
358A:  MOVLB  F
358C:  MOVLW  55
358E:  MOVWF  FA7
3590:  MOVLW  AA
3592:  MOVWF  FA7
3594:  BSF    FA6.1
3596:  BTFSC  FA6.1
3598:  BRA    3596
359A:  BCF    FA6.2
359C:  MOVF   00,W
359E:  IORWF  FF2,F
....................                delay_ms(20); 
35A0:  MOVLW  14
35A2:  MOVLB  0
35A4:  MOVWF  xD1
35A6:  CALL   07F2
....................                Cambio=ON; 
35AA:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
35AC:  BRA    35B0
....................          Flanco1 = 0; 
35AE:  BCF    16.4
....................       } 
....................              
....................       if(IZQU){// Si oprime Izquierda 
35B0:  BSF    F96.2
35B2:  BTFSC  F84.2
35B4:  BRA    35EC
....................          delay_ms(20); 
35B6:  MOVLW  14
35B8:  MOVWF  xD1
35BA:  CALL   07F2
....................          if(IZQU){ 
35BE:  BSF    F96.2
35C0:  BTFSC  F84.2
35C2:  BRA    35EA
....................             if(Flanco3 == 0){ 
35C4:  BTFSC  16.6
35C6:  BRA    35EA
....................                /*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f"); 
35C8:  MOVLW  01
35CA:  MOVWF  18
35CC:  CLRF   31
35CE:  MOVLW  02
35D0:  MOVWF  1C
35D2:  MOVWF  1E
35D4:  MOVLW  0B
35D6:  MOVWF  1B
35D8:  MOVLW  1E
35DA:  MOVWF  xD1
35DC:  CALL   07F2
35E0:  MOVLW  0C
35E2:  MOVWF  xCB
35E4:  CALL   0962
....................                Cambio=ON; 
35E8:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
35EA:  BRA    35EE
....................          Flanco3 = 0; 
35EC:  BCF    16.6
....................       } 
....................    } 
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6){ // Menu de seleccion de estado de Alarma 
35EE:  MOVF   18,W
35F0:  SUBLW  06
35F2:  BTFSS  FD8.2
35F4:  BRA    371C
....................    estadoalarma=!estadoalarma;Flanco1 = 1;Menu=1; paso=0; 
35F6:  BTG    17.4
35F8:  BSF    16.4
35FA:  MOVLW  01
35FC:  MOVWF  18
35FE:  CLRF   31
....................                        
....................             if(estadoalarma==1) 
3600:  BTFSS  17.4
3602:  BRA    3664
....................             {estadoalarma=1; 
3604:  BSF    17.4
....................                lcd_gotoxy(1,1); 
3606:  MOVLW  01
3608:  MOVWF  xCC
360A:  MOVWF  xCD
360C:  CALL   0900
....................                printf(lcd_putc,"                    "); 
3610:  MOVLW  DA
3612:  MOVWF  FF6
3614:  MOVLW  05
3616:  MOVWF  FF7
3618:  CALL   09C0
....................                lcd_gotoxy(1,2); 
361C:  MOVLW  01
361E:  MOVWF  xCC
3620:  MOVLW  02
3622:  MOVWF  xCD
3624:  CALL   0900
....................                printf(lcd_putc,"        Activo      "); 
3628:  MOVLW  F0
362A:  MOVWF  FF6
362C:  MOVLW  05
362E:  MOVWF  FF7
3630:  CALL   09C0
....................                lcd_gotoxy(1,3); 
3634:  MOVLW  01
3636:  MOVWF  xCC
3638:  MOVLW  03
363A:  MOVWF  xCD
363C:  CALL   0900
....................                printf(lcd_putc,"        Alarma      "); 
3640:  MOVLW  06
3642:  MOVWF  FF6
3644:  MOVLW  06
3646:  MOVWF  FF7
3648:  CALL   09C0
....................                lcd_gotoxy(1,4); 
364C:  MOVLW  01
364E:  MOVWF  xCC
3650:  MOVLW  04
3652:  MOVWF  xCD
3654:  CALL   0900
....................                printf(lcd_putc,"                    ");} 
3658:  MOVLW  1C
365A:  MOVWF  FF6
365C:  MOVLW  06
365E:  MOVWF  FF7
3660:  CALL   09C0
....................                 
....................             if(estadoalarma==0) 
3664:  BTFSC  17.4
3666:  BRA    36C8
....................             {estadoalarma=0; 
3668:  BCF    17.4
....................                lcd_gotoxy(1,1); 
366A:  MOVLW  01
366C:  MOVWF  xCC
366E:  MOVWF  xCD
3670:  CALL   0900
....................                printf(lcd_putc,"                    "); 
3674:  MOVLW  32
3676:  MOVWF  FF6
3678:  MOVLW  06
367A:  MOVWF  FF7
367C:  CALL   09C0
....................                lcd_gotoxy(1,2); 
3680:  MOVLW  01
3682:  MOVWF  xCC
3684:  MOVLW  02
3686:  MOVWF  xCD
3688:  CALL   0900
....................                printf(lcd_putc,"      Desactivo     "); 
368C:  MOVLW  48
368E:  MOVWF  FF6
3690:  MOVLW  06
3692:  MOVWF  FF7
3694:  CALL   09C0
....................                lcd_gotoxy(1,3); 
3698:  MOVLW  01
369A:  MOVWF  xCC
369C:  MOVLW  03
369E:  MOVWF  xCD
36A0:  CALL   0900
....................                printf(lcd_putc,"       Alarma       "); 
36A4:  MOVLW  5E
36A6:  MOVWF  FF6
36A8:  MOVLW  06
36AA:  MOVWF  FF7
36AC:  CALL   09C0
....................                lcd_gotoxy(1,4); 
36B0:  MOVLW  01
36B2:  MOVWF  xCC
36B4:  MOVLW  04
36B6:  MOVWF  xCD
36B8:  CALL   0900
....................                printf(lcd_putc,"                    ");} 
36BC:  MOVLW  74
36BE:  MOVWF  FF6
36C0:  MOVLW  06
36C2:  MOVWF  FF7
36C4:  CALL   09C0
....................               
....................             write_eeprom(4,estadoalarma);delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
36C8:  MOVLW  00
36CA:  BTFSC  17.4
36CC:  MOVLW  01
36CE:  MOVWF  xBA
36D0:  MOVLW  04
36D2:  MOVWF  FA9
36D4:  MOVFF  BA,FA8
36D8:  BCF    FA6.6
36DA:  BCF    FA6.7
36DC:  BSF    FA6.2
36DE:  MOVF   FF2,W
36E0:  MOVWF  00
36E2:  BCF    FF2.7
36E4:  MOVLB  F
36E6:  MOVLW  55
36E8:  MOVWF  FA7
36EA:  MOVLW  AA
36EC:  MOVWF  FA7
36EE:  BSF    FA6.1
36F0:  BTFSC  FA6.1
36F2:  BRA    36F0
36F4:  BCF    FA6.2
36F6:  MOVF   00,W
36F8:  IORWF  FF2,F
36FA:  MOVLW  04
36FC:  MOVLB  0
36FE:  MOVWF  xBA
3700:  MOVLW  FA
3702:  MOVWF  xD1
3704:  CALL   07F2
3708:  DECFSZ xBA,F
370A:  BRA    3700
370C:  MOVLW  02
370E:  MOVWF  1C
3710:  MOVWF  1E
3712:  MOVLW  0C
3714:  MOVWF  xCB
3716:  CALL   0962
....................             Cambio=ON; 
371A:  BSF    17.5
....................    }       
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu7--------------------------------------------------------------- 
....................    if(Menu == 7){ // Menu de seleccion de Velocidad 
371C:  MOVF   18,W
371E:  SUBLW  07
3720:  BTFSS  FD8.2
3722:  BRA    38BC
....................       if(VelMotor>6)VelMotor=6; 
3724:  MOVF   xB0,W
3726:  SUBLW  06
3728:  BC    372E
372A:  MOVLW  06
372C:  MOVWF  xB0
....................       if(VelMotor<1)VelMotor=1; 
372E:  MOVF   xB0,F
3730:  BNZ   3736
3732:  MOVLW  01
3734:  MOVWF  xB0
....................        
....................       lcd_gotoxy(1,1); 
3736:  MOVLW  01
3738:  MOVWF  xCC
373A:  MOVWF  xCD
373C:  CALL   0900
....................       printf(lcd_putc,"Seleccione Velocidad"); 
3740:  MOVLW  8A
3742:  MOVWF  FF6
3744:  MOVLW  06
3746:  MOVWF  FF7
3748:  CALL   09C0
....................       lcd_gotoxy(1,2); 
374C:  MOVLW  01
374E:  MOVWF  xCC
3750:  MOVLW  02
3752:  MOVWF  xCD
3754:  CALL   0900
....................       printf(lcd_putc,"   del Ventilador   "); 
3758:  MOVLW  A0
375A:  MOVWF  FF6
375C:  MOVLW  06
375E:  MOVWF  FF7
3760:  CALL   09C0
....................       lcd_gotoxy(1,3); 
3764:  MOVLW  01
3766:  MOVWF  xCC
3768:  MOVLW  03
376A:  MOVWF  xCD
376C:  CALL   0900
....................       printf(lcd_putc,"     Vel: %u       ",VelMotor); 
3770:  MOVLW  B6
3772:  MOVWF  FF6
3774:  MOVLW  06
3776:  MOVWF  FF7
3778:  MOVLW  0A
377A:  MOVWF  xBE
377C:  CALL   10BE
3780:  MOVFF  B0,BA
3784:  MOVLW  1B
3786:  MOVWF  xBB
3788:  CALL   12A8
378C:  MOVLW  C2
378E:  MOVWF  FF6
3790:  MOVLW  06
3792:  MOVWF  FF7
3794:  MOVLW  07
3796:  MOVWF  xBE
3798:  CALL   10BE
....................       lcd_gotoxy(1,4); 
379C:  MOVLW  01
379E:  MOVWF  xCC
37A0:  MOVLW  04
37A2:  MOVWF  xCD
37A4:  CALL   0900
....................       printf(lcd_putc,"                    ");       
37A8:  MOVLW  CA
37AA:  MOVWF  FF6
37AC:  MOVLW  06
37AE:  MOVWF  FF7
37B0:  CALL   09C0
....................        
....................       if(UP && VelMotor<6)//Si oprime hacia arriba 
37B4:  BSF    F92.5
37B6:  BTFSC  F80.5
37B8:  BRA    37CA
37BA:  MOVF   xB0,W
37BC:  SUBLW  05
37BE:  BNC   37CA
....................       {   
....................          delay_ms(200);VelMotor++; 
37C0:  MOVLW  C8
37C2:  MOVWF  xD1
37C4:  CALL   07F2
37C8:  INCF   xB0,F
....................       } 
....................              
....................       if(DOWN && VelMotor>0)//Si oprime hacia abajo 
37CA:  BSF    F96.0
37CC:  BTFSC  F84.0
37CE:  BRA    37DE
37D0:  MOVF   xB0,F
37D2:  BZ    37DE
....................       {   
....................          delay_ms(200);VelMotor--; 
37D4:  MOVLW  C8
37D6:  MOVWF  xD1
37D8:  CALL   07F2
37DC:  DECF   xB0,F
....................       } 
....................              
....................       if(RIGHT)//Si oprime SET 
37DE:  BSF    F96.1
37E0:  BTFSC  F84.1
37E2:  BRA    37EC
....................       {            
....................          VelocidadMotor(VelMotor); 
37E4:  MOVFF  B0,BA
37E8:  CALL   1040
....................       }  
....................              
....................       if(IZQU)//Si oprime boton de Toma. 
37EC:  BSF    F96.2
37EE:  BTFSC  F84.2
37F0:  BRA    38BC
....................       {                   
....................          delay_ms(100);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
37F2:  MOVLW  64
37F4:  MOVWF  xD1
37F6:  CALL   07F2
37FA:  MOVLW  02
37FC:  MOVWF  1C
37FE:  MOVWF  1E
3800:  MOVLW  0C
3802:  MOVWF  xCB
3804:  CALL   0962
....................          write_eeprom(13,VelMotor);//Guardar valor de Setpoint en eeprom 
3808:  MOVLW  0D
380A:  MOVWF  FA9
380C:  MOVFF  B0,FA8
3810:  BCF    FA6.6
3812:  BCF    FA6.7
3814:  BSF    FA6.2
3816:  MOVF   FF2,W
3818:  MOVWF  00
381A:  BCF    FF2.7
381C:  MOVLB  F
381E:  MOVLW  55
3820:  MOVWF  FA7
3822:  MOVLW  AA
3824:  MOVWF  FA7
3826:  BSF    FA6.1
3828:  BTFSC  FA6.1
382A:  BRA    3828
382C:  BCF    FA6.2
382E:  MOVF   00,W
3830:  IORWF  FF2,F
....................          delay_ms(20); 
3832:  MOVLW  14
3834:  MOVLB  0
3836:  MOVWF  xD1
3838:  CALL   07F2
....................          lcd_gotoxy(1,1); 
383C:  MOVLW  01
383E:  MOVWF  xCC
3840:  MOVWF  xCD
3842:  CALL   0900
....................          printf(lcd_putc,"                    "); 
3846:  MOVLW  E0
3848:  MOVWF  FF6
384A:  MOVLW  06
384C:  MOVWF  FF7
384E:  CALL   09C0
....................          lcd_gotoxy(1,2); 
3852:  MOVLW  01
3854:  MOVWF  xCC
3856:  MOVLW  02
3858:  MOVWF  xCD
385A:  CALL   0900
....................          printf(lcd_putc,"     Velocidad      "); 
385E:  MOVLW  F6
3860:  MOVWF  FF6
3862:  MOVLW  06
3864:  MOVWF  FF7
3866:  CALL   09C0
....................          lcd_gotoxy(1,3); 
386A:  MOVLW  01
386C:  MOVWF  xCC
386E:  MOVLW  03
3870:  MOVWF  xCD
3872:  CALL   0900
....................          printf(lcd_putc,"      Almacenada    "); 
3876:  MOVLW  0C
3878:  MOVWF  FF6
387A:  MOVLW  07
387C:  MOVWF  FF7
387E:  CALL   09C0
....................          lcd_gotoxy(1,4); 
3882:  MOVLW  01
3884:  MOVWF  xCC
3886:  MOVLW  04
3888:  MOVWF  xCD
388A:  CALL   0900
....................          printf(lcd_putc,"                    ");  
388E:  MOVLW  22
3890:  MOVWF  FF6
3892:  MOVLW  07
3894:  MOVWF  FF7
3896:  CALL   09C0
....................          delay_ms(1000); 
389A:  MOVLW  04
389C:  MOVWF  xBA
389E:  MOVLW  FA
38A0:  MOVWF  xD1
38A2:  CALL   07F2
38A6:  DECFSZ xBA,F
38A8:  BRA    389E
....................          printf(lcd_putc,"\f"); 
38AA:  MOVLW  0C
38AC:  MOVWF  xCB
38AE:  CALL   0962
....................          lcd_init(); 
38B2:  CALL   0882
....................          Menu=1; paso=0; 
38B6:  MOVLW  01
38B8:  MOVWF  18
38BA:  CLRF   31
....................       } 
....................    }       
.................... //----------------Fin-Menu7--------------------------------------------------------------- 
....................  
.................... //----------------Menu100--------------------------------------------------------------- 
....................    if(Menu == 50){ // Menu de seleccion de Estado de Luz UV    
38BC:  MOVF   18,W
38BE:  SUBLW  32
38C0:  BTFSS  FD8.2
38C2:  BRA    3F02
....................    if(Lectura==1){ 
38C4:  BTFSS  17.0
38C6:  BRA    3AEA
....................       Lectura=0; 
38C8:  BCF    17.0
....................       CaidaPresion=Leer_Sensor_Presion(8); 
38CA:  MOVLW  08
38CC:  MOVWF  xBA
38CE:  CALL   17E4
38D2:  MOVFF  03,A3
38D6:  MOVFF  02,A2
38DA:  MOVFF  01,A1
38DE:  MOVFF  00,A0
....................       lcd_gotoxy(1,1); 
38E2:  MOVLW  01
38E4:  MOVWF  xCC
38E6:  MOVWF  xCD
38E8:  CALL   0900
....................       printf(lcd_putc,"JPCR DP:%3.2f inH2O ",(CaidaPresion*4.02));       
38EC:  MOVFF  A3,D1
38F0:  MOVFF  A2,D0
38F4:  MOVFF  A1,CF
38F8:  MOVFF  A0,CE
38FC:  MOVLW  D7
38FE:  MOVWF  xD5
3900:  MOVLW  A3
3902:  MOVWF  xD4
3904:  CLRF   xD3
3906:  MOVLW  81
3908:  MOVWF  xD2
390A:  CALL   197A
390E:  MOVFF  00,BA
3912:  MOVFF  01,BB
3916:  MOVFF  02,BC
391A:  MOVFF  03,BD
391E:  MOVLW  38
3920:  MOVWF  FF6
3922:  MOVLW  07
3924:  MOVWF  FF7
3926:  MOVLW  08
3928:  MOVWF  xBE
392A:  CALL   10BE
392E:  MOVLW  02
3930:  MOVWF  FE9
3932:  MOVFF  BD,C1
3936:  MOVFF  BC,C0
393A:  MOVFF  BB,BF
393E:  MOVFF  BA,BE
3942:  MOVWF  xC2
3944:  CALL   1B26
3948:  MOVLW  45
394A:  MOVWF  FF6
394C:  MOVLW  07
394E:  MOVWF  FF7
3950:  MOVLW  07
3952:  MOVWF  xBE
3954:  CALL   10BE
....................       Saturacion=(CaidaPresion/0.24)*11; 
3958:  MOVFF  A3,D1
395C:  MOVFF  A2,D0
3960:  MOVFF  A1,CF
3964:  MOVFF  A0,CE
3968:  MOVLW  8F
396A:  MOVWF  xD5
396C:  MOVLW  C2
396E:  MOVWF  xD4
3970:  MOVLW  75
3972:  MOVWF  xD3
3974:  MOVLW  7C
3976:  MOVWF  xD2
3978:  CALL   1420
397C:  MOVFF  00,BA
3980:  MOVFF  01,BB
3984:  MOVFF  02,BC
3988:  MOVFF  03,BD
398C:  MOVFF  03,D1
3990:  MOVFF  02,D0
3994:  MOVFF  01,CF
3998:  MOVFF  00,CE
399C:  CLRF   xD5
399E:  CLRF   xD4
39A0:  MOVLW  30
39A2:  MOVWF  xD3
39A4:  MOVLW  82
39A6:  MOVWF  xD2
39A8:  CALL   197A
39AC:  MOVFF  03,9F
39B0:  MOVFF  02,9E
39B4:  MOVFF  01,9D
39B8:  MOVFF  00,9C
....................        
....................       if(Saturacion>11) 
39BC:  CLRF   xD1
39BE:  CLRF   xD0
39C0:  MOVLW  30
39C2:  MOVWF  xCF
39C4:  MOVLW  82
39C6:  MOVWF  xCE
39C8:  MOVFF  9F,D5
39CC:  MOVFF  9E,D4
39D0:  MOVFF  9D,D3
39D4:  MOVFF  9C,D2
39D8:  CALL   0C5A
39DC:  BNC   39EA
....................       { 
....................          Saturacion=11; 
39DE:  CLRF   x9F
39E0:  CLRF   x9E
39E2:  MOVLW  30
39E4:  MOVWF  x9D
39E6:  MOVLW  82
39E8:  MOVWF  x9C
....................       } 
....................        
....................       for(i=0;i<floor(Saturacion);i++) 
39EA:  CLRF   2D
39EC:  MOVFF  9F,BD
39F0:  MOVFF  9E,BC
39F4:  MOVFF  9D,BB
39F8:  MOVFF  9C,BA
39FC:  CALL   201E
3A00:  MOVFF  00,BA
3A04:  MOVFF  01,BB
3A08:  MOVFF  02,BC
3A0C:  MOVFF  03,BD
3A10:  CLRF   xD3
3A12:  MOVFF  2D,D2
3A16:  CALL   0A46
3A1A:  MOVFF  03,D1
3A1E:  MOVFF  02,D0
3A22:  MOVFF  01,CF
3A26:  MOVFF  00,CE
3A2A:  MOVFF  BD,D5
3A2E:  MOVFF  BC,D4
3A32:  MOVFF  BB,D3
3A36:  MOVFF  BA,D2
3A3A:  CALL   0C5A
3A3E:  BNC   3A5C
....................       { 
....................          lcd_gotoxy(i+8,2); 
3A40:  MOVLW  08
3A42:  ADDWF  2D,W
3A44:  MOVWF  xBA
3A46:  MOVWF  xCC
3A48:  MOVLW  02
3A4A:  MOVWF  xCD
3A4C:  CALL   0900
....................          printf(lcd_putc,"Ñ"); 
3A50:  MOVLW  D1
3A52:  MOVWF  xCB
3A54:  CALL   0962
....................       } 
3A58:  INCF   2D,F
3A5A:  BRA    39EC
....................        
....................       for(i=floor(Saturacion);i<11;i++) 
3A5C:  MOVFF  9F,BD
3A60:  MOVFF  9E,BC
3A64:  MOVFF  9D,BB
3A68:  MOVFF  9C,BA
3A6C:  CALL   201E
3A70:  MOVFF  03,D1
3A74:  MOVFF  02,D0
3A78:  MOVFF  01,CF
3A7C:  MOVFF  00,CE
3A80:  CALL   1CAC
3A84:  MOVFF  01,2D
3A88:  MOVF   2D,W
3A8A:  SUBLW  0A
3A8C:  BNC   3AAA
....................       { 
....................          lcd_gotoxy(i+8,2); 
3A8E:  MOVLW  08
3A90:  ADDWF  2D,W
3A92:  MOVWF  xBA
3A94:  MOVWF  xCC
3A96:  MOVLW  02
3A98:  MOVWF  xCD
3A9A:  CALL   0900
....................          printf(lcd_putc," "); 
3A9E:  MOVLW  20
3AA0:  MOVWF  xCB
3AA2:  CALL   0962
....................       } 
3AA6:  INCF   2D,F
3AA8:  BRA    3A88
....................        
....................       lcd_gotoxy(9,3); 
3AAA:  MOVLW  09
3AAC:  MOVWF  xCC
3AAE:  MOVLW  03
3AB0:  MOVWF  xCD
3AB2:  CALL   0900
....................       printf(lcd_putc,"Tempo:%03u:%02u",tempo_minutos,tempo_segundos); 
3AB6:  MOVLW  4E
3AB8:  MOVWF  FF6
3ABA:  MOVLW  07
3ABC:  MOVWF  FF7
3ABE:  MOVLW  06
3AC0:  MOVWF  xBE
3AC2:  CALL   10BE
3AC6:  MOVFF  27,BA
3ACA:  MOVLW  03
3ACC:  MOVWF  xBB
3ACE:  CALL   12A8
3AD2:  MOVLW  3A
3AD4:  MOVWF  xCB
3AD6:  CALL   0962
3ADA:  MOVFF  28,BA
3ADE:  MOVLW  01
3AE0:  MOVWF  xBB
3AE2:  CALL   12A8
....................       EliminaRuido(); 
3AE6:  CALL   0004
....................    } 
....................      
....................    if(tiempo_cumplido==1) 
3AEA:  BTFSS  16.7
3AEC:  BRA    3B86
....................    { 
....................       if(estadoalarma==1) 
3AEE:  BTFSS  17.4
3AF0:  BRA    3B7C
....................       { 
....................          printf(lcd_putc,"\f"); 
3AF2:  MOVLW  0C
3AF4:  MOVWF  xCB
3AF6:  CALL   0962
....................          lcd_gotoxy(1,2); 
3AFA:  MOVLW  01
3AFC:  MOVWF  xCC
3AFE:  MOVLW  02
3B00:  MOVWF  xCD
3B02:  CALL   0900
....................          printf(lcd_putc,"  Temporizador  de  "); 
3B06:  MOVLW  5E
3B08:  MOVWF  FF6
3B0A:  MOVLW  07
3B0C:  MOVWF  FF7
3B0E:  CALL   09C0
....................          lcd_gotoxy(1,3); 
3B12:  MOVLW  01
3B14:  MOVWF  xCC
3B16:  MOVLW  03
3B18:  MOVWF  xCD
3B1A:  CALL   0900
....................          printf(lcd_putc," Luz UV  Finalizado "); 
3B1E:  MOVLW  74
3B20:  MOVWF  FF6
3B22:  MOVLW  07
3B24:  MOVWF  FF7
3B26:  CALL   09C0
....................          lcd_gotoxy(1,4); 
3B2A:  MOVLW  01
3B2C:  MOVWF  xCC
3B2E:  MOVLW  04
3B30:  MOVWF  xCD
3B32:  CALL   0900
....................          printf(lcd_putc,"                    "); 
3B36:  MOVLW  8A
3B38:  MOVWF  FF6
3B3A:  MOVLW  07
3B3C:  MOVWF  FF7
3B3E:  CALL   09C0
....................          lcd_gotoxy(1,1); 
3B42:  MOVLW  01
3B44:  MOVWF  xCC
3B46:  MOVWF  xCD
3B48:  CALL   0900
....................          printf(lcd_putc,"                    "); 
3B4C:  MOVLW  A0
3B4E:  MOVWF  FF6
3B50:  MOVLW  07
3B52:  MOVWF  FF7
3B54:  CALL   09C0
....................          for(i=0;i<5;i++) 
3B58:  CLRF   2D
3B5A:  MOVF   2D,W
3B5C:  SUBLW  04
3B5E:  BNC   3B7C
....................          { 
....................             Buzzer_on; 
3B60:  BSF    F8B.0
3B62:  BCF    F94.0
....................             delay_ms(200); 
3B64:  MOVLW  C8
3B66:  MOVWF  xD1
3B68:  CALL   07F2
....................             Buzzer_off; 
3B6C:  BCF    F8B.0
3B6E:  BCF    F94.0
....................             delay_ms(200); 
3B70:  MOVLW  C8
3B72:  MOVWF  xD1
3B74:  CALL   07F2
....................          } 
3B78:  INCF   2D,F
3B7A:  BRA    3B5A
....................       } 
....................       tiempo_cumplido=0; 
3B7C:  BCF    16.7
....................       printf(lcd_putc,"\f"); 
3B7E:  MOVLW  0C
3B80:  MOVWF  xCB
3B82:  CALL   0962
....................    } 
....................     
....................    if(CaidaPresion>=0.23) 
3B86:  MOVLW  1F
3B88:  MOVWF  xD1
3B8A:  MOVLW  85
3B8C:  MOVWF  xD0
3B8E:  MOVLW  6B
3B90:  MOVWF  xCF
3B92:  MOVLW  7C
3B94:  MOVWF  xCE
3B96:  MOVFF  A3,D5
3B9A:  MOVFF  A2,D4
3B9E:  MOVFF  A1,D3
3BA2:  MOVFF  A0,D2
3BA6:  CALL   0C5A
3BAA:  BC    3BAE
3BAC:  BNZ   3BB4
....................    {  
....................       ActivaBuzzer=1; 
3BAE:  MOVLW  01
3BB0:  MOVWF  3D
....................    } 
....................    else 
3BB2:  BRA    3BBA
....................    { 
....................       ActivaBuzzer=0; 
3BB4:  CLRF   3D
....................       Buzzer_off; 
3BB6:  BCF    F8B.0
3BB8:  BCF    F94.0
....................    } 
....................        
....................    //if(Cambio){ 
....................       lcd_gotoxy(1,2); 
3BBA:  MOVLW  01
3BBC:  MOVWF  xCC
3BBE:  MOVLW  02
3BC0:  MOVWF  xCD
3BC2:  CALL   0900
....................       printf(lcd_putc,"Filtro:"); 
3BC6:  MOVLW  B6
3BC8:  MOVWF  FF6
3BCA:  MOVLW  07
3BCC:  MOVWF  FF7
3BCE:  CALL   09C0
....................        
....................       if(estadomv==1) 
3BD2:  BTFSS  16.2
3BD4:  BRA    3BF0
....................       { 
....................          lcd_gotoxy(1,4); 
3BD6:  MOVLW  01
3BD8:  MOVWF  xCC
3BDA:  MOVLW  04
3BDC:  MOVWF  xCD
3BDE:  CALL   0900
....................          printf(lcd_putc,"Motor:ON ");       
3BE2:  MOVLW  BE
3BE4:  MOVWF  FF6
3BE6:  MOVLW  07
3BE8:  MOVWF  FF7
3BEA:  CALL   09C0
....................       } 
....................       else 
3BEE:  BRA    3C08
....................       { 
....................          lcd_gotoxy(1,4); 
3BF0:  MOVLW  01
3BF2:  MOVWF  xCC
3BF4:  MOVLW  04
3BF6:  MOVWF  xCD
3BF8:  CALL   0900
....................          printf(lcd_putc,"Motor:OFF"); 
3BFC:  MOVLW  C8
3BFE:  MOVWF  FF6
3C00:  MOVLW  07
3C02:  MOVWF  FF7
3C04:  CALL   09C0
....................       } 
....................        
....................       if(estadouv==1) 
3C08:  BTFSS  16.0
3C0A:  BRA    3C26
....................       { 
....................          lcd_gotoxy(13,4); 
3C0C:  MOVLW  0D
3C0E:  MOVWF  xCC
3C10:  MOVLW  04
3C12:  MOVWF  xCD
3C14:  CALL   0900
....................          printf(lcd_putc,"UV:ON "); 
3C18:  MOVLW  D2
3C1A:  MOVWF  FF6
3C1C:  MOVLW  07
3C1E:  MOVWF  FF7
3C20:  CALL   09C0
....................       } 
....................       else 
3C24:  BRA    3C3E
....................       {          
....................          lcd_gotoxy(13,4); 
3C26:  MOVLW  0D
3C28:  MOVWF  xCC
3C2A:  MOVLW  04
3C2C:  MOVWF  xCD
3C2E:  CALL   0900
....................          printf(lcd_putc,"UV:OFF"); 
3C32:  MOVLW  DA
3C34:  MOVWF  FF6
3C36:  MOVLW  07
3C38:  MOVWF  FF7
3C3A:  CALL   09C0
....................       } 
....................        
....................       if(estadofl==1) 
3C3E:  BTFSS  16.1
3C40:  BRA    3C5C
....................       { 
....................          lcd_gotoxy(1,3); 
3C42:  MOVLW  01
3C44:  MOVWF  xCC
3C46:  MOVLW  03
3C48:  MOVWF  xCD
3C4A:  CALL   0900
....................          printf(lcd_putc,"Luz:ON "); 
3C4E:  MOVLW  E2
3C50:  MOVWF  FF6
3C52:  MOVLW  07
3C54:  MOVWF  FF7
3C56:  CALL   09C0
....................       } 
....................       else 
3C5A:  BRA    3C74
....................       { 
....................          lcd_gotoxy(1,3); 
3C5C:  MOVLW  01
3C5E:  MOVWF  xCC
3C60:  MOVLW  03
3C62:  MOVWF  xCD
3C64:  CALL   0900
....................          printf(lcd_putc,"Luz:OFF"); 
3C68:  MOVLW  EA
3C6A:  MOVWF  FF6
3C6C:  MOVLW  07
3C6E:  MOVWF  FF7
3C70:  CALL   09C0
....................       }  
....................       Cambio=OFF; 
3C74:  BCF    17.5
....................    //} 
....................     
....................    if(estadomv==1){  
3C76:  BTFSS  16.2
3C78:  BRA    3CA4
....................       if(flagmv==0){ 
3C7A:  BTFSC  17.6
3C7C:  BRA    3C9A
....................          VelocidadMotor(6);lcd_init();delay_ms(200);lcd_init();flagmv=1;Cambio=ON; 
3C7E:  MOVLW  06
3C80:  MOVWF  xBA
3C82:  CALL   1040
3C86:  CALL   0882
3C8A:  MOVLW  C8
3C8C:  MOVWF  xD1
3C8E:  CALL   07F2
3C92:  CALL   0882
3C96:  BSF    17.6
3C98:  BSF    17.5
....................       } 
....................       VelocidadMotor(VelMotor); 
3C9A:  MOVFF  B0,BA
3C9E:  CALL   1040
....................    }else{ 
3CA2:  BRA    3CC2
....................       VelocidadMotor(0); 
3CA4:  CLRF   xBA
3CA6:  CALL   1040
....................       if(flagmv==1){ 
3CAA:  BTFSS  17.6
3CAC:  BRA    3CC2
....................          lcd_init();delay_ms(200);lcd_init();flagmv=0;Cambio=ON; 
3CAE:  CALL   0882
3CB2:  MOVLW  C8
3CB4:  MOVWF  xD1
3CB6:  CALL   07F2
3CBA:  CALL   0882
3CBE:  BCF    17.6
3CC0:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(estadouv==1 && !VIDRIO){ 
3CC2:  BTFSS  16.0
3CC4:  BRA    3CFE
3CC6:  BSF    F92.1
3CC8:  BTFSS  F80.1
3CCA:  BRA    3CFE
....................       estadomv=0; 
3CCC:  BCF    16.2
....................       VelocidadMotor(0); 
3CCE:  CLRF   xBA
3CD0:  CALL   1040
....................       estadofl=0; 
3CD4:  BCF    16.1
....................       Luz_Blanca_off; 
3CD6:  BSF    F8A.2
3CD8:  BCF    F93.2
....................       Luz_UV_on; 
3CDA:  BCF    F8A.1
3CDC:  BCF    F93.1
....................       tiempo_cumplido=0; 
3CDE:  BCF    16.7
....................       if(flaguv==0){ 
3CE0:  BTFSC  17.1
3CE2:  BRA    3CFC
....................          lcd_init();delay_ms(200);lcd_init();flaguv=1;guardaruv=1;Cambio=ON; 
3CE4:  CALL   0882
3CE8:  MOVLW  C8
3CEA:  MOVWF  xD1
3CEC:  CALL   07F2
3CF0:  CALL   0882
3CF4:  BSF    17.1
3CF6:  MOVLW  01
3CF8:  MOVWF  30
3CFA:  BSF    17.5
....................       } 
....................    }else{ 
3CFC:  BRA    3D20
....................       estadouv=0; 
3CFE:  BCF    16.0
....................       Luz_UV_off; 
3D00:  BSF    F8A.1
3D02:  BCF    F93.1
....................       if(flaguv==1){ 
3D04:  BTFSS  17.1
3D06:  BRA    3D20
....................          lcd_init();delay_ms(200);lcd_init();flaguv=0;guardaruv=1;Cambio=ON; 
3D08:  CALL   0882
3D0C:  MOVLW  C8
3D0E:  MOVWF  xD1
3D10:  CALL   07F2
3D14:  CALL   0882
3D18:  BCF    17.1
3D1A:  MOVLW  01
3D1C:  MOVWF  30
3D1E:  BSF    17.5
....................       } 
....................    } 
....................        
....................    if(estadofl==1) 
3D20:  BTFSS  16.1
3D22:  BRA    3D42
....................    { 
....................       Luz_Blanca_on; 
3D24:  BCF    F8A.2
3D26:  BCF    F93.2
....................       if(flagfl==0) 
3D28:  BTFSC  17.2
3D2A:  BRA    3D40
....................       { 
....................          lcd_init();delay_ms(200);lcd_init();flagfl=1;Cambio=ON; 
3D2C:  CALL   0882
3D30:  MOVLW  C8
3D32:  MOVWF  xD1
3D34:  CALL   07F2
3D38:  CALL   0882
3D3C:  BSF    17.2
3D3E:  BSF    17.5
....................       } 
....................    } 
....................    else 
3D40:  BRA    3D5E
....................    { 
....................       Luz_Blanca_off; 
3D42:  BSF    F8A.2
3D44:  BCF    F93.2
....................       if(flagfl==1) 
3D46:  BTFSS  17.2
3D48:  BRA    3D5E
....................       { 
....................          lcd_init();delay_ms(200);lcd_init();flagfl=0;Cambio=ON; 
3D4A:  CALL   0882
3D4E:  MOVLW  C8
3D50:  MOVWF  xD1
3D52:  CALL   07F2
3D56:  CALL   0882
3D5A:  BCF    17.2
3D5C:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(DOWN)//Si oprime hacia arriba 
3D5E:  BSF    F96.0
3D60:  BTFSC  F84.0
3D62:  BRA    3D8E
....................    { 
....................       delay_ms(20); 
3D64:  MOVLW  14
3D66:  MOVWF  xD1
3D68:  CALL   07F2
....................       if(DOWN){ 
3D6C:  BSF    F96.0
3D6E:  BTFSC  F84.0
3D70:  BRA    3D8C
....................          if(Flanco == 0) 
3D72:  BTFSC  16.3
3D74:  BRA    3D8C
....................          { 
....................             estadofl=!estadofl;Flanco = 1;delay_ms(300);Cambio=ON; 
3D76:  BTG    16.1
3D78:  BSF    16.3
3D7A:  MOVLW  02
3D7C:  MOVWF  xBA
3D7E:  MOVLW  96
3D80:  MOVWF  xD1
3D82:  CALL   07F2
3D86:  DECFSZ xBA,F
3D88:  BRA    3D7E
3D8A:  BSF    17.5
....................          } 
....................       } 
....................    } 
....................    else 
3D8C:  BRA    3D90
....................    { 
....................       Flanco = 0; 
3D8E:  BCF    16.3
....................    } 
....................     
....................    if(RIGHT)//Si oprime hacia abajo 
3D90:  BSF    F96.1
3D92:  BTFSC  F84.1
3D94:  BRA    3DC0
....................    { 
....................       delay_ms(20); 
3D96:  MOVLW  14
3D98:  MOVWF  xD1
3D9A:  CALL   07F2
....................       if(RIGHT){ 
3D9E:  BSF    F96.1
3DA0:  BTFSC  F84.1
3DA2:  BRA    3DBE
....................          if(Flanco1 == 0) 
3DA4:  BTFSC  16.4
3DA6:  BRA    3DBE
....................          { 
....................             estadomv=!estadomv;Flanco1 = 1;delay_ms(300);Cambio=ON; 
3DA8:  BTG    16.2
3DAA:  BSF    16.4
3DAC:  MOVLW  02
3DAE:  MOVWF  xBA
3DB0:  MOVLW  96
3DB2:  MOVWF  xD1
3DB4:  CALL   07F2
3DB8:  DECFSZ xBA,F
3DBA:  BRA    3DB0
3DBC:  BSF    17.5
....................          } 
....................       } 
....................    } 
....................    else 
3DBE:  BRA    3DC2
....................    { 
....................       Flanco1 = 0; 
3DC0:  BCF    16.4
....................    } 
....................     
....................    if(IZQU)//Si oprime hacia izquierda 
3DC2:  BSF    F96.2
3DC4:  BTFSC  F84.2
3DC6:  BRA    3DE2
....................    { 
....................       delay_ms(20); 
3DC8:  MOVLW  14
3DCA:  MOVWF  xD1
3DCC:  CALL   07F2
....................       if(IZQU){ 
3DD0:  BSF    F96.2
3DD2:  BTFSC  F84.2
3DD4:  BRA    3DE2
....................          delay_ms(150);  
3DD6:  MOVLW  96
3DD8:  MOVWF  xD1
3DDA:  CALL   07F2
....................          estadouv=!estadouv; 
3DDE:  BTG    16.0
....................          Cambio=ON; 
3DE0:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(UP)//Si oprime hacia izquierda 
3DE2:  BSF    F92.5
3DE4:  BTFSC  F80.5
3DE6:  BRA    3E24
....................    { 
....................       delay_ms(20); 
3DE8:  MOVLW  14
3DEA:  MOVWF  xD1
3DEC:  CALL   07F2
....................       if(UP){ 
3DF0:  BSF    F92.5
3DF2:  BTFSC  F80.5
3DF4:  BRA    3E24
....................          delay_ms(200); 
3DF6:  MOVLW  C8
3DF8:  MOVWF  xD1
3DFA:  CALL   07F2
....................          printf(lcd_putc,"\f"); 
3DFE:  MOVLW  0C
3E00:  MOVWF  xCB
3E02:  CALL   0962
....................          delay_ms(300); 
3E06:  MOVLW  02
3E08:  MOVWF  xBA
3E0A:  MOVLW  96
3E0C:  MOVWF  xD1
3E0E:  CALL   07F2
3E12:  DECFSZ xBA,F
3E14:  BRA    3E0A
....................          Menu=1;  
3E16:  MOVLW  01
3E18:  MOVWF  18
....................          paso=0; 
3E1A:  CLRF   31
....................          Flecha=2; 
3E1C:  MOVLW  02
3E1E:  MOVWF  1C
....................          Flecha2=2; 
3E20:  MOVWF  1E
....................          Cambio=ON; 
3E22:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(guardaruv==1) 
3E24:  DECFSZ 30,W
3E26:  BRA    3EEA
....................    { 
....................       write_eeprom(7,segundos);write_eeprom(8,minutos); 
3E28:  MOVLW  07
3E2A:  MOVWF  FA9
3E2C:  MOVFF  21,FA8
3E30:  BCF    FA6.6
3E32:  BCF    FA6.7
3E34:  BSF    FA6.2
3E36:  MOVF   FF2,W
3E38:  MOVWF  00
3E3A:  BCF    FF2.7
3E3C:  MOVLB  F
3E3E:  MOVLW  55
3E40:  MOVWF  FA7
3E42:  MOVLW  AA
3E44:  MOVWF  FA7
3E46:  BSF    FA6.1
3E48:  BTFSC  FA6.1
3E4A:  BRA    3E48
3E4C:  BCF    FA6.2
3E4E:  MOVF   00,W
3E50:  IORWF  FF2,F
3E52:  MOVLW  08
3E54:  MOVWF  FA9
3E56:  MOVFF  22,FA8
3E5A:  BCF    FA6.6
3E5C:  BCF    FA6.7
3E5E:  BSF    FA6.2
3E60:  MOVF   FF2,W
3E62:  MOVWF  00
3E64:  BCF    FF2.7
3E66:  MOVLW  55
3E68:  MOVWF  FA7
3E6A:  MOVLW  AA
3E6C:  MOVWF  FA7
3E6E:  BSF    FA6.1
3E70:  BTFSC  FA6.1
3E72:  BRA    3E70
3E74:  BCF    FA6.2
3E76:  MOVF   00,W
3E78:  IORWF  FF2,F
....................       horasL=make8(horas,0); 
3E7A:  MOVFF  40,23
....................       horasH=make8(horas,1); 
3E7E:  MOVFF  41,24
....................       write_eeprom(9,horasL); 
3E82:  MOVLW  09
3E84:  MOVWF  FA9
3E86:  MOVFF  23,FA8
3E8A:  BCF    FA6.6
3E8C:  BCF    FA6.7
3E8E:  BSF    FA6.2
3E90:  MOVFF  FF2,00
3E94:  BCF    FF2.7
3E96:  MOVLW  55
3E98:  MOVWF  FA7
3E9A:  MOVLW  AA
3E9C:  MOVWF  FA7
3E9E:  BSF    FA6.1
3EA0:  BTFSC  FA6.1
3EA2:  BRA    3EA0
3EA4:  BCF    FA6.2
3EA6:  MOVF   00,W
3EA8:  IORWF  FF2,F
....................       delay_ms(20); 
3EAA:  MOVLW  14
3EAC:  MOVLB  0
3EAE:  MOVWF  xD1
3EB0:  CALL   07F2
....................       write_eeprom(10,horasH); 
3EB4:  MOVLW  0A
3EB6:  MOVWF  FA9
3EB8:  MOVFF  24,FA8
3EBC:  BCF    FA6.6
3EBE:  BCF    FA6.7
3EC0:  BSF    FA6.2
3EC2:  MOVF   FF2,W
3EC4:  MOVWF  00
3EC6:  BCF    FF2.7
3EC8:  MOVLB  F
3ECA:  MOVLW  55
3ECC:  MOVWF  FA7
3ECE:  MOVLW  AA
3ED0:  MOVWF  FA7
3ED2:  BSF    FA6.1
3ED4:  BTFSC  FA6.1
3ED6:  BRA    3ED4
3ED8:  BCF    FA6.2
3EDA:  MOVF   00,W
3EDC:  IORWF  FF2,F
....................       delay_ms(20); 
3EDE:  MOVLW  14
3EE0:  MOVLB  0
3EE2:  MOVWF  xD1
3EE4:  CALL   07F2
....................       guardaruv=0; 
3EE8:  CLRF   30
....................    } 
....................     
....................    if(segundos>=60) 
3EEA:  MOVF   21,W
3EEC:  SUBLW  3B
3EEE:  BC    3EF4
....................    { 
....................       segundos=0;minutos++; 
3EF0:  CLRF   21
3EF2:  INCF   22,F
....................    } 
....................    if(minutos==60) 
3EF4:  MOVF   22,W
3EF6:  SUBLW  3C
3EF8:  BNZ   3F02
....................    { 
....................       minutos=0;horas++; 
3EFA:  CLRF   22
3EFC:  INCF   40,F
3EFE:  BTFSC  FD8.2
3F00:  INCF   41,F
....................    }   
....................      
....................    } 
.................... //----------------Fin-Menu100--------------------------------------------------------------   
....................    if(tiemporeset>=60) 
3F02:  MOVF   2F,W
3F04:  SUBLW  3B
3F06:  BC    3F1C
....................    { 
....................       lcd_init();delay_ms(200);lcd_init(); 
3F08:  CALL   0882
3F0C:  MOVLW  C8
3F0E:  MOVWF  xD1
3F10:  CALL   07F2
3F14:  CALL   0882
....................       tiemporeset=0; 
3F18:  CLRF   2F
....................       Cambio=ON; 
3F1A:  BSF    17.5
....................    }    
....................    } 
3F1C:  GOTO   21F8
.................... } 
....................  
3F20:  SLEEP 

Configuration Fuses:
   Word  1: C238   XTPLL IESO FCMEN PLL1 CPUDIV4 USBDIV
   Word  2: 1E3F   BROWNOUT NOWDT BORV20 NOPUT WDT32768 VREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
