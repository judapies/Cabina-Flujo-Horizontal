CCS PCH C Compiler, Version 4.104, 5967               15-feb.-16 11:18

               Filename: H:\JP\JP\Laboratorio\Cabina de Flujo Laminar Horizontal\2016\CFLH 180 Chia\Firmware\CabinaFlujo.lst

               ROM used: 13458 bytes (41%)
                         Largest free fragment is 19306
               RAM used: 203 (10%) at main() level
                         240 (12%) worst case
               Stack:    7 worst case (6 in main + 1 for interrupts)

*
0000:  GOTO   1834
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   00B4
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina de Flujo Laminar Vertical. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz UV, Luz Blanca, Motor Ventilador y Cambio de Contraseña. 
.................... // Permite cambiar la velocidad del motor digitalmente. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,NOVREGEN,NOMCLR// PLL1 para 4 MHz 
.................... //#fuses XT,NOWDT,NOPROTECT,NOLVP,NODEBUG,VREGEN,NOMCLR// PLL1 para 4 MHz 
.................... #use delay(clock=48000000) 
*
0626:  CLRF   FEA
0628:  MOVLW  DE
062A:  MOVWF  FE9
062C:  MOVF   FEF,W
062E:  BZ    064C
0630:  MOVLW  0F
0632:  MOVWF  01
0634:  CLRF   00
0636:  DECFSZ 00,F
0638:  BRA    0636
063A:  DECFSZ 01,F
063C:  BRA    0634
063E:  MOVLW  8F
0640:  MOVWF  00
0642:  DECFSZ 00,F
0644:  BRA    0642
0646:  NOP   
0648:  DECFSZ FEF,F
064A:  BRA    0630
064C:  RETLW  00
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN unused;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN enable;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTB")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_b(LCD_READ); 
....................       lcd.rw = 1; 
....................       delay_cycles(30); 
....................       lcd.enable = 1; 
....................       delay_cycles(30); 
....................       high = lcd.data; 
....................       lcd.enable = 0; 
....................       delay_cycles(30); 
....................       lcd.enable = 1; 
....................       delay_us(30); 
....................       low = lcd.data; 
....................       lcd.enable = 0; 
....................       set_tris_b(LCD_WRITE); 
....................       return( (high<<4) | low); 
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
064E:  SWAPF  xDF,W
0650:  ANDLW  F0
0652:  MOVWF  00
0654:  MOVLW  0F
0656:  ANDWF  F81,W
0658:  IORWF  00,W
065A:  MOVWF  F81
....................       delay_cycles(30); 
065C:  MOVLW  09
065E:  MOVWF  00
0660:  DECFSZ 00,F
0662:  BRA    0660
0664:  BRA    0666
....................       lcd.enable = 1; 
0666:  BSF    F81.3
....................       delay_us(55); 
0668:  MOVLW  DB
066A:  MOVWF  00
066C:  DECFSZ 00,F
066E:  BRA    066C
0670:  BRA    0672
....................       lcd.enable = 0; 
0672:  BCF    F81.3
.................... } 
0674:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
0676:  BCF    F81.1
....................       //while ( bit_test(lcd_read_byte(),7) ) ; 
....................       delay_ms(1); 
0678:  MOVLW  01
067A:  MOVWF  xDE
067C:  RCALL  0626
....................       lcd.rs = address; 
067E:  BTFSS  xDC.0
0680:  BCF    F81.1
0682:  BTFSC  xDC.0
0684:  BSF    F81.1
....................       delay_cycles(30); 
0686:  MOVLW  09
0688:  MOVWF  00
068A:  DECFSZ 00,F
068C:  BRA    068A
068E:  BRA    0690
....................       lcd.rw = 0; 
0690:  BCF    F81.2
....................       delay_cycles(30); 
0692:  MOVLW  09
0694:  MOVWF  00
0696:  DECFSZ 00,F
0698:  BRA    0696
069A:  BRA    069C
....................       lcd.enable = 0; 
069C:  BCF    F81.3
....................       lcd_send_nibble(n >> 4); 
069E:  SWAPF  xDD,W
06A0:  MOVWF  xDE
06A2:  MOVLW  0F
06A4:  ANDWF  xDE,F
06A6:  MOVFF  DE,DF
06AA:  RCALL  064E
....................       lcd_send_nibble(n & 0xf); 
06AC:  MOVF   xDD,W
06AE:  ANDLW  0F
06B0:  MOVWF  xDE
06B2:  MOVWF  xDF
06B4:  RCALL  064E
.................... } 
06B6:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_b(LCD_WRITE); 
06B8:  MOVLW  00
06BA:  MOVWF  F93
....................     lcd.rs = 0; 
06BC:  BCF    F81.1
....................     lcd.rw = 0; 
06BE:  BCF    F81.2
....................     lcd.enable = 0; 
06C0:  BCF    F81.3
....................     delay_ms(15); 
06C2:  MOVLW  0F
06C4:  MOVWF  xDE
06C6:  RCALL  0626
....................     for(i=1;i<=3;++i) { 
06C8:  MOVLW  01
06CA:  MOVWF  xC7
06CC:  MOVF   xC7,W
06CE:  SUBLW  03
06D0:  BNC   06E2
....................        lcd_send_nibble(3); 
06D2:  MOVLW  03
06D4:  MOVWF  xDF
06D6:  RCALL  064E
....................        delay_ms(5); 
06D8:  MOVLW  05
06DA:  MOVWF  xDE
06DC:  RCALL  0626
....................     } 
06DE:  INCF   xC7,F
06E0:  BRA    06CC
....................     lcd_send_nibble(2); 
06E2:  MOVLW  02
06E4:  MOVWF  xDF
06E6:  RCALL  064E
....................     for(i=0;i<=3;++i) 
06E8:  CLRF   xC7
06EA:  MOVF   xC7,W
06EC:  SUBLW  03
06EE:  BNC   070C
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
06F0:  CLRF   03
06F2:  MOVF   xC7,W
06F4:  MOVFF  FF2,C8
06F8:  BCF    FF2.7
06FA:  RCALL  0096
06FC:  BTFSC  xC8.7
06FE:  BSF    FF2.7
0700:  MOVWF  xC8
0702:  CLRF   xDC
0704:  MOVWF  xDD
0706:  RCALL  0676
0708:  INCF   xC7,F
070A:  BRA    06EA
.................... } 
070C:  RETLW  00
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
*
0796:  MOVLW  01
0798:  SUBWF  xDA,W
079A:  ADDLW  FC
079C:  BC    07BC
079E:  ADDLW  04
07A0:  GOTO   07CC
....................      case 1 : address=0x80;break; 
07A4:  MOVLW  80
07A6:  MOVWF  xDB
07A8:  BRA    07BC
....................      case 2 : address=0xc0;break; 
07AA:  MOVLW  C0
07AC:  MOVWF  xDB
07AE:  BRA    07BC
....................      case 3 : address=0x94;break; 
07B0:  MOVLW  94
07B2:  MOVWF  xDB
07B4:  BRA    07BC
....................      case 4 : address=0xd4;break; 
07B6:  MOVLW  D4
07B8:  MOVWF  xDB
07BA:  BRA    07BC
....................    } 
....................    address+=x-1; 
07BC:  MOVLW  01
07BE:  SUBWF  xD9,W
07C0:  ADDWF  xDB,F
....................    lcd_send_byte(0,address); 
07C2:  CLRF   xDC
07C4:  MOVFF  DB,DD
07C8:  RCALL  0676
.................... } 
07CA:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
....................    if(c=='ñ') 
*
07F8:  MOVF   xD8,W
07FA:  SUBLW  F1
07FC:  BNZ   0802
....................    { 
....................       c=238; 
07FE:  MOVLW  EE
0800:  MOVWF  xD8
....................    } 
....................    if(c=='Ñ') 
0802:  MOVF   xD8,W
0804:  SUBLW  D1
0806:  BNZ   080C
....................    { 
....................       c=255; 
0808:  MOVLW  FF
080A:  MOVWF  xD8
....................    } 
....................     
....................    switch (c) { 
080C:  MOVF   xD8,W
080E:  XORLW  0C
0810:  BZ    081C
0812:  XORLW  06
0814:  BZ    0830
0816:  XORLW  02
0818:  BZ    083E
081A:  BRA    0848
....................      case '\f'   : lcd_send_byte(0,1); 
081C:  CLRF   xDC
081E:  MOVLW  01
0820:  MOVWF  xDD
0822:  RCALL  0676
....................                    lcdline=1; 
0824:  MOVLW  01
0826:  MOVWF  16
....................                    delay_ms(2); 
0828:  MOVLW  02
082A:  MOVWF  xDE
082C:  RCALL  0626
....................                                            break; 
082E:  BRA    0854
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
0830:  INCF   16,F
0832:  MOVLW  01
0834:  MOVWF  xD9
0836:  MOVFF  16,DA
083A:  RCALL  0796
083C:  BRA    0854
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
083E:  CLRF   xDC
0840:  MOVLW  10
0842:  MOVWF  xDD
0844:  RCALL  0676
0846:  BRA    0854
....................      default     : lcd_send_byte(1,c);     break; 
0848:  MOVLW  01
084A:  MOVWF  xDC
084C:  MOVFF  D8,DD
0850:  RCALL  0676
0852:  BRA    0854
....................    } 
.................... } 
0854:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... #include <MATH.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
*
14EC:  BCF    xDA.0
....................    y = x; 
14EE:  MOVFF  CE,D3
14F2:  MOVFF  CD,D2
14F6:  MOVFF  CC,D1
14FA:  MOVFF  CB,D0
....................  
....................    if (x < 0) 
14FE:  MOVFF  CE,DE
1502:  MOVFF  CD,DD
1506:  MOVFF  CC,DC
150A:  MOVFF  CB,DB
150E:  CLRF   xE2
1510:  CLRF   xE1
1512:  CLRF   xE0
1514:  CLRF   xDF
1516:  RCALL  0F74
1518:  BNC   1522
....................    { 
....................       s = 1; 
151A:  BSF    xDA.0
....................       y = -y; 
151C:  MOVF   xD1,W
151E:  XORLW  80
1520:  MOVWF  xD1
....................    } 
....................  
....................    if (y <= 32768.0) 
1522:  MOVFF  D3,DE
1526:  MOVFF  D2,DD
152A:  MOVFF  D1,DC
152E:  MOVFF  D0,DB
1532:  CLRF   xE2
1534:  CLRF   xE1
1536:  CLRF   xE0
1538:  MOVLW  8E
153A:  MOVWF  xDF
153C:  RCALL  0F74
153E:  BC    1542
1540:  BNZ   1572
....................   res = (float32)(unsigned int16)y; 
1542:  MOVFF  D3,DE
1546:  MOVFF  D2,DD
154A:  MOVFF  D1,DC
154E:  MOVFF  D0,DB
1552:  RCALL  14B4
1554:  MOVFF  02,E0
1558:  MOVFF  01,DF
155C:  CALL   070E
1560:  MOVFF  03,D7
1564:  MOVFF  02,D6
1568:  MOVFF  01,D5
156C:  MOVFF  00,D4
....................  
....................  else if (y < 10000000.0) 
1570:  BRA    16FA
1572:  MOVFF  D3,DE
1576:  MOVFF  D2,DD
157A:  MOVFF  D1,DC
157E:  MOVFF  D0,DB
1582:  MOVLW  80
1584:  MOVWF  xE2
1586:  MOVLW  96
1588:  MOVWF  xE1
158A:  MOVLW  18
158C:  MOVWF  xE0
158E:  MOVLW  96
1590:  MOVWF  xDF
1592:  RCALL  0F74
1594:  BTFSS  FD8.0
1596:  BRA    16EA
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
1598:  MOVFF  D3,DE
159C:  MOVFF  D2,DD
15A0:  MOVFF  D1,DC
15A4:  MOVFF  D0,DB
15A8:  CLRF   xE2
15AA:  CLRF   xE1
15AC:  CLRF   xE0
15AE:  MOVLW  8E
15B0:  MOVWF  xDF
15B2:  CALL   0BB0
15B6:  MOVFF  03,DE
15BA:  MOVFF  02,DD
15BE:  MOVFF  01,DC
15C2:  MOVFF  00,DB
15C6:  RCALL  14B4
15C8:  MOVFF  02,D9
15CC:  MOVFF  01,D8
....................       y = 32768.0*(y/32768.0 - (float32)l); 
15D0:  MOVFF  D3,DE
15D4:  MOVFF  D2,DD
15D8:  MOVFF  D1,DC
15DC:  MOVFF  D0,DB
15E0:  CLRF   xE2
15E2:  CLRF   xE1
15E4:  CLRF   xE0
15E6:  MOVLW  8E
15E8:  MOVWF  xDF
15EA:  CALL   0BB0
15EE:  MOVFF  00,DB
15F2:  MOVFF  01,DC
15F6:  MOVFF  02,DD
15FA:  MOVFF  03,DE
15FE:  MOVFF  D9,E0
1602:  MOVFF  D8,DF
1606:  CALL   070E
160A:  BSF    FD8.1
160C:  MOVFF  DE,E2
1610:  MOVFF  DD,E1
1614:  MOVFF  DC,E0
1618:  MOVFF  DB,DF
161C:  MOVFF  03,E6
1620:  MOVFF  02,E5
1624:  MOVFF  01,E4
1628:  MOVFF  00,E3
162C:  CALL   0D0A
1630:  CLRF   xDE
1632:  CLRF   xDD
1634:  CLRF   xDC
1636:  MOVLW  8E
1638:  MOVWF  xDB
163A:  MOVFF  03,E2
163E:  MOVFF  02,E1
1642:  MOVFF  01,E0
1646:  MOVFF  00,DF
164A:  RCALL  1182
164C:  MOVFF  03,D3
1650:  MOVFF  02,D2
1654:  MOVFF  01,D1
1658:  MOVFF  00,D0
....................   res = 32768.0*(float32)l; 
165C:  MOVFF  D9,E0
1660:  MOVFF  D8,DF
1664:  CALL   070E
1668:  CLRF   xDE
166A:  CLRF   xDD
166C:  CLRF   xDC
166E:  MOVLW  8E
1670:  MOVWF  xDB
1672:  MOVFF  03,E2
1676:  MOVFF  02,E1
167A:  MOVFF  01,E0
167E:  MOVFF  00,DF
1682:  RCALL  1182
1684:  MOVFF  03,D7
1688:  MOVFF  02,D6
168C:  MOVFF  01,D5
1690:  MOVFF  00,D4
....................   res += (float32)(unsigned int16)y; 
1694:  MOVFF  D3,DE
1698:  MOVFF  D2,DD
169C:  MOVFF  D1,DC
16A0:  MOVFF  D0,DB
16A4:  RCALL  14B4
16A6:  MOVFF  02,E0
16AA:  MOVFF  01,DF
16AE:  CALL   070E
16B2:  BCF    FD8.1
16B4:  MOVFF  D7,E2
16B8:  MOVFF  D6,E1
16BC:  MOVFF  D5,E0
16C0:  MOVFF  D4,DF
16C4:  MOVFF  03,E6
16C8:  MOVFF  02,E5
16CC:  MOVFF  01,E4
16D0:  MOVFF  00,E3
16D4:  CALL   0D0A
16D8:  MOVFF  03,D7
16DC:  MOVFF  02,D6
16E0:  MOVFF  01,D5
16E4:  MOVFF  00,D4
....................  } 
....................  
....................  else 
16E8:  BRA    16FA
....................   res = y; 
16EA:  MOVFF  D3,D7
16EE:  MOVFF  D2,D6
16F2:  MOVFF  D1,D5
16F6:  MOVFF  D0,D4
....................  
....................  y = y - (float32)(unsigned int16)y; 
16FA:  MOVFF  D3,DE
16FE:  MOVFF  D2,DD
1702:  MOVFF  D1,DC
1706:  MOVFF  D0,DB
170A:  RCALL  14B4
170C:  MOVFF  02,E0
1710:  MOVFF  01,DF
1714:  CALL   070E
1718:  BSF    FD8.1
171A:  MOVFF  D3,E2
171E:  MOVFF  D2,E1
1722:  MOVFF  D1,E0
1726:  MOVFF  D0,DF
172A:  MOVFF  03,E6
172E:  MOVFF  02,E5
1732:  MOVFF  01,E4
1736:  MOVFF  00,E3
173A:  CALL   0D0A
173E:  MOVFF  03,D3
1742:  MOVFF  02,D2
1746:  MOVFF  01,D1
174A:  MOVFF  00,D0
....................  
....................  if (s) 
174E:  BTFSS  xDA.0
1750:  BRA    1758
....................   res = -res; 
1752:  MOVF   xD5,W
1754:  XORLW  80
1756:  MOVWF  xD5
....................  
....................  if (y != 0) 
1758:  MOVFF  D3,DE
175C:  MOVFF  D2,DD
1760:  MOVFF  D1,DC
1764:  MOVFF  D0,DB
1768:  CLRF   xE2
176A:  CLRF   xE1
176C:  CLRF   xE0
176E:  CLRF   xDF
1770:  RCALL  0F74
1772:  BZ    17E4
....................  { 
....................   if (s == 1 && n == 0) 
1774:  BTFSS  xDA.0
1776:  BRA    17AC
1778:  MOVF   xCF,F
177A:  BNZ   17AC
....................    res -= 1.0; 
177C:  BSF    FD8.1
177E:  MOVFF  D7,E2
1782:  MOVFF  D6,E1
1786:  MOVFF  D5,E0
178A:  MOVFF  D4,DF
178E:  CLRF   xE6
1790:  CLRF   xE5
1792:  CLRF   xE4
1794:  MOVLW  7F
1796:  MOVWF  xE3
1798:  CALL   0D0A
179C:  MOVFF  03,D7
17A0:  MOVFF  02,D6
17A4:  MOVFF  01,D5
17A8:  MOVFF  00,D4
....................  
....................   if (s == 0 && n == 1) 
17AC:  BTFSC  xDA.0
17AE:  BRA    17E4
17B0:  DECFSZ xCF,W
17B2:  BRA    17E4
....................    res += 1.0; 
17B4:  BCF    FD8.1
17B6:  MOVFF  D7,E2
17BA:  MOVFF  D6,E1
17BE:  MOVFF  D5,E0
17C2:  MOVFF  D4,DF
17C6:  CLRF   xE6
17C8:  CLRF   xE5
17CA:  CLRF   xE4
17CC:  MOVLW  7F
17CE:  MOVWF  xE3
17D0:  CALL   0D0A
17D4:  MOVFF  03,D7
17D8:  MOVFF  02,D6
17DC:  MOVFF  01,D5
17E0:  MOVFF  00,D4
....................  } 
....................  if (x == 0) 
17E4:  MOVFF  CE,DE
17E8:  MOVFF  CD,DD
17EC:  MOVFF  CC,DC
17F0:  MOVFF  CB,DB
17F4:  CLRF   xE2
17F6:  CLRF   xE1
17F8:  CLRF   xE0
17FA:  CLRF   xDF
17FC:  CALL   0F74
1800:  BNZ   180A
....................     res = 0; 
1802:  CLRF   xD7
1804:  CLRF   xD6
1806:  CLRF   xD5
1808:  CLRF   xD4
....................  
....................  return (res); 
180A:  MOVFF  D4,00
180E:  MOVFF  D5,01
1812:  MOVFF  D6,02
1816:  MOVFF  D7,03
.................... } 
181A:  GOTO   1832 (RETURN)
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
181E:  MOVFF  CA,CE
1822:  MOVFF  C9,CD
1826:  MOVFF  C8,CC
182A:  MOVFF  C7,CB
182E:  CLRF   xCF
1830:  BRA    14EC
.................... } 
1832:  RETLW  00
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   UP            input(PIN_A5) 
.................... #define   DOWN          input(PIN_E0) 
.................... #define   RIGHT         input(PIN_E1) 
.................... #define   LEFT          input(PIN_E2) 
....................  
.................... // Definición de otros puertos 
.................... #define   Luz_UV_on         output_bit(PIN_D0,1) 
.................... #define   Luz_UV_off        output_bit(PIN_D0,0) 
.................... #define   Luz_Blanca_on     output_bit(PIN_D1,1) 
.................... #define   Luz_Blanca_off    output_bit(PIN_D1,0) 
.................... #define   Motor_L1_on       output_bit(PIN_D3,1) 
.................... #define   Motor_L1_off      output_bit(PIN_D3,0) 
.................... #define   Motor_L2_on       output_bit(PIN_D2,1) 
.................... #define   Motor_L2_off      output_bit(PIN_D2,0) 
.................... #define   Motor_L3_on       output_bit(PIN_D4,1) 
.................... #define   Motor_L3_off      output_bit(PIN_D4,0) 
.................... #define   Motor_L4_on       output_bit(PIN_D5,1) 
.................... #define   Motor_L4_off      output_bit(PIN_D5,0) 
....................  
.................... short estadouv=0,estadofl=0,estadomv=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,tiempo_cumplido=0,Lectura=0,flaguv=0,flagfl=0,flagmv=0; 
.................... int8 Menu=0, n_opcionH=6,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,segundos=0,minutos=0,horasL=0,horasH=0,G_l=0,G_h=0; 
.................... int8 tempo_minutos=0,tempo_segundos=0,tempo_minutos_pro=0,tempo_segundos_pro=0,r=0,q=0,i=0,unidad2=1,tiemporeset=0,guardaruv=0,negativo=10; 
.................... signed int8   paso=0,Velocidad=1; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 Entero=0,Decimal1=0,Decimal2=0,Entero1=0,Decimal12=0; 
.................... int16 tiempos,horas=0,G16=0; 
.................... float PromPresion[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float V1=0.0,Presion=0.0,Saturacion=0.0,CaidaPresion=0.0,Diferencia=0.0,zero_fabrica=235.0; 
.................... float Temporal1=0.0,Temporal12=0.0,Ajuste1=1.0,x_uno=0,G=2; 
....................  
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    set_timer1(5536);  // 5 ms 
*
00B4:  MOVLW  15
00B6:  MOVWF  FCF
00B8:  MOVLW  A0
00BA:  MOVWF  FCE
....................    tiempos++; 
00BC:  INCF   45,F
00BE:  BTFSC  FD8.2
00C0:  INCF   46,F
....................    if(tiempos>=200)   // Ha transcurrido una decima de segundo (PIC18F4550 con XT = 16MHZ) 
00C2:  MOVF   46,F
00C4:  BNZ   00CC
00C6:  MOVF   45,W
00C8:  SUBLW  C7
00CA:  BC    0100
....................    {tiempos=0;tiemporeset++;Lectura=1; 
00CC:  CLRF   46
00CE:  CLRF   45
00D0:  INCF   30,F
00D2:  BSF    18.0
....................    //----------------------------- Tiempo Total-----------------------------// 
....................    if(estadouv==1) 
00D4:  BTFSS  17.0
00D6:  BRA    0100
....................    { 
....................       segundos++; 
00D8:  INCF   22,F
....................       if(tiempo_cumplido==0) 
00DA:  BTFSC  17.7
00DC:  BRA    0100
....................       { 
....................          if(tempo_segundos>0) 
00DE:  MOVF   29,F
00E0:  BZ    00E6
....................          { 
....................             tempo_segundos--; 
00E2:  DECF   29,F
....................          } 
....................          else 
00E4:  BRA    0100
....................          { 
....................             if(tempo_minutos>0) 
00E6:  MOVF   28,F
00E8:  BZ    00F2
....................             { 
....................                tempo_minutos--; 
00EA:  DECF   28,F
....................                tempo_segundos=59; 
00EC:  MOVLW  3B
00EE:  MOVWF  29
....................             } 
....................             else 
00F0:  BRA    0100
....................             { 
....................                //tiempo_cumplido=1; 
....................                estadouv=0;Luz_UV_off; 
00F2:  BCF    17.0
00F4:  BCF    F8C.0
00F6:  BCF    F95.0
....................                tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
00F8:  MOVFF  2A,28
00FC:  MOVFF  2B,29
....................             } 
....................          } 
....................       } 
....................    } 
....................          
....................    } 
.................... } 
....................  
....................  
0100:  BCF    F9E.0
0102:  GOTO   0054
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {   
....................    if(x==1) 
*
09D4:  DECFSZ xC8,W
09D6:  BRA    09EC
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Temporizador UV    ");} 
09D8:  MOVLW  02
09DA:  MOVWF  xD9
09DC:  MOVFF  C9,DA
09E0:  RCALL  0796
09E2:  MOVLW  06
09E4:  MOVWF  FF6
09E6:  MOVLW  01
09E8:  MOVWF  FF7
09EA:  RCALL  0856
....................    if(x==2) 
09EC:  MOVF   xC8,W
09EE:  SUBLW  02
09F0:  BNZ   0A06
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Velocidad Motor    ");} 
09F2:  MOVLW  02
09F4:  MOVWF  xD9
09F6:  MOVFF  C9,DA
09FA:  RCALL  0796
09FC:  MOVLW  1A
09FE:  MOVWF  FF6
0A00:  MOVLW  01
0A02:  MOVWF  FF7
0A04:  RCALL  0856
....................    if(x==3) 
0A06:  MOVF   xC8,W
0A08:  SUBLW  03
0A0A:  BNZ   0A20
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
0A0C:  MOVLW  02
0A0E:  MOVWF  xD9
0A10:  MOVFF  C9,DA
0A14:  RCALL  0796
0A16:  MOVLW  2E
0A18:  MOVWF  FF6
0A1A:  MOVLW  01
0A1C:  MOVWF  FF7
0A1E:  RCALL  0856
....................    if(x==4) 
0A20:  MOVF   xC8,W
0A22:  SUBLW  04
0A24:  BNZ   0A3A
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo Trabajo UV  ");} 
0A26:  MOVLW  02
0A28:  MOVWF  xD9
0A2A:  MOVFF  C9,DA
0A2E:  RCALL  0796
0A30:  MOVLW  42
0A32:  MOVWF  FF6
0A34:  MOVLW  01
0A36:  MOVWF  FF7
0A38:  RCALL  0856
....................    if(x==5) 
0A3A:  MOVF   xC8,W
0A3C:  SUBLW  05
0A3E:  BNZ   0A54
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Punto Cero         ");} 
0A40:  MOVLW  02
0A42:  MOVWF  xD9
0A44:  MOVFF  C9,DA
0A48:  RCALL  0796
0A4A:  MOVLW  56
0A4C:  MOVWF  FF6
0A4E:  MOVLW  01
0A50:  MOVWF  FF7
0A52:  RCALL  0856
.................... } 
0A54:  RETLW  00
....................  
.................... void velocidades(int8 x)// Funcion para imprimir mensajes de Menu Principal. 
.................... {  if(x==0) 
*
0ABC:  MOVF   xC9,F
0ABE:  BNZ   0AD0
....................       {Motor_L2_off;Motor_L3_off;Motor_L4_off;Motor_L1_off;} 
0AC0:  BCF    F8C.2
0AC2:  BCF    F95.2
0AC4:  BCF    F8C.4
0AC6:  BCF    F95.4
0AC8:  BCF    F8C.5
0ACA:  BCF    F95.5
0ACC:  BCF    F8C.3
0ACE:  BCF    F95.3
....................    if(x==1) 
0AD0:  DECFSZ xC9,W
0AD2:  BRA    0AE4
....................       {Motor_L2_off;Motor_L3_on;Motor_L4_off;Motor_L1_on;} 
0AD4:  BCF    F8C.2
0AD6:  BCF    F95.2
0AD8:  BSF    F8C.4
0ADA:  BCF    F95.4
0ADC:  BCF    F8C.5
0ADE:  BCF    F95.5
0AE0:  BSF    F8C.3
0AE2:  BCF    F95.3
....................    if(x==2) 
0AE4:  MOVF   xC9,W
0AE6:  SUBLW  02
0AE8:  BNZ   0AFA
....................       {Motor_L3_off;Motor_L4_on;Motor_L1_off;Motor_L2_on;} 
0AEA:  BCF    F8C.4
0AEC:  BCF    F95.4
0AEE:  BSF    F8C.5
0AF0:  BCF    F95.5
0AF2:  BCF    F8C.3
0AF4:  BCF    F95.3
0AF6:  BSF    F8C.2
0AF8:  BCF    F95.2
.................... } 
0AFA:  RETLW  00
....................  
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
0744:  RLCF   xCC,W
0746:  MOVWF  00
0748:  RLCF   00,F
074A:  MOVLW  FC
074C:  ANDWF  00,F
074E:  MOVFF  00,01
0752:  MOVF   FC2,W
0754:  ANDLW  C3
0756:  IORWF  00,W
0758:  MOVWF  FC2
075A:  MOVLW  0A
075C:  MOVWF  xDE
075E:  RCALL  0626
0760:  BSF    FC2.1
0762:  BTFSC  FC2.1
0764:  BRA    0762
0766:  MOVFF  FC4,03
076A:  MOVFF  FC3,DF
076E:  MOVFF  FC4,E0
0772:  RCALL  070E
0774:  MOVFF  03,D0
0778:  MOVFF  02,CF
077C:  MOVFF  01,CE
0780:  MOVFF  00,CD
0784:  MOVFF  CD,00
0788:  MOVFF  CE,01
078C:  MOVFF  CF,02
0790:  MOVFF  D0,03
.................... } 
0794:  RETLW  00
....................  
.................... float Leer_Sensor_Presion(int media){ 
*
0FEA:  CLRF   xCB
0FEC:  CLRF   xCA
0FEE:  CLRF   xC9
0FF0:  CLRF   xC8
....................    float promediopresion=0.0; 
....................    /*if(negativo==10) 
....................     { 
....................       x_uno=sensores(1)+Diferencia; 
....................     } 
....................     if(negativo==20) 
....................     { 
....................       x_uno=sensores(1)-Diferencia; 
....................     }*/ 
....................    V1=sensores(1);  
0FF2:  MOVLW  01
0FF4:  MOVWF  xCC
0FF6:  CALL   0744
0FFA:  MOVFF  03,9E
0FFE:  MOVFF  02,9D
1002:  MOVFF  01,9C
1006:  MOVFF  00,9B
....................    //V1 = (x_uno*5.0)/1023.0;   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
....................    Presion=(V1/G)-1.0;// Presion=(Voltaje/Ganancia)-1 
100A:  MOVFF  9E,DE
100E:  MOVFF  9D,DD
1012:  MOVFF  9C,DC
1016:  MOVFF  9B,DB
101A:  MOVFF  C6,E2
101E:  MOVFF  C5,E1
1022:  MOVFF  C4,E0
1026:  MOVFF  C3,DF
102A:  RCALL  0BB0
102C:  MOVFF  00,CC
1030:  MOVFF  01,CD
1034:  MOVFF  02,CE
1038:  MOVFF  03,CF
103C:  BSF    FD8.1
103E:  MOVFF  03,E2
1042:  MOVFF  02,E1
1046:  MOVFF  01,E0
104A:  MOVFF  00,DF
104E:  CLRF   xE6
1050:  CLRF   xE5
1052:  CLRF   xE4
1054:  MOVLW  7F
1056:  MOVWF  xE3
1058:  RCALL  0D0A
105A:  MOVFF  03,A2
105E:  MOVFF  02,A1
1062:  MOVFF  01,A0
1066:  MOVFF  00,9F
....................     
....................    if(Presion<0.0) 
106A:  MOVFF  A2,DE
106E:  MOVFF  A1,DD
1072:  MOVFF  A0,DC
1076:  MOVFF  9F,DB
107A:  CLRF   xE2
107C:  CLRF   xE1
107E:  CLRF   xE0
1080:  CLRF   xDF
1082:  RCALL  0F74
1084:  BNC   108E
....................    { 
....................       Presion=0.0; 
1086:  CLRF   xA2
1088:  CLRF   xA1
108A:  CLRF   xA0
108C:  CLRF   x9F
....................    } 
....................  
....................    if(r>media-1) 
108E:  MOVLW  01
1090:  SUBWF  xC7,W
1092:  SUBWF  2C,W
1094:  BZ    109A
1096:  BNC   109A
....................    {r=0;} 
1098:  CLRF   2C
....................    PromPresion[r]=Presion;r++; 
109A:  MOVF   2C,W
109C:  MULLW  04
109E:  MOVF   FF3,W
10A0:  CLRF   03
10A2:  ADDLW  4B
10A4:  MOVWF  FE9
10A6:  MOVLW  00
10A8:  ADDWFC 03,W
10AA:  MOVWF  FEA
10AC:  MOVFF  9F,FEF
10B0:  MOVFF  A0,FEC
10B4:  MOVFF  A1,FEC
10B8:  MOVFF  A2,FEC
10BC:  INCF   2C,F
....................           
....................    for(q=0;q<=(media-1);q++) 
10BE:  CLRF   2D
10C0:  MOVLW  01
10C2:  SUBWF  xC7,W
10C4:  SUBWF  2D,W
10C6:  BZ    10CA
10C8:  BC    1134
....................    { 
....................       promediopresion+=PromPresion[q]; 
10CA:  MOVF   2D,W
10CC:  MULLW  04
10CE:  MOVF   FF3,W
10D0:  CLRF   03
10D2:  ADDLW  4B
10D4:  MOVWF  FE9
10D6:  MOVLW  00
10D8:  ADDWFC 03,W
10DA:  MOVWF  FEA
10DC:  MOVFF  FEF,00
10E0:  MOVFF  FEC,01
10E4:  MOVFF  FEC,02
10E8:  MOVFF  FEC,03
10EC:  MOVFF  FEA,CD
10F0:  MOVFF  FE9,CC
10F4:  BCF    FD8.1
10F6:  MOVFF  CB,E2
10FA:  MOVFF  CA,E1
10FE:  MOVFF  C9,E0
1102:  MOVFF  C8,DF
1106:  MOVFF  03,E6
110A:  MOVFF  02,E5
110E:  MOVFF  01,E4
1112:  MOVFF  00,E3
1116:  RCALL  0D0A
1118:  MOVFF  CD,FEA
111C:  MOVFF  CC,FE9
1120:  MOVFF  03,CB
1124:  MOVFF  02,CA
1128:  MOVFF  01,C9
112C:  MOVFF  00,C8
....................    }  
1130:  INCF   2D,F
1132:  BRA    10C0
....................    promediopresion=promediopresion/media;    
1134:  CLRF   xE0
1136:  MOVFF  C7,DF
113A:  CALL   070E
113E:  MOVFF  CB,DE
1142:  MOVFF  CA,DD
1146:  MOVFF  C9,DC
114A:  MOVFF  C8,DB
114E:  MOVFF  03,E2
1152:  MOVFF  02,E1
1156:  MOVFF  01,E0
115A:  MOVFF  00,DF
115E:  RCALL  0BB0
1160:  MOVFF  03,CB
1164:  MOVFF  02,CA
1168:  MOVFF  01,C9
116C:  MOVFF  00,C8
....................     
....................    return promediopresion; 
1170:  MOVFF  C8,00
1174:  MOVFF  C9,01
1178:  MOVFF  CA,02
117C:  MOVFF  CB,03
.................... } 
1180:  RETLW  00
....................  
.................... void Limita(void){ 
....................    if(Velocidad>4) 
*
0876:  BTFSC  34.7
0878:  BRA    0884
087A:  MOVF   34,W
087C:  SUBLW  04
087E:  BC    0884
....................       Velocidad=1; 
0880:  MOVLW  01
0882:  MOVWF  34
....................    if(Contrasena[0]>9) 
0884:  MOVF   3C,W
0886:  SUBLW  09
0888:  BC    088C
....................       Contrasena[0]=0; 
088A:  CLRF   3C
....................    if(Contrasena[1]>9) 
088C:  MOVF   3D,W
088E:  SUBLW  09
0890:  BC    0894
....................       Contrasena[1]=0; 
0892:  CLRF   3D
....................    if(Contrasena[2]>9) 
0894:  MOVF   3E,W
0896:  SUBLW  09
0898:  BC    089C
....................       Contrasena[2]=0; 
089A:  CLRF   3E
....................    if(Contrasena[3]>9) 
089C:  MOVF   3F,W
089E:  SUBLW  09
08A0:  BC    08A4
....................       Contrasena[3]=0; 
08A2:  CLRF   3F
....................    if(tempo_minutos>60) 
08A4:  MOVF   28,W
08A6:  SUBLW  3C
08A8:  BC    08AC
....................       tempo_minutos=0; 
08AA:  CLRF   28
....................    if(tempo_segundos) 
08AC:  MOVF   29,F
08AE:  BZ    08B2
....................       tempo_segundos=0; 
08B0:  CLRF   29
....................    if(segundos>60) 
08B2:  MOVF   22,W
08B4:  SUBLW  3C
08B6:  BC    08BA
....................       segundos=0; 
08B8:  CLRF   22
....................    if(minutos>60) 
08BA:  MOVF   23,W
08BC:  SUBLW  3C
08BE:  BC    08C2
....................       minutos=0;  
08C0:  CLRF   23
.................... } 
08C2:  GOTO   1C12 (RETURN)
.................... void main () 
.................... { 
*
1834:  CLRF   FF8
1836:  BCF    FD0.7
1838:  BSF    07.7
183A:  CLRF   FEA
183C:  CLRF   FE9
183E:  BCF    17.0
1840:  BCF    17.1
1842:  BCF    17.2
1844:  BCF    17.3
1846:  BCF    17.4
1848:  BCF    17.5
184A:  BCF    17.6
184C:  BCF    17.7
184E:  BCF    18.0
1850:  BCF    18.1
1852:  BCF    18.2
1854:  BCF    18.3
1856:  CLRF   19
1858:  MOVLW  06
185A:  MOVWF  1A
185C:  MOVLW  02
185E:  MOVWF  1B
1860:  MOVLW  0B
1862:  MOVWF  1C
1864:  MOVLW  02
1866:  MOVWF  1D
1868:  MOVLW  03
186A:  MOVWF  1E
186C:  MOVLW  02
186E:  MOVWF  1F
1870:  MOVWF  20
1872:  MOVLW  04
1874:  MOVWF  21
1876:  CLRF   22
1878:  CLRF   23
187A:  CLRF   24
187C:  CLRF   25
187E:  CLRF   26
1880:  CLRF   27
1882:  CLRF   28
1884:  CLRF   29
1886:  CLRF   2A
1888:  CLRF   2B
188A:  CLRF   2C
188C:  CLRF   2D
188E:  CLRF   2E
1890:  MOVLW  01
1892:  MOVWF  2F
1894:  CLRF   30
1896:  CLRF   31
1898:  MOVLW  0A
189A:  MOVWF  32
189C:  CLRF   33
189E:  MOVLW  01
18A0:  MOVWF  34
18A2:  CLRF   40
18A4:  CLRF   41
18A6:  CLRF   42
18A8:  CLRF   43
18AA:  CLRF   44
18AC:  CLRF   48
18AE:  CLRF   47
18B0:  CLRF   4A
18B2:  CLRF   49
18B4:  CLRF   x9E
18B6:  CLRF   x9D
18B8:  CLRF   x9C
18BA:  CLRF   x9B
18BC:  CLRF   xA2
18BE:  CLRF   xA1
18C0:  CLRF   xA0
18C2:  CLRF   x9F
18C4:  CLRF   xA6
18C6:  CLRF   xA5
18C8:  CLRF   xA4
18CA:  CLRF   xA3
18CC:  CLRF   xAA
18CE:  CLRF   xA9
18D0:  CLRF   xA8
18D2:  CLRF   xA7
18D4:  CLRF   xAE
18D6:  CLRF   xAD
18D8:  CLRF   xAC
18DA:  CLRF   xAB
18DC:  CLRF   xB2
18DE:  CLRF   xB1
18E0:  MOVLW  6B
18E2:  MOVWF  xB0
18E4:  MOVLW  86
18E6:  MOVWF  xAF
18E8:  CLRF   xB6
18EA:  CLRF   xB5
18EC:  CLRF   xB4
18EE:  CLRF   xB3
18F0:  CLRF   xBA
18F2:  CLRF   xB9
18F4:  CLRF   xB8
18F6:  CLRF   xB7
18F8:  CLRF   xBE
18FA:  CLRF   xBD
18FC:  CLRF   xBC
18FE:  MOVLW  7F
1900:  MOVWF  xBB
1902:  CLRF   xC2
1904:  CLRF   xC1
1906:  CLRF   xC0
1908:  CLRF   xBF
190A:  CLRF   xC6
190C:  CLRF   xC5
190E:  CLRF   xC4
1910:  MOVLW  80
1912:  MOVWF  xC3
1914:  MOVF   FC1,W
1916:  ANDLW  C0
1918:  IORLW  0F
191A:  MOVWF  FC1
191C:  MOVLW  07
191E:  MOVWF  FB4
1920:  MOVLW  3E
1922:  MOVWF  35
1924:  MOVLW  20
1926:  MOVWF  36
1928:  MOVLW  5E
192A:  MOVWF  37
192C:  CLRF   38
192E:  CLRF   39
1930:  CLRF   3A
1932:  CLRF   3B
1934:  CLRF   3C
1936:  CLRF   3D
1938:  CLRF   3E
193A:  CLRF   3F
193C:  CLRF   4B
193E:  CLRF   4C
1940:  CLRF   4D
1942:  CLRF   4E
1944:  CLRF   4F
1946:  CLRF   50
1948:  CLRF   51
194A:  CLRF   52
194C:  CLRF   53
194E:  CLRF   54
1950:  CLRF   55
1952:  CLRF   56
1954:  CLRF   57
1956:  CLRF   58
1958:  CLRF   59
195A:  CLRF   5A
195C:  CLRF   5B
195E:  CLRF   5C
1960:  CLRF   5D
1962:  CLRF   5E
1964:  CLRF   5F
1966:  CLRF   x60
1968:  CLRF   x61
196A:  CLRF   x62
196C:  CLRF   x63
196E:  CLRF   x64
1970:  CLRF   x65
1972:  CLRF   x66
1974:  CLRF   x67
1976:  CLRF   x68
1978:  CLRF   x69
197A:  CLRF   x6A
197C:  CLRF   x6B
197E:  CLRF   x6C
1980:  CLRF   x6D
1982:  CLRF   x6E
1984:  CLRF   x6F
1986:  CLRF   x70
1988:  CLRF   x71
198A:  CLRF   x72
198C:  CLRF   x73
198E:  CLRF   x74
1990:  CLRF   x75
1992:  CLRF   x76
1994:  CLRF   x77
1996:  CLRF   x78
1998:  CLRF   x79
199A:  CLRF   x7A
199C:  CLRF   x7B
199E:  CLRF   x7C
19A0:  CLRF   x7D
19A2:  CLRF   x7E
19A4:  CLRF   x7F
19A6:  CLRF   x80
19A8:  CLRF   x81
19AA:  CLRF   x82
19AC:  CLRF   x83
19AE:  CLRF   x84
19B0:  CLRF   x85
19B2:  CLRF   x86
19B4:  CLRF   x87
19B6:  CLRF   x88
19B8:  CLRF   x89
19BA:  CLRF   x8A
19BC:  CLRF   x8B
19BE:  CLRF   x8C
19C0:  CLRF   x8D
19C2:  CLRF   x8E
19C4:  CLRF   x8F
19C6:  CLRF   x90
19C8:  CLRF   x91
19CA:  CLRF   x92
19CC:  CLRF   x93
19CE:  CLRF   x94
19D0:  CLRF   x95
19D2:  CLRF   x96
19D4:  CLRF   x97
19D6:  CLRF   x98
19D8:  CLRF   x99
19DA:  CLRF   x9A
....................    output_d(0); 
19DC:  CLRF   F95
19DE:  CLRF   F8C
....................    lcd_init(); 
19E0:  CALL   06B8
....................    enable_interrupts(global); 
19E4:  MOVLW  C0
19E6:  IORWF  FF2,F
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
19E8:  MOVLW  85
19EA:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
19EC:  BSF    F9D.0
....................    setup_adc_ports(AN0_TO_AN1); 
19EE:  MOVF   FC1,W
19F0:  ANDLW  C0
19F2:  IORLW  0D
19F4:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
19F6:  BCF    FC0.0
19F8:  BSF    FC0.1
19FA:  BCF    FC0.2
19FC:  BSF    FC0.7
19FE:  BSF    FC2.0
....................    sensores(0); 
1A00:  CLRF   xCC
1A02:  CALL   0744
....................    lcd_gotoxy(1,1); 
1A06:  MOVLW  01
1A08:  MOVWF  xD9
1A0A:  MOVWF  xDA
1A0C:  CALL   0796
....................    printf(lcd_putc," CABINA  DE   FLUJO "); 
1A10:  MOVLW  6A
1A12:  MOVWF  FF6
1A14:  MOVLW  01
1A16:  MOVWF  FF7
1A18:  CALL   0856
....................    lcd_gotoxy(1,2); 
1A1C:  MOVLW  01
1A1E:  MOVWF  xD9
1A20:  MOVLW  02
1A22:  MOVWF  xDA
1A24:  CALL   0796
....................    printf(lcd_putc," LAMINAR HORIZONTAL "); 
1A28:  MOVLW  80
1A2A:  MOVWF  FF6
1A2C:  MOVLW  01
1A2E:  MOVWF  FF7
1A30:  CALL   0856
....................    lcd_gotoxy(1,3); 
1A34:  MOVLW  01
1A36:  MOVWF  xD9
1A38:  MOVLW  03
1A3A:  MOVWF  xDA
1A3C:  CALL   0796
....................    printf(lcd_putc,"    JP INGLOBAL     "); 
1A40:  MOVLW  96
1A42:  MOVWF  FF6
1A44:  MOVLW  01
1A46:  MOVWF  FF7
1A48:  CALL   0856
....................    lcd_gotoxy(1,4); 
1A4C:  MOVLW  01
1A4E:  MOVWF  xD9
1A50:  MOVLW  04
1A52:  MOVWF  xDA
1A54:  CALL   0796
....................    printf(lcd_putc,"   REF:  JPCFH180   "); 
1A58:  MOVLW  AC
1A5A:  MOVWF  FF6
1A5C:  MOVLW  01
1A5E:  MOVWF  FF7
1A60:  CALL   0856
....................    delay_ms(2000); 
1A64:  MOVLW  08
1A66:  MOVWF  xC7
1A68:  MOVLW  FA
1A6A:  MOVWF  xDE
1A6C:  CALL   0626
1A70:  DECFSZ xC7,F
1A72:  BRA    1A68
....................    printf(lcd_putc,"\f"); 
1A74:  MOVLW  0C
1A76:  MOVWF  xD8
1A78:  CALL   07F8
....................     
....................    //Solo para simulacion 
....................    //write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20); 
....................    //write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
....................    Velocidad=read_eeprom(5); 
1A7C:  MOVFF  FF2,C7
1A80:  BCF    FF2.7
1A82:  MOVLW  05
1A84:  MOVWF  FA9
1A86:  BCF    FA6.6
1A88:  BCF    FA6.7
1A8A:  BSF    FA6.0
1A8C:  MOVF   FA8,W
1A8E:  BTFSC  xC7.7
1A90:  BSF    FF2.7
1A92:  MOVWF  34
....................     
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0);delay_ms(20); contrasena[1]=read_eeprom(1);delay_ms(20); 
1A94:  MOVFF  FF2,C7
1A98:  BCF    FF2.7
1A9A:  CLRF   FA9
1A9C:  BCF    FA6.6
1A9E:  BCF    FA6.7
1AA0:  BSF    FA6.0
1AA2:  MOVF   FA8,W
1AA4:  BTFSC  xC7.7
1AA6:  BSF    FF2.7
1AA8:  MOVWF  3C
1AAA:  MOVLW  14
1AAC:  MOVWF  xDE
1AAE:  CALL   0626
1AB2:  MOVFF  FF2,C7
1AB6:  BCF    FF2.7
1AB8:  MOVLW  01
1ABA:  MOVWF  FA9
1ABC:  BCF    FA6.6
1ABE:  BCF    FA6.7
1AC0:  BSF    FA6.0
1AC2:  MOVF   FA8,W
1AC4:  BTFSC  xC7.7
1AC6:  BSF    FF2.7
1AC8:  MOVWF  3D
1ACA:  MOVLW  14
1ACC:  MOVWF  xDE
1ACE:  CALL   0626
....................    contrasena[2]=read_eeprom(2);delay_ms(20); contrasena[3]=read_eeprom(3);delay_ms(20); 
1AD2:  MOVFF  FF2,C7
1AD6:  BCF    FF2.7
1AD8:  MOVLW  02
1ADA:  MOVWF  FA9
1ADC:  BCF    FA6.6
1ADE:  BCF    FA6.7
1AE0:  BSF    FA6.0
1AE2:  MOVF   FA8,W
1AE4:  BTFSC  xC7.7
1AE6:  BSF    FF2.7
1AE8:  MOVWF  3E
1AEA:  MOVLW  14
1AEC:  MOVWF  xDE
1AEE:  CALL   0626
1AF2:  MOVFF  FF2,C7
1AF6:  BCF    FF2.7
1AF8:  MOVLW  03
1AFA:  MOVWF  FA9
1AFC:  BCF    FA6.6
1AFE:  BCF    FA6.7
1B00:  BSF    FA6.0
1B02:  MOVF   FA8,W
1B04:  BTFSC  xC7.7
1B06:  BSF    FF2.7
1B08:  MOVWF  3F
1B0A:  MOVLW  14
1B0C:  MOVWF  xDE
1B0E:  CALL   0626
....................    tempo_minutos=read_eeprom(20);tempo_segundos=read_eeprom(21); 
1B12:  MOVFF  FF2,C7
1B16:  BCF    FF2.7
1B18:  MOVLW  14
1B1A:  MOVWF  FA9
1B1C:  BCF    FA6.6
1B1E:  BCF    FA6.7
1B20:  BSF    FA6.0
1B22:  MOVF   FA8,W
1B24:  BTFSC  xC7.7
1B26:  BSF    FF2.7
1B28:  MOVWF  28
1B2A:  MOVFF  FF2,C7
1B2E:  BCF    FF2.7
1B30:  MOVLW  15
1B32:  MOVWF  FA9
1B34:  BCF    FA6.6
1B36:  BCF    FA6.7
1B38:  BSF    FA6.0
1B3A:  MOVF   FA8,W
1B3C:  BTFSC  xC7.7
1B3E:  BSF    FF2.7
1B40:  MOVWF  29
....................    segundos=read_eeprom(50);minutos=read_eeprom(51);horasL=read_eeprom(52);horasH=read_eeprom(53);  
1B42:  MOVFF  FF2,C7
1B46:  BCF    FF2.7
1B48:  MOVLW  32
1B4A:  MOVWF  FA9
1B4C:  BCF    FA6.6
1B4E:  BCF    FA6.7
1B50:  BSF    FA6.0
1B52:  MOVF   FA8,W
1B54:  BTFSC  xC7.7
1B56:  BSF    FF2.7
1B58:  MOVWF  22
1B5A:  MOVFF  FF2,C7
1B5E:  BCF    FF2.7
1B60:  MOVLW  33
1B62:  MOVWF  FA9
1B64:  BCF    FA6.6
1B66:  BCF    FA6.7
1B68:  BSF    FA6.0
1B6A:  MOVF   FA8,W
1B6C:  BTFSC  xC7.7
1B6E:  BSF    FF2.7
1B70:  MOVWF  23
1B72:  MOVFF  FF2,C7
1B76:  BCF    FF2.7
1B78:  MOVLW  34
1B7A:  MOVWF  FA9
1B7C:  BCF    FA6.6
1B7E:  BCF    FA6.7
1B80:  BSF    FA6.0
1B82:  MOVF   FA8,W
1B84:  BTFSC  xC7.7
1B86:  BSF    FF2.7
1B88:  MOVWF  24
1B8A:  MOVFF  FF2,C7
1B8E:  BCF    FF2.7
1B90:  MOVLW  35
1B92:  MOVWF  FA9
1B94:  BCF    FA6.6
1B96:  BCF    FA6.7
1B98:  BSF    FA6.0
1B9A:  MOVF   FA8,W
1B9C:  BTFSC  xC7.7
1B9E:  BSF    FF2.7
1BA0:  MOVWF  25
....................     
....................    G_l=read_eeprom(60); 
1BA2:  MOVFF  FF2,C7
1BA6:  BCF    FF2.7
1BA8:  MOVLW  3C
1BAA:  MOVWF  FA9
1BAC:  BCF    FA6.6
1BAE:  BCF    FA6.7
1BB0:  BSF    FA6.0
1BB2:  MOVF   FA8,W
1BB4:  BTFSC  xC7.7
1BB6:  BSF    FF2.7
1BB8:  MOVWF  26
....................    G_h=read_eeprom(61); 
1BBA:  MOVFF  FF2,C7
1BBE:  BCF    FF2.7
1BC0:  MOVLW  3D
1BC2:  MOVWF  FA9
1BC4:  BCF    FA6.6
1BC6:  BCF    FA6.7
1BC8:  BSF    FA6.0
1BCA:  MOVF   FA8,W
1BCC:  BTFSC  xC7.7
1BCE:  BSF    FF2.7
1BD0:  MOVWF  27
....................    G16=make16(G_h,G_l); 
1BD2:  MOVFF  27,4A
1BD6:  MOVFF  26,49
....................    G=G16; 
1BDA:  MOVFF  4A,E0
1BDE:  MOVFF  49,DF
1BE2:  CALL   070E
1BE6:  MOVFF  03,C6
1BEA:  MOVFF  02,C5
1BEE:  MOVFF  01,C4
1BF2:  MOVFF  00,C3
....................  
....................    negativo=read_eeprom(70); 
1BF6:  MOVFF  FF2,C7
1BFA:  BCF    FF2.7
1BFC:  MOVLW  46
1BFE:  MOVWF  FA9
1C00:  BCF    FA6.6
1C02:  BCF    FA6.7
1C04:  BSF    FA6.0
1C06:  MOVF   FA8,W
1C08:  BTFSC  xC7.7
1C0A:  BSF    FF2.7
1C0C:  MOVWF  32
....................    Limita(); 
1C0E:  GOTO   0876
....................    horas=make16(horasH,horasL); 
1C12:  MOVFF  25,48
1C16:  MOVFF  24,47
....................    tempo_minutos_pro=tempo_minutos;tempo_segundos_pro=tempo_segundos; 
1C1A:  MOVFF  28,2A
1C1E:  MOVFF  29,2B
....................    //segundos=read_eeprom(50);minutos=read_eeprom(51);horas=read_eeprom(52); 
....................    
....................    while(true){ 
....................  
.................... //------------Menu0------------------------------------------------------------------    
....................    if(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
1C22:  MOVF   19,F
1C24:  BTFSS  FD8.2
1C26:  BRA    1FD0
....................    lcd_gotoxy(1,1); 
1C28:  MOVLW  01
1C2A:  MOVWF  xD9
1C2C:  MOVWF  xDA
1C2E:  CALL   0796
....................    printf(lcd_putc,"     Ingrese        "); 
1C32:  MOVLW  C2
1C34:  MOVWF  FF6
1C36:  MOVLW  01
1C38:  MOVWF  FF7
1C3A:  CALL   0856
....................    lcd_gotoxy(1,2); 
1C3E:  MOVLW  01
1C40:  MOVWF  xD9
1C42:  MOVLW  02
1C44:  MOVWF  xDA
1C46:  CALL   0796
....................    printf(lcd_putc,"    Contraseña      "); 
1C4A:  MOVLW  D8
1C4C:  MOVWF  FF6
1C4E:  MOVLW  01
1C50:  MOVWF  FF7
1C52:  CALL   0856
....................    lcd_gotoxy(1,3); 
1C56:  MOVLW  01
1C58:  MOVWF  xD9
1C5A:  MOVLW  03
1C5C:  MOVWF  xDA
1C5E:  CALL   0796
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
1C62:  MOVLW  EE
1C64:  MOVWF  FF6
1C66:  MOVLW  01
1C68:  MOVWF  FF7
1C6A:  MOVLW  0A
1C6C:  MOVWF  xCB
1C6E:  CALL   08C6
1C72:  MOVFF  38,C7
1C76:  MOVLW  1F
1C78:  MOVWF  xC8
1C7A:  CALL   090C
1C7E:  MOVFF  39,C7
1C82:  MOVLW  1F
1C84:  MOVWF  xC8
1C86:  CALL   090C
1C8A:  MOVFF  3A,C7
1C8E:  MOVLW  1F
1C90:  MOVWF  xC8
1C92:  CALL   090C
1C96:  MOVFF  3B,C7
1C9A:  MOVLW  1F
1C9C:  MOVWF  xC8
1C9E:  CALL   090C
1CA2:  MOVLW  20
1CA4:  MOVWF  xD8
1CA6:  CALL   07F8
1CAA:  MOVLW  20
1CAC:  MOVWF  xD8
1CAE:  CALL   07F8
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
1CB2:  BSF    F92.5
1CB4:  BTFSS  F80.5
1CB6:  BRA    1CDA
....................       {  if(Flanco == 0)  
1CB8:  BTFSC  17.3
1CBA:  BRA    1CD8
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
1CBC:  MOVLW  0B
1CBE:  SUBWF  1C,W
1CC0:  CLRF   03
1CC2:  ADDLW  38
1CC4:  MOVWF  FE9
1CC6:  MOVLW  00
1CC8:  ADDWFC 03,W
1CCA:  MOVWF  FEA
1CCC:  INCF   FEF,F
1CCE:  BSF    17.3
1CD0:  MOVLW  1E
1CD2:  MOVWF  xDE
1CD4:  CALL   0626
....................          else 
1CD8:  BRA    1CDC
....................             {Flanco = 0;} 
1CDA:  BCF    17.3
....................              
....................       if(DOWN)//Si oprime hacia abajo 
1CDC:  BSF    F96.0
1CDE:  BTFSS  F84.0
1CE0:  BRA    1D04
....................       {  if(Flanco2 == 0)  
1CE2:  BTFSC  17.5
1CE4:  BRA    1D02
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
1CE6:  MOVLW  0B
1CE8:  SUBWF  1C,W
1CEA:  CLRF   03
1CEC:  ADDLW  38
1CEE:  MOVWF  FE9
1CF0:  MOVLW  00
1CF2:  ADDWFC 03,W
1CF4:  MOVWF  FEA
1CF6:  DECF   FEF,F
1CF8:  BSF    17.5
1CFA:  MOVLW  1E
1CFC:  MOVWF  xDE
1CFE:  CALL   0626
....................          else 
1D02:  BRA    1D06
....................             {Flanco2 = 0;} 
1D04:  BCF    17.5
....................     
....................       if(RIGHT)// Si Oprime Derecha 
1D06:  BSF    F96.1
1D08:  BTFSS  F84.1
1D0A:  BRA    1D26
....................       {  if(Flanco1 == 0)  
1D0C:  BTFSC  17.4
1D0E:  BRA    1D24
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
1D10:  BSF    17.4
1D12:  INCF   1C,F
1D14:  MOVLW  1E
1D16:  MOVWF  xDE
1D18:  CALL   0626
1D1C:  MOVLW  0C
1D1E:  MOVWF  xD8
1D20:  CALL   07F8
....................          else 
1D24:  BRA    1D28
....................             {Flanco1 = 0;}    
1D26:  BCF    17.4
....................              
....................        if(LEFT)// Si Oprime izquierda 
1D28:  BSF    F96.2
1D2A:  BTFSS  F84.2
1D2C:  BRA    1D48
....................       {  if(Flanco3 == 0)  
1D2E:  BTFSC  17.6
1D30:  BRA    1D46
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");}} 
1D32:  BSF    17.6
1D34:  DECF   1C,F
1D36:  MOVLW  1E
1D38:  MOVWF  xDE
1D3A:  CALL   0626
1D3E:  MOVLW  0C
1D40:  MOVWF  xD8
1D42:  CALL   07F8
....................          else 
1D46:  BRA    1D4A
....................             {Flanco3 = 0;}     
1D48:  BCF    17.6
....................              
....................        if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
1D4A:  MOVLW  0B
1D4C:  SUBWF  1C,W
1D4E:  CLRF   03
1D50:  ADDLW  38
1D52:  MOVWF  FE9
1D54:  MOVLW  00
1D56:  ADDWFC 03,W
1D58:  MOVWF  FEA
1D5A:  BTFSC  FEF.7
1D5C:  BRA    1D60
1D5E:  BRA    1D74
....................        {clave[unidad-11]=9;} 
1D60:  MOVLW  0B
1D62:  SUBWF  1C,W
1D64:  CLRF   03
1D66:  ADDLW  38
1D68:  MOVWF  FE9
1D6A:  MOVLW  00
1D6C:  ADDWFC 03,W
1D6E:  MOVWF  FEA
1D70:  MOVLW  09
1D72:  MOVWF  FEF
....................        if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
1D74:  MOVLW  0B
1D76:  SUBWF  1C,W
1D78:  CLRF   03
1D7A:  ADDLW  38
1D7C:  MOVWF  FE9
1D7E:  MOVLW  00
1D80:  ADDWFC 03,W
1D82:  MOVWF  FEA
1D84:  BTFSC  FEF.7
1D86:  BRA    1DA0
1D88:  MOVF   FEF,W
1D8A:  SUBLW  09
1D8C:  BC    1DA0
....................        {clave[unidad-11]=0;} 
1D8E:  MOVLW  0B
1D90:  SUBWF  1C,W
1D92:  CLRF   03
1D94:  ADDLW  38
1D96:  MOVWF  FE9
1D98:  MOVLW  00
1D9A:  ADDWFC 03,W
1D9C:  MOVWF  FEA
1D9E:  CLRF   FEF
....................        if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
1DA0:  MOVF   1C,W
1DA2:  SUBLW  0A
1DA4:  BNC   1DAA
....................        {unidad=11;} 
1DA6:  MOVLW  0B
1DA8:  MOVWF  1C
....................        lcd_gotoxy(unidad,4);// Para mostrar cursor. 
1DAA:  MOVFF  1C,D9
1DAE:  MOVLW  04
1DB0:  MOVWF  xDA
1DB2:  CALL   0796
....................        lcd_putc(t[2]); 
1DB6:  MOVFF  37,D8
1DBA:  CALL   07F8
....................        if(unidad>14)             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
1DBE:  MOVF   1C,W
1DC0:  SUBLW  0E
1DC2:  BTFSC  FD8.0
1DC4:  BRA    1FAC
....................        { 
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2) // Si Ingresa clave para reset general del sistema. 
1DC6:  MOVF   38,W
1DC8:  SUBLW  03
1DCA:  BNZ   1EA6
1DCC:  MOVF   39,W
1DCE:  SUBLW  08
1DD0:  BNZ   1EA6
1DD2:  MOVF   3A,W
1DD4:  SUBLW  09
1DD6:  BNZ   1EA6
1DD8:  MOVF   3B,W
1DDA:  SUBLW  02
1DDC:  BNZ   1EA6
....................             {write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
1DDE:  CLRF   FA9
1DE0:  CLRF   FA8
1DE2:  BCF    FA6.6
1DE4:  BCF    FA6.7
1DE6:  BSF    FA6.2
1DE8:  MOVF   FF2,W
1DEA:  MOVWF  00
1DEC:  BCF    FF2.7
1DEE:  MOVLB  F
1DF0:  MOVLW  55
1DF2:  MOVWF  FA7
1DF4:  MOVLW  AA
1DF6:  MOVWF  FA7
1DF8:  BSF    FA6.1
1DFA:  BTFSC  FA6.1
1DFC:  BRA    1DFA
1DFE:  BCF    FA6.2
1E00:  MOVF   00,W
1E02:  IORWF  FF2,F
1E04:  MOVLW  14
1E06:  MOVLB  0
1E08:  MOVWF  xDE
1E0A:  CALL   0626
1E0E:  MOVLW  01
1E10:  MOVWF  FA9
1E12:  CLRF   FA8
1E14:  BCF    FA6.6
1E16:  BCF    FA6.7
1E18:  BSF    FA6.2
1E1A:  MOVF   FF2,W
1E1C:  MOVWF  00
1E1E:  BCF    FF2.7
1E20:  MOVLB  F
1E22:  MOVLW  55
1E24:  MOVWF  FA7
1E26:  MOVLW  AA
1E28:  MOVWF  FA7
1E2A:  BSF    FA6.1
1E2C:  BTFSC  FA6.1
1E2E:  BRA    1E2C
1E30:  BCF    FA6.2
1E32:  MOVF   00,W
1E34:  IORWF  FF2,F
1E36:  MOVLW  14
1E38:  MOVLB  0
1E3A:  MOVWF  xDE
1E3C:  CALL   0626
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
1E40:  MOVLW  02
1E42:  MOVWF  FA9
1E44:  CLRF   FA8
1E46:  BCF    FA6.6
1E48:  BCF    FA6.7
1E4A:  BSF    FA6.2
1E4C:  MOVF   FF2,W
1E4E:  MOVWF  00
1E50:  BCF    FF2.7
1E52:  MOVLB  F
1E54:  MOVLW  55
1E56:  MOVWF  FA7
1E58:  MOVLW  AA
1E5A:  MOVWF  FA7
1E5C:  BSF    FA6.1
1E5E:  BTFSC  FA6.1
1E60:  BRA    1E5E
1E62:  BCF    FA6.2
1E64:  MOVF   00,W
1E66:  IORWF  FF2,F
1E68:  MOVLW  14
1E6A:  MOVLB  0
1E6C:  MOVWF  xDE
1E6E:  CALL   0626
1E72:  MOVLW  03
1E74:  MOVWF  FA9
1E76:  CLRF   FA8
1E78:  BCF    FA6.6
1E7A:  BCF    FA6.7
1E7C:  BSF    FA6.2
1E7E:  MOVF   FF2,W
1E80:  MOVWF  00
1E82:  BCF    FF2.7
1E84:  MOVLB  F
1E86:  MOVLW  55
1E88:  MOVWF  FA7
1E8A:  MOVLW  AA
1E8C:  MOVWF  FA7
1E8E:  BSF    FA6.1
1E90:  BTFSC  FA6.1
1E92:  BRA    1E90
1E94:  BCF    FA6.2
1E96:  MOVF   00,W
1E98:  IORWF  FF2,F
1E9A:  MOVLW  14
1E9C:  MOVLB  0
1E9E:  MOVWF  xDE
1EA0:  CALL   0626
....................              reset_cpu();} 
1EA4:  RESET
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) // Si las claves coinciden pasa a Menu Principal. 
1EA6:  MOVF   3C,W
1EA8:  SUBWF  38,W
1EAA:  BNZ   1F3E
1EAC:  MOVF   3D,W
1EAE:  SUBWF  39,W
1EB0:  BNZ   1F3E
1EB2:  MOVF   3E,W
1EB4:  SUBWF  3A,W
1EB6:  BNZ   1F3E
1EB8:  MOVF   3F,W
1EBA:  SUBWF  3B,W
1EBC:  BNZ   1F3E
....................             {lcd_gotoxy(1,1); 
1EBE:  MOVLW  01
1EC0:  MOVWF  xD9
1EC2:  MOVWF  xDA
1EC4:  CALL   0796
....................             printf(lcd_putc,"                   "); 
1EC8:  MOVLW  04
1ECA:  MOVWF  FF6
1ECC:  MOVLW  02
1ECE:  MOVWF  FF7
1ED0:  CALL   0856
....................             lcd_gotoxy(1,2); 
1ED4:  MOVLW  01
1ED6:  MOVWF  xD9
1ED8:  MOVLW  02
1EDA:  MOVWF  xDA
1EDC:  CALL   0796
....................             printf(lcd_putc,"     Contraseña    "); 
1EE0:  MOVLW  18
1EE2:  MOVWF  FF6
1EE4:  MOVLW  02
1EE6:  MOVWF  FF7
1EE8:  CALL   0856
....................             lcd_gotoxy(1,3); 
1EEC:  MOVLW  01
1EEE:  MOVWF  xD9
1EF0:  MOVLW  03
1EF2:  MOVWF  xDA
1EF4:  CALL   0796
....................             printf(lcd_putc,"      Correcta     "); 
1EF8:  MOVLW  2C
1EFA:  MOVWF  FF6
1EFC:  MOVLW  02
1EFE:  MOVWF  FF7
1F00:  CALL   0856
....................             lcd_gotoxy(1,4); 
1F04:  MOVLW  01
1F06:  MOVWF  xD9
1F08:  MOVLW  04
1F0A:  MOVWF  xDA
1F0C:  CALL   0796
....................             printf(lcd_putc,"                   "); 
1F10:  MOVLW  40
1F12:  MOVWF  FF6
1F14:  MOVLW  02
1F16:  MOVWF  FF7
1F18:  CALL   0856
....................             delay_ms(1000);Menu=100;unidad=11;printf(lcd_putc,"\f");} 
1F1C:  MOVLW  04
1F1E:  MOVWF  xC7
1F20:  MOVLW  FA
1F22:  MOVWF  xDE
1F24:  CALL   0626
1F28:  DECFSZ xC7,F
1F2A:  BRA    1F20
1F2C:  MOVLW  64
1F2E:  MOVWF  19
1F30:  MOVLW  0B
1F32:  MOVWF  1C
1F34:  MOVLW  0C
1F36:  MOVWF  xD8
1F38:  CALL   07F8
....................          else                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
1F3C:  BRA    1FAC
....................          {lcd_gotoxy(1,1); 
1F3E:  MOVLW  01
1F40:  MOVWF  xD9
1F42:  MOVWF  xDA
1F44:  CALL   0796
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
1F48:  MOVLW  01
1F4A:  MOVWF  xD9
1F4C:  MOVLW  02
1F4E:  MOVWF  xDA
1F50:  CALL   0796
....................             printf(lcd_putc,"     Contraseña    "); 
1F54:  MOVLW  54
1F56:  MOVWF  FF6
1F58:  MOVLW  02
1F5A:  MOVWF  FF7
1F5C:  CALL   0856
....................             lcd_gotoxy(1,3); 
1F60:  MOVLW  01
1F62:  MOVWF  xD9
1F64:  MOVLW  03
1F66:  MOVWF  xDA
1F68:  CALL   0796
....................             printf(lcd_putc,"     Incorrecta    "); 
1F6C:  MOVLW  68
1F6E:  MOVWF  FF6
1F70:  MOVLW  02
1F72:  MOVWF  FF7
1F74:  CALL   0856
....................             lcd_gotoxy(1,4); 
1F78:  MOVLW  01
1F7A:  MOVWF  xD9
1F7C:  MOVLW  04
1F7E:  MOVWF  xDA
1F80:  CALL   0796
....................             printf(lcd_putc,"                   "); 
1F84:  MOVLW  7C
1F86:  MOVWF  FF6
1F88:  MOVLW  02
1F8A:  MOVWF  FF7
1F8C:  CALL   0856
....................             delay_ms(1000);unidad=11;printf(lcd_putc,"\f");} 
1F90:  MOVLW  04
1F92:  MOVWF  xC7
1F94:  MOVLW  FA
1F96:  MOVWF  xDE
1F98:  CALL   0626
1F9C:  DECFSZ xC7,F
1F9E:  BRA    1F94
1FA0:  MOVLW  0B
1FA2:  MOVWF  1C
1FA4:  MOVLW  0C
1FA6:  MOVWF  xD8
1FA8:  CALL   07F8
....................        } 
....................     
....................        if(unidad>11&&unidad<14) 
1FAC:  MOVF   1C,W
1FAE:  SUBLW  0B
1FB0:  BC    1FD0
1FB2:  MOVF   1C,W
1FB4:  SUBLW  0D
1FB6:  BNC   1FD0
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
1FB8:  MOVLW  01
1FBA:  SUBWF  1C,W
1FBC:  MOVWF  xC7
1FBE:  MOVWF  xD9
1FC0:  MOVLW  04
1FC2:  MOVWF  xDA
1FC4:  CALL   0796
....................             lcd_putc(t[1]); 
1FC8:  MOVFF  36,D8
1FCC:  CALL   07F8
....................           } 
....................  
....................    } 
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
1FD0:  DECFSZ 19,W
1FD2:  BRA    21C4
....................    lcd_gotoxy(1,1); 
1FD4:  MOVLW  01
1FD6:  MOVWF  xD9
1FD8:  MOVWF  xDA
1FDA:  CALL   0796
....................    printf(lcd_putc,"---MENU PRINCIPAL---"); 
1FDE:  MOVLW  90
1FE0:  MOVWF  FF6
1FE2:  MOVLW  02
1FE4:  MOVWF  FF7
1FE6:  CALL   0856
....................       if(paso<0) 
1FEA:  BTFSC  33.7
1FEC:  BRA    1FF0
1FEE:  BRA    1FF2
....................         {paso=0;} 
1FF0:  CLRF   33
....................          
....................       if(UP)//Si oprime hacia arriba 
1FF2:  BSF    F92.5
1FF4:  BTFSS  F80.5
1FF6:  BRA    2012
....................       { 
....................          if(Flanco == 0) 
1FF8:  BTFSC  17.3
1FFA:  BRA    2010
....................          { 
....................             Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30); 
1FFC:  DECF   1F,F
1FFE:  DECF   1D,F
2000:  MOVLW  01
2002:  ADDWF  1D,W
2004:  MOVWF  1E
2006:  BSF    17.3
2008:  MOVLW  1E
200A:  MOVWF  xDE
200C:  CALL   0626
....................          } 
....................       } 
....................       else 
2010:  BRA    2014
....................       { 
....................          Flanco = 0; 
2012:  BCF    17.3
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
2014:  BSF    F96.0
2016:  BTFSS  F84.0
2018:  BRA    2034
....................       { 
....................          if(Flanco2 == 0) 
201A:  BTFSC  17.5
201C:  BRA    2032
....................          { 
....................             Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30); 
201E:  INCF   1F,F
2020:  INCF   1D,F
2022:  MOVLW  01
2024:  SUBWF  1D,W
2026:  MOVWF  1E
2028:  BSF    17.5
202A:  MOVLW  1E
202C:  MOVWF  xDE
202E:  CALL   0626
....................          } 
....................       } 
....................       else 
2032:  BRA    2036
....................       { 
....................          Flanco2 = 0; 
2034:  BCF    17.5
....................       } 
....................     
....................          
....................         if(Flecha2>nMenuH) 
2036:  MOVF   1F,W
2038:  SUBWF  21,W
203A:  BC    204C
....................         {paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4;} 
203C:  INCF   33,F
203E:  MOVFF  1F,21
2042:  MOVLW  02
2044:  SUBWF  21,W
2046:  MOVWF  20
2048:  MOVLW  04
204A:  MOVWF  1D
....................          
....................         if(Flecha2<nMenuL) 
204C:  MOVF   20,W
204E:  SUBWF  1F,W
2050:  BC    2062
....................         {paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2;} 
2052:  DECF   33,F
2054:  MOVFF  1F,20
2058:  MOVLW  02
205A:  ADDWF  20,W
205C:  MOVWF  21
205E:  MOVLW  02
2060:  MOVWF  1D
....................          
....................         if(Flecha2>n_opcionH) 
2062:  MOVF   1F,W
2064:  SUBWF  1A,W
2066:  BC    207A
....................         {Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2;} 
2068:  MOVFF  1B,1F
206C:  MOVLW  02
206E:  MOVWF  1D
2070:  CLRF   33
2072:  MOVFF  1F,20
2076:  ADDWF  20,W
2078:  MOVWF  21
....................          
....................         if(Flecha2<n_opcionL) 
207A:  MOVF   1B,W
207C:  SUBWF  1F,W
207E:  BC    2096
....................         {Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2;}                
2080:  MOVFF  1A,1F
2084:  MOVLW  04
2086:  MOVWF  1D
2088:  SUBWF  1A,W
208A:  MOVWF  33
208C:  MOVFF  1F,21
2090:  MOVLW  02
2092:  SUBWF  21,W
2094:  MOVWF  20
....................          
....................         mensajes(1+paso,2); 
2096:  MOVLW  01
2098:  ADDWF  33,W
209A:  MOVWF  xC7
209C:  MOVWF  xC8
209E:  MOVLW  02
20A0:  MOVWF  xC9
20A2:  CALL   09D4
....................         mensajes(2+paso,3); 
20A6:  MOVLW  02
20A8:  ADDWF  33,W
20AA:  MOVWF  xC7
20AC:  MOVWF  xC8
20AE:  MOVLW  03
20B0:  MOVWF  xC9
20B2:  CALL   09D4
....................         mensajes(3+paso,4); 
20B6:  MOVLW  03
20B8:  ADDWF  33,W
20BA:  MOVWF  xC7
20BC:  MOVWF  xC8
20BE:  MOVLW  04
20C0:  MOVWF  xC9
20C2:  CALL   09D4
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
20C6:  MOVLW  01
20C8:  MOVWF  xD9
20CA:  MOVFF  1D,DA
20CE:  CALL   0796
....................         lcd_putc(t[0]); 
20D2:  MOVFF  35,D8
20D6:  CALL   07F8
....................  
....................         if(Flecha==2) 
20DA:  MOVF   1D,W
20DC:  SUBLW  02
20DE:  BNZ   2108
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
20E0:  MOVLW  01
20E2:  MOVWF  xD9
20E4:  MOVLW  04
20E6:  MOVWF  xDA
20E8:  CALL   0796
....................             lcd_putc(t[1]); 
20EC:  MOVFF  36,D8
20F0:  CALL   07F8
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
20F4:  MOVLW  01
20F6:  MOVWF  xD9
20F8:  MOVLW  03
20FA:  MOVWF  xDA
20FC:  CALL   0796
....................             lcd_putc(t[1]); 
2100:  MOVFF  36,D8
2104:  CALL   07F8
....................           } 
....................          
....................         if(Flecha==4) 
2108:  MOVF   1D,W
210A:  SUBLW  04
210C:  BNZ   2136
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
210E:  MOVLW  01
2110:  MOVWF  xD9
2112:  MOVLW  02
2114:  MOVWF  xDA
2116:  CALL   0796
....................             lcd_putc(t[1]); 
211A:  MOVFF  36,D8
211E:  CALL   07F8
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
2122:  MOVLW  01
2124:  MOVWF  xD9
2126:  MOVLW  03
2128:  MOVWF  xDA
212A:  CALL   0796
....................             lcd_putc(t[1]); 
212E:  MOVFF  36,D8
2132:  CALL   07F8
....................           } 
....................          
....................         if(Flecha==3) 
2136:  MOVF   1D,W
2138:  SUBLW  03
213A:  BNZ   2164
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
213C:  MOVLW  01
213E:  MOVWF  xD9
2140:  MOVLW  04
2142:  MOVWF  xDA
2144:  CALL   0796
....................             lcd_putc(t[1]); 
2148:  MOVFF  36,D8
214C:  CALL   07F8
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
2150:  MOVLW  01
2152:  MOVWF  xD9
2154:  MOVLW  02
2156:  MOVWF  xDA
2158:  CALL   0796
....................             lcd_putc(t[1]); 
215C:  MOVFF  36,D8
2160:  CALL   07F8
....................           } 
....................  
....................        if(RIGHT)// Si oprime derecha 
2164:  BSF    F96.1
2166:  BTFSS  F84.1
2168:  BRA    21A0
....................        { 
....................          if(Flanco1 == 0) 
216A:  BTFSC  17.4
216C:  BRA    219E
....................          { 
....................             Flanco1 = 1;Menu=Flecha2;Flecha=3;delay_ms(300);printf(lcd_putc,"\f"); 
216E:  BSF    17.4
2170:  MOVFF  1F,19
2174:  MOVLW  03
2176:  MOVWF  1D
2178:  MOVLW  02
217A:  MOVWF  xC7
217C:  MOVLW  96
217E:  MOVWF  xDE
2180:  CALL   0626
2184:  DECFSZ xC7,F
2186:  BRA    217C
2188:  MOVLW  0C
218A:  MOVWF  xD8
218C:  CALL   07F8
....................             if(Menu==6) 
2190:  MOVF   19,W
2192:  SUBLW  06
2194:  BNZ   219E
....................             { 
....................                clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
2196:  CLRF   38
2198:  CLRF   39
219A:  CLRF   3A
219C:  CLRF   3B
....................             } 
....................          } 
....................        } 
....................        else 
219E:  BRA    21A2
....................        { 
....................          Flanco1 = 0; 
21A0:  BCF    17.4
....................        } 
....................              
....................        if(LEFT) 
21A2:  BSF    F96.2
21A4:  BTFSS  F84.2
21A6:  BRA    21C4
....................        { 
....................          Menu=100;printf(lcd_putc,"\f");delay_ms(500); 
21A8:  MOVLW  64
21AA:  MOVWF  19
21AC:  MOVLW  0C
21AE:  MOVWF  xD8
21B0:  CALL   07F8
21B4:  MOVLW  02
21B6:  MOVWF  xC7
21B8:  MOVLW  FA
21BA:  MOVWF  xDE
21BC:  CALL   0626
21C0:  DECFSZ xC7,F
21C2:  BRA    21B8
....................        } 
....................  
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de tiempo de trabajo de Luz UV    
21C4:  MOVF   19,W
21C6:  SUBLW  02
21C8:  BTFSS  FD8.2
21CA:  BRA    23FE
....................     
....................    lcd_gotoxy(1,1); 
21CC:  MOVLW  01
21CE:  MOVWF  xD9
21D0:  MOVWF  xDA
21D2:  CALL   0796
....................    printf(lcd_putc,"    Temporizador     "); 
21D6:  MOVLW  A6
21D8:  MOVWF  FF6
21DA:  MOVLW  02
21DC:  MOVWF  FF7
21DE:  CALL   0856
....................    lcd_gotoxy(1,2); 
21E2:  MOVLW  01
21E4:  MOVWF  xD9
21E6:  MOVLW  02
21E8:  MOVWF  xDA
21EA:  CALL   0796
....................    printf(lcd_putc,"       Luz UV        "); 
21EE:  MOVLW  BC
21F0:  MOVWF  FF6
21F2:  MOVLW  02
21F4:  MOVWF  FF7
21F6:  CALL   0856
....................    lcd_gotoxy(6,3); 
21FA:  MOVLW  06
21FC:  MOVWF  xD9
21FE:  MOVLW  03
2200:  MOVWF  xDA
2202:  CALL   0796
....................    printf(lcd_putc,"%02u:%02u (M:S)  ",tempo_minutos_pro,tempo_segundos_pro);  
2206:  MOVFF  2A,C7
220A:  MOVLW  01
220C:  MOVWF  xC8
220E:  CALL   0A56
2212:  MOVLW  3A
2214:  MOVWF  xD8
2216:  CALL   07F8
221A:  MOVFF  2B,C7
221E:  MOVLW  01
2220:  MOVWF  xC8
2222:  CALL   0A56
2226:  MOVLW  DB
2228:  MOVWF  FF6
222A:  MOVLW  02
222C:  MOVWF  FF7
222E:  MOVLW  08
2230:  MOVWF  xCB
2232:  CALL   08C6
....................     
....................    lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
2236:  MOVLW  06
2238:  ADDWF  2F,W
223A:  MOVWF  xC7
223C:  MOVWF  xD9
223E:  MOVLW  04
2240:  MOVWF  xDA
2242:  CALL   0796
....................    lcd_putc(t[2]); 
2246:  MOVFF  37,D8
224A:  CALL   07F8
....................     
....................    if(UP) 
224E:  BSF    F92.5
2250:  BTFSS  F80.5
2252:  BRA    228E
....................    { 
....................       if(unidad2==1) 
2254:  DECFSZ 2F,W
2256:  BRA    2270
....................       { 
....................          if(tempo_minutos_pro<61) 
2258:  MOVF   2A,W
225A:  SUBLW  3C
225C:  BNC   2270
....................          { 
....................             tempo_minutos_pro++;delay_ms(300); 
225E:  INCF   2A,F
2260:  MOVLW  02
2262:  MOVWF  xC7
2264:  MOVLW  96
2266:  MOVWF  xDE
2268:  CALL   0626
226C:  DECFSZ xC7,F
226E:  BRA    2264
....................          } 
....................       } 
....................        
....................       if(unidad2==3) 
2270:  MOVF   2F,W
2272:  SUBLW  03
2274:  BNZ   228E
....................       { 
....................          if(tempo_segundos_pro<60) 
2276:  MOVF   2B,W
2278:  SUBLW  3B
227A:  BNC   228E
....................          { 
....................             tempo_segundos_pro++;delay_ms(300); 
227C:  INCF   2B,F
227E:  MOVLW  02
2280:  MOVWF  xC7
2282:  MOVLW  96
2284:  MOVWF  xDE
2286:  CALL   0626
228A:  DECFSZ xC7,F
228C:  BRA    2282
....................          } 
....................       } 
....................    } 
....................     
....................    if(DOWN) 
228E:  BSF    F96.0
2290:  BTFSS  F84.0
2292:  BRA    22FE
....................    { 
....................       if(unidad2==1) 
2294:  DECFSZ 2F,W
2296:  BRA    22C8
....................       { 
....................          if(tempo_minutos_pro>0) 
2298:  MOVF   2A,F
229A:  BZ    22AE
....................          { 
....................             tempo_minutos_pro--;delay_ms(300); 
229C:  DECF   2A,F
229E:  MOVLW  02
22A0:  MOVWF  xC7
22A2:  MOVLW  96
22A4:  MOVWF  xDE
22A6:  CALL   0626
22AA:  DECFSZ xC7,F
22AC:  BRA    22A2
....................          } 
....................           
....................          if(tempo_minutos_pro>60) 
22AE:  MOVF   2A,W
22B0:  SUBLW  3C
22B2:  BC    22C8
....................          { 
....................             tempo_minutos_pro=60;delay_ms(300); 
22B4:  MOVLW  3C
22B6:  MOVWF  2A
22B8:  MOVLW  02
22BA:  MOVWF  xC7
22BC:  MOVLW  96
22BE:  MOVWF  xDE
22C0:  CALL   0626
22C4:  DECFSZ xC7,F
22C6:  BRA    22BC
....................          } 
....................       } 
....................        
....................       if(unidad2==3) 
22C8:  MOVF   2F,W
22CA:  SUBLW  03
22CC:  BNZ   22FE
....................       { 
....................          if(tempo_segundos_pro>0) 
22CE:  MOVF   2B,F
22D0:  BZ    22E4
....................          { 
....................             tempo_segundos_pro--;delay_ms(300); 
22D2:  DECF   2B,F
22D4:  MOVLW  02
22D6:  MOVWF  xC7
22D8:  MOVLW  96
22DA:  MOVWF  xDE
22DC:  CALL   0626
22E0:  DECFSZ xC7,F
22E2:  BRA    22D8
....................          } 
....................           
....................          if(tempo_segundos_pro>60) 
22E4:  MOVF   2B,W
22E6:  SUBLW  3C
22E8:  BC    22FE
....................          { 
....................             tempo_segundos_pro=60;delay_ms(300); 
22EA:  MOVLW  3C
22EC:  MOVWF  2B
22EE:  MOVLW  02
22F0:  MOVWF  xC7
22F2:  MOVLW  96
22F4:  MOVWF  xDE
22F6:  CALL   0626
22FA:  DECFSZ xC7,F
22FC:  BRA    22F2
....................          } 
....................       } 
....................    } 
....................     
....................    if(RIGHT) 
22FE:  BSF    F96.1
2300:  BTFSS  F84.1
2302:  BRA    2330
....................    { 
....................       if(unidad2==1) 
2304:  DECFSZ 2F,W
2306:  BRA    230E
....................       { 
....................          unidad2=3; 
2308:  MOVLW  03
230A:  MOVWF  2F
....................       } 
....................       else 
230C:  BRA    2318
....................       { 
....................          if(unidad2==3) 
230E:  MOVF   2F,W
2310:  SUBLW  03
2312:  BNZ   2318
....................          { 
....................             unidad2=1; 
2314:  MOVLW  01
2316:  MOVWF  2F
....................          } 
....................       } 
....................       delay_ms(500); 
2318:  MOVLW  02
231A:  MOVWF  xC7
231C:  MOVLW  FA
231E:  MOVWF  xDE
2320:  CALL   0626
2324:  DECFSZ xC7,F
2326:  BRA    231C
....................       printf(lcd_putc,"\f"); 
2328:  MOVLW  0C
232A:  MOVWF  xD8
232C:  CALL   07F8
....................    } 
....................     
....................    if(LEFT) 
2330:  BSF    F96.2
2332:  BTFSS  F84.2
2334:  BRA    23FE
....................    { 
....................       delay_ms(200); 
2336:  MOVLW  C8
2338:  MOVWF  xDE
233A:  CALL   0626
....................       printf(lcd_putc,"\f"); 
233E:  MOVLW  0C
2340:  MOVWF  xD8
2342:  CALL   07F8
....................       lcd_gotoxy(1,2); 
2346:  MOVLW  01
2348:  MOVWF  xD9
234A:  MOVLW  02
234C:  MOVWF  xDA
234E:  CALL   0796
....................       printf(lcd_putc,"Tiempo Almacenado"); 
2352:  MOVLW  E4
2354:  MOVWF  FF6
2356:  MOVLW  02
2358:  MOVWF  FF7
235A:  CALL   0856
....................       lcd_gotoxy(1,3); 
235E:  MOVLW  01
2360:  MOVWF  xD9
2362:  MOVLW  03
2364:  MOVWF  xDA
2366:  CALL   0796
....................       printf(lcd_putc,"  Correctamente  "); 
236A:  MOVLW  F6
236C:  MOVWF  FF6
236E:  MOVLW  02
2370:  MOVWF  FF7
2372:  CALL   0856
....................       write_eeprom(20,tempo_minutos_pro);write_eeprom(21,tempo_segundos_pro); 
2376:  MOVLW  14
2378:  MOVWF  FA9
237A:  MOVFF  2A,FA8
237E:  BCF    FA6.6
2380:  BCF    FA6.7
2382:  BSF    FA6.2
2384:  MOVF   FF2,W
2386:  MOVWF  00
2388:  BCF    FF2.7
238A:  MOVLB  F
238C:  MOVLW  55
238E:  MOVWF  FA7
2390:  MOVLW  AA
2392:  MOVWF  FA7
2394:  BSF    FA6.1
2396:  BTFSC  FA6.1
2398:  BRA    2396
239A:  BCF    FA6.2
239C:  MOVF   00,W
239E:  IORWF  FF2,F
23A0:  MOVLW  15
23A2:  MOVWF  FA9
23A4:  MOVFF  2B,FA8
23A8:  BCF    FA6.6
23AA:  BCF    FA6.7
23AC:  BSF    FA6.2
23AE:  MOVF   FF2,W
23B0:  MOVWF  00
23B2:  BCF    FF2.7
23B4:  MOVLW  55
23B6:  MOVWF  FA7
23B8:  MOVLW  AA
23BA:  MOVWF  FA7
23BC:  BSF    FA6.1
23BE:  BTFSC  FA6.1
23C0:  BRA    23BE
23C2:  BCF    FA6.2
23C4:  MOVF   00,W
23C6:  IORWF  FF2,F
....................       tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
23C8:  MOVFF  2A,28
23CC:  MOVFF  2B,29
....................       delay_ms(700); 
23D0:  MOVLW  04
23D2:  MOVLB  0
23D4:  MOVWF  xC7
23D6:  MOVLW  AF
23D8:  MOVWF  xDE
23DA:  CALL   0626
23DE:  DECFSZ xC7,F
23E0:  BRA    23D6
....................       delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
23E2:  MOVLW  1E
23E4:  MOVWF  xDE
23E6:  CALL   0626
23EA:  MOVLW  01
23EC:  MOVWF  19
23EE:  CLRF   33
23F0:  MOVLW  02
23F2:  MOVWF  1D
23F4:  MOVWF  1F
23F6:  MOVLW  0C
23F8:  MOVWF  xD8
23FA:  CALL   07F8
....................    }   
....................   } 
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................    
.................... //----------------Menu3--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu de seleccion de estado de Motor Ventilador 
23FE:  MOVF   19,W
2400:  SUBLW  03
2402:  BTFSS  FD8.2
2404:  BRA    25D0
....................    lcd_gotoxy(1,1); 
2406:  MOVLW  01
2408:  MOVWF  xD9
240A:  MOVWF  xDA
240C:  CALL   0796
....................    printf(lcd_putc,"Seleccione Velocidad"); 
2410:  MOVLW  08
2412:  MOVWF  FF6
2414:  MOVLW  03
2416:  MOVWF  FF7
2418:  CALL   0856
....................    lcd_gotoxy(1,2); 
241C:  MOVLW  01
241E:  MOVWF  xD9
2420:  MOVLW  02
2422:  MOVWF  xDA
2424:  CALL   0796
....................    printf(lcd_putc,"    de Ventilador   "); 
2428:  MOVLW  1E
242A:  MOVWF  FF6
242C:  MOVLW  03
242E:  MOVWF  FF7
2430:  CALL   0856
....................    lcd_gotoxy(8,3); 
2434:  MOVLW  08
2436:  MOVWF  xD9
2438:  MOVLW  03
243A:  MOVWF  xDA
243C:  CALL   0796
....................    printf(lcd_putc,"%i ",Velocidad); 
2440:  MOVFF  34,C7
2444:  MOVLW  1F
2446:  MOVWF  xC8
2448:  CALL   090C
244C:  MOVLW  20
244E:  MOVWF  xD8
2450:  CALL   07F8
....................  
....................    if(UP)//Si oprime hacia arriba 
2454:  BSF    F92.5
2456:  BTFSS  F80.5
2458:  BRA    246C
....................       {  if(Flanco == 0)  
245A:  BTFSC  17.3
245C:  BRA    246A
....................             {Velocidad++;Flanco = 1;delay_ms(30);}} 
245E:  INCF   34,F
2460:  BSF    17.3
2462:  MOVLW  1E
2464:  MOVWF  xDE
2466:  CALL   0626
....................          else 
246A:  BRA    246E
....................             {Flanco = 0;} 
246C:  BCF    17.3
....................              
....................       if(DOWN)//Si oprime hacia abajo 
246E:  BSF    F96.0
2470:  BTFSS  F84.0
2472:  BRA    2486
....................       {  if(Flanco2 == 0)  
2474:  BTFSC  17.5
2476:  BRA    2484
....................             {Velocidad--;Flanco2 = 1;delay_ms(30);}} 
2478:  DECF   34,F
247A:  BSF    17.5
247C:  MOVLW  1E
247E:  MOVWF  xDE
2480:  CALL   0626
....................          else 
2484:  BRA    2488
....................             {Flanco2 = 0;} 
2486:  BCF    17.5
....................        
....................              
....................       if(LEFT)//Si oprime Izquierda 
2488:  BSF    F96.2
248A:  BTFSS  F84.2
248C:  BRA    24B2
....................       {  if(Flanco3 == 0)  
248E:  BTFSC  17.6
2490:  BRA    24B0
....................             {Flecha=2;Flecha2=2;Flanco3 = 1;Menu=1; paso=0;delay_ms(500);}} 
2492:  MOVLW  02
2494:  MOVWF  1D
2496:  MOVWF  1F
2498:  BSF    17.6
249A:  MOVLW  01
249C:  MOVWF  19
249E:  CLRF   33
24A0:  MOVLW  02
24A2:  MOVWF  xC7
24A4:  MOVLW  FA
24A6:  MOVWF  xDE
24A8:  CALL   0626
24AC:  DECFSZ xC7,F
24AE:  BRA    24A4
....................          else 
24B0:  BRA    24B4
....................             {Flanco3 = 0;} 
24B2:  BCF    17.6
....................          if(Velocidad<1) 
24B4:  BTFSC  34.7
24B6:  BRA    24BE
24B8:  MOVF   34,W
24BA:  SUBLW  00
24BC:  BNC   24C2
....................             {Velocidad=2;} 
24BE:  MOVLW  02
24C0:  MOVWF  34
....................          if(Velocidad>2) 
24C2:  BTFSC  34.7
24C4:  BRA    24D0
24C6:  MOVF   34,W
24C8:  SUBLW  02
24CA:  BC    24D0
....................             {Velocidad=1;}     
24CC:  MOVLW  01
24CE:  MOVWF  34
....................                      
....................       if(RIGHT)// Si oprime Derecha 
24D0:  BSF    F96.1
24D2:  BTFSS  F84.1
24D4:  BRA    25BA
....................       {  if(Flanco1 == 0)  
24D6:  BTFSC  17.4
24D8:  BRA    25B8
....................             {Flanco1 = 1;Menu=1;paso=0; write_eeprom(5,Velocidad); 
24DA:  BSF    17.4
24DC:  MOVLW  01
24DE:  MOVWF  19
24E0:  CLRF   33
24E2:  MOVLW  05
24E4:  MOVWF  FA9
24E6:  MOVFF  34,FA8
24EA:  BCF    FA6.6
24EC:  BCF    FA6.7
24EE:  BSF    FA6.2
24F0:  MOVF   FF2,W
24F2:  MOVWF  00
24F4:  BCF    FF2.7
24F6:  MOVLB  F
24F8:  MOVLW  55
24FA:  MOVWF  FA7
24FC:  MOVLW  AA
24FE:  MOVWF  FA7
2500:  BSF    FA6.1
2502:  BTFSC  FA6.1
2504:  BRA    2502
2506:  BCF    FA6.2
2508:  MOVF   00,W
250A:  IORWF  FF2,F
....................                 
....................              if(estadomv==1) 
250C:  BTFSS  17.2
250E:  BRA    251A
....................                {velocidades(Velocidad);} 
2510:  MOVFF  34,C9
2514:  MOVLB  0
2516:  CALL   0ABC
....................                 
....................                lcd_gotoxy(1,1); 
251A:  MOVLW  01
251C:  MOVLB  0
251E:  MOVWF  xD9
2520:  MOVWF  xDA
2522:  CALL   0796
....................                printf(lcd_putc,"                    "); 
2526:  MOVLW  34
2528:  MOVWF  FF6
252A:  MOVLW  03
252C:  MOVWF  FF7
252E:  CALL   0856
....................                lcd_gotoxy(1,2); 
2532:  MOVLW  01
2534:  MOVWF  xD9
2536:  MOVLW  02
2538:  MOVWF  xDA
253A:  CALL   0796
....................                printf(lcd_putc,"   Ha seleccionado  "); 
253E:  MOVLW  4A
2540:  MOVWF  FF6
2542:  MOVLW  03
2544:  MOVWF  FF7
2546:  CALL   0856
....................                lcd_gotoxy(1,3); 
254A:  MOVLW  01
254C:  MOVWF  xD9
254E:  MOVLW  03
2550:  MOVWF  xDA
2552:  CALL   0796
....................                printf(lcd_putc,"  la velocidad  %i  ",Velocidad); 
2556:  MOVLW  60
2558:  MOVWF  FF6
255A:  MOVLW  03
255C:  MOVWF  FF7
255E:  MOVLW  10
2560:  MOVWF  xCB
2562:  CALL   08C6
2566:  MOVFF  34,C7
256A:  MOVLW  1F
256C:  MOVWF  xC8
256E:  CALL   090C
2572:  MOVLW  20
2574:  MOVWF  xD8
2576:  CALL   07F8
257A:  MOVLW  20
257C:  MOVWF  xD8
257E:  CALL   07F8
....................                lcd_gotoxy(1,4); 
2582:  MOVLW  01
2584:  MOVWF  xD9
2586:  MOVLW  04
2588:  MOVWF  xDA
258A:  CALL   0796
....................                printf(lcd_putc,"                    "); 
258E:  MOVLW  76
2590:  MOVWF  FF6
2592:  MOVLW  03
2594:  MOVWF  FF7
2596:  CALL   0856
....................               
....................             delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f");}} 
259A:  MOVLW  04
259C:  MOVWF  xC7
259E:  MOVLW  FA
25A0:  MOVWF  xDE
25A2:  CALL   0626
25A6:  DECFSZ xC7,F
25A8:  BRA    259E
25AA:  MOVLW  02
25AC:  MOVWF  1D
25AE:  MOVWF  1F
25B0:  MOVLW  0C
25B2:  MOVWF  xD8
25B4:  CALL   07F8
....................          else 
25B8:  BRA    25BC
....................             {Flanco1 = 0;}    
25BA:  BCF    17.4
....................  
....................         lcd_gotoxy(6,Flecha);// Para mostrar la flecha de seleccion 
25BC:  MOVLW  06
25BE:  MOVWF  xD9
25C0:  MOVFF  1D,DA
25C4:  CALL   0796
....................         lcd_putc(t[0]); 
25C8:  MOVFF  35,D8
25CC:  CALL   07F8
....................          
....................    }       
.................... //----------------Fin-Menu3--------------------------------------------------------------- 
....................  
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu para Cambio de Contraseña 
25D0:  MOVF   19,W
25D2:  SUBLW  04
25D4:  BTFSS  FD8.2
25D6:  BRA    28D0
....................    lcd_gotoxy(1,1); 
25D8:  MOVLW  01
25DA:  MOVWF  xD9
25DC:  MOVWF  xDA
25DE:  CALL   0796
....................    printf(lcd_putc,"      Ingrese       "); 
25E2:  MOVLW  8C
25E4:  MOVWF  FF6
25E6:  MOVLW  03
25E8:  MOVWF  FF7
25EA:  CALL   0856
....................    lcd_gotoxy(1,2); 
25EE:  MOVLW  01
25F0:  MOVWF  xD9
25F2:  MOVLW  02
25F4:  MOVWF  xDA
25F6:  CALL   0796
....................    printf(lcd_putc," Contraseña Actual  "); 
25FA:  MOVLW  A2
25FC:  MOVWF  FF6
25FE:  MOVLW  03
2600:  MOVWF  FF7
2602:  CALL   0856
....................    lcd_gotoxy(1,3); 
2606:  MOVLW  01
2608:  MOVWF  xD9
260A:  MOVLW  03
260C:  MOVWF  xDA
260E:  CALL   0796
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2612:  MOVLW  B8
2614:  MOVWF  FF6
2616:  MOVLW  03
2618:  MOVWF  FF7
261A:  MOVLW  0A
261C:  MOVWF  xCB
261E:  CALL   08C6
2622:  MOVFF  38,C7
2626:  MOVLW  1F
2628:  MOVWF  xC8
262A:  CALL   090C
262E:  MOVFF  39,C7
2632:  MOVLW  1F
2634:  MOVWF  xC8
2636:  CALL   090C
263A:  MOVFF  3A,C7
263E:  MOVLW  1F
2640:  MOVWF  xC8
2642:  CALL   090C
2646:  MOVFF  3B,C7
264A:  MOVLW  1F
264C:  MOVWF  xC8
264E:  CALL   090C
2652:  MOVLW  20
2654:  MOVWF  xD8
2656:  CALL   07F8
265A:  MOVLW  20
265C:  MOVWF  xD8
265E:  CALL   07F8
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
2662:  BSF    F92.5
2664:  BTFSS  F80.5
2666:  BRA    268A
....................       {  if(Flanco == 0)  
2668:  BTFSC  17.3
266A:  BRA    2688
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
266C:  MOVLW  0B
266E:  SUBWF  1C,W
2670:  CLRF   03
2672:  ADDLW  38
2674:  MOVWF  FE9
2676:  MOVLW  00
2678:  ADDWFC 03,W
267A:  MOVWF  FEA
267C:  INCF   FEF,F
267E:  BSF    17.3
2680:  MOVLW  1E
2682:  MOVWF  xDE
2684:  CALL   0626
....................          else 
2688:  BRA    268C
....................             {Flanco = 0;} 
268A:  BCF    17.3
....................              
....................       if(DOWN)//Si oprime hacia abajo 
268C:  BSF    F96.0
268E:  BTFSS  F84.0
2690:  BRA    26B4
....................       {  if(Flanco2 == 0)  
2692:  BTFSC  17.5
2694:  BRA    26B2
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
2696:  MOVLW  0B
2698:  SUBWF  1C,W
269A:  CLRF   03
269C:  ADDLW  38
269E:  MOVWF  FE9
26A0:  MOVLW  00
26A2:  ADDWFC 03,W
26A4:  MOVWF  FEA
26A6:  DECF   FEF,F
26A8:  BSF    17.5
26AA:  MOVLW  1E
26AC:  MOVWF  xDE
26AE:  CALL   0626
....................          else 
26B2:  BRA    26B6
....................             {Flanco2 = 0;} 
26B4:  BCF    17.5
....................     
....................       if(RIGHT)// Si oprime derecha 
26B6:  BSF    F96.1
26B8:  BTFSS  F84.1
26BA:  BRA    26D6
....................       {  if(Flanco1 == 0)  
26BC:  BTFSC  17.4
26BE:  BRA    26D4
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
26C0:  BSF    17.4
26C2:  INCF   1C,F
26C4:  MOVLW  1E
26C6:  MOVWF  xDE
26C8:  CALL   0626
26CC:  MOVLW  0C
26CE:  MOVWF  xD8
26D0:  CALL   07F8
....................          else 
26D4:  BRA    26D8
....................             {Flanco1 = 0;}    
26D6:  BCF    17.4
....................              
....................        if(LEFT)// Si oprime Izquierda 
26D8:  BSF    F96.2
26DA:  BTFSS  F84.2
26DC:  BRA    26F8
....................       {  if(Flanco3 == 0)  
26DE:  BTFSC  17.6
26E0:  BRA    26F6
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");}} 
26E2:  BSF    17.6
26E4:  DECF   1C,F
26E6:  MOVLW  1E
26E8:  MOVWF  xDE
26EA:  CALL   0626
26EE:  MOVLW  0C
26F0:  MOVWF  xD8
26F2:  CALL   07F8
....................          else 
26F6:  BRA    26FA
....................             {Flanco3 = 0;}     
26F8:  BCF    17.6
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
26FA:  MOVLW  0B
26FC:  SUBWF  1C,W
26FE:  CLRF   03
2700:  ADDLW  38
2702:  MOVWF  FE9
2704:  MOVLW  00
2706:  ADDWFC 03,W
2708:  MOVWF  FEA
270A:  BTFSC  FEF.7
270C:  BRA    2710
270E:  BRA    2724
....................        {clave[unidad-11]=9;} 
2710:  MOVLW  0B
2712:  SUBWF  1C,W
2714:  CLRF   03
2716:  ADDLW  38
2718:  MOVWF  FE9
271A:  MOVLW  00
271C:  ADDWFC 03,W
271E:  MOVWF  FEA
2720:  MOVLW  09
2722:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
2724:  MOVLW  0B
2726:  SUBWF  1C,W
2728:  CLRF   03
272A:  ADDLW  38
272C:  MOVWF  FE9
272E:  MOVLW  00
2730:  ADDWFC 03,W
2732:  MOVWF  FEA
2734:  BTFSC  FEF.7
2736:  BRA    2750
2738:  MOVF   FEF,W
273A:  SUBLW  09
273C:  BC    2750
....................        {clave[unidad-11]=0;} 
273E:  MOVLW  0B
2740:  SUBWF  1C,W
2742:  CLRF   03
2744:  ADDLW  38
2746:  MOVWF  FE9
2748:  MOVLW  00
274A:  ADDWFC 03,W
274C:  MOVWF  FEA
274E:  CLRF   FEF
....................        if(unidad<11) 
2750:  MOVF   1C,W
2752:  SUBLW  0A
2754:  BNC   2776
....................        {Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);} 
2756:  MOVLW  01
2758:  MOVWF  19
275A:  CLRF   33
275C:  MOVLW  02
275E:  MOVWF  1D
2760:  MOVWF  1F
2762:  MOVLW  0B
2764:  MOVWF  1C
2766:  MOVLW  02
2768:  MOVWF  xC7
276A:  MOVLW  FA
276C:  MOVWF  xDE
276E:  CALL   0626
2772:  DECFSZ xC7,F
2774:  BRA    276A
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
2776:  MOVFF  1C,D9
277A:  MOVLW  04
277C:  MOVWF  xDA
277E:  CALL   0796
....................        lcd_putc(t[2]); 
2782:  MOVFF  37,D8
2786:  CALL   07F8
....................        if(unidad>14)// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
278A:  MOVF   1C,W
278C:  SUBLW  0E
278E:  BTFSC  FD8.0
2790:  BRA    28AC
....................        { 
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) 
2792:  MOVF   3C,W
2794:  SUBWF  38,W
2796:  BNZ   2832
2798:  MOVF   3D,W
279A:  SUBWF  39,W
279C:  BNZ   2832
279E:  MOVF   3E,W
27A0:  SUBWF  3A,W
27A2:  BNZ   2832
27A4:  MOVF   3F,W
27A6:  SUBWF  3B,W
27A8:  BNZ   2832
....................             {lcd_gotoxy(1,1); 
27AA:  MOVLW  01
27AC:  MOVWF  xD9
27AE:  MOVWF  xDA
27B0:  CALL   0796
....................             printf(lcd_putc,"                    "); 
27B4:  MOVLW  CE
27B6:  MOVWF  FF6
27B8:  MOVLW  03
27BA:  MOVWF  FF7
27BC:  CALL   0856
....................             lcd_gotoxy(1,2); 
27C0:  MOVLW  01
27C2:  MOVWF  xD9
27C4:  MOVLW  02
27C6:  MOVWF  xDA
27C8:  CALL   0796
....................             printf(lcd_putc,"     Contraseña     "); 
27CC:  MOVLW  E4
27CE:  MOVWF  FF6
27D0:  MOVLW  03
27D2:  MOVWF  FF7
27D4:  CALL   0856
....................             lcd_gotoxy(1,3); 
27D8:  MOVLW  01
27DA:  MOVWF  xD9
27DC:  MOVLW  03
27DE:  MOVWF  xDA
27E0:  CALL   0796
....................             printf(lcd_putc,"      Correcta      "); 
27E4:  MOVLW  FA
27E6:  MOVWF  FF6
27E8:  MOVLW  03
27EA:  MOVWF  FF7
27EC:  CALL   0856
....................             lcd_gotoxy(1,4); 
27F0:  MOVLW  01
27F2:  MOVWF  xD9
27F4:  MOVLW  04
27F6:  MOVWF  xDA
27F8:  CALL   0796
....................             printf(lcd_putc,"                    "); 
27FC:  MOVLW  10
27FE:  MOVWF  FF6
2800:  MOVLW  04
2802:  MOVWF  FF7
2804:  CALL   0856
....................             delay_ms(500);Menu=61;unidad=11;printf(lcd_putc,"\f"); 
2808:  MOVLW  02
280A:  MOVWF  xC7
280C:  MOVLW  FA
280E:  MOVWF  xDE
2810:  CALL   0626
2814:  DECFSZ xC7,F
2816:  BRA    280C
2818:  MOVLW  3D
281A:  MOVWF  19
281C:  MOVLW  0B
281E:  MOVWF  1C
2820:  MOVLW  0C
2822:  MOVWF  xD8
2824:  CALL   07F8
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;} 
2828:  CLRF   38
282A:  CLRF   39
282C:  CLRF   3A
282E:  CLRF   3B
....................          else 
2830:  BRA    28AC
....................          {lcd_gotoxy(1,1); 
2832:  MOVLW  01
2834:  MOVWF  xD9
2836:  MOVWF  xDA
2838:  CALL   0796
....................             printf(lcd_putc,"                    "); 
283C:  MOVLW  26
283E:  MOVWF  FF6
2840:  MOVLW  04
2842:  MOVWF  FF7
2844:  CALL   0856
....................             lcd_gotoxy(1,2); 
2848:  MOVLW  01
284A:  MOVWF  xD9
284C:  MOVLW  02
284E:  MOVWF  xDA
2850:  CALL   0796
....................             printf(lcd_putc,"     Contraseña     "); 
2854:  MOVLW  3C
2856:  MOVWF  FF6
2858:  MOVLW  04
285A:  MOVWF  FF7
285C:  CALL   0856
....................             lcd_gotoxy(1,3); 
2860:  MOVLW  01
2862:  MOVWF  xD9
2864:  MOVLW  03
2866:  MOVWF  xDA
2868:  CALL   0796
....................             printf(lcd_putc,"     Incorrecta     "); 
286C:  MOVLW  52
286E:  MOVWF  FF6
2870:  MOVLW  04
2872:  MOVWF  FF7
2874:  CALL   0856
....................             lcd_gotoxy(1,4); 
2878:  MOVLW  01
287A:  MOVWF  xD9
287C:  MOVLW  04
287E:  MOVWF  xDA
2880:  CALL   0796
....................             printf(lcd_putc,"                    "); 
2884:  MOVLW  68
2886:  MOVWF  FF6
2888:  MOVLW  04
288A:  MOVWF  FF7
288C:  CALL   0856
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");} 
2890:  MOVLW  02
2892:  MOVWF  xC7
2894:  MOVLW  FA
2896:  MOVWF  xDE
2898:  CALL   0626
289C:  DECFSZ xC7,F
289E:  BRA    2894
28A0:  MOVLW  0B
28A2:  MOVWF  1C
28A4:  MOVLW  0C
28A6:  MOVWF  xD8
28A8:  CALL   07F8
....................        } 
....................                 
....................           if(unidad>11&&unidad<14) 
28AC:  MOVF   1C,W
28AE:  SUBLW  0B
28B0:  BC    28D0
28B2:  MOVF   1C,W
28B4:  SUBLW  0D
28B6:  BNC   28D0
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
28B8:  MOVLW  01
28BA:  SUBWF  1C,W
28BC:  MOVWF  xC7
28BE:  MOVWF  xD9
28C0:  MOVLW  04
28C2:  MOVWF  xDA
28C4:  CALL   0796
....................             lcd_putc(t[1]); 
28C8:  MOVFF  36,D8
28CC:  CALL   07F8
....................           } 
....................    }       
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu6.1--------------------------------------------------------------- 
....................    if(Menu == 61){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
28D0:  MOVF   19,W
28D2:  SUBLW  3D
28D4:  BTFSS  FD8.2
28D6:  BRA    2BE6
....................    lcd_gotoxy(1,1); 
28D8:  MOVLW  01
28DA:  MOVWF  xD9
28DC:  MOVWF  xDA
28DE:  CALL   0796
....................    printf(lcd_putc,"     Ingrese        "); 
28E2:  MOVLW  7E
28E4:  MOVWF  FF6
28E6:  MOVLW  04
28E8:  MOVWF  FF7
28EA:  CALL   0856
....................    lcd_gotoxy(1,2); 
28EE:  MOVLW  01
28F0:  MOVWF  xD9
28F2:  MOVLW  02
28F4:  MOVWF  xDA
28F6:  CALL   0796
....................    printf(lcd_putc,"  Contraseña Nueva  "); 
28FA:  MOVLW  94
28FC:  MOVWF  FF6
28FE:  MOVLW  04
2900:  MOVWF  FF7
2902:  CALL   0856
....................    lcd_gotoxy(1,3); 
2906:  MOVLW  01
2908:  MOVWF  xD9
290A:  MOVLW  03
290C:  MOVWF  xDA
290E:  CALL   0796
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2912:  MOVLW  AA
2914:  MOVWF  FF6
2916:  MOVLW  04
2918:  MOVWF  FF7
291A:  MOVLW  0A
291C:  MOVWF  xCB
291E:  CALL   08C6
2922:  MOVFF  38,C7
2926:  MOVLW  1F
2928:  MOVWF  xC8
292A:  CALL   090C
292E:  MOVFF  39,C7
2932:  MOVLW  1F
2934:  MOVWF  xC8
2936:  CALL   090C
293A:  MOVFF  3A,C7
293E:  MOVLW  1F
2940:  MOVWF  xC8
2942:  CALL   090C
2946:  MOVFF  3B,C7
294A:  MOVLW  1F
294C:  MOVWF  xC8
294E:  CALL   090C
2952:  MOVLW  20
2954:  MOVWF  xD8
2956:  CALL   07F8
295A:  MOVLW  20
295C:  MOVWF  xD8
295E:  CALL   07F8
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
2962:  BSF    F92.5
2964:  BTFSS  F80.5
2966:  BRA    298A
....................       {  if(Flanco == 0)  
2968:  BTFSC  17.3
296A:  BRA    2988
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
296C:  MOVLW  0B
296E:  SUBWF  1C,W
2970:  CLRF   03
2972:  ADDLW  38
2974:  MOVWF  FE9
2976:  MOVLW  00
2978:  ADDWFC 03,W
297A:  MOVWF  FEA
297C:  INCF   FEF,F
297E:  BSF    17.3
2980:  MOVLW  1E
2982:  MOVWF  xDE
2984:  CALL   0626
....................          else 
2988:  BRA    298C
....................             {Flanco = 0;} 
298A:  BCF    17.3
....................              
....................       if(DOWN)//Si oprime hacia abajo 
298C:  BSF    F96.0
298E:  BTFSS  F84.0
2990:  BRA    29B4
....................       {  if(Flanco2 == 0)  
2992:  BTFSC  17.5
2994:  BRA    29B2
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
2996:  MOVLW  0B
2998:  SUBWF  1C,W
299A:  CLRF   03
299C:  ADDLW  38
299E:  MOVWF  FE9
29A0:  MOVLW  00
29A2:  ADDWFC 03,W
29A4:  MOVWF  FEA
29A6:  DECF   FEF,F
29A8:  BSF    17.5
29AA:  MOVLW  1E
29AC:  MOVWF  xDE
29AE:  CALL   0626
....................          else 
29B2:  BRA    29B6
....................             {Flanco2 = 0;} 
29B4:  BCF    17.5
....................     
....................       if(RIGHT)// Si oprime Derecha 
29B6:  BSF    F96.1
29B8:  BTFSS  F84.1
29BA:  BRA    29D6
....................       {  if(Flanco1 == 0)  
29BC:  BTFSC  17.4
29BE:  BRA    29D4
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
29C0:  BSF    17.4
29C2:  INCF   1C,F
29C4:  MOVLW  1E
29C6:  MOVWF  xDE
29C8:  CALL   0626
29CC:  MOVLW  0C
29CE:  MOVWF  xD8
29D0:  CALL   07F8
....................          else 
29D4:  BRA    29D8
....................             {Flanco1 = 0;}    
29D6:  BCF    17.4
....................              
....................        if(LEFT)// Si oprime Izquierda 
29D8:  BSF    F96.2
29DA:  BTFSS  F84.2
29DC:  BRA    29F8
....................       {  if(Flanco3 == 0)  
29DE:  BTFSC  17.6
29E0:  BRA    29F6
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");}} 
29E2:  BSF    17.6
29E4:  DECF   1C,F
29E6:  MOVLW  1E
29E8:  MOVWF  xDE
29EA:  CALL   0626
29EE:  MOVLW  0C
29F0:  MOVWF  xD8
29F2:  CALL   07F8
....................          else 
29F6:  BRA    29FA
....................             {Flanco3 = 0;}     
29F8:  BCF    17.6
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
29FA:  MOVLW  0B
29FC:  SUBWF  1C,W
29FE:  CLRF   03
2A00:  ADDLW  38
2A02:  MOVWF  FE9
2A04:  MOVLW  00
2A06:  ADDWFC 03,W
2A08:  MOVWF  FEA
2A0A:  BTFSC  FEF.7
2A0C:  BRA    2A10
2A0E:  BRA    2A24
....................        {clave[unidad-11]=9;} 
2A10:  MOVLW  0B
2A12:  SUBWF  1C,W
2A14:  CLRF   03
2A16:  ADDLW  38
2A18:  MOVWF  FE9
2A1A:  MOVLW  00
2A1C:  ADDWFC 03,W
2A1E:  MOVWF  FEA
2A20:  MOVLW  09
2A22:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
2A24:  MOVLW  0B
2A26:  SUBWF  1C,W
2A28:  CLRF   03
2A2A:  ADDLW  38
2A2C:  MOVWF  FE9
2A2E:  MOVLW  00
2A30:  ADDWFC 03,W
2A32:  MOVWF  FEA
2A34:  BTFSC  FEF.7
2A36:  BRA    2A50
2A38:  MOVF   FEF,W
2A3A:  SUBLW  09
2A3C:  BC    2A50
....................        {clave[unidad-11]=0;} 
2A3E:  MOVLW  0B
2A40:  SUBWF  1C,W
2A42:  CLRF   03
2A44:  ADDLW  38
2A46:  MOVWF  FE9
2A48:  MOVLW  00
2A4A:  ADDWFC 03,W
2A4C:  MOVWF  FEA
2A4E:  CLRF   FEF
....................        if(unidad<11) 
2A50:  MOVF   1C,W
2A52:  SUBLW  0A
2A54:  BNC   2A5E
....................        {Menu=5;unidad=11;} 
2A56:  MOVLW  05
2A58:  MOVWF  19
2A5A:  MOVLW  0B
2A5C:  MOVWF  1C
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
2A5E:  MOVFF  1C,D9
2A62:  MOVLW  04
2A64:  MOVWF  xDA
2A66:  CALL   0796
....................        lcd_putc(t[2]); 
2A6A:  MOVFF  37,D8
2A6E:  CALL   07F8
....................        if(unidad>14)// Si ya ingreso la nueva contraseña. 
2A72:  MOVF   1C,W
2A74:  SUBLW  0E
2A76:  BTFSC  FD8.0
2A78:  BRA    2BC2
....................        { 
....................             lcd_gotoxy(1,1); 
2A7A:  MOVLW  01
2A7C:  MOVWF  xD9
2A7E:  MOVWF  xDA
2A80:  CALL   0796
....................             printf(lcd_putc,"                    "); 
2A84:  MOVLW  C0
2A86:  MOVWF  FF6
2A88:  MOVLW  04
2A8A:  MOVWF  FF7
2A8C:  CALL   0856
....................             lcd_gotoxy(1,2); 
2A90:  MOVLW  01
2A92:  MOVWF  xD9
2A94:  MOVLW  02
2A96:  MOVWF  xDA
2A98:  CALL   0796
....................             printf(lcd_putc,"     Contraseña     "); 
2A9C:  MOVLW  D6
2A9E:  MOVWF  FF6
2AA0:  MOVLW  04
2AA2:  MOVWF  FF7
2AA4:  CALL   0856
....................             lcd_gotoxy(1,3); 
2AA8:  MOVLW  01
2AAA:  MOVWF  xD9
2AAC:  MOVLW  03
2AAE:  MOVWF  xDA
2AB0:  CALL   0796
....................             printf(lcd_putc,"     Almacenada     "); 
2AB4:  MOVLW  EC
2AB6:  MOVWF  FF6
2AB8:  MOVLW  04
2ABA:  MOVWF  FF7
2ABC:  CALL   0856
....................             lcd_gotoxy(1,4); 
2AC0:  MOVLW  01
2AC2:  MOVWF  xD9
2AC4:  MOVLW  04
2AC6:  MOVWF  xDA
2AC8:  CALL   0796
....................             printf(lcd_putc,"                    "); 
2ACC:  MOVLW  02
2ACE:  MOVWF  FF6
2AD0:  MOVLW  05
2AD2:  MOVWF  FF7
2AD4:  CALL   0856
....................             write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
2AD8:  CLRF   FA9
2ADA:  MOVFF  38,FA8
2ADE:  BCF    FA6.6
2AE0:  BCF    FA6.7
2AE2:  BSF    FA6.2
2AE4:  MOVF   FF2,W
2AE6:  MOVWF  00
2AE8:  BCF    FF2.7
2AEA:  MOVLB  F
2AEC:  MOVLW  55
2AEE:  MOVWF  FA7
2AF0:  MOVLW  AA
2AF2:  MOVWF  FA7
2AF4:  BSF    FA6.1
2AF6:  BTFSC  FA6.1
2AF8:  BRA    2AF6
2AFA:  BCF    FA6.2
2AFC:  MOVF   00,W
2AFE:  IORWF  FF2,F
2B00:  MOVLW  14
2B02:  MOVLB  0
2B04:  MOVWF  xDE
2B06:  CALL   0626
2B0A:  MOVLW  01
2B0C:  MOVWF  FA9
2B0E:  MOVFF  39,FA8
2B12:  BCF    FA6.6
2B14:  BCF    FA6.7
2B16:  BSF    FA6.2
2B18:  MOVF   FF2,W
2B1A:  MOVWF  00
2B1C:  BCF    FF2.7
2B1E:  MOVLB  F
2B20:  MOVLW  55
2B22:  MOVWF  FA7
2B24:  MOVLW  AA
2B26:  MOVWF  FA7
2B28:  BSF    FA6.1
2B2A:  BTFSC  FA6.1
2B2C:  BRA    2B2A
2B2E:  BCF    FA6.2
2B30:  MOVF   00,W
2B32:  IORWF  FF2,F
2B34:  MOVLW  14
2B36:  MOVLB  0
2B38:  MOVWF  xDE
2B3A:  CALL   0626
....................             write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
2B3E:  MOVLW  02
2B40:  MOVWF  FA9
2B42:  MOVFF  3A,FA8
2B46:  BCF    FA6.6
2B48:  BCF    FA6.7
2B4A:  BSF    FA6.2
2B4C:  MOVF   FF2,W
2B4E:  MOVWF  00
2B50:  BCF    FF2.7
2B52:  MOVLB  F
2B54:  MOVLW  55
2B56:  MOVWF  FA7
2B58:  MOVLW  AA
2B5A:  MOVWF  FA7
2B5C:  BSF    FA6.1
2B5E:  BTFSC  FA6.1
2B60:  BRA    2B5E
2B62:  BCF    FA6.2
2B64:  MOVF   00,W
2B66:  IORWF  FF2,F
2B68:  MOVLW  14
2B6A:  MOVLB  0
2B6C:  MOVWF  xDE
2B6E:  CALL   0626
2B72:  MOVLW  03
2B74:  MOVWF  FA9
2B76:  MOVFF  3B,FA8
2B7A:  BCF    FA6.6
2B7C:  BCF    FA6.7
2B7E:  BSF    FA6.2
2B80:  MOVF   FF2,W
2B82:  MOVWF  00
2B84:  BCF    FF2.7
2B86:  MOVLB  F
2B88:  MOVLW  55
2B8A:  MOVWF  FA7
2B8C:  MOVLW  AA
2B8E:  MOVWF  FA7
2B90:  BSF    FA6.1
2B92:  BTFSC  FA6.1
2B94:  BRA    2B92
2B96:  BCF    FA6.2
2B98:  MOVF   00,W
2B9A:  IORWF  FF2,F
2B9C:  MOVLW  14
2B9E:  MOVLB  0
2BA0:  MOVWF  xDE
2BA2:  CALL   0626
....................             delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
2BA6:  MOVLW  02
2BA8:  MOVWF  xC7
2BAA:  MOVLW  FA
2BAC:  MOVWF  xDE
2BAE:  CALL   0626
2BB2:  DECFSZ xC7,F
2BB4:  BRA    2BAA
2BB6:  MOVLW  01
2BB8:  MOVWF  19
2BBA:  CLRF   33
2BBC:  MOVLW  02
2BBE:  MOVWF  1D
2BC0:  MOVWF  1F
....................        } 
....................        
....................            if(unidad>11&&unidad<14) 
2BC2:  MOVF   1C,W
2BC4:  SUBLW  0B
2BC6:  BC    2BE6
2BC8:  MOVF   1C,W
2BCA:  SUBLW  0D
2BCC:  BNC   2BE6
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2BCE:  MOVLW  01
2BD0:  SUBWF  1C,W
2BD2:  MOVWF  xC7
2BD4:  MOVWF  xD9
2BD6:  MOVLW  04
2BD8:  MOVWF  xDA
2BDA:  CALL   0796
....................             lcd_putc(t[1]); 
2BDE:  MOVFF  36,D8
2BE2:  CALL   07F8
....................           } 
....................    }       
.................... //----------------Fin-Menu6.1--------------------------------------------------------------- 
....................     
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5){ // Menu de tiempo de trabajo de Luz UV 
2BE6:  MOVF   19,W
2BE8:  SUBLW  05
2BEA:  BNZ   2C5E
....................    lcd_gotoxy(1,1); 
2BEC:  MOVLW  01
2BEE:  MOVWF  xD9
2BF0:  MOVWF  xDA
2BF2:  CALL   0796
....................    printf(lcd_putc,"  Duracion Actual   "); 
2BF6:  MOVLW  18
2BF8:  MOVWF  FF6
2BFA:  MOVLW  05
2BFC:  MOVWF  FF7
2BFE:  CALL   0856
....................    lcd_gotoxy(1,2); 
2C02:  MOVLW  01
2C04:  MOVWF  xD9
2C06:  MOVLW  02
2C08:  MOVWF  xDA
2C0A:  CALL   0796
....................    printf(lcd_putc,"   Tiempo= %05Lu   ",horas); 
2C0E:  MOVLW  2E
2C10:  MOVWF  FF6
2C12:  MOVLW  05
2C14:  MOVWF  FF7
2C16:  MOVLW  0B
2C18:  MOVWF  xCB
2C1A:  CALL   08C6
2C1E:  MOVLW  08
2C20:  MOVWF  FE9
2C22:  MOVFF  48,C8
2C26:  MOVFF  47,C7
2C2A:  GOTO   0AFC
2C2E:  MOVLW  20
2C30:  MOVWF  xD8
2C32:  CALL   07F8
2C36:  MOVLW  20
2C38:  MOVWF  xD8
2C3A:  CALL   07F8
2C3E:  MOVLW  20
2C40:  MOVWF  xD8
2C42:  CALL   07F8
....................    lcd_gotoxy(1,4); 
2C46:  MOVLW  01
2C48:  MOVWF  xD9
2C4A:  MOVLW  04
2C4C:  MOVWF  xDA
2C4E:  CALL   0796
....................    printf(lcd_putc," RESET= Oprima ^ y > "); 
2C52:  MOVLW  42
2C54:  MOVWF  FF6
2C56:  MOVLW  05
2C58:  MOVWF  FF7
2C5A:  CALL   0856
....................     
....................    } 
....................     
....................       if(UP && RIGHT)//Si oprime hacia arriba 
2C5E:  BSF    F92.5
2C60:  BTFSS  F80.5
2C62:  BRA    2D54
2C64:  BSF    F96.1
2C66:  BTFSS  F84.1
2C68:  BRA    2D54
....................       {   
....................          delay_ms(200); 
2C6A:  MOVLW  C8
2C6C:  MOVWF  xDE
2C6E:  CALL   0626
....................          printf(lcd_putc,"\f"); 
2C72:  MOVLW  0C
2C74:  MOVWF  xD8
2C76:  CALL   07F8
....................          lcd_gotoxy(1,2); 
2C7A:  MOVLW  01
2C7C:  MOVWF  xD9
2C7E:  MOVLW  02
2C80:  MOVWF  xDA
2C82:  CALL   0796
....................          printf(lcd_putc," Reset de tiempo "); 
2C86:  MOVLW  58
2C88:  MOVWF  FF6
2C8A:  MOVLW  05
2C8C:  MOVWF  FF7
2C8E:  CALL   0856
....................          lcd_gotoxy(1,3); 
2C92:  MOVLW  01
2C94:  MOVWF  xD9
2C96:  MOVLW  03
2C98:  MOVWF  xDA
2C9A:  CALL   0796
....................          printf(lcd_putc,"     Exitoso     "); 
2C9E:  MOVLW  6A
2CA0:  MOVWF  FF6
2CA2:  MOVLW  05
2CA4:  MOVWF  FF7
2CA6:  CALL   0856
....................          write_eeprom(50,0);write_eeprom(51,0);write_eeprom(52,0); 
2CAA:  MOVLW  32
2CAC:  MOVWF  FA9
2CAE:  CLRF   FA8
2CB0:  BCF    FA6.6
2CB2:  BCF    FA6.7
2CB4:  BSF    FA6.2
2CB6:  MOVF   FF2,W
2CB8:  MOVWF  00
2CBA:  BCF    FF2.7
2CBC:  MOVLB  F
2CBE:  MOVLW  55
2CC0:  MOVWF  FA7
2CC2:  MOVLW  AA
2CC4:  MOVWF  FA7
2CC6:  BSF    FA6.1
2CC8:  BTFSC  FA6.1
2CCA:  BRA    2CC8
2CCC:  BCF    FA6.2
2CCE:  MOVF   00,W
2CD0:  IORWF  FF2,F
2CD2:  MOVLW  33
2CD4:  MOVWF  FA9
2CD6:  CLRF   FA8
2CD8:  BCF    FA6.6
2CDA:  BCF    FA6.7
2CDC:  BSF    FA6.2
2CDE:  MOVF   FF2,W
2CE0:  MOVWF  00
2CE2:  BCF    FF2.7
2CE4:  MOVLW  55
2CE6:  MOVWF  FA7
2CE8:  MOVLW  AA
2CEA:  MOVWF  FA7
2CEC:  BSF    FA6.1
2CEE:  BTFSC  FA6.1
2CF0:  BRA    2CEE
2CF2:  BCF    FA6.2
2CF4:  MOVF   00,W
2CF6:  IORWF  FF2,F
2CF8:  MOVLW  34
2CFA:  MOVWF  FA9
2CFC:  CLRF   FA8
2CFE:  BCF    FA6.6
2D00:  BCF    FA6.7
2D02:  BSF    FA6.2
2D04:  MOVF   FF2,W
2D06:  MOVWF  00
2D08:  BCF    FF2.7
2D0A:  MOVLW  55
2D0C:  MOVWF  FA7
2D0E:  MOVLW  AA
2D10:  MOVWF  FA7
2D12:  BSF    FA6.1
2D14:  BTFSC  FA6.1
2D16:  BRA    2D14
2D18:  BCF    FA6.2
2D1A:  MOVF   00,W
2D1C:  IORWF  FF2,F
....................          delay_ms(700); 
2D1E:  MOVLW  04
2D20:  MOVLB  0
2D22:  MOVWF  xC7
2D24:  MOVLW  AF
2D26:  MOVWF  xDE
2D28:  CALL   0626
2D2C:  DECFSZ xC7,F
2D2E:  BRA    2D24
....................          segundos=0;minutos=0;horas=0; 
2D30:  CLRF   22
2D32:  CLRF   23
2D34:  CLRF   48
2D36:  CLRF   47
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2D38:  MOVLW  1E
2D3A:  MOVWF  xDE
2D3C:  CALL   0626
2D40:  MOVLW  01
2D42:  MOVWF  19
2D44:  CLRF   33
2D46:  MOVLW  02
2D48:  MOVWF  1D
2D4A:  MOVWF  1F
2D4C:  MOVLW  0C
2D4E:  MOVWF  xD8
2D50:  CALL   07F8
....................       } 
....................              
....................       if(LEFT)// Si oprime Izquierda 
2D54:  BSF    F96.2
2D56:  BTFSS  F84.2
2D58:  BRA    2D86
....................       { 
....................          if(Flanco3 == 0) 
2D5A:  BTFSC  17.6
2D5C:  BRA    2D84
....................          { 
....................             Flanco3 = 1;delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2D5E:  BSF    17.6
2D60:  MOVLW  02
2D62:  MOVWF  xC7
2D64:  MOVLW  FA
2D66:  MOVWF  xDE
2D68:  CALL   0626
2D6C:  DECFSZ xC7,F
2D6E:  BRA    2D64
2D70:  MOVLW  01
2D72:  MOVWF  19
2D74:  CLRF   33
2D76:  MOVLW  02
2D78:  MOVWF  1D
2D7A:  MOVWF  1F
2D7C:  MOVLW  0C
2D7E:  MOVWF  xD8
2D80:  CALL   07F8
....................          } 
....................       } 
....................       else 
2D84:  BRA    2D88
....................       { 
....................          Flanco3 = 0; 
2D86:  BCF    17.6
....................       } 
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6){ // Menu de Punto Cero 
2D88:  MOVF   19,W
2D8A:  SUBLW  06
2D8C:  BTFSS  FD8.2
2D8E:  BRA    2FAE
....................       lcd_gotoxy(1,1); 
2D90:  MOVLW  01
2D92:  MOVWF  xD9
2D94:  MOVWF  xDA
2D96:  CALL   0796
....................       printf(lcd_putc,"  Zero Point Config "); 
2D9A:  MOVLW  7C
2D9C:  MOVWF  FF6
2D9E:  MOVLW  05
2DA0:  MOVWF  FF7
2DA2:  CALL   0856
....................       lcd_gotoxy(1,2); 
2DA6:  MOVLW  01
2DA8:  MOVWF  xD9
2DAA:  MOVLW  02
2DAC:  MOVWF  xDA
2DAE:  CALL   0796
....................       printf(lcd_putc,"Presion= %3.2f inH2O ",(Leer_Sensor_Presion(5)*4.02)); 
2DB2:  MOVLW  05
2DB4:  MOVWF  xC7
2DB6:  CALL   0FEA
2DBA:  MOVFF  00,C7
2DBE:  MOVFF  01,C8
2DC2:  MOVFF  02,C9
2DC6:  MOVFF  03,CA
2DCA:  MOVFF  03,DE
2DCE:  MOVFF  02,DD
2DD2:  MOVFF  01,DC
2DD6:  MOVFF  00,DB
2DDA:  MOVLW  D7
2DDC:  MOVWF  xE2
2DDE:  MOVLW  A3
2DE0:  MOVWF  xE1
2DE2:  CLRF   xE0
2DE4:  MOVLW  81
2DE6:  MOVWF  xDF
2DE8:  CALL   1182
2DEC:  MOVFF  00,C7
2DF0:  MOVFF  01,C8
2DF4:  MOVFF  02,C9
2DF8:  MOVFF  03,CA
2DFC:  MOVLW  92
2DFE:  MOVWF  FF6
2E00:  MOVLW  05
2E02:  MOVWF  FF7
2E04:  MOVLW  09
2E06:  MOVWF  xCB
2E08:  CALL   08C6
2E0C:  MOVLW  02
2E0E:  MOVWF  FE9
2E10:  MOVFF  CA,CE
2E14:  MOVFF  C9,CD
2E18:  MOVFF  C8,CC
2E1C:  MOVFF  C7,CB
2E20:  MOVWF  xCF
2E22:  CALL   132E
2E26:  MOVLW  A0
2E28:  MOVWF  FF6
2E2A:  MOVLW  05
2E2C:  MOVWF  FF7
2E2E:  MOVLW  07
2E30:  MOVWF  xCB
2E32:  CALL   08C6
....................       lcd_gotoxy(1,3); 
2E36:  MOVLW  01
2E38:  MOVWF  xD9
2E3A:  MOVLW  03
2E3C:  MOVWF  xDA
2E3E:  CALL   0796
....................       printf(lcd_putc,"    ADC=%2.0f",sensores(1)); 
2E42:  MOVLW  01
2E44:  MOVWF  xCC
2E46:  CALL   0744
2E4A:  MOVFF  00,C7
2E4E:  MOVFF  01,C8
2E52:  MOVFF  02,C9
2E56:  MOVFF  03,CA
2E5A:  MOVLW  A8
2E5C:  MOVWF  FF6
2E5E:  MOVLW  05
2E60:  MOVWF  FF7
2E62:  MOVLW  08
2E64:  MOVWF  xCB
2E66:  CALL   08C6
2E6A:  MOVLW  01
2E6C:  MOVWF  FE9
2E6E:  MOVFF  CA,CE
2E72:  MOVFF  C9,CD
2E76:  MOVFF  C8,CC
2E7A:  MOVFF  C7,CB
2E7E:  CLRF   xCF
2E80:  CALL   132E
....................       lcd_gotoxy(1,4); 
2E84:  MOVLW  01
2E86:  MOVWF  xD9
2E88:  MOVLW  04
2E8A:  MOVWF  xDA
2E8C:  CALL   0796
....................       printf(lcd_putc,"    ZF=%2.0f",G); 
2E90:  MOVLW  B6
2E92:  MOVWF  FF6
2E94:  MOVLW  05
2E96:  MOVWF  FF7
2E98:  MOVLW  07
2E9A:  MOVWF  xCB
2E9C:  CALL   08C6
2EA0:  MOVLW  01
2EA2:  MOVWF  FE9
2EA4:  MOVFF  C6,CE
2EA8:  MOVFF  C5,CD
2EAC:  MOVFF  C4,CC
2EB0:  MOVFF  C3,CB
2EB4:  CLRF   xCF
2EB6:  CALL   132E
....................      
....................       if(RIGHT)// Si oprime derecha 
2EBA:  BSF    F96.1
2EBC:  BTFSS  F84.1
2EBE:  BRA    2F7E
....................       {  if(Flanco1 == 0)  
2EC0:  BTFSC  17.4
2EC2:  BRA    2F7C
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
2EC4:  MOVLW  01
2EC6:  MOVWF  19
2EC8:  CLRF   33
2ECA:  MOVLW  02
2ECC:  MOVWF  1D
2ECE:  MOVWF  1F
2ED0:  MOVLW  0B
2ED2:  MOVWF  1C
2ED4:  MOVLW  02
2ED6:  MOVWF  xC7
2ED8:  MOVLW  FA
2EDA:  MOVWF  xDE
2EDC:  CALL   0626
2EE0:  DECFSZ xC7,F
2EE2:  BRA    2ED8
2EE4:  MOVLW  0C
2EE6:  MOVWF  xD8
2EE8:  CALL   07F8
....................             G=sensores(1); 
2EEC:  MOVLW  01
2EEE:  MOVWF  xCC
2EF0:  CALL   0744
2EF4:  MOVFF  03,C6
2EF8:  MOVFF  02,C5
2EFC:  MOVFF  01,C4
2F00:  MOVFF  00,C3
....................             G16=(int16)G; 
2F04:  MOVFF  C6,DE
2F08:  MOVFF  C5,DD
2F0C:  MOVFF  C4,DC
2F10:  MOVFF  C3,DB
2F14:  CALL   14B4
2F18:  MOVFF  02,4A
2F1C:  MOVFF  01,49
....................             G_l=G16; G_h=(G16>>8); 
2F20:  MOVFF  49,26
2F24:  MOVFF  4A,27
....................              
....................             write_eeprom(60,G_l);write_eeprom(61,G_h);//Guardar valor de Setpoint en eeprom 
2F28:  MOVLW  3C
2F2A:  MOVWF  FA9
2F2C:  MOVFF  26,FA8
2F30:  BCF    FA6.6
2F32:  BCF    FA6.7
2F34:  BSF    FA6.2
2F36:  MOVF   FF2,W
2F38:  MOVWF  00
2F3A:  BCF    FF2.7
2F3C:  MOVLB  F
2F3E:  MOVLW  55
2F40:  MOVWF  FA7
2F42:  MOVLW  AA
2F44:  MOVWF  FA7
2F46:  BSF    FA6.1
2F48:  BTFSC  FA6.1
2F4A:  BRA    2F48
2F4C:  BCF    FA6.2
2F4E:  MOVF   00,W
2F50:  IORWF  FF2,F
2F52:  MOVLW  3D
2F54:  MOVWF  FA9
2F56:  MOVFF  27,FA8
2F5A:  BCF    FA6.6
2F5C:  BCF    FA6.7
2F5E:  BSF    FA6.2
2F60:  MOVF   FF2,W
2F62:  MOVWF  00
2F64:  BCF    FF2.7
2F66:  MOVLW  55
2F68:  MOVWF  FA7
2F6A:  MOVLW  AA
2F6C:  MOVWF  FA7
2F6E:  BSF    FA6.1
2F70:  BTFSC  FA6.1
2F72:  BRA    2F70
2F74:  BCF    FA6.2
2F76:  MOVF   00,W
2F78:  IORWF  FF2,F
2F7A:  MOVLB  0
....................             }} 
....................          else 
2F7C:  BRA    2F80
....................             {Flanco1 = 0;}    
2F7E:  BCF    17.4
....................              
....................        if(LEFT)// Si oprime Izquierda 
2F80:  BSF    F96.2
2F82:  BTFSS  F84.2
2F84:  BRA    2FAC
....................       {  if(Flanco3 == 0)  
2F86:  BTFSC  17.6
2F88:  BRA    2FAA
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f");}} 
2F8A:  MOVLW  01
2F8C:  MOVWF  19
2F8E:  CLRF   33
2F90:  MOVLW  02
2F92:  MOVWF  1D
2F94:  MOVWF  1F
2F96:  MOVLW  0B
2F98:  MOVWF  1C
2F9A:  MOVLW  1E
2F9C:  MOVWF  xDE
2F9E:  CALL   0626
2FA2:  MOVLW  0C
2FA4:  MOVWF  xD8
2FA6:  CALL   07F8
....................          else 
2FAA:  BRA    2FAE
....................             {Flanco3 = 0;}   
2FAC:  BCF    17.6
....................       } 
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu100--------------------------------------------------------------- 
....................    if(Menu == 100){ // Menu de seleccion de Estado de Luz UV 
2FAE:  MOVF   19,W
2FB0:  SUBLW  64
2FB2:  BTFSS  FD8.2
2FB4:  BRA    33BA
....................     
....................    if(Lectura==1) 
2FB6:  BTFSS  18.0
2FB8:  BRA    2FD4
....................    { 
....................       Lectura=0; 
2FBA:  BCF    18.0
....................       CaidaPresion=Leer_Sensor_Presion(5); 
2FBC:  MOVLW  05
2FBE:  MOVWF  xC7
2FC0:  CALL   0FEA
2FC4:  MOVFF  03,AA
2FC8:  MOVFF  02,A9
2FCC:  MOVFF  01,A8
2FD0:  MOVFF  00,A7
....................    } 
....................     
....................    lcd_gotoxy(1,1); 
2FD4:  MOVLW  01
2FD6:  MOVWF  xD9
2FD8:  MOVWF  xDA
2FDA:  CALL   0796
....................    printf(lcd_putc,"JPCR DP:%3.2f inH2O ",(CaidaPresion*4.02)); 
2FDE:  MOVFF  AA,DE
2FE2:  MOVFF  A9,DD
2FE6:  MOVFF  A8,DC
2FEA:  MOVFF  A7,DB
2FEE:  MOVLW  D7
2FF0:  MOVWF  xE2
2FF2:  MOVLW  A3
2FF4:  MOVWF  xE1
2FF6:  CLRF   xE0
2FF8:  MOVLW  81
2FFA:  MOVWF  xDF
2FFC:  CALL   1182
3000:  MOVFF  00,C7
3004:  MOVFF  01,C8
3008:  MOVFF  02,C9
300C:  MOVFF  03,CA
3010:  MOVLW  C4
3012:  MOVWF  FF6
3014:  MOVLW  05
3016:  MOVWF  FF7
3018:  MOVLW  08
301A:  MOVWF  xCB
301C:  CALL   08C6
3020:  MOVLW  02
3022:  MOVWF  FE9
3024:  MOVFF  CA,CE
3028:  MOVFF  C9,CD
302C:  MOVFF  C8,CC
3030:  MOVFF  C7,CB
3034:  MOVWF  xCF
3036:  CALL   132E
303A:  MOVLW  D1
303C:  MOVWF  FF6
303E:  MOVLW  05
3040:  MOVWF  FF7
3042:  MOVLW  07
3044:  MOVWF  xCB
3046:  CALL   08C6
....................    lcd_gotoxy(1,2); 
304A:  MOVLW  01
304C:  MOVWF  xD9
304E:  MOVLW  02
3050:  MOVWF  xDA
3052:  CALL   0796
....................    printf(lcd_putc,"Filtro:"); 
3056:  MOVLW  DA
3058:  MOVWF  FF6
305A:  MOVLW  05
305C:  MOVWF  FF7
305E:  CALL   0856
....................     
....................    Saturacion=(CaidaPresion/0.37)*11; 
3062:  MOVFF  AA,DE
3066:  MOVFF  A9,DD
306A:  MOVFF  A8,DC
306E:  MOVFF  A7,DB
3072:  MOVLW  A4
3074:  MOVWF  xE2
3076:  MOVLW  70
3078:  MOVWF  xE1
307A:  MOVLW  3D
307C:  MOVWF  xE0
307E:  MOVLW  7D
3080:  MOVWF  xDF
3082:  CALL   0BB0
3086:  MOVFF  00,C7
308A:  MOVFF  01,C8
308E:  MOVFF  02,C9
3092:  MOVFF  03,CA
3096:  MOVFF  03,DE
309A:  MOVFF  02,DD
309E:  MOVFF  01,DC
30A2:  MOVFF  00,DB
30A6:  CLRF   xE2
30A8:  CLRF   xE1
30AA:  MOVLW  30
30AC:  MOVWF  xE0
30AE:  MOVLW  82
30B0:  MOVWF  xDF
30B2:  CALL   1182
30B6:  MOVFF  03,A6
30BA:  MOVFF  02,A5
30BE:  MOVFF  01,A4
30C2:  MOVFF  00,A3
....................    if(Saturacion>11) 
30C6:  CLRF   xDE
30C8:  CLRF   xDD
30CA:  MOVLW  30
30CC:  MOVWF  xDC
30CE:  MOVLW  82
30D0:  MOVWF  xDB
30D2:  MOVFF  A6,E2
30D6:  MOVFF  A5,E1
30DA:  MOVFF  A4,E0
30DE:  MOVFF  A3,DF
30E2:  CALL   0F74
30E6:  BNC   30F4
....................    { 
....................       Saturacion=11; 
30E8:  CLRF   xA6
30EA:  CLRF   xA5
30EC:  MOVLW  30
30EE:  MOVWF  xA4
30F0:  MOVLW  82
30F2:  MOVWF  xA3
....................    } 
....................     
....................    for(i=0;i<floor(Saturacion);i++) 
30F4:  CLRF   2E
30F6:  MOVFF  A6,CA
30FA:  MOVFF  A5,C9
30FE:  MOVFF  A4,C8
3102:  MOVFF  A3,C7
3106:  CALL   181E
310A:  MOVFF  00,C7
310E:  MOVFF  01,C8
3112:  MOVFF  02,C9
3116:  MOVFF  03,CA
311A:  CLRF   xE0
311C:  MOVFF  2E,DF
3120:  CALL   070E
3124:  MOVFF  03,DE
3128:  MOVFF  02,DD
312C:  MOVFF  01,DC
3130:  MOVFF  00,DB
3134:  MOVFF  CA,E2
3138:  MOVFF  C9,E1
313C:  MOVFF  C8,E0
3140:  MOVFF  C7,DF
3144:  CALL   0F74
3148:  BNC   3166
....................    { 
....................       lcd_gotoxy(i+8,2); 
314A:  MOVLW  08
314C:  ADDWF  2E,W
314E:  MOVWF  xC7
3150:  MOVWF  xD9
3152:  MOVLW  02
3154:  MOVWF  xDA
3156:  CALL   0796
....................       printf(lcd_putc,"Ñ"); 
315A:  MOVLW  D1
315C:  MOVWF  xD8
315E:  CALL   07F8
....................    } 
3162:  INCF   2E,F
3164:  BRA    30F6
....................     
....................    for(i=floor(Saturacion);i<11;i++) 
3166:  MOVFF  A6,CA
316A:  MOVFF  A5,C9
316E:  MOVFF  A4,C8
3172:  MOVFF  A3,C7
3176:  CALL   181E
317A:  MOVFF  03,DE
317E:  MOVFF  02,DD
3182:  MOVFF  01,DC
3186:  MOVFF  00,DB
318A:  CALL   14B4
318E:  MOVFF  01,2E
3192:  MOVF   2E,W
3194:  SUBLW  0A
3196:  BNC   31B4
....................    { 
....................       lcd_gotoxy(i+8,2); 
3198:  MOVLW  08
319A:  ADDWF  2E,W
319C:  MOVWF  xC7
319E:  MOVWF  xD9
31A0:  MOVLW  02
31A2:  MOVWF  xDA
31A4:  CALL   0796
....................       printf(lcd_putc," "); 
31A8:  MOVLW  20
31AA:  MOVWF  xD8
31AC:  CALL   07F8
....................    } 
31B0:  INCF   2E,F
31B2:  BRA    3192
....................     
....................    lcd_gotoxy(10,3); 
31B4:  MOVLW  0A
31B6:  MOVWF  xD9
31B8:  MOVLW  03
31BA:  MOVWF  xDA
31BC:  CALL   0796
....................    printf(lcd_putc,"Tempo:%02u:%02u",tempo_minutos,tempo_segundos); 
31C0:  MOVLW  E2
31C2:  MOVWF  FF6
31C4:  MOVLW  05
31C6:  MOVWF  FF7
31C8:  MOVLW  06
31CA:  MOVWF  xCB
31CC:  CALL   08C6
31D0:  MOVFF  28,C7
31D4:  MOVLW  01
31D6:  MOVWF  xC8
31D8:  CALL   0A56
31DC:  MOVLW  3A
31DE:  MOVWF  xD8
31E0:  CALL   07F8
31E4:  MOVFF  29,C7
31E8:  MOVLW  01
31EA:  MOVWF  xC8
31EC:  CALL   0A56
....................     
....................    if(estadomv==1) 
31F0:  BTFSS  17.2
31F2:  BRA    322E
....................    { 
....................       lcd_gotoxy(1,4); 
31F4:  MOVLW  01
31F6:  MOVWF  xD9
31F8:  MOVLW  04
31FA:  MOVWF  xDA
31FC:  CALL   0796
....................       printf(lcd_putc,"Motor:ON "); 
3200:  MOVLW  F2
3202:  MOVWF  FF6
3204:  MOVLW  05
3206:  MOVWF  FF7
3208:  CALL   0856
....................       velocidades(read_eeprom(5)); 
320C:  MOVFF  FF2,C7
3210:  BCF    FF2.7
3212:  MOVLW  05
3214:  MOVWF  FA9
3216:  BCF    FA6.6
3218:  BCF    FA6.7
321A:  BSF    FA6.0
321C:  MOVF   FA8,W
321E:  BTFSC  xC7.7
3220:  BSF    FF2.7
3222:  MOVWF  xC8
3224:  MOVFF  C8,C9
3228:  CALL   0ABC
....................    } 
....................    else 
322C:  BRA    324C
....................    { 
....................       lcd_gotoxy(1,4); 
322E:  MOVLW  01
3230:  MOVWF  xD9
3232:  MOVLW  04
3234:  MOVWF  xDA
3236:  CALL   0796
....................       printf(lcd_putc,"Motor:OFF"); 
323A:  MOVLW  FC
323C:  MOVWF  FF6
323E:  MOVLW  05
3240:  MOVWF  FF7
3242:  CALL   0856
....................       velocidades(0);  
3246:  CLRF   xC9
3248:  CALL   0ABC
....................    } 
....................     
....................    if(estadouv==1) 
324C:  BTFSS  17.0
324E:  BRA    3294
....................    { 
....................       lcd_gotoxy(13,4); 
3250:  MOVLW  0D
3252:  MOVWF  xD9
3254:  MOVLW  04
3256:  MOVWF  xDA
3258:  CALL   0796
....................       printf(lcd_putc,"UV:ON "); 
325C:  MOVLW  06
325E:  MOVWF  FF6
3260:  MOVLW  06
3262:  MOVWF  FF7
3264:  CALL   0856
....................       estadomv=0; 
3268:  BCF    17.2
....................       velocidades(0); 
326A:  CLRF   xC9
326C:  CALL   0ABC
....................       estadofl=0; 
3270:  BCF    17.1
....................       Luz_Blanca_off; 
3272:  BCF    F8C.1
3274:  BCF    F95.1
....................       Luz_UV_on; 
3276:  BSF    F8C.0
3278:  BCF    F95.0
....................       tiempo_cumplido=0; 
327A:  BCF    17.7
....................       if(flaguv==0) 
327C:  BTFSC  18.1
327E:  BRA    3292
....................       { 
....................          delay_ms(50);lcd_init();flaguv=1;guardaruv=1; 
3280:  MOVLW  32
3282:  MOVWF  xDE
3284:  CALL   0626
3288:  CALL   06B8
328C:  BSF    18.1
328E:  MOVLW  01
3290:  MOVWF  31
....................       } 
....................    } 
....................    else 
3292:  BRA    32C8
....................    { 
....................       estadouv=0; 
3294:  BCF    17.0
....................       lcd_gotoxy(13,4); 
3296:  MOVLW  0D
3298:  MOVWF  xD9
329A:  MOVLW  04
329C:  MOVWF  xDA
329E:  CALL   0796
....................       printf(lcd_putc,"UV:OFF"); 
32A2:  MOVLW  0E
32A4:  MOVWF  FF6
32A6:  MOVLW  06
32A8:  MOVWF  FF7
32AA:  CALL   0856
....................       Luz_UV_off; 
32AE:  BCF    F8C.0
32B0:  BCF    F95.0
....................       if(flaguv==1) 
32B2:  BTFSS  18.1
32B4:  BRA    32C8
....................       { 
....................          delay_ms(50);lcd_init();flaguv=0;guardaruv=1; 
32B6:  MOVLW  32
32B8:  MOVWF  xDE
32BA:  CALL   0626
32BE:  CALL   06B8
32C2:  BCF    18.1
32C4:  MOVLW  01
32C6:  MOVWF  31
....................       } 
....................    } 
....................     
....................    if(estadofl==1) 
32C8:  BTFSS  17.1
32CA:  BRA    32FC
....................    { 
....................       lcd_gotoxy(1,3); 
32CC:  MOVLW  01
32CE:  MOVWF  xD9
32D0:  MOVLW  03
32D2:  MOVWF  xDA
32D4:  CALL   0796
....................       printf(lcd_putc,"Luz:ON "); 
32D8:  MOVLW  16
32DA:  MOVWF  FF6
32DC:  MOVLW  06
32DE:  MOVWF  FF7
32E0:  CALL   0856
....................       Luz_Blanca_on; 
32E4:  BSF    F8C.1
32E6:  BCF    F95.1
....................       if(flagfl==0) 
32E8:  BTFSC  18.2
32EA:  BRA    32FA
....................       { 
....................          delay_ms(50);lcd_init();flagfl=1; 
32EC:  MOVLW  32
32EE:  MOVWF  xDE
32F0:  CALL   0626
32F4:  CALL   06B8
32F8:  BSF    18.2
....................       } 
....................    } 
....................    else 
32FA:  BRA    332A
....................    { 
....................       lcd_gotoxy(1,3); 
32FC:  MOVLW  01
32FE:  MOVWF  xD9
3300:  MOVLW  03
3302:  MOVWF  xDA
3304:  CALL   0796
....................       printf(lcd_putc,"Luz:OFF"); 
3308:  MOVLW  1E
330A:  MOVWF  FF6
330C:  MOVLW  06
330E:  MOVWF  FF7
3310:  CALL   0856
....................       Luz_Blanca_off; 
3314:  BCF    F8C.1
3316:  BCF    F95.1
....................       if(flagfl==1) 
3318:  BTFSS  18.2
331A:  BRA    332A
....................       { 
....................          delay_ms(50);lcd_init();flagfl=0; 
331C:  MOVLW  32
331E:  MOVWF  xDE
3320:  CALL   0626
3324:  CALL   06B8
3328:  BCF    18.2
....................       } 
....................    } 
....................     
....................    if(UP)//Si oprime hacia arriba 
332A:  BSF    F92.5
332C:  BTFSS  F80.5
332E:  BRA    334A
....................    { 
....................       if(Flanco == 0) 
3330:  BTFSC  17.3
3332:  BRA    3348
....................       { 
....................          estadofl=!estadofl;Flanco = 1;delay_ms(300); 
3334:  BTG    17.1
3336:  BSF    17.3
3338:  MOVLW  02
333A:  MOVWF  xC7
333C:  MOVLW  96
333E:  MOVWF  xDE
3340:  CALL   0626
3344:  DECFSZ xC7,F
3346:  BRA    333C
....................       } 
....................    } 
....................    else 
3348:  BRA    334C
....................    { 
....................       Flanco = 0; 
334A:  BCF    17.3
....................    } 
....................     
....................    if(DOWN)//Si oprime hacia abajo 
334C:  BSF    F96.0
334E:  BTFSS  F84.0
3350:  BRA    336C
....................    { 
....................       if(Flanco1 == 0) 
3352:  BTFSC  17.4
3354:  BRA    336A
....................       { 
....................          estadomv=!estadomv;Flanco1 = 1;delay_ms(300); 
3356:  BTG    17.2
3358:  BSF    17.4
335A:  MOVLW  02
335C:  MOVWF  xC7
335E:  MOVLW  96
3360:  MOVWF  xDE
3362:  CALL   0626
3366:  DECFSZ xC7,F
3368:  BRA    335E
....................       } 
....................    } 
....................    else 
336A:  BRA    336E
....................    { 
....................       Flanco1 = 0; 
336C:  BCF    17.4
....................    } 
....................     
....................    if(RIGHT)//Si oprime hacia izquierda 
336E:  BSF    F96.1
3370:  BTFSS  F84.1
3372:  BRA    3398
....................    { 
....................       printf(lcd_putc,"\f");delay_ms(300);Menu=1; paso=0;Flecha=2;Flecha2=2;    
3374:  MOVLW  0C
3376:  MOVWF  xD8
3378:  CALL   07F8
337C:  MOVLW  02
337E:  MOVWF  xC7
3380:  MOVLW  96
3382:  MOVWF  xDE
3384:  CALL   0626
3388:  DECFSZ xC7,F
338A:  BRA    3380
338C:  MOVLW  01
338E:  MOVWF  19
3390:  CLRF   33
3392:  MOVLW  02
3394:  MOVWF  1D
3396:  MOVWF  1F
....................    } 
....................     
....................    if(LEFT)//Si oprime hacia izquierda 
3398:  BSF    F96.2
339A:  BTFSS  F84.2
339C:  BRA    33B8
....................    { 
....................       if(Flanco2 == 0) 
339E:  BTFSC  17.5
33A0:  BRA    33B6
....................       { 
....................          estadouv=!estadouv;Flanco2 = 1;delay_ms(300); 
33A2:  BTG    17.0
33A4:  BSF    17.5
33A6:  MOVLW  02
33A8:  MOVWF  xC7
33AA:  MOVLW  96
33AC:  MOVWF  xDE
33AE:  CALL   0626
33B2:  DECFSZ xC7,F
33B4:  BRA    33AA
....................       } 
....................    } 
....................    else 
33B6:  BRA    33BA
....................    { 
....................       Flanco2 = 0; 
33B8:  BCF    17.5
....................    } 
....................      
....................    } 
.................... //----------------Fin-Menu100--------------------------------------------------------------    
....................    if(guardaruv==1) 
33BA:  DECFSZ 31,W
33BC:  BRA    346C
....................    { 
....................       write_eeprom(50,segundos);write_eeprom(51,minutos); 
33BE:  MOVLW  32
33C0:  MOVWF  FA9
33C2:  MOVFF  22,FA8
33C6:  BCF    FA6.6
33C8:  BCF    FA6.7
33CA:  BSF    FA6.2
33CC:  MOVF   FF2,W
33CE:  MOVWF  00
33D0:  BCF    FF2.7
33D2:  MOVLB  F
33D4:  MOVLW  55
33D6:  MOVWF  FA7
33D8:  MOVLW  AA
33DA:  MOVWF  FA7
33DC:  BSF    FA6.1
33DE:  BTFSC  FA6.1
33E0:  BRA    33DE
33E2:  BCF    FA6.2
33E4:  MOVF   00,W
33E6:  IORWF  FF2,F
33E8:  MOVLW  33
33EA:  MOVWF  FA9
33EC:  MOVFF  23,FA8
33F0:  BCF    FA6.6
33F2:  BCF    FA6.7
33F4:  BSF    FA6.2
33F6:  MOVF   FF2,W
33F8:  MOVWF  00
33FA:  BCF    FF2.7
33FC:  MOVLW  55
33FE:  MOVWF  FA7
3400:  MOVLW  AA
3402:  MOVWF  FA7
3404:  BSF    FA6.1
3406:  BTFSC  FA6.1
3408:  BRA    3406
340A:  BCF    FA6.2
340C:  MOVF   00,W
340E:  IORWF  FF2,F
....................       horasL=(int8)horas; 
3410:  MOVFF  47,24
....................       horasH=(int8)(horas>>8); 
3414:  MOVF   48,W
3416:  MOVWF  25
....................       write_eeprom(52,horasL); 
3418:  MOVLW  34
341A:  MOVWF  FA9
341C:  MOVFF  24,FA8
3420:  BCF    FA6.6
3422:  BCF    FA6.7
3424:  BSF    FA6.2
3426:  MOVFF  FF2,00
342A:  BCF    FF2.7
342C:  MOVLW  55
342E:  MOVWF  FA7
3430:  MOVLW  AA
3432:  MOVWF  FA7
3434:  BSF    FA6.1
3436:  BTFSC  FA6.1
3438:  BRA    3436
343A:  BCF    FA6.2
343C:  MOVF   00,W
343E:  IORWF  FF2,F
....................       write_eeprom(53,horasH); 
3440:  MOVLW  35
3442:  MOVWF  FA9
3444:  MOVFF  25,FA8
3448:  BCF    FA6.6
344A:  BCF    FA6.7
344C:  BSF    FA6.2
344E:  MOVFF  FF2,00
3452:  BCF    FF2.7
3454:  MOVLW  55
3456:  MOVWF  FA7
3458:  MOVLW  AA
345A:  MOVWF  FA7
345C:  BSF    FA6.1
345E:  BTFSC  FA6.1
3460:  BRA    345E
3462:  BCF    FA6.2
3464:  MOVF   00,W
3466:  IORWF  FF2,F
....................       guardaruv=0; 
3468:  CLRF   31
346A:  MOVLB  0
....................    } 
....................    
....................    if(tiemporeset>=20) 
346C:  MOVF   30,W
346E:  SUBLW  13
3470:  BC    3478
....................    { 
....................       lcd_init(); 
3472:  CALL   06B8
....................       tiemporeset=0; 
3476:  CLRF   30
....................    }    
....................     
....................    if(segundos>=60) 
3478:  MOVF   22,W
347A:  SUBLW  3B
347C:  BC    3482
....................    { 
....................       segundos=0;minutos++; 
347E:  CLRF   22
3480:  INCF   23,F
....................    } 
....................    if(minutos==60) 
3482:  MOVF   23,W
3484:  SUBLW  3C
3486:  BNZ   3490
....................    { 
....................       minutos=0;horas++; 
3488:  CLRF   23
348A:  INCF   47,F
348C:  BTFSC  FD8.2
348E:  INCF   48,F
....................    } 
....................     
....................    } 
3490:  GOTO   1C22
.................... } 
....................  
3494:  SLEEP 

Configuration Fuses:
   Word  1: CE20   IESO FCMEN HSPLL PLL1 CPUDIV1 USBDIV
   Word  2: 1E1E   BROWNOUT NOWDT BORV20 PUT WDT32768 NOVREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
