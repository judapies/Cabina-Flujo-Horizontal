CCS PCH C Compiler, Version 4.104, 5967               11-ago.-17 15:47

               Filename: H:\JP\JP\Laboratorio\Cabina de Flujo Laminar Horizontal\2017\CFLH 120 Setas #0045876XX\Firmware\CabinaFlujo.lst

               ROM used: 12952 bytes (40%)
                         Largest free fragment is 19812
               RAM used: 203 (10%) at main() level
                         240 (12%) worst case
               Stack:    7 worst case (6 in main + 1 for interrupts)

*
0000:  GOTO   176C
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   00B4
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina de Flujo Laminar Vertical. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz UV, Luz Blanca, Motor Ventilador y Cambio de Contraseña. 
.................... // Permite cambiar la velocidad del motor digitalmente. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,NOVREGEN,NOMCLR// PLL1 para 4 MHz 
.................... //#fuses XT,NOWDT,NOPROTECT,NOLVP,NODEBUG,VREGEN,NOMCLR// PLL1 para 4 MHz 
.................... #use delay(clock=48000000) 
*
058E:  CLRF   FEA
0590:  MOVLW  DE
0592:  MOVWF  FE9
0594:  MOVF   FEF,W
0596:  BZ    05B4
0598:  MOVLW  0F
059A:  MOVWF  01
059C:  CLRF   00
059E:  DECFSZ 00,F
05A0:  BRA    059E
05A2:  DECFSZ 01,F
05A4:  BRA    059C
05A6:  MOVLW  8F
05A8:  MOVWF  00
05AA:  DECFSZ 00,F
05AC:  BRA    05AA
05AE:  NOP   
05B0:  DECFSZ FEF,F
05B2:  BRA    0598
05B4:  RETLW  00
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN unused;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN enable;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTB")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_b(LCD_READ); 
....................       lcd.rw = 1; 
....................       delay_cycles(30); 
....................       lcd.enable = 1; 
....................       delay_cycles(30); 
....................       high = lcd.data; 
....................       lcd.enable = 0; 
....................       delay_cycles(30); 
....................       lcd.enable = 1; 
....................       delay_us(30); 
....................       low = lcd.data; 
....................       lcd.enable = 0; 
....................       set_tris_b(LCD_WRITE); 
....................       return( (high<<4) | low); 
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
05B6:  SWAPF  xDF,W
05B8:  ANDLW  F0
05BA:  MOVWF  00
05BC:  MOVLW  0F
05BE:  ANDWF  F81,W
05C0:  IORWF  00,W
05C2:  MOVWF  F81
....................       delay_cycles(30); 
05C4:  MOVLW  09
05C6:  MOVWF  00
05C8:  DECFSZ 00,F
05CA:  BRA    05C8
05CC:  BRA    05CE
....................       lcd.enable = 1; 
05CE:  BSF    F81.3
....................       delay_us(55); 
05D0:  MOVLW  DB
05D2:  MOVWF  00
05D4:  DECFSZ 00,F
05D6:  BRA    05D4
05D8:  BRA    05DA
....................       lcd.enable = 0; 
05DA:  BCF    F81.3
.................... } 
05DC:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
05DE:  BCF    F81.1
....................       //while ( bit_test(lcd_read_byte(),7) ) ; 
....................       delay_ms(1); 
05E0:  MOVLW  01
05E2:  MOVWF  xDE
05E4:  RCALL  058E
....................       lcd.rs = address; 
05E6:  BTFSS  xDC.0
05E8:  BCF    F81.1
05EA:  BTFSC  xDC.0
05EC:  BSF    F81.1
....................       delay_cycles(30); 
05EE:  MOVLW  09
05F0:  MOVWF  00
05F2:  DECFSZ 00,F
05F4:  BRA    05F2
05F6:  BRA    05F8
....................       lcd.rw = 0; 
05F8:  BCF    F81.2
....................       delay_cycles(30); 
05FA:  MOVLW  09
05FC:  MOVWF  00
05FE:  DECFSZ 00,F
0600:  BRA    05FE
0602:  BRA    0604
....................       lcd.enable = 0; 
0604:  BCF    F81.3
....................       lcd_send_nibble(n >> 4); 
0606:  SWAPF  xDD,W
0608:  MOVWF  xDE
060A:  MOVLW  0F
060C:  ANDWF  xDE,F
060E:  MOVFF  DE,DF
0612:  RCALL  05B6
....................       lcd_send_nibble(n & 0xf); 
0614:  MOVF   xDD,W
0616:  ANDLW  0F
0618:  MOVWF  xDE
061A:  MOVWF  xDF
061C:  RCALL  05B6
.................... } 
061E:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_b(LCD_WRITE); 
0620:  MOVLW  00
0622:  MOVWF  F93
....................     lcd.rs = 0; 
0624:  BCF    F81.1
....................     lcd.rw = 0; 
0626:  BCF    F81.2
....................     lcd.enable = 0; 
0628:  BCF    F81.3
....................     delay_ms(15); 
062A:  MOVLW  0F
062C:  MOVWF  xDE
062E:  RCALL  058E
....................     for(i=1;i<=3;++i) { 
0630:  MOVLW  01
0632:  MOVWF  xC7
0634:  MOVF   xC7,W
0636:  SUBLW  03
0638:  BNC   064A
....................        lcd_send_nibble(3); 
063A:  MOVLW  03
063C:  MOVWF  xDF
063E:  RCALL  05B6
....................        delay_ms(5); 
0640:  MOVLW  05
0642:  MOVWF  xDE
0644:  RCALL  058E
....................     } 
0646:  INCF   xC7,F
0648:  BRA    0634
....................     lcd_send_nibble(2); 
064A:  MOVLW  02
064C:  MOVWF  xDF
064E:  RCALL  05B6
....................     for(i=0;i<=3;++i) 
0650:  CLRF   xC7
0652:  MOVF   xC7,W
0654:  SUBLW  03
0656:  BNC   0674
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
0658:  CLRF   03
065A:  MOVF   xC7,W
065C:  MOVFF  FF2,C8
0660:  BCF    FF2.7
0662:  RCALL  0096
0664:  BTFSC  xC8.7
0666:  BSF    FF2.7
0668:  MOVWF  xC8
066A:  CLRF   xDC
066C:  MOVWF  xDD
066E:  RCALL  05DE
0670:  INCF   xC7,F
0672:  BRA    0652
.................... } 
0674:  RETLW  00
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
*
06FE:  MOVLW  01
0700:  SUBWF  xDA,W
0702:  ADDLW  FC
0704:  BC    0724
0706:  ADDLW  04
0708:  GOTO   0734
....................      case 1 : address=0x80;break; 
070C:  MOVLW  80
070E:  MOVWF  xDB
0710:  BRA    0724
....................      case 2 : address=0xc0;break; 
0712:  MOVLW  C0
0714:  MOVWF  xDB
0716:  BRA    0724
....................      case 3 : address=0x94;break; 
0718:  MOVLW  94
071A:  MOVWF  xDB
071C:  BRA    0724
....................      case 4 : address=0xd4;break; 
071E:  MOVLW  D4
0720:  MOVWF  xDB
0722:  BRA    0724
....................    } 
....................    address+=x-1; 
0724:  MOVLW  01
0726:  SUBWF  xD9,W
0728:  ADDWF  xDB,F
....................    lcd_send_byte(0,address); 
072A:  CLRF   xDC
072C:  MOVFF  DB,DD
0730:  RCALL  05DE
.................... } 
0732:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
....................    if(c=='ñ') 
*
0760:  MOVF   xD8,W
0762:  SUBLW  F1
0764:  BNZ   076A
....................    { 
....................       c=238; 
0766:  MOVLW  EE
0768:  MOVWF  xD8
....................    } 
....................    if(c=='Ñ') 
076A:  MOVF   xD8,W
076C:  SUBLW  D1
076E:  BNZ   0774
....................    { 
....................       c=255; 
0770:  MOVLW  FF
0772:  MOVWF  xD8
....................    } 
....................     
....................    switch (c) { 
0774:  MOVF   xD8,W
0776:  XORLW  0C
0778:  BZ    0784
077A:  XORLW  06
077C:  BZ    0798
077E:  XORLW  02
0780:  BZ    07A6
0782:  BRA    07B0
....................      case '\f'   : lcd_send_byte(0,1); 
0784:  CLRF   xDC
0786:  MOVLW  01
0788:  MOVWF  xDD
078A:  RCALL  05DE
....................                    lcdline=1; 
078C:  MOVLW  01
078E:  MOVWF  16
....................                    delay_ms(2); 
0790:  MOVLW  02
0792:  MOVWF  xDE
0794:  RCALL  058E
....................                                            break; 
0796:  BRA    07BC
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
0798:  INCF   16,F
079A:  MOVLW  01
079C:  MOVWF  xD9
079E:  MOVFF  16,DA
07A2:  RCALL  06FE
07A4:  BRA    07BC
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
07A6:  CLRF   xDC
07A8:  MOVLW  10
07AA:  MOVWF  xDD
07AC:  RCALL  05DE
07AE:  BRA    07BC
....................      default     : lcd_send_byte(1,c);     break; 
07B0:  MOVLW  01
07B2:  MOVWF  xDC
07B4:  MOVFF  D8,DD
07B8:  RCALL  05DE
07BA:  BRA    07BC
....................    } 
.................... } 
07BC:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... #include <MATH.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
*
13FC:  BCF    xDA.0
....................    y = x; 
13FE:  MOVFF  CE,D3
1402:  MOVFF  CD,D2
1406:  MOVFF  CC,D1
140A:  MOVFF  CB,D0
....................  
....................    if (x < 0) 
140E:  MOVFF  CE,DE
1412:  MOVFF  CD,DD
1416:  MOVFF  CC,DC
141A:  MOVFF  CB,DB
141E:  CLRF   xE2
1420:  CLRF   xE1
1422:  CLRF   xE0
1424:  CLRF   xDF
1426:  RCALL  0E82
1428:  BNC   1432
....................    { 
....................       s = 1; 
142A:  BSF    xDA.0
....................       y = -y; 
142C:  MOVF   xD1,W
142E:  XORLW  80
1430:  MOVWF  xD1
....................    } 
....................  
....................    if (y <= 32768.0) 
1432:  MOVFF  D3,DE
1436:  MOVFF  D2,DD
143A:  MOVFF  D1,DC
143E:  MOVFF  D0,DB
1442:  CLRF   xE2
1444:  CLRF   xE1
1446:  CLRF   xE0
1448:  MOVLW  8E
144A:  MOVWF  xDF
144C:  RCALL  0E82
144E:  BC    1452
1450:  BNZ   1482
....................   res = (float32)(unsigned int16)y; 
1452:  MOVFF  D3,DE
1456:  MOVFF  D2,DD
145A:  MOVFF  D1,DC
145E:  MOVFF  D0,DB
1462:  RCALL  13C4
1464:  MOVFF  02,E0
1468:  MOVFF  01,DF
146C:  CALL   0676
1470:  MOVFF  03,D7
1474:  MOVFF  02,D6
1478:  MOVFF  01,D5
147C:  MOVFF  00,D4
....................  
....................  else if (y < 10000000.0) 
1480:  BRA    160A
1482:  MOVFF  D3,DE
1486:  MOVFF  D2,DD
148A:  MOVFF  D1,DC
148E:  MOVFF  D0,DB
1492:  MOVLW  80
1494:  MOVWF  xE2
1496:  MOVLW  96
1498:  MOVWF  xE1
149A:  MOVLW  18
149C:  MOVWF  xE0
149E:  MOVLW  96
14A0:  MOVWF  xDF
14A2:  RCALL  0E82
14A4:  BTFSS  FD8.0
14A6:  BRA    15FA
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
14A8:  MOVFF  D3,DE
14AC:  MOVFF  D2,DD
14B0:  MOVFF  D1,DC
14B4:  MOVFF  D0,DB
14B8:  CLRF   xE2
14BA:  CLRF   xE1
14BC:  CLRF   xE0
14BE:  MOVLW  8E
14C0:  MOVWF  xDF
14C2:  CALL   07DE
14C6:  MOVFF  03,DE
14CA:  MOVFF  02,DD
14CE:  MOVFF  01,DC
14D2:  MOVFF  00,DB
14D6:  RCALL  13C4
14D8:  MOVFF  02,D9
14DC:  MOVFF  01,D8
....................       y = 32768.0*(y/32768.0 - (float32)l); 
14E0:  MOVFF  D3,DE
14E4:  MOVFF  D2,DD
14E8:  MOVFF  D1,DC
14EC:  MOVFF  D0,DB
14F0:  CLRF   xE2
14F2:  CLRF   xE1
14F4:  CLRF   xE0
14F6:  MOVLW  8E
14F8:  MOVWF  xDF
14FA:  CALL   07DE
14FE:  MOVFF  00,DB
1502:  MOVFF  01,DC
1506:  MOVFF  02,DD
150A:  MOVFF  03,DE
150E:  MOVFF  D9,E0
1512:  MOVFF  D8,DF
1516:  CALL   0676
151A:  BSF    FD8.1
151C:  MOVFF  DE,E2
1520:  MOVFF  DD,E1
1524:  MOVFF  DC,E0
1528:  MOVFF  DB,DF
152C:  MOVFF  03,E6
1530:  MOVFF  02,E5
1534:  MOVFF  01,E4
1538:  MOVFF  00,E3
153C:  CALL   0938
1540:  CLRF   xDE
1542:  CLRF   xDD
1544:  CLRF   xDC
1546:  MOVLW  8E
1548:  MOVWF  xDB
154A:  MOVFF  03,E2
154E:  MOVFF  02,E1
1552:  MOVFF  01,E0
1556:  MOVFF  00,DF
155A:  RCALL  1092
155C:  MOVFF  03,D3
1560:  MOVFF  02,D2
1564:  MOVFF  01,D1
1568:  MOVFF  00,D0
....................   res = 32768.0*(float32)l; 
156C:  MOVFF  D9,E0
1570:  MOVFF  D8,DF
1574:  CALL   0676
1578:  CLRF   xDE
157A:  CLRF   xDD
157C:  CLRF   xDC
157E:  MOVLW  8E
1580:  MOVWF  xDB
1582:  MOVFF  03,E2
1586:  MOVFF  02,E1
158A:  MOVFF  01,E0
158E:  MOVFF  00,DF
1592:  RCALL  1092
1594:  MOVFF  03,D7
1598:  MOVFF  02,D6
159C:  MOVFF  01,D5
15A0:  MOVFF  00,D4
....................   res += (float32)(unsigned int16)y; 
15A4:  MOVFF  D3,DE
15A8:  MOVFF  D2,DD
15AC:  MOVFF  D1,DC
15B0:  MOVFF  D0,DB
15B4:  RCALL  13C4
15B6:  MOVFF  02,E0
15BA:  MOVFF  01,DF
15BE:  CALL   0676
15C2:  BCF    FD8.1
15C4:  MOVFF  D7,E2
15C8:  MOVFF  D6,E1
15CC:  MOVFF  D5,E0
15D0:  MOVFF  D4,DF
15D4:  MOVFF  03,E6
15D8:  MOVFF  02,E5
15DC:  MOVFF  01,E4
15E0:  MOVFF  00,E3
15E4:  CALL   0938
15E8:  MOVFF  03,D7
15EC:  MOVFF  02,D6
15F0:  MOVFF  01,D5
15F4:  MOVFF  00,D4
....................  } 
....................  
....................  else 
15F8:  BRA    160A
....................   res = y; 
15FA:  MOVFF  D3,D7
15FE:  MOVFF  D2,D6
1602:  MOVFF  D1,D5
1606:  MOVFF  D0,D4
....................  
....................  y = y - (float32)(unsigned int16)y; 
160A:  MOVFF  D3,DE
160E:  MOVFF  D2,DD
1612:  MOVFF  D1,DC
1616:  MOVFF  D0,DB
161A:  RCALL  13C4
161C:  MOVFF  02,E0
1620:  MOVFF  01,DF
1624:  CALL   0676
1628:  BSF    FD8.1
162A:  MOVFF  D3,E2
162E:  MOVFF  D2,E1
1632:  MOVFF  D1,E0
1636:  MOVFF  D0,DF
163A:  MOVFF  03,E6
163E:  MOVFF  02,E5
1642:  MOVFF  01,E4
1646:  MOVFF  00,E3
164A:  CALL   0938
164E:  MOVFF  03,D3
1652:  MOVFF  02,D2
1656:  MOVFF  01,D1
165A:  MOVFF  00,D0
....................  
....................  if (s) 
165E:  BTFSS  xDA.0
1660:  BRA    1668
....................   res = -res; 
1662:  MOVF   xD5,W
1664:  XORLW  80
1666:  MOVWF  xD5
....................  
....................  if (y != 0) 
1668:  MOVFF  D3,DE
166C:  MOVFF  D2,DD
1670:  MOVFF  D1,DC
1674:  MOVFF  D0,DB
1678:  CLRF   xE2
167A:  CLRF   xE1
167C:  CLRF   xE0
167E:  CLRF   xDF
1680:  RCALL  0E82
1682:  BZ    16F4
....................  { 
....................   if (s == 1 && n == 0) 
1684:  BTFSS  xDA.0
1686:  BRA    16BC
1688:  MOVF   xCF,F
168A:  BNZ   16BC
....................    res -= 1.0; 
168C:  BSF    FD8.1
168E:  MOVFF  D7,E2
1692:  MOVFF  D6,E1
1696:  MOVFF  D5,E0
169A:  MOVFF  D4,DF
169E:  CLRF   xE6
16A0:  CLRF   xE5
16A2:  CLRF   xE4
16A4:  MOVLW  7F
16A6:  MOVWF  xE3
16A8:  CALL   0938
16AC:  MOVFF  03,D7
16B0:  MOVFF  02,D6
16B4:  MOVFF  01,D5
16B8:  MOVFF  00,D4
....................  
....................   if (s == 0 && n == 1) 
16BC:  BTFSC  xDA.0
16BE:  BRA    16F4
16C0:  DECFSZ xCF,W
16C2:  BRA    16F4
....................    res += 1.0; 
16C4:  BCF    FD8.1
16C6:  MOVFF  D7,E2
16CA:  MOVFF  D6,E1
16CE:  MOVFF  D5,E0
16D2:  MOVFF  D4,DF
16D6:  CLRF   xE6
16D8:  CLRF   xE5
16DA:  CLRF   xE4
16DC:  MOVLW  7F
16DE:  MOVWF  xE3
16E0:  CALL   0938
16E4:  MOVFF  03,D7
16E8:  MOVFF  02,D6
16EC:  MOVFF  01,D5
16F0:  MOVFF  00,D4
....................  } 
....................  if (x == 0) 
16F4:  MOVFF  CE,DE
16F8:  MOVFF  CD,DD
16FC:  MOVFF  CC,DC
1700:  MOVFF  CB,DB
1704:  CLRF   xE2
1706:  CLRF   xE1
1708:  CLRF   xE0
170A:  CLRF   xDF
170C:  CALL   0E82
1710:  BNZ   171A
....................     res = 0; 
1712:  CLRF   xD7
1714:  CLRF   xD6
1716:  CLRF   xD5
1718:  CLRF   xD4
....................  
....................  return (res); 
171A:  MOVFF  D4,00
171E:  MOVFF  D5,01
1722:  MOVFF  D6,02
1726:  MOVFF  D7,03
.................... } 
172A:  GOTO   1742 (RETURN)
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
172E:  MOVFF  CA,CE
1732:  MOVFF  C9,CD
1736:  MOVFF  C8,CC
173A:  MOVFF  C7,CB
173E:  CLRF   xCF
1740:  BRA    13FC
.................... } 
1742:  RETLW  00
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   UP            input(PIN_A5) 
.................... #define   DOWN          input(PIN_E0) 
.................... #define   RIGHT         input(PIN_E1) 
.................... #define   LEFT          input(PIN_E2) 
....................  
.................... // Definición de otros puertos 
.................... #define   Luz_UV_on         output_bit(PIN_D0,1) 
.................... #define   Luz_UV_off        output_bit(PIN_D0,0) 
.................... #define   Luz_Blanca_on     output_bit(PIN_D3,1) 
.................... #define   Luz_Blanca_off    output_bit(PIN_D3,0) 
.................... #define   Motor_L1_on       output_bit(PIN_D2,1) 
.................... #define   Motor_L1_off      output_bit(PIN_D2,0) 
.................... #define   Motor_L2_on       output_bit(PIN_D1,1) 
.................... #define   Motor_L2_off      output_bit(PIN_D1,0) 
.................... #define   Motor_L3_on       output_bit(PIN_D4,1) 
.................... #define   Motor_L3_off      output_bit(PIN_D4,0) 
.................... #define   Motor_L4_on       output_bit(PIN_D5,1) 
.................... #define   Motor_L4_off      output_bit(PIN_D5,0) 
....................  
.................... short estadouv=0,estadofl=0,estadomv=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,tiempo_cumplido=0,Lectura=0,flaguv=0,flagfl=0,flagmv=0; 
.................... int8 Menu=0, n_opcionH=5,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,segundos=0,minutos=0,horasL=0,horasH=0,G_l=0,G_h=0; 
.................... int8 tempo_minutos=0,tempo_segundos=0,tempo_minutos_pro=0,tempo_segundos_pro=0,r=0,q=0,i=0,unidad2=1,tiemporeset=0,guardaruv=0,negativo=10; 
.................... signed int8   paso=0,Velocidad=1; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 Entero=0,Decimal1=0,Decimal2=0,Entero1=0,Decimal12=0; 
.................... int16 tiempos,horas=0,G16=0; 
.................... float PromPresion[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float V1=0.0,Presion=0.0,Saturacion=0.0,CaidaPresion=0.0,Diferencia=0.0,zero_fabrica=235.0; 
.................... float Temporal1=0.0,Temporal12=0.0,Ajuste1=1.0,x_uno=0,G=2; 
....................  
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    set_timer1(5536);  // 5 ms 
*
00B4:  MOVLW  15
00B6:  MOVWF  FCF
00B8:  MOVLW  A0
00BA:  MOVWF  FCE
....................    tiempos++; 
00BC:  INCF   45,F
00BE:  BTFSC  FD8.2
00C0:  INCF   46,F
....................    if(tiempos>=200)   // Ha transcurrido una decima de segundo (PIC18F4550 con XT = 16MHZ) 
00C2:  MOVF   46,F
00C4:  BNZ   00CC
00C6:  MOVF   45,W
00C8:  SUBLW  C7
00CA:  BC    0100
....................    {tiempos=0;tiemporeset++;Lectura=1; 
00CC:  CLRF   46
00CE:  CLRF   45
00D0:  INCF   30,F
00D2:  BSF    18.0
....................    //----------------------------- Tiempo Total-----------------------------// 
....................    if(estadouv==1) 
00D4:  BTFSS  17.0
00D6:  BRA    0100
....................    { 
....................       segundos++; 
00D8:  INCF   22,F
....................       if(tiempo_cumplido==0) 
00DA:  BTFSC  17.7
00DC:  BRA    0100
....................       { 
....................          if(tempo_segundos>0) 
00DE:  MOVF   29,F
00E0:  BZ    00E6
....................          { 
....................             tempo_segundos--; 
00E2:  DECF   29,F
....................          } 
....................          else 
00E4:  BRA    0100
....................          { 
....................             if(tempo_minutos>0) 
00E6:  MOVF   28,F
00E8:  BZ    00F2
....................             { 
....................                tempo_minutos--; 
00EA:  DECF   28,F
....................                tempo_segundos=59; 
00EC:  MOVLW  3B
00EE:  MOVWF  29
....................             } 
....................             else 
00F0:  BRA    0100
....................             { 
....................                //tiempo_cumplido=1; 
....................                estadouv=0;Luz_UV_off; 
00F2:  BCF    17.0
00F4:  BCF    F8C.0
00F6:  BCF    F95.0
....................                tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
00F8:  MOVFF  2A,28
00FC:  MOVFF  2B,29
....................             } 
....................          } 
....................       } 
....................    } 
....................          
....................    } 
.................... } 
....................  
....................  
0100:  BCF    F9E.0
0102:  GOTO   0054
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {   
....................    if(x==1) 
*
0D00:  DECFSZ xC8,W
0D02:  BRA    0D18
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Temporizador UV    ");} 
0D04:  MOVLW  02
0D06:  MOVWF  xD9
0D08:  MOVFF  C9,DA
0D0C:  RCALL  06FE
0D0E:  MOVLW  06
0D10:  MOVWF  FF6
0D12:  MOVLW  01
0D14:  MOVWF  FF7
0D16:  RCALL  07BE
....................    if(x==2) 
0D18:  MOVF   xC8,W
0D1A:  SUBLW  02
0D1C:  BNZ   0D32
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
0D1E:  MOVLW  02
0D20:  MOVWF  xD9
0D22:  MOVFF  C9,DA
0D26:  RCALL  06FE
0D28:  MOVLW  1A
0D2A:  MOVWF  FF6
0D2C:  MOVLW  01
0D2E:  MOVWF  FF7
0D30:  RCALL  07BE
....................    if(x==3) 
0D32:  MOVF   xC8,W
0D34:  SUBLW  03
0D36:  BNZ   0D4C
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo Trabajo UV  ");} 
0D38:  MOVLW  02
0D3A:  MOVWF  xD9
0D3C:  MOVFF  C9,DA
0D40:  RCALL  06FE
0D42:  MOVLW  2E
0D44:  MOVWF  FF6
0D46:  MOVLW  01
0D48:  MOVWF  FF7
0D4A:  RCALL  07BE
....................    if(x==4) 
0D4C:  MOVF   xC8,W
0D4E:  SUBLW  04
0D50:  BNZ   0D66
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Punto Cero         ");} 
0D52:  MOVLW  02
0D54:  MOVWF  xD9
0D56:  MOVFF  C9,DA
0D5A:  RCALL  06FE
0D5C:  MOVLW  42
0D5E:  MOVWF  FF6
0D60:  MOVLW  01
0D62:  MOVWF  FF7
0D64:  RCALL  07BE
.................... } 
0D66:  RETLW  00
....................  
.................... void velocidades(int8 x)// Funcion para imprimir mensajes de Menu Principal. 
.................... {  if(x==0) 
*
1744:  MOVF   xC7,F
1746:  BNZ   175A
....................    { 
....................       Motor_L2_off;Motor_L3_off;Motor_L4_off;Motor_L1_off; 
1748:  BCF    F8C.1
174A:  BCF    F95.1
174C:  BCF    F8C.4
174E:  BCF    F95.4
1750:  BCF    F8C.5
1752:  BCF    F95.5
1754:  BCF    F8C.2
1756:  BCF    F95.2
....................    } 
....................    else 
1758:  BRA    176A
....................    { 
....................       Motor_L2_on;Motor_L3_on;Motor_L4_on;Motor_L1_on; 
175A:  BSF    F8C.1
175C:  BCF    F95.1
175E:  BSF    F8C.4
1760:  BCF    F95.4
1762:  BSF    F8C.5
1764:  BCF    F95.5
1766:  BSF    F8C.2
1768:  BCF    F95.2
....................    } 
.................... } 
176A:  RETLW  00
....................  
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
06AC:  RLCF   xCC,W
06AE:  MOVWF  00
06B0:  RLCF   00,F
06B2:  MOVLW  FC
06B4:  ANDWF  00,F
06B6:  MOVFF  00,01
06BA:  MOVF   FC2,W
06BC:  ANDLW  C3
06BE:  IORWF  00,W
06C0:  MOVWF  FC2
06C2:  MOVLW  0A
06C4:  MOVWF  xDE
06C6:  RCALL  058E
06C8:  BSF    FC2.1
06CA:  BTFSC  FC2.1
06CC:  BRA    06CA
06CE:  MOVFF  FC4,03
06D2:  MOVFF  FC3,DF
06D6:  MOVFF  FC4,E0
06DA:  RCALL  0676
06DC:  MOVFF  03,D0
06E0:  MOVFF  02,CF
06E4:  MOVFF  01,CE
06E8:  MOVFF  00,CD
06EC:  MOVFF  CD,00
06F0:  MOVFF  CE,01
06F4:  MOVFF  CF,02
06F8:  MOVFF  D0,03
.................... } 
06FC:  RETLW  00
....................  
.................... float Leer_Sensor_Presion(int media){ 
*
0EF8:  CLRF   xCB
0EFA:  CLRF   xCA
0EFC:  CLRF   xC9
0EFE:  CLRF   xC8
....................    float promediopresion=0.0; 
....................    /*if(negativo==10) 
....................     { 
....................       x_uno=sensores(1)+Diferencia; 
....................     } 
....................     if(negativo==20) 
....................     { 
....................       x_uno=sensores(1)-Diferencia; 
....................     }*/ 
....................    V1=sensores(1);  
0F00:  MOVLW  01
0F02:  MOVWF  xCC
0F04:  CALL   06AC
0F08:  MOVFF  03,9E
0F0C:  MOVFF  02,9D
0F10:  MOVFF  01,9C
0F14:  MOVFF  00,9B
....................    //V1 = (x_uno*5.0)/1023.0;   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
....................    Presion=(V1/G)-1.0;// Presion=(Voltaje/Ganancia)-1 
0F18:  MOVFF  9E,DE
0F1C:  MOVFF  9D,DD
0F20:  MOVFF  9C,DC
0F24:  MOVFF  9B,DB
0F28:  MOVFF  C6,E2
0F2C:  MOVFF  C5,E1
0F30:  MOVFF  C4,E0
0F34:  MOVFF  C3,DF
0F38:  RCALL  07DE
0F3A:  MOVFF  00,CC
0F3E:  MOVFF  01,CD
0F42:  MOVFF  02,CE
0F46:  MOVFF  03,CF
0F4A:  BSF    FD8.1
0F4C:  MOVFF  03,E2
0F50:  MOVFF  02,E1
0F54:  MOVFF  01,E0
0F58:  MOVFF  00,DF
0F5C:  CLRF   xE6
0F5E:  CLRF   xE5
0F60:  CLRF   xE4
0F62:  MOVLW  7F
0F64:  MOVWF  xE3
0F66:  RCALL  0938
0F68:  MOVFF  03,A2
0F6C:  MOVFF  02,A1
0F70:  MOVFF  01,A0
0F74:  MOVFF  00,9F
....................     
....................    if(Presion<0.0) 
0F78:  MOVFF  A2,DE
0F7C:  MOVFF  A1,DD
0F80:  MOVFF  A0,DC
0F84:  MOVFF  9F,DB
0F88:  CLRF   xE2
0F8A:  CLRF   xE1
0F8C:  CLRF   xE0
0F8E:  CLRF   xDF
0F90:  RCALL  0E82
0F92:  BNC   0F9C
....................    { 
....................       Presion=0.0; 
0F94:  CLRF   xA2
0F96:  CLRF   xA1
0F98:  CLRF   xA0
0F9A:  CLRF   x9F
....................    } 
....................  
....................    if(r>media-1) 
0F9C:  MOVLW  01
0F9E:  SUBWF  xC7,W
0FA0:  SUBWF  2C,W
0FA2:  BZ    0FA8
0FA4:  BNC   0FA8
....................    {r=0;} 
0FA6:  CLRF   2C
....................    PromPresion[r]=Presion;r++; 
0FA8:  MOVF   2C,W
0FAA:  MULLW  04
0FAC:  MOVF   FF3,W
0FAE:  CLRF   03
0FB0:  ADDLW  4B
0FB2:  MOVWF  FE9
0FB4:  MOVLW  00
0FB6:  ADDWFC 03,W
0FB8:  MOVWF  FEA
0FBA:  MOVFF  9F,FEF
0FBE:  MOVFF  A0,FEC
0FC2:  MOVFF  A1,FEC
0FC6:  MOVFF  A2,FEC
0FCA:  INCF   2C,F
....................           
....................    for(q=0;q<=(media-1);q++) 
0FCC:  CLRF   2D
0FCE:  MOVLW  01
0FD0:  SUBWF  xC7,W
0FD2:  SUBWF  2D,W
0FD4:  BZ    0FD8
0FD6:  BC    1042
....................    { 
....................       promediopresion+=PromPresion[q]; 
0FD8:  MOVF   2D,W
0FDA:  MULLW  04
0FDC:  MOVF   FF3,W
0FDE:  CLRF   03
0FE0:  ADDLW  4B
0FE2:  MOVWF  FE9
0FE4:  MOVLW  00
0FE6:  ADDWFC 03,W
0FE8:  MOVWF  FEA
0FEA:  MOVFF  FEF,00
0FEE:  MOVFF  FEC,01
0FF2:  MOVFF  FEC,02
0FF6:  MOVFF  FEC,03
0FFA:  MOVFF  FEA,CD
0FFE:  MOVFF  FE9,CC
1002:  BCF    FD8.1
1004:  MOVFF  CB,E2
1008:  MOVFF  CA,E1
100C:  MOVFF  C9,E0
1010:  MOVFF  C8,DF
1014:  MOVFF  03,E6
1018:  MOVFF  02,E5
101C:  MOVFF  01,E4
1020:  MOVFF  00,E3
1024:  RCALL  0938
1026:  MOVFF  CD,FEA
102A:  MOVFF  CC,FE9
102E:  MOVFF  03,CB
1032:  MOVFF  02,CA
1036:  MOVFF  01,C9
103A:  MOVFF  00,C8
....................    }  
103E:  INCF   2D,F
1040:  BRA    0FCE
....................    promediopresion=promediopresion/media;    
1042:  CLRF   xE0
1044:  MOVFF  C7,DF
1048:  CALL   0676
104C:  MOVFF  CB,DE
1050:  MOVFF  CA,DD
1054:  MOVFF  C9,DC
1058:  MOVFF  C8,DB
105C:  MOVFF  03,E2
1060:  MOVFF  02,E1
1064:  MOVFF  01,E0
1068:  MOVFF  00,DF
106C:  CALL   07DE
1070:  MOVFF  03,CB
1074:  MOVFF  02,CA
1078:  MOVFF  01,C9
107C:  MOVFF  00,C8
....................     
....................    return promediopresion; 
1080:  MOVFF  C8,00
1084:  MOVFF  C9,01
1088:  MOVFF  CA,02
108C:  MOVFF  CB,03
.................... } 
1090:  RETLW  00
....................  
.................... void Limita(void){ 
....................    if(Velocidad>4) 
*
0BA2:  BTFSC  34.7
0BA4:  BRA    0BB0
0BA6:  MOVF   34,W
0BA8:  SUBLW  04
0BAA:  BC    0BB0
....................       Velocidad=1; 
0BAC:  MOVLW  01
0BAE:  MOVWF  34
....................    if(Contrasena[0]>9) 
0BB0:  MOVF   3C,W
0BB2:  SUBLW  09
0BB4:  BC    0BB8
....................       Contrasena[0]=0; 
0BB6:  CLRF   3C
....................    if(Contrasena[1]>9) 
0BB8:  MOVF   3D,W
0BBA:  SUBLW  09
0BBC:  BC    0BC0
....................       Contrasena[1]=0; 
0BBE:  CLRF   3D
....................    if(Contrasena[2]>9) 
0BC0:  MOVF   3E,W
0BC2:  SUBLW  09
0BC4:  BC    0BC8
....................       Contrasena[2]=0; 
0BC6:  CLRF   3E
....................    if(Contrasena[3]>9) 
0BC8:  MOVF   3F,W
0BCA:  SUBLW  09
0BCC:  BC    0BD0
....................       Contrasena[3]=0; 
0BCE:  CLRF   3F
....................    if(tempo_minutos>60) 
0BD0:  MOVF   28,W
0BD2:  SUBLW  3C
0BD4:  BC    0BD8
....................       tempo_minutos=0; 
0BD6:  CLRF   28
....................    if(tempo_segundos) 
0BD8:  MOVF   29,F
0BDA:  BZ    0BDE
....................       tempo_segundos=0; 
0BDC:  CLRF   29
....................    if(segundos>60) 
0BDE:  MOVF   22,W
0BE0:  SUBLW  3C
0BE2:  BC    0BE6
....................       segundos=0; 
0BE4:  CLRF   22
....................    if(minutos>60) 
0BE6:  MOVF   23,W
0BE8:  SUBLW  3C
0BEA:  BC    0BEE
....................       minutos=0;  
0BEC:  CLRF   23
.................... } 
0BEE:  GOTO   1C00 (RETURN)
.................... void main () 
.................... { 
*
176C:  CLRF   FF8
176E:  BCF    FD0.7
1770:  BSF    07.7
1772:  CLRF   FEA
1774:  CLRF   FE9
1776:  BCF    17.0
1778:  BCF    17.1
177A:  BCF    17.2
177C:  BCF    17.3
177E:  BCF    17.4
1780:  BCF    17.5
1782:  BCF    17.6
1784:  BCF    17.7
1786:  BCF    18.0
1788:  BCF    18.1
178A:  BCF    18.2
178C:  BCF    18.3
178E:  CLRF   19
1790:  MOVLW  05
1792:  MOVWF  1A
1794:  MOVLW  02
1796:  MOVWF  1B
1798:  MOVLW  0B
179A:  MOVWF  1C
179C:  MOVLW  02
179E:  MOVWF  1D
17A0:  MOVLW  03
17A2:  MOVWF  1E
17A4:  MOVLW  02
17A6:  MOVWF  1F
17A8:  MOVWF  20
17AA:  MOVLW  04
17AC:  MOVWF  21
17AE:  CLRF   22
17B0:  CLRF   23
17B2:  CLRF   24
17B4:  CLRF   25
17B6:  CLRF   26
17B8:  CLRF   27
17BA:  CLRF   28
17BC:  CLRF   29
17BE:  CLRF   2A
17C0:  CLRF   2B
17C2:  CLRF   2C
17C4:  CLRF   2D
17C6:  CLRF   2E
17C8:  MOVLW  01
17CA:  MOVWF  2F
17CC:  CLRF   30
17CE:  CLRF   31
17D0:  MOVLW  0A
17D2:  MOVWF  32
17D4:  CLRF   33
17D6:  MOVLW  01
17D8:  MOVWF  34
17DA:  CLRF   40
17DC:  CLRF   41
17DE:  CLRF   42
17E0:  CLRF   43
17E2:  CLRF   44
17E4:  CLRF   48
17E6:  CLRF   47
17E8:  CLRF   4A
17EA:  CLRF   49
17EC:  CLRF   x9E
17EE:  CLRF   x9D
17F0:  CLRF   x9C
17F2:  CLRF   x9B
17F4:  CLRF   xA2
17F6:  CLRF   xA1
17F8:  CLRF   xA0
17FA:  CLRF   x9F
17FC:  CLRF   xA6
17FE:  CLRF   xA5
1800:  CLRF   xA4
1802:  CLRF   xA3
1804:  CLRF   xAA
1806:  CLRF   xA9
1808:  CLRF   xA8
180A:  CLRF   xA7
180C:  CLRF   xAE
180E:  CLRF   xAD
1810:  CLRF   xAC
1812:  CLRF   xAB
1814:  CLRF   xB2
1816:  CLRF   xB1
1818:  MOVLW  6B
181A:  MOVWF  xB0
181C:  MOVLW  86
181E:  MOVWF  xAF
1820:  CLRF   xB6
1822:  CLRF   xB5
1824:  CLRF   xB4
1826:  CLRF   xB3
1828:  CLRF   xBA
182A:  CLRF   xB9
182C:  CLRF   xB8
182E:  CLRF   xB7
1830:  CLRF   xBE
1832:  CLRF   xBD
1834:  CLRF   xBC
1836:  MOVLW  7F
1838:  MOVWF  xBB
183A:  CLRF   xC2
183C:  CLRF   xC1
183E:  CLRF   xC0
1840:  CLRF   xBF
1842:  CLRF   xC6
1844:  CLRF   xC5
1846:  CLRF   xC4
1848:  MOVLW  80
184A:  MOVWF  xC3
184C:  MOVF   FC1,W
184E:  ANDLW  C0
1850:  IORLW  0F
1852:  MOVWF  FC1
1854:  MOVLW  07
1856:  MOVWF  FB4
1858:  MOVLW  3E
185A:  MOVWF  35
185C:  MOVLW  20
185E:  MOVWF  36
1860:  MOVLW  5E
1862:  MOVWF  37
1864:  CLRF   38
1866:  CLRF   39
1868:  CLRF   3A
186A:  CLRF   3B
186C:  CLRF   3C
186E:  CLRF   3D
1870:  CLRF   3E
1872:  CLRF   3F
1874:  CLRF   4B
1876:  CLRF   4C
1878:  CLRF   4D
187A:  CLRF   4E
187C:  CLRF   4F
187E:  CLRF   50
1880:  CLRF   51
1882:  CLRF   52
1884:  CLRF   53
1886:  CLRF   54
1888:  CLRF   55
188A:  CLRF   56
188C:  CLRF   57
188E:  CLRF   58
1890:  CLRF   59
1892:  CLRF   5A
1894:  CLRF   5B
1896:  CLRF   5C
1898:  CLRF   5D
189A:  CLRF   5E
189C:  CLRF   5F
189E:  CLRF   x60
18A0:  CLRF   x61
18A2:  CLRF   x62
18A4:  CLRF   x63
18A6:  CLRF   x64
18A8:  CLRF   x65
18AA:  CLRF   x66
18AC:  CLRF   x67
18AE:  CLRF   x68
18B0:  CLRF   x69
18B2:  CLRF   x6A
18B4:  CLRF   x6B
18B6:  CLRF   x6C
18B8:  CLRF   x6D
18BA:  CLRF   x6E
18BC:  CLRF   x6F
18BE:  CLRF   x70
18C0:  CLRF   x71
18C2:  CLRF   x72
18C4:  CLRF   x73
18C6:  CLRF   x74
18C8:  CLRF   x75
18CA:  CLRF   x76
18CC:  CLRF   x77
18CE:  CLRF   x78
18D0:  CLRF   x79
18D2:  CLRF   x7A
18D4:  CLRF   x7B
18D6:  CLRF   x7C
18D8:  CLRF   x7D
18DA:  CLRF   x7E
18DC:  CLRF   x7F
18DE:  CLRF   x80
18E0:  CLRF   x81
18E2:  CLRF   x82
18E4:  CLRF   x83
18E6:  CLRF   x84
18E8:  CLRF   x85
18EA:  CLRF   x86
18EC:  CLRF   x87
18EE:  CLRF   x88
18F0:  CLRF   x89
18F2:  CLRF   x8A
18F4:  CLRF   x8B
18F6:  CLRF   x8C
18F8:  CLRF   x8D
18FA:  CLRF   x8E
18FC:  CLRF   x8F
18FE:  CLRF   x90
1900:  CLRF   x91
1902:  CLRF   x92
1904:  CLRF   x93
1906:  CLRF   x94
1908:  CLRF   x95
190A:  CLRF   x96
190C:  CLRF   x97
190E:  CLRF   x98
1910:  CLRF   x99
1912:  CLRF   x9A
....................    output_d(0); 
1914:  CLRF   F95
1916:  CLRF   F8C
....................    lcd_init(); 
1918:  CALL   0620
....................    enable_interrupts(global); 
191C:  MOVLW  C0
191E:  IORWF  FF2,F
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
1920:  MOVLW  85
1922:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
1924:  BSF    F9D.0
....................    setup_adc_ports(AN0_TO_AN1); 
1926:  MOVF   FC1,W
1928:  ANDLW  C0
192A:  IORLW  0D
192C:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
192E:  BCF    FC0.0
1930:  BSF    FC0.1
1932:  BCF    FC0.2
1934:  BSF    FC0.7
1936:  BSF    FC2.0
....................    sensores(0); 
1938:  CLRF   xCC
193A:  CALL   06AC
....................    lcd_gotoxy(1,1); 
193E:  MOVLW  01
1940:  MOVWF  xD9
1942:  MOVWF  xDA
1944:  CALL   06FE
....................    printf(lcd_putc," CABINA  DE   FLUJO "); 
1948:  MOVLW  56
194A:  MOVWF  FF6
194C:  MOVLW  01
194E:  MOVWF  FF7
1950:  CALL   07BE
....................    lcd_gotoxy(1,2); 
1954:  MOVLW  01
1956:  MOVWF  xD9
1958:  MOVLW  02
195A:  MOVWF  xDA
195C:  CALL   06FE
....................    printf(lcd_putc," LAMINAR HORIZONTAL "); 
1960:  MOVLW  6C
1962:  MOVWF  FF6
1964:  MOVLW  01
1966:  MOVWF  FF7
1968:  CALL   07BE
....................    lcd_gotoxy(1,3); 
196C:  MOVLW  01
196E:  MOVWF  xD9
1970:  MOVLW  03
1972:  MOVWF  xDA
1974:  CALL   06FE
....................    printf(lcd_putc,"    JP INGLOBAL     "); 
1978:  MOVLW  82
197A:  MOVWF  FF6
197C:  MOVLW  01
197E:  MOVWF  FF7
1980:  CALL   07BE
....................    lcd_gotoxy(1,4); 
1984:  MOVLW  01
1986:  MOVWF  xD9
1988:  MOVLW  04
198A:  MOVWF  xDA
198C:  CALL   06FE
....................    printf(lcd_putc,"   REF:  JPCFH120   "); 
1990:  MOVLW  98
1992:  MOVWF  FF6
1994:  MOVLW  01
1996:  MOVWF  FF7
1998:  CALL   07BE
....................    delay_ms(2000); 
199C:  MOVLW  08
199E:  MOVWF  xC7
19A0:  MOVLW  FA
19A2:  MOVWF  xDE
19A4:  CALL   058E
19A8:  DECFSZ xC7,F
19AA:  BRA    19A0
....................    printf(lcd_putc,"\f"); 
19AC:  MOVLW  0C
19AE:  MOVWF  xD8
19B0:  CALL   0760
....................     
....................    //Solo para simulacion 
....................    //write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20); 
....................    //write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
....................    Velocidad=read_eeprom(5); 
19B4:  MOVFF  FF2,C7
19B8:  BCF    FF2.7
19BA:  MOVLW  05
19BC:  MOVWF  FA9
19BE:  BCF    FA6.6
19C0:  BCF    FA6.7
19C2:  BSF    FA6.0
19C4:  MOVF   FA8,W
19C6:  BTFSC  xC7.7
19C8:  BSF    FF2.7
19CA:  MOVWF  34
....................     
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0);delay_ms(20); contrasena[1]=read_eeprom(1);delay_ms(20); 
19CC:  MOVFF  FF2,C7
19D0:  BCF    FF2.7
19D2:  CLRF   FA9
19D4:  BCF    FA6.6
19D6:  BCF    FA6.7
19D8:  BSF    FA6.0
19DA:  MOVF   FA8,W
19DC:  BTFSC  xC7.7
19DE:  BSF    FF2.7
19E0:  MOVWF  3C
19E2:  MOVLW  14
19E4:  MOVWF  xDE
19E6:  CALL   058E
19EA:  MOVFF  FF2,C7
19EE:  BCF    FF2.7
19F0:  MOVLW  01
19F2:  MOVWF  FA9
19F4:  BCF    FA6.6
19F6:  BCF    FA6.7
19F8:  BSF    FA6.0
19FA:  MOVF   FA8,W
19FC:  BTFSC  xC7.7
19FE:  BSF    FF2.7
1A00:  MOVWF  3D
1A02:  MOVLW  14
1A04:  MOVWF  xDE
1A06:  CALL   058E
....................    contrasena[2]=read_eeprom(2);delay_ms(20); contrasena[3]=read_eeprom(3);delay_ms(20); 
1A0A:  MOVFF  FF2,C7
1A0E:  BCF    FF2.7
1A10:  MOVLW  02
1A12:  MOVWF  FA9
1A14:  BCF    FA6.6
1A16:  BCF    FA6.7
1A18:  BSF    FA6.0
1A1A:  MOVF   FA8,W
1A1C:  BTFSC  xC7.7
1A1E:  BSF    FF2.7
1A20:  MOVWF  3E
1A22:  MOVLW  14
1A24:  MOVWF  xDE
1A26:  CALL   058E
1A2A:  MOVFF  FF2,C7
1A2E:  BCF    FF2.7
1A30:  MOVLW  03
1A32:  MOVWF  FA9
1A34:  BCF    FA6.6
1A36:  BCF    FA6.7
1A38:  BSF    FA6.0
1A3A:  MOVF   FA8,W
1A3C:  BTFSC  xC7.7
1A3E:  BSF    FF2.7
1A40:  MOVWF  3F
1A42:  MOVLW  14
1A44:  MOVWF  xDE
1A46:  CALL   058E
....................    tempo_minutos=read_eeprom(20);tempo_segundos=read_eeprom(21); 
1A4A:  MOVFF  FF2,C7
1A4E:  BCF    FF2.7
1A50:  MOVLW  14
1A52:  MOVWF  FA9
1A54:  BCF    FA6.6
1A56:  BCF    FA6.7
1A58:  BSF    FA6.0
1A5A:  MOVF   FA8,W
1A5C:  BTFSC  xC7.7
1A5E:  BSF    FF2.7
1A60:  MOVWF  28
1A62:  MOVFF  FF2,C7
1A66:  BCF    FF2.7
1A68:  MOVLW  15
1A6A:  MOVWF  FA9
1A6C:  BCF    FA6.6
1A6E:  BCF    FA6.7
1A70:  BSF    FA6.0
1A72:  MOVF   FA8,W
1A74:  BTFSC  xC7.7
1A76:  BSF    FF2.7
1A78:  MOVWF  29
....................    segundos=read_eeprom(50);minutos=read_eeprom(51);horasL=read_eeprom(52);horasH=read_eeprom(53);  
1A7A:  MOVFF  FF2,C7
1A7E:  BCF    FF2.7
1A80:  MOVLW  32
1A82:  MOVWF  FA9
1A84:  BCF    FA6.6
1A86:  BCF    FA6.7
1A88:  BSF    FA6.0
1A8A:  MOVF   FA8,W
1A8C:  BTFSC  xC7.7
1A8E:  BSF    FF2.7
1A90:  MOVWF  22
1A92:  MOVFF  FF2,C7
1A96:  BCF    FF2.7
1A98:  MOVLW  33
1A9A:  MOVWF  FA9
1A9C:  BCF    FA6.6
1A9E:  BCF    FA6.7
1AA0:  BSF    FA6.0
1AA2:  MOVF   FA8,W
1AA4:  BTFSC  xC7.7
1AA6:  BSF    FF2.7
1AA8:  MOVWF  23
1AAA:  MOVFF  FF2,C7
1AAE:  BCF    FF2.7
1AB0:  MOVLW  34
1AB2:  MOVWF  FA9
1AB4:  BCF    FA6.6
1AB6:  BCF    FA6.7
1AB8:  BSF    FA6.0
1ABA:  MOVF   FA8,W
1ABC:  BTFSC  xC7.7
1ABE:  BSF    FF2.7
1AC0:  MOVWF  24
1AC2:  MOVFF  FF2,C7
1AC6:  BCF    FF2.7
1AC8:  MOVLW  35
1ACA:  MOVWF  FA9
1ACC:  BCF    FA6.6
1ACE:  BCF    FA6.7
1AD0:  BSF    FA6.0
1AD2:  MOVF   FA8,W
1AD4:  BTFSC  xC7.7
1AD6:  BSF    FF2.7
1AD8:  MOVWF  25
....................     
....................    G_l=read_eeprom(60); 
1ADA:  MOVFF  FF2,C7
1ADE:  BCF    FF2.7
1AE0:  MOVLW  3C
1AE2:  MOVWF  FA9
1AE4:  BCF    FA6.6
1AE6:  BCF    FA6.7
1AE8:  BSF    FA6.0
1AEA:  MOVF   FA8,W
1AEC:  BTFSC  xC7.7
1AEE:  BSF    FF2.7
1AF0:  MOVWF  26
....................    G_h=read_eeprom(61); 
1AF2:  MOVFF  FF2,C7
1AF6:  BCF    FF2.7
1AF8:  MOVLW  3D
1AFA:  MOVWF  FA9
1AFC:  BCF    FA6.6
1AFE:  BCF    FA6.7
1B00:  BSF    FA6.0
1B02:  MOVF   FA8,W
1B04:  BTFSC  xC7.7
1B06:  BSF    FF2.7
1B08:  MOVWF  27
....................    G16=make16(G_h,G_l); 
1B0A:  MOVFF  27,4A
1B0E:  MOVFF  26,49
....................    G=G16; 
1B12:  MOVFF  4A,E0
1B16:  MOVFF  49,DF
1B1A:  CALL   0676
1B1E:  MOVFF  03,C6
1B22:  MOVFF  02,C5
1B26:  MOVFF  01,C4
1B2A:  MOVFF  00,C3
....................    Entero1=read_eeprom(60);//Decimal2=read_eeprom(41); 
1B2E:  MOVFF  FF2,C7
1B32:  BCF    FF2.7
1B34:  MOVLW  3C
1B36:  MOVWF  FA9
1B38:  BCF    FA6.6
1B3A:  BCF    FA6.7
1B3C:  BSF    FA6.0
1B3E:  MOVF   FA8,W
1B40:  BTFSC  xC7.7
1B42:  BSF    FF2.7
1B44:  MOVWF  43
....................    Temporal1=read_eeprom(61); 
1B46:  MOVFF  FF2,C7
1B4A:  BCF    FF2.7
1B4C:  MOVLW  3D
1B4E:  MOVWF  FA9
1B50:  BCF    FA6.6
1B52:  BCF    FA6.7
1B54:  BSF    FA6.0
1B56:  MOVF   FA8,W
1B58:  BTFSC  xC7.7
1B5A:  BSF    FF2.7
1B5C:  CLRF   xE0
1B5E:  MOVWF  xDF
1B60:  CALL   0676
1B64:  MOVFF  03,B6
1B68:  MOVFF  02,B5
1B6C:  MOVFF  01,B4
1B70:  MOVFF  00,B3
....................    Temporal1=Temporal1/100.0; 
1B74:  MOVFF  B6,DE
1B78:  MOVFF  B5,DD
1B7C:  MOVFF  B4,DC
1B80:  MOVFF  B3,DB
1B84:  CLRF   xE2
1B86:  CLRF   xE1
1B88:  MOVLW  48
1B8A:  MOVWF  xE0
1B8C:  MOVLW  85
1B8E:  MOVWF  xDF
1B90:  CALL   07DE
1B94:  MOVFF  03,B6
1B98:  MOVFF  02,B5
1B9C:  MOVFF  01,B4
1BA0:  MOVFF  00,B3
....................    Diferencia=Entero1+Temporal1; 
1BA4:  CLRF   xE0
1BA6:  MOVFF  43,DF
1BAA:  CALL   0676
1BAE:  BCF    FD8.1
1BB0:  MOVFF  03,E2
1BB4:  MOVFF  02,E1
1BB8:  MOVFF  01,E0
1BBC:  MOVFF  00,DF
1BC0:  MOVFF  B6,E6
1BC4:  MOVFF  B5,E5
1BC8:  MOVFF  B4,E4
1BCC:  MOVFF  B3,E3
1BD0:  CALL   0938
1BD4:  MOVFF  03,AE
1BD8:  MOVFF  02,AD
1BDC:  MOVFF  01,AC
1BE0:  MOVFF  00,AB
....................     
....................    negativo=read_eeprom(70); 
1BE4:  MOVFF  FF2,C7
1BE8:  BCF    FF2.7
1BEA:  MOVLW  46
1BEC:  MOVWF  FA9
1BEE:  BCF    FA6.6
1BF0:  BCF    FA6.7
1BF2:  BSF    FA6.0
1BF4:  MOVF   FA8,W
1BF6:  BTFSC  xC7.7
1BF8:  BSF    FF2.7
1BFA:  MOVWF  32
....................    Limita(); 
1BFC:  GOTO   0BA2
....................    horas=make16(horasH,horasL); 
1C00:  MOVFF  25,48
1C04:  MOVFF  24,47
....................    tempo_minutos_pro=tempo_minutos;tempo_segundos_pro=tempo_segundos; 
1C08:  MOVFF  28,2A
1C0C:  MOVFF  29,2B
....................    //segundos=read_eeprom(50);minutos=read_eeprom(51);horas=read_eeprom(52); 
....................    
....................    while(true){ 
....................  
.................... //------------Menu0------------------------------------------------------------------    
....................    if(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
1C10:  MOVF   19,F
1C12:  BTFSS  FD8.2
1C14:  BRA    1FBE
....................    lcd_gotoxy(1,1); 
1C16:  MOVLW  01
1C18:  MOVWF  xD9
1C1A:  MOVWF  xDA
1C1C:  CALL   06FE
....................    printf(lcd_putc,"     Ingrese        "); 
1C20:  MOVLW  AE
1C22:  MOVWF  FF6
1C24:  MOVLW  01
1C26:  MOVWF  FF7
1C28:  CALL   07BE
....................    lcd_gotoxy(1,2); 
1C2C:  MOVLW  01
1C2E:  MOVWF  xD9
1C30:  MOVLW  02
1C32:  MOVWF  xDA
1C34:  CALL   06FE
....................    printf(lcd_putc,"    Contraseña      "); 
1C38:  MOVLW  C4
1C3A:  MOVWF  FF6
1C3C:  MOVLW  01
1C3E:  MOVWF  FF7
1C40:  CALL   07BE
....................    lcd_gotoxy(1,3); 
1C44:  MOVLW  01
1C46:  MOVWF  xD9
1C48:  MOVLW  03
1C4A:  MOVWF  xDA
1C4C:  CALL   06FE
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
1C50:  MOVLW  DA
1C52:  MOVWF  FF6
1C54:  MOVLW  01
1C56:  MOVWF  FF7
1C58:  MOVLW  0A
1C5A:  MOVWF  xCB
1C5C:  CALL   0BF2
1C60:  MOVFF  38,C7
1C64:  MOVLW  1F
1C66:  MOVWF  xC8
1C68:  CALL   0C38
1C6C:  MOVFF  39,C7
1C70:  MOVLW  1F
1C72:  MOVWF  xC8
1C74:  CALL   0C38
1C78:  MOVFF  3A,C7
1C7C:  MOVLW  1F
1C7E:  MOVWF  xC8
1C80:  CALL   0C38
1C84:  MOVFF  3B,C7
1C88:  MOVLW  1F
1C8A:  MOVWF  xC8
1C8C:  CALL   0C38
1C90:  MOVLW  20
1C92:  MOVWF  xD8
1C94:  CALL   0760
1C98:  MOVLW  20
1C9A:  MOVWF  xD8
1C9C:  CALL   0760
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
1CA0:  BSF    F92.5
1CA2:  BTFSS  F80.5
1CA4:  BRA    1CC8
....................       {  if(Flanco == 0)  
1CA6:  BTFSC  17.3
1CA8:  BRA    1CC6
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
1CAA:  MOVLW  0B
1CAC:  SUBWF  1C,W
1CAE:  CLRF   03
1CB0:  ADDLW  38
1CB2:  MOVWF  FE9
1CB4:  MOVLW  00
1CB6:  ADDWFC 03,W
1CB8:  MOVWF  FEA
1CBA:  INCF   FEF,F
1CBC:  BSF    17.3
1CBE:  MOVLW  1E
1CC0:  MOVWF  xDE
1CC2:  CALL   058E
....................          else 
1CC6:  BRA    1CCA
....................             {Flanco = 0;} 
1CC8:  BCF    17.3
....................              
....................       if(DOWN)//Si oprime hacia abajo 
1CCA:  BSF    F96.0
1CCC:  BTFSS  F84.0
1CCE:  BRA    1CF2
....................       {  if(Flanco2 == 0)  
1CD0:  BTFSC  17.5
1CD2:  BRA    1CF0
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
1CD4:  MOVLW  0B
1CD6:  SUBWF  1C,W
1CD8:  CLRF   03
1CDA:  ADDLW  38
1CDC:  MOVWF  FE9
1CDE:  MOVLW  00
1CE0:  ADDWFC 03,W
1CE2:  MOVWF  FEA
1CE4:  DECF   FEF,F
1CE6:  BSF    17.5
1CE8:  MOVLW  1E
1CEA:  MOVWF  xDE
1CEC:  CALL   058E
....................          else 
1CF0:  BRA    1CF4
....................             {Flanco2 = 0;} 
1CF2:  BCF    17.5
....................     
....................       if(RIGHT)// Si Oprime Derecha 
1CF4:  BSF    F96.1
1CF6:  BTFSS  F84.1
1CF8:  BRA    1D14
....................       {  if(Flanco1 == 0)  
1CFA:  BTFSC  17.4
1CFC:  BRA    1D12
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
1CFE:  BSF    17.4
1D00:  INCF   1C,F
1D02:  MOVLW  1E
1D04:  MOVWF  xDE
1D06:  CALL   058E
1D0A:  MOVLW  0C
1D0C:  MOVWF  xD8
1D0E:  CALL   0760
....................          else 
1D12:  BRA    1D16
....................             {Flanco1 = 0;}    
1D14:  BCF    17.4
....................              
....................        if(LEFT)// Si Oprime izquierda 
1D16:  BSF    F96.2
1D18:  BTFSS  F84.2
1D1A:  BRA    1D36
....................       {  if(Flanco3 == 0)  
1D1C:  BTFSC  17.6
1D1E:  BRA    1D34
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");}} 
1D20:  BSF    17.6
1D22:  DECF   1C,F
1D24:  MOVLW  1E
1D26:  MOVWF  xDE
1D28:  CALL   058E
1D2C:  MOVLW  0C
1D2E:  MOVWF  xD8
1D30:  CALL   0760
....................          else 
1D34:  BRA    1D38
....................             {Flanco3 = 0;}     
1D36:  BCF    17.6
....................              
....................        if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
1D38:  MOVLW  0B
1D3A:  SUBWF  1C,W
1D3C:  CLRF   03
1D3E:  ADDLW  38
1D40:  MOVWF  FE9
1D42:  MOVLW  00
1D44:  ADDWFC 03,W
1D46:  MOVWF  FEA
1D48:  BTFSC  FEF.7
1D4A:  BRA    1D4E
1D4C:  BRA    1D62
....................        {clave[unidad-11]=9;} 
1D4E:  MOVLW  0B
1D50:  SUBWF  1C,W
1D52:  CLRF   03
1D54:  ADDLW  38
1D56:  MOVWF  FE9
1D58:  MOVLW  00
1D5A:  ADDWFC 03,W
1D5C:  MOVWF  FEA
1D5E:  MOVLW  09
1D60:  MOVWF  FEF
....................        if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
1D62:  MOVLW  0B
1D64:  SUBWF  1C,W
1D66:  CLRF   03
1D68:  ADDLW  38
1D6A:  MOVWF  FE9
1D6C:  MOVLW  00
1D6E:  ADDWFC 03,W
1D70:  MOVWF  FEA
1D72:  BTFSC  FEF.7
1D74:  BRA    1D8E
1D76:  MOVF   FEF,W
1D78:  SUBLW  09
1D7A:  BC    1D8E
....................        {clave[unidad-11]=0;} 
1D7C:  MOVLW  0B
1D7E:  SUBWF  1C,W
1D80:  CLRF   03
1D82:  ADDLW  38
1D84:  MOVWF  FE9
1D86:  MOVLW  00
1D88:  ADDWFC 03,W
1D8A:  MOVWF  FEA
1D8C:  CLRF   FEF
....................        if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
1D8E:  MOVF   1C,W
1D90:  SUBLW  0A
1D92:  BNC   1D98
....................        {unidad=11;} 
1D94:  MOVLW  0B
1D96:  MOVWF  1C
....................        lcd_gotoxy(unidad,4);// Para mostrar cursor. 
1D98:  MOVFF  1C,D9
1D9C:  MOVLW  04
1D9E:  MOVWF  xDA
1DA0:  CALL   06FE
....................        lcd_putc(t[2]); 
1DA4:  MOVFF  37,D8
1DA8:  CALL   0760
....................        if(unidad>14)             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
1DAC:  MOVF   1C,W
1DAE:  SUBLW  0E
1DB0:  BTFSC  FD8.0
1DB2:  BRA    1F9A
....................        { 
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2) // Si Ingresa clave para reset general del sistema. 
1DB4:  MOVF   38,W
1DB6:  SUBLW  03
1DB8:  BNZ   1E94
1DBA:  MOVF   39,W
1DBC:  SUBLW  08
1DBE:  BNZ   1E94
1DC0:  MOVF   3A,W
1DC2:  SUBLW  09
1DC4:  BNZ   1E94
1DC6:  MOVF   3B,W
1DC8:  SUBLW  02
1DCA:  BNZ   1E94
....................             {write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
1DCC:  CLRF   FA9
1DCE:  CLRF   FA8
1DD0:  BCF    FA6.6
1DD2:  BCF    FA6.7
1DD4:  BSF    FA6.2
1DD6:  MOVF   FF2,W
1DD8:  MOVWF  00
1DDA:  BCF    FF2.7
1DDC:  MOVLB  F
1DDE:  MOVLW  55
1DE0:  MOVWF  FA7
1DE2:  MOVLW  AA
1DE4:  MOVWF  FA7
1DE6:  BSF    FA6.1
1DE8:  BTFSC  FA6.1
1DEA:  BRA    1DE8
1DEC:  BCF    FA6.2
1DEE:  MOVF   00,W
1DF0:  IORWF  FF2,F
1DF2:  MOVLW  14
1DF4:  MOVLB  0
1DF6:  MOVWF  xDE
1DF8:  CALL   058E
1DFC:  MOVLW  01
1DFE:  MOVWF  FA9
1E00:  CLRF   FA8
1E02:  BCF    FA6.6
1E04:  BCF    FA6.7
1E06:  BSF    FA6.2
1E08:  MOVF   FF2,W
1E0A:  MOVWF  00
1E0C:  BCF    FF2.7
1E0E:  MOVLB  F
1E10:  MOVLW  55
1E12:  MOVWF  FA7
1E14:  MOVLW  AA
1E16:  MOVWF  FA7
1E18:  BSF    FA6.1
1E1A:  BTFSC  FA6.1
1E1C:  BRA    1E1A
1E1E:  BCF    FA6.2
1E20:  MOVF   00,W
1E22:  IORWF  FF2,F
1E24:  MOVLW  14
1E26:  MOVLB  0
1E28:  MOVWF  xDE
1E2A:  CALL   058E
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
1E2E:  MOVLW  02
1E30:  MOVWF  FA9
1E32:  CLRF   FA8
1E34:  BCF    FA6.6
1E36:  BCF    FA6.7
1E38:  BSF    FA6.2
1E3A:  MOVF   FF2,W
1E3C:  MOVWF  00
1E3E:  BCF    FF2.7
1E40:  MOVLB  F
1E42:  MOVLW  55
1E44:  MOVWF  FA7
1E46:  MOVLW  AA
1E48:  MOVWF  FA7
1E4A:  BSF    FA6.1
1E4C:  BTFSC  FA6.1
1E4E:  BRA    1E4C
1E50:  BCF    FA6.2
1E52:  MOVF   00,W
1E54:  IORWF  FF2,F
1E56:  MOVLW  14
1E58:  MOVLB  0
1E5A:  MOVWF  xDE
1E5C:  CALL   058E
1E60:  MOVLW  03
1E62:  MOVWF  FA9
1E64:  CLRF   FA8
1E66:  BCF    FA6.6
1E68:  BCF    FA6.7
1E6A:  BSF    FA6.2
1E6C:  MOVF   FF2,W
1E6E:  MOVWF  00
1E70:  BCF    FF2.7
1E72:  MOVLB  F
1E74:  MOVLW  55
1E76:  MOVWF  FA7
1E78:  MOVLW  AA
1E7A:  MOVWF  FA7
1E7C:  BSF    FA6.1
1E7E:  BTFSC  FA6.1
1E80:  BRA    1E7E
1E82:  BCF    FA6.2
1E84:  MOVF   00,W
1E86:  IORWF  FF2,F
1E88:  MOVLW  14
1E8A:  MOVLB  0
1E8C:  MOVWF  xDE
1E8E:  CALL   058E
....................              reset_cpu();} 
1E92:  RESET
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) // Si las claves coinciden pasa a Menu Principal. 
1E94:  MOVF   3C,W
1E96:  SUBWF  38,W
1E98:  BNZ   1F2C
1E9A:  MOVF   3D,W
1E9C:  SUBWF  39,W
1E9E:  BNZ   1F2C
1EA0:  MOVF   3E,W
1EA2:  SUBWF  3A,W
1EA4:  BNZ   1F2C
1EA6:  MOVF   3F,W
1EA8:  SUBWF  3B,W
1EAA:  BNZ   1F2C
....................             {lcd_gotoxy(1,1); 
1EAC:  MOVLW  01
1EAE:  MOVWF  xD9
1EB0:  MOVWF  xDA
1EB2:  CALL   06FE
....................             printf(lcd_putc,"                   "); 
1EB6:  MOVLW  F0
1EB8:  MOVWF  FF6
1EBA:  MOVLW  01
1EBC:  MOVWF  FF7
1EBE:  CALL   07BE
....................             lcd_gotoxy(1,2); 
1EC2:  MOVLW  01
1EC4:  MOVWF  xD9
1EC6:  MOVLW  02
1EC8:  MOVWF  xDA
1ECA:  CALL   06FE
....................             printf(lcd_putc,"     Contraseña    "); 
1ECE:  MOVLW  04
1ED0:  MOVWF  FF6
1ED2:  MOVLW  02
1ED4:  MOVWF  FF7
1ED6:  CALL   07BE
....................             lcd_gotoxy(1,3); 
1EDA:  MOVLW  01
1EDC:  MOVWF  xD9
1EDE:  MOVLW  03
1EE0:  MOVWF  xDA
1EE2:  CALL   06FE
....................             printf(lcd_putc,"      Correcta     "); 
1EE6:  MOVLW  18
1EE8:  MOVWF  FF6
1EEA:  MOVLW  02
1EEC:  MOVWF  FF7
1EEE:  CALL   07BE
....................             lcd_gotoxy(1,4); 
1EF2:  MOVLW  01
1EF4:  MOVWF  xD9
1EF6:  MOVLW  04
1EF8:  MOVWF  xDA
1EFA:  CALL   06FE
....................             printf(lcd_putc,"                   "); 
1EFE:  MOVLW  2C
1F00:  MOVWF  FF6
1F02:  MOVLW  02
1F04:  MOVWF  FF7
1F06:  CALL   07BE
....................             delay_ms(1000);Menu=100;unidad=11;printf(lcd_putc,"\f");} 
1F0A:  MOVLW  04
1F0C:  MOVWF  xC7
1F0E:  MOVLW  FA
1F10:  MOVWF  xDE
1F12:  CALL   058E
1F16:  DECFSZ xC7,F
1F18:  BRA    1F0E
1F1A:  MOVLW  64
1F1C:  MOVWF  19
1F1E:  MOVLW  0B
1F20:  MOVWF  1C
1F22:  MOVLW  0C
1F24:  MOVWF  xD8
1F26:  CALL   0760
....................          else                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
1F2A:  BRA    1F9A
....................          {lcd_gotoxy(1,1); 
1F2C:  MOVLW  01
1F2E:  MOVWF  xD9
1F30:  MOVWF  xDA
1F32:  CALL   06FE
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
1F36:  MOVLW  01
1F38:  MOVWF  xD9
1F3A:  MOVLW  02
1F3C:  MOVWF  xDA
1F3E:  CALL   06FE
....................             printf(lcd_putc,"     Contraseña    "); 
1F42:  MOVLW  40
1F44:  MOVWF  FF6
1F46:  MOVLW  02
1F48:  MOVWF  FF7
1F4A:  CALL   07BE
....................             lcd_gotoxy(1,3); 
1F4E:  MOVLW  01
1F50:  MOVWF  xD9
1F52:  MOVLW  03
1F54:  MOVWF  xDA
1F56:  CALL   06FE
....................             printf(lcd_putc,"     Incorrecta    "); 
1F5A:  MOVLW  54
1F5C:  MOVWF  FF6
1F5E:  MOVLW  02
1F60:  MOVWF  FF7
1F62:  CALL   07BE
....................             lcd_gotoxy(1,4); 
1F66:  MOVLW  01
1F68:  MOVWF  xD9
1F6A:  MOVLW  04
1F6C:  MOVWF  xDA
1F6E:  CALL   06FE
....................             printf(lcd_putc,"                   "); 
1F72:  MOVLW  68
1F74:  MOVWF  FF6
1F76:  MOVLW  02
1F78:  MOVWF  FF7
1F7A:  CALL   07BE
....................             delay_ms(1000);unidad=11;printf(lcd_putc,"\f");} 
1F7E:  MOVLW  04
1F80:  MOVWF  xC7
1F82:  MOVLW  FA
1F84:  MOVWF  xDE
1F86:  CALL   058E
1F8A:  DECFSZ xC7,F
1F8C:  BRA    1F82
1F8E:  MOVLW  0B
1F90:  MOVWF  1C
1F92:  MOVLW  0C
1F94:  MOVWF  xD8
1F96:  CALL   0760
....................        } 
....................     
....................        if(unidad>11&&unidad<14) 
1F9A:  MOVF   1C,W
1F9C:  SUBLW  0B
1F9E:  BC    1FBE
1FA0:  MOVF   1C,W
1FA2:  SUBLW  0D
1FA4:  BNC   1FBE
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
1FA6:  MOVLW  01
1FA8:  SUBWF  1C,W
1FAA:  MOVWF  xC7
1FAC:  MOVWF  xD9
1FAE:  MOVLW  04
1FB0:  MOVWF  xDA
1FB2:  CALL   06FE
....................             lcd_putc(t[1]); 
1FB6:  MOVFF  36,D8
1FBA:  CALL   0760
....................           } 
....................  
....................    } 
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
1FBE:  DECFSZ 19,W
1FC0:  BRA    21B2
....................    lcd_gotoxy(1,1); 
1FC2:  MOVLW  01
1FC4:  MOVWF  xD9
1FC6:  MOVWF  xDA
1FC8:  CALL   06FE
....................    printf(lcd_putc,"---MENU PRINCIPAL---"); 
1FCC:  MOVLW  7C
1FCE:  MOVWF  FF6
1FD0:  MOVLW  02
1FD2:  MOVWF  FF7
1FD4:  CALL   07BE
....................       if(paso<0) 
1FD8:  BTFSC  33.7
1FDA:  BRA    1FDE
1FDC:  BRA    1FE0
....................         {paso=0;} 
1FDE:  CLRF   33
....................          
....................       if(UP)//Si oprime hacia arriba 
1FE0:  BSF    F92.5
1FE2:  BTFSS  F80.5
1FE4:  BRA    2000
....................       { 
....................          if(Flanco == 0) 
1FE6:  BTFSC  17.3
1FE8:  BRA    1FFE
....................          { 
....................             Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30); 
1FEA:  DECF   1F,F
1FEC:  DECF   1D,F
1FEE:  MOVLW  01
1FF0:  ADDWF  1D,W
1FF2:  MOVWF  1E
1FF4:  BSF    17.3
1FF6:  MOVLW  1E
1FF8:  MOVWF  xDE
1FFA:  CALL   058E
....................          } 
....................       } 
....................       else 
1FFE:  BRA    2002
....................       { 
....................          Flanco = 0; 
2000:  BCF    17.3
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
2002:  BSF    F96.0
2004:  BTFSS  F84.0
2006:  BRA    2022
....................       { 
....................          if(Flanco2 == 0) 
2008:  BTFSC  17.5
200A:  BRA    2020
....................          { 
....................             Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30); 
200C:  INCF   1F,F
200E:  INCF   1D,F
2010:  MOVLW  01
2012:  SUBWF  1D,W
2014:  MOVWF  1E
2016:  BSF    17.5
2018:  MOVLW  1E
201A:  MOVWF  xDE
201C:  CALL   058E
....................          } 
....................       } 
....................       else 
2020:  BRA    2024
....................       { 
....................          Flanco2 = 0; 
2022:  BCF    17.5
....................       } 
....................     
....................          
....................         if(Flecha2>nMenuH) 
2024:  MOVF   1F,W
2026:  SUBWF  21,W
2028:  BC    203A
....................         {paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4;} 
202A:  INCF   33,F
202C:  MOVFF  1F,21
2030:  MOVLW  02
2032:  SUBWF  21,W
2034:  MOVWF  20
2036:  MOVLW  04
2038:  MOVWF  1D
....................          
....................         if(Flecha2<nMenuL) 
203A:  MOVF   20,W
203C:  SUBWF  1F,W
203E:  BC    2050
....................         {paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2;} 
2040:  DECF   33,F
2042:  MOVFF  1F,20
2046:  MOVLW  02
2048:  ADDWF  20,W
204A:  MOVWF  21
204C:  MOVLW  02
204E:  MOVWF  1D
....................          
....................         if(Flecha2>n_opcionH) 
2050:  MOVF   1F,W
2052:  SUBWF  1A,W
2054:  BC    2068
....................         {Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2;} 
2056:  MOVFF  1B,1F
205A:  MOVLW  02
205C:  MOVWF  1D
205E:  CLRF   33
2060:  MOVFF  1F,20
2064:  ADDWF  20,W
2066:  MOVWF  21
....................          
....................         if(Flecha2<n_opcionL) 
2068:  MOVF   1B,W
206A:  SUBWF  1F,W
206C:  BC    2084
....................         {Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2;}                
206E:  MOVFF  1A,1F
2072:  MOVLW  04
2074:  MOVWF  1D
2076:  SUBWF  1A,W
2078:  MOVWF  33
207A:  MOVFF  1F,21
207E:  MOVLW  02
2080:  SUBWF  21,W
2082:  MOVWF  20
....................          
....................         mensajes(1+paso,2); 
2084:  MOVLW  01
2086:  ADDWF  33,W
2088:  MOVWF  xC7
208A:  MOVWF  xC8
208C:  MOVLW  02
208E:  MOVWF  xC9
2090:  CALL   0D00
....................         mensajes(2+paso,3); 
2094:  MOVLW  02
2096:  ADDWF  33,W
2098:  MOVWF  xC7
209A:  MOVWF  xC8
209C:  MOVLW  03
209E:  MOVWF  xC9
20A0:  CALL   0D00
....................         mensajes(3+paso,4); 
20A4:  MOVLW  03
20A6:  ADDWF  33,W
20A8:  MOVWF  xC7
20AA:  MOVWF  xC8
20AC:  MOVLW  04
20AE:  MOVWF  xC9
20B0:  CALL   0D00
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
20B4:  MOVLW  01
20B6:  MOVWF  xD9
20B8:  MOVFF  1D,DA
20BC:  CALL   06FE
....................         lcd_putc(t[0]); 
20C0:  MOVFF  35,D8
20C4:  CALL   0760
....................  
....................         if(Flecha==2) 
20C8:  MOVF   1D,W
20CA:  SUBLW  02
20CC:  BNZ   20F6
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
20CE:  MOVLW  01
20D0:  MOVWF  xD9
20D2:  MOVLW  04
20D4:  MOVWF  xDA
20D6:  CALL   06FE
....................             lcd_putc(t[1]); 
20DA:  MOVFF  36,D8
20DE:  CALL   0760
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
20E2:  MOVLW  01
20E4:  MOVWF  xD9
20E6:  MOVLW  03
20E8:  MOVWF  xDA
20EA:  CALL   06FE
....................             lcd_putc(t[1]); 
20EE:  MOVFF  36,D8
20F2:  CALL   0760
....................           } 
....................          
....................         if(Flecha==4) 
20F6:  MOVF   1D,W
20F8:  SUBLW  04
20FA:  BNZ   2124
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
20FC:  MOVLW  01
20FE:  MOVWF  xD9
2100:  MOVLW  02
2102:  MOVWF  xDA
2104:  CALL   06FE
....................             lcd_putc(t[1]); 
2108:  MOVFF  36,D8
210C:  CALL   0760
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
2110:  MOVLW  01
2112:  MOVWF  xD9
2114:  MOVLW  03
2116:  MOVWF  xDA
2118:  CALL   06FE
....................             lcd_putc(t[1]); 
211C:  MOVFF  36,D8
2120:  CALL   0760
....................           } 
....................          
....................         if(Flecha==3) 
2124:  MOVF   1D,W
2126:  SUBLW  03
2128:  BNZ   2152
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
212A:  MOVLW  01
212C:  MOVWF  xD9
212E:  MOVLW  04
2130:  MOVWF  xDA
2132:  CALL   06FE
....................             lcd_putc(t[1]); 
2136:  MOVFF  36,D8
213A:  CALL   0760
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
213E:  MOVLW  01
2140:  MOVWF  xD9
2142:  MOVLW  02
2144:  MOVWF  xDA
2146:  CALL   06FE
....................             lcd_putc(t[1]); 
214A:  MOVFF  36,D8
214E:  CALL   0760
....................           } 
....................  
....................        if(RIGHT)// Si oprime derecha 
2152:  BSF    F96.1
2154:  BTFSS  F84.1
2156:  BRA    218E
....................        { 
....................          if(Flanco1 == 0) 
2158:  BTFSC  17.4
215A:  BRA    218C
....................          { 
....................             Flanco1 = 1;Menu=Flecha2;Flecha=3;delay_ms(300);printf(lcd_putc,"\f"); 
215C:  BSF    17.4
215E:  MOVFF  1F,19
2162:  MOVLW  03
2164:  MOVWF  1D
2166:  MOVLW  02
2168:  MOVWF  xC7
216A:  MOVLW  96
216C:  MOVWF  xDE
216E:  CALL   058E
2172:  DECFSZ xC7,F
2174:  BRA    216A
2176:  MOVLW  0C
2178:  MOVWF  xD8
217A:  CALL   0760
....................             if(Menu==6) 
217E:  MOVF   19,W
2180:  SUBLW  06
2182:  BNZ   218C
....................             { 
....................                clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
2184:  CLRF   38
2186:  CLRF   39
2188:  CLRF   3A
218A:  CLRF   3B
....................             } 
....................          } 
....................        } 
....................        else 
218C:  BRA    2190
....................        { 
....................          Flanco1 = 0; 
218E:  BCF    17.4
....................        } 
....................              
....................        if(LEFT) 
2190:  BSF    F96.2
2192:  BTFSS  F84.2
2194:  BRA    21B2
....................        { 
....................          Menu=100;printf(lcd_putc,"\f");delay_ms(500); 
2196:  MOVLW  64
2198:  MOVWF  19
219A:  MOVLW  0C
219C:  MOVWF  xD8
219E:  CALL   0760
21A2:  MOVLW  02
21A4:  MOVWF  xC7
21A6:  MOVLW  FA
21A8:  MOVWF  xDE
21AA:  CALL   058E
21AE:  DECFSZ xC7,F
21B0:  BRA    21A6
....................        } 
....................  
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de tiempo de trabajo de Luz UV    
21B2:  MOVF   19,W
21B4:  SUBLW  02
21B6:  BTFSS  FD8.2
21B8:  BRA    23EC
....................     
....................    lcd_gotoxy(1,1); 
21BA:  MOVLW  01
21BC:  MOVWF  xD9
21BE:  MOVWF  xDA
21C0:  CALL   06FE
....................    printf(lcd_putc,"    Temporizador     "); 
21C4:  MOVLW  92
21C6:  MOVWF  FF6
21C8:  MOVLW  02
21CA:  MOVWF  FF7
21CC:  CALL   07BE
....................    lcd_gotoxy(1,2); 
21D0:  MOVLW  01
21D2:  MOVWF  xD9
21D4:  MOVLW  02
21D6:  MOVWF  xDA
21D8:  CALL   06FE
....................    printf(lcd_putc,"       Luz UV        "); 
21DC:  MOVLW  A8
21DE:  MOVWF  FF6
21E0:  MOVLW  02
21E2:  MOVWF  FF7
21E4:  CALL   07BE
....................    lcd_gotoxy(6,3); 
21E8:  MOVLW  06
21EA:  MOVWF  xD9
21EC:  MOVLW  03
21EE:  MOVWF  xDA
21F0:  CALL   06FE
....................    printf(lcd_putc,"%02u:%02u (M:S)  ",tempo_minutos_pro,tempo_segundos_pro);  
21F4:  MOVFF  2A,C7
21F8:  MOVLW  01
21FA:  MOVWF  xC8
21FC:  CALL   0D68
2200:  MOVLW  3A
2202:  MOVWF  xD8
2204:  CALL   0760
2208:  MOVFF  2B,C7
220C:  MOVLW  01
220E:  MOVWF  xC8
2210:  CALL   0D68
2214:  MOVLW  C7
2216:  MOVWF  FF6
2218:  MOVLW  02
221A:  MOVWF  FF7
221C:  MOVLW  08
221E:  MOVWF  xCB
2220:  CALL   0BF2
....................     
....................    lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
2224:  MOVLW  06
2226:  ADDWF  2F,W
2228:  MOVWF  xC7
222A:  MOVWF  xD9
222C:  MOVLW  04
222E:  MOVWF  xDA
2230:  CALL   06FE
....................    lcd_putc(t[2]); 
2234:  MOVFF  37,D8
2238:  CALL   0760
....................     
....................    if(UP) 
223C:  BSF    F92.5
223E:  BTFSS  F80.5
2240:  BRA    227C
....................    { 
....................       if(unidad2==1) 
2242:  DECFSZ 2F,W
2244:  BRA    225E
....................       { 
....................          if(tempo_minutos_pro<61) 
2246:  MOVF   2A,W
2248:  SUBLW  3C
224A:  BNC   225E
....................          { 
....................             tempo_minutos_pro++;delay_ms(300); 
224C:  INCF   2A,F
224E:  MOVLW  02
2250:  MOVWF  xC7
2252:  MOVLW  96
2254:  MOVWF  xDE
2256:  CALL   058E
225A:  DECFSZ xC7,F
225C:  BRA    2252
....................          } 
....................       } 
....................        
....................       if(unidad2==3) 
225E:  MOVF   2F,W
2260:  SUBLW  03
2262:  BNZ   227C
....................       { 
....................          if(tempo_segundos_pro<60) 
2264:  MOVF   2B,W
2266:  SUBLW  3B
2268:  BNC   227C
....................          { 
....................             tempo_segundos_pro++;delay_ms(300); 
226A:  INCF   2B,F
226C:  MOVLW  02
226E:  MOVWF  xC7
2270:  MOVLW  96
2272:  MOVWF  xDE
2274:  CALL   058E
2278:  DECFSZ xC7,F
227A:  BRA    2270
....................          } 
....................       } 
....................    } 
....................     
....................    if(DOWN) 
227C:  BSF    F96.0
227E:  BTFSS  F84.0
2280:  BRA    22EC
....................    { 
....................       if(unidad2==1) 
2282:  DECFSZ 2F,W
2284:  BRA    22B6
....................       { 
....................          if(tempo_minutos_pro>0) 
2286:  MOVF   2A,F
2288:  BZ    229C
....................          { 
....................             tempo_minutos_pro--;delay_ms(300); 
228A:  DECF   2A,F
228C:  MOVLW  02
228E:  MOVWF  xC7
2290:  MOVLW  96
2292:  MOVWF  xDE
2294:  CALL   058E
2298:  DECFSZ xC7,F
229A:  BRA    2290
....................          } 
....................           
....................          if(tempo_minutos_pro>60) 
229C:  MOVF   2A,W
229E:  SUBLW  3C
22A0:  BC    22B6
....................          { 
....................             tempo_minutos_pro=60;delay_ms(300); 
22A2:  MOVLW  3C
22A4:  MOVWF  2A
22A6:  MOVLW  02
22A8:  MOVWF  xC7
22AA:  MOVLW  96
22AC:  MOVWF  xDE
22AE:  CALL   058E
22B2:  DECFSZ xC7,F
22B4:  BRA    22AA
....................          } 
....................       } 
....................        
....................       if(unidad2==3) 
22B6:  MOVF   2F,W
22B8:  SUBLW  03
22BA:  BNZ   22EC
....................       { 
....................          if(tempo_segundos_pro>0) 
22BC:  MOVF   2B,F
22BE:  BZ    22D2
....................          { 
....................             tempo_segundos_pro--;delay_ms(300); 
22C0:  DECF   2B,F
22C2:  MOVLW  02
22C4:  MOVWF  xC7
22C6:  MOVLW  96
22C8:  MOVWF  xDE
22CA:  CALL   058E
22CE:  DECFSZ xC7,F
22D0:  BRA    22C6
....................          } 
....................           
....................          if(tempo_segundos_pro>60) 
22D2:  MOVF   2B,W
22D4:  SUBLW  3C
22D6:  BC    22EC
....................          { 
....................             tempo_segundos_pro=60;delay_ms(300); 
22D8:  MOVLW  3C
22DA:  MOVWF  2B
22DC:  MOVLW  02
22DE:  MOVWF  xC7
22E0:  MOVLW  96
22E2:  MOVWF  xDE
22E4:  CALL   058E
22E8:  DECFSZ xC7,F
22EA:  BRA    22E0
....................          } 
....................       } 
....................    } 
....................     
....................    if(RIGHT) 
22EC:  BSF    F96.1
22EE:  BTFSS  F84.1
22F0:  BRA    231E
....................    { 
....................       if(unidad2==1) 
22F2:  DECFSZ 2F,W
22F4:  BRA    22FC
....................       { 
....................          unidad2=3; 
22F6:  MOVLW  03
22F8:  MOVWF  2F
....................       } 
....................       else 
22FA:  BRA    2306
....................       { 
....................          if(unidad2==3) 
22FC:  MOVF   2F,W
22FE:  SUBLW  03
2300:  BNZ   2306
....................          { 
....................             unidad2=1; 
2302:  MOVLW  01
2304:  MOVWF  2F
....................          } 
....................       } 
....................       delay_ms(500); 
2306:  MOVLW  02
2308:  MOVWF  xC7
230A:  MOVLW  FA
230C:  MOVWF  xDE
230E:  CALL   058E
2312:  DECFSZ xC7,F
2314:  BRA    230A
....................       printf(lcd_putc,"\f"); 
2316:  MOVLW  0C
2318:  MOVWF  xD8
231A:  CALL   0760
....................    } 
....................     
....................    if(LEFT) 
231E:  BSF    F96.2
2320:  BTFSS  F84.2
2322:  BRA    23EC
....................    { 
....................       delay_ms(200); 
2324:  MOVLW  C8
2326:  MOVWF  xDE
2328:  CALL   058E
....................       printf(lcd_putc,"\f"); 
232C:  MOVLW  0C
232E:  MOVWF  xD8
2330:  CALL   0760
....................       lcd_gotoxy(1,2); 
2334:  MOVLW  01
2336:  MOVWF  xD9
2338:  MOVLW  02
233A:  MOVWF  xDA
233C:  CALL   06FE
....................       printf(lcd_putc,"Tiempo Almacenado"); 
2340:  MOVLW  D0
2342:  MOVWF  FF6
2344:  MOVLW  02
2346:  MOVWF  FF7
2348:  CALL   07BE
....................       lcd_gotoxy(1,3); 
234C:  MOVLW  01
234E:  MOVWF  xD9
2350:  MOVLW  03
2352:  MOVWF  xDA
2354:  CALL   06FE
....................       printf(lcd_putc,"  Correctamente  "); 
2358:  MOVLW  E2
235A:  MOVWF  FF6
235C:  MOVLW  02
235E:  MOVWF  FF7
2360:  CALL   07BE
....................       write_eeprom(20,tempo_minutos_pro);write_eeprom(21,tempo_segundos_pro); 
2364:  MOVLW  14
2366:  MOVWF  FA9
2368:  MOVFF  2A,FA8
236C:  BCF    FA6.6
236E:  BCF    FA6.7
2370:  BSF    FA6.2
2372:  MOVF   FF2,W
2374:  MOVWF  00
2376:  BCF    FF2.7
2378:  MOVLB  F
237A:  MOVLW  55
237C:  MOVWF  FA7
237E:  MOVLW  AA
2380:  MOVWF  FA7
2382:  BSF    FA6.1
2384:  BTFSC  FA6.1
2386:  BRA    2384
2388:  BCF    FA6.2
238A:  MOVF   00,W
238C:  IORWF  FF2,F
238E:  MOVLW  15
2390:  MOVWF  FA9
2392:  MOVFF  2B,FA8
2396:  BCF    FA6.6
2398:  BCF    FA6.7
239A:  BSF    FA6.2
239C:  MOVF   FF2,W
239E:  MOVWF  00
23A0:  BCF    FF2.7
23A2:  MOVLW  55
23A4:  MOVWF  FA7
23A6:  MOVLW  AA
23A8:  MOVWF  FA7
23AA:  BSF    FA6.1
23AC:  BTFSC  FA6.1
23AE:  BRA    23AC
23B0:  BCF    FA6.2
23B2:  MOVF   00,W
23B4:  IORWF  FF2,F
....................       tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
23B6:  MOVFF  2A,28
23BA:  MOVFF  2B,29
....................       delay_ms(700); 
23BE:  MOVLW  04
23C0:  MOVLB  0
23C2:  MOVWF  xC7
23C4:  MOVLW  AF
23C6:  MOVWF  xDE
23C8:  CALL   058E
23CC:  DECFSZ xC7,F
23CE:  BRA    23C4
....................       delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
23D0:  MOVLW  1E
23D2:  MOVWF  xDE
23D4:  CALL   058E
23D8:  MOVLW  01
23DA:  MOVWF  19
23DC:  CLRF   33
23DE:  MOVLW  02
23E0:  MOVWF  1D
23E2:  MOVWF  1F
23E4:  MOVLW  0C
23E6:  MOVWF  xD8
23E8:  CALL   0760
....................    }   
....................   } 
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................  
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu para Cambio de Contraseña 
23EC:  MOVF   19,W
23EE:  SUBLW  03
23F0:  BTFSS  FD8.2
23F2:  BRA    26EC
....................    lcd_gotoxy(1,1); 
23F4:  MOVLW  01
23F6:  MOVWF  xD9
23F8:  MOVWF  xDA
23FA:  CALL   06FE
....................    printf(lcd_putc,"      Ingrese       "); 
23FE:  MOVLW  F4
2400:  MOVWF  FF6
2402:  MOVLW  02
2404:  MOVWF  FF7
2406:  CALL   07BE
....................    lcd_gotoxy(1,2); 
240A:  MOVLW  01
240C:  MOVWF  xD9
240E:  MOVLW  02
2410:  MOVWF  xDA
2412:  CALL   06FE
....................    printf(lcd_putc," Contraseña Actual  "); 
2416:  MOVLW  0A
2418:  MOVWF  FF6
241A:  MOVLW  03
241C:  MOVWF  FF7
241E:  CALL   07BE
....................    lcd_gotoxy(1,3); 
2422:  MOVLW  01
2424:  MOVWF  xD9
2426:  MOVLW  03
2428:  MOVWF  xDA
242A:  CALL   06FE
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
242E:  MOVLW  20
2430:  MOVWF  FF6
2432:  MOVLW  03
2434:  MOVWF  FF7
2436:  MOVLW  0A
2438:  MOVWF  xCB
243A:  CALL   0BF2
243E:  MOVFF  38,C7
2442:  MOVLW  1F
2444:  MOVWF  xC8
2446:  CALL   0C38
244A:  MOVFF  39,C7
244E:  MOVLW  1F
2450:  MOVWF  xC8
2452:  CALL   0C38
2456:  MOVFF  3A,C7
245A:  MOVLW  1F
245C:  MOVWF  xC8
245E:  CALL   0C38
2462:  MOVFF  3B,C7
2466:  MOVLW  1F
2468:  MOVWF  xC8
246A:  CALL   0C38
246E:  MOVLW  20
2470:  MOVWF  xD8
2472:  CALL   0760
2476:  MOVLW  20
2478:  MOVWF  xD8
247A:  CALL   0760
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
247E:  BSF    F92.5
2480:  BTFSS  F80.5
2482:  BRA    24A6
....................       {  if(Flanco == 0)  
2484:  BTFSC  17.3
2486:  BRA    24A4
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
2488:  MOVLW  0B
248A:  SUBWF  1C,W
248C:  CLRF   03
248E:  ADDLW  38
2490:  MOVWF  FE9
2492:  MOVLW  00
2494:  ADDWFC 03,W
2496:  MOVWF  FEA
2498:  INCF   FEF,F
249A:  BSF    17.3
249C:  MOVLW  1E
249E:  MOVWF  xDE
24A0:  CALL   058E
....................          else 
24A4:  BRA    24A8
....................             {Flanco = 0;} 
24A6:  BCF    17.3
....................              
....................       if(DOWN)//Si oprime hacia abajo 
24A8:  BSF    F96.0
24AA:  BTFSS  F84.0
24AC:  BRA    24D0
....................       {  if(Flanco2 == 0)  
24AE:  BTFSC  17.5
24B0:  BRA    24CE
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
24B2:  MOVLW  0B
24B4:  SUBWF  1C,W
24B6:  CLRF   03
24B8:  ADDLW  38
24BA:  MOVWF  FE9
24BC:  MOVLW  00
24BE:  ADDWFC 03,W
24C0:  MOVWF  FEA
24C2:  DECF   FEF,F
24C4:  BSF    17.5
24C6:  MOVLW  1E
24C8:  MOVWF  xDE
24CA:  CALL   058E
....................          else 
24CE:  BRA    24D2
....................             {Flanco2 = 0;} 
24D0:  BCF    17.5
....................     
....................       if(RIGHT)// Si oprime derecha 
24D2:  BSF    F96.1
24D4:  BTFSS  F84.1
24D6:  BRA    24F2
....................       {  if(Flanco1 == 0)  
24D8:  BTFSC  17.4
24DA:  BRA    24F0
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
24DC:  BSF    17.4
24DE:  INCF   1C,F
24E0:  MOVLW  1E
24E2:  MOVWF  xDE
24E4:  CALL   058E
24E8:  MOVLW  0C
24EA:  MOVWF  xD8
24EC:  CALL   0760
....................          else 
24F0:  BRA    24F4
....................             {Flanco1 = 0;}    
24F2:  BCF    17.4
....................              
....................        if(LEFT)// Si oprime Izquierda 
24F4:  BSF    F96.2
24F6:  BTFSS  F84.2
24F8:  BRA    2514
....................       {  if(Flanco3 == 0)  
24FA:  BTFSC  17.6
24FC:  BRA    2512
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");}} 
24FE:  BSF    17.6
2500:  DECF   1C,F
2502:  MOVLW  1E
2504:  MOVWF  xDE
2506:  CALL   058E
250A:  MOVLW  0C
250C:  MOVWF  xD8
250E:  CALL   0760
....................          else 
2512:  BRA    2516
....................             {Flanco3 = 0;}     
2514:  BCF    17.6
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
2516:  MOVLW  0B
2518:  SUBWF  1C,W
251A:  CLRF   03
251C:  ADDLW  38
251E:  MOVWF  FE9
2520:  MOVLW  00
2522:  ADDWFC 03,W
2524:  MOVWF  FEA
2526:  BTFSC  FEF.7
2528:  BRA    252C
252A:  BRA    2540
....................        {clave[unidad-11]=9;} 
252C:  MOVLW  0B
252E:  SUBWF  1C,W
2530:  CLRF   03
2532:  ADDLW  38
2534:  MOVWF  FE9
2536:  MOVLW  00
2538:  ADDWFC 03,W
253A:  MOVWF  FEA
253C:  MOVLW  09
253E:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
2540:  MOVLW  0B
2542:  SUBWF  1C,W
2544:  CLRF   03
2546:  ADDLW  38
2548:  MOVWF  FE9
254A:  MOVLW  00
254C:  ADDWFC 03,W
254E:  MOVWF  FEA
2550:  BTFSC  FEF.7
2552:  BRA    256C
2554:  MOVF   FEF,W
2556:  SUBLW  09
2558:  BC    256C
....................        {clave[unidad-11]=0;} 
255A:  MOVLW  0B
255C:  SUBWF  1C,W
255E:  CLRF   03
2560:  ADDLW  38
2562:  MOVWF  FE9
2564:  MOVLW  00
2566:  ADDWFC 03,W
2568:  MOVWF  FEA
256A:  CLRF   FEF
....................        if(unidad<11) 
256C:  MOVF   1C,W
256E:  SUBLW  0A
2570:  BNC   2592
....................        {Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);} 
2572:  MOVLW  01
2574:  MOVWF  19
2576:  CLRF   33
2578:  MOVLW  02
257A:  MOVWF  1D
257C:  MOVWF  1F
257E:  MOVLW  0B
2580:  MOVWF  1C
2582:  MOVLW  02
2584:  MOVWF  xC7
2586:  MOVLW  FA
2588:  MOVWF  xDE
258A:  CALL   058E
258E:  DECFSZ xC7,F
2590:  BRA    2586
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
2592:  MOVFF  1C,D9
2596:  MOVLW  04
2598:  MOVWF  xDA
259A:  CALL   06FE
....................        lcd_putc(t[2]); 
259E:  MOVFF  37,D8
25A2:  CALL   0760
....................        if(unidad>14)// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
25A6:  MOVF   1C,W
25A8:  SUBLW  0E
25AA:  BTFSC  FD8.0
25AC:  BRA    26C8
....................        { 
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) 
25AE:  MOVF   3C,W
25B0:  SUBWF  38,W
25B2:  BNZ   264E
25B4:  MOVF   3D,W
25B6:  SUBWF  39,W
25B8:  BNZ   264E
25BA:  MOVF   3E,W
25BC:  SUBWF  3A,W
25BE:  BNZ   264E
25C0:  MOVF   3F,W
25C2:  SUBWF  3B,W
25C4:  BNZ   264E
....................             {lcd_gotoxy(1,1); 
25C6:  MOVLW  01
25C8:  MOVWF  xD9
25CA:  MOVWF  xDA
25CC:  CALL   06FE
....................             printf(lcd_putc,"                    "); 
25D0:  MOVLW  36
25D2:  MOVWF  FF6
25D4:  MOVLW  03
25D6:  MOVWF  FF7
25D8:  CALL   07BE
....................             lcd_gotoxy(1,2); 
25DC:  MOVLW  01
25DE:  MOVWF  xD9
25E0:  MOVLW  02
25E2:  MOVWF  xDA
25E4:  CALL   06FE
....................             printf(lcd_putc,"     Contraseña     "); 
25E8:  MOVLW  4C
25EA:  MOVWF  FF6
25EC:  MOVLW  03
25EE:  MOVWF  FF7
25F0:  CALL   07BE
....................             lcd_gotoxy(1,3); 
25F4:  MOVLW  01
25F6:  MOVWF  xD9
25F8:  MOVLW  03
25FA:  MOVWF  xDA
25FC:  CALL   06FE
....................             printf(lcd_putc,"      Correcta      "); 
2600:  MOVLW  62
2602:  MOVWF  FF6
2604:  MOVLW  03
2606:  MOVWF  FF7
2608:  CALL   07BE
....................             lcd_gotoxy(1,4); 
260C:  MOVLW  01
260E:  MOVWF  xD9
2610:  MOVLW  04
2612:  MOVWF  xDA
2614:  CALL   06FE
....................             printf(lcd_putc,"                    "); 
2618:  MOVLW  78
261A:  MOVWF  FF6
261C:  MOVLW  03
261E:  MOVWF  FF7
2620:  CALL   07BE
....................             delay_ms(500);Menu=61;unidad=11;printf(lcd_putc,"\f"); 
2624:  MOVLW  02
2626:  MOVWF  xC7
2628:  MOVLW  FA
262A:  MOVWF  xDE
262C:  CALL   058E
2630:  DECFSZ xC7,F
2632:  BRA    2628
2634:  MOVLW  3D
2636:  MOVWF  19
2638:  MOVLW  0B
263A:  MOVWF  1C
263C:  MOVLW  0C
263E:  MOVWF  xD8
2640:  CALL   0760
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;} 
2644:  CLRF   38
2646:  CLRF   39
2648:  CLRF   3A
264A:  CLRF   3B
....................          else 
264C:  BRA    26C8
....................          {lcd_gotoxy(1,1); 
264E:  MOVLW  01
2650:  MOVWF  xD9
2652:  MOVWF  xDA
2654:  CALL   06FE
....................             printf(lcd_putc,"                    "); 
2658:  MOVLW  8E
265A:  MOVWF  FF6
265C:  MOVLW  03
265E:  MOVWF  FF7
2660:  CALL   07BE
....................             lcd_gotoxy(1,2); 
2664:  MOVLW  01
2666:  MOVWF  xD9
2668:  MOVLW  02
266A:  MOVWF  xDA
266C:  CALL   06FE
....................             printf(lcd_putc,"     Contraseña     "); 
2670:  MOVLW  A4
2672:  MOVWF  FF6
2674:  MOVLW  03
2676:  MOVWF  FF7
2678:  CALL   07BE
....................             lcd_gotoxy(1,3); 
267C:  MOVLW  01
267E:  MOVWF  xD9
2680:  MOVLW  03
2682:  MOVWF  xDA
2684:  CALL   06FE
....................             printf(lcd_putc,"     Incorrecta     "); 
2688:  MOVLW  BA
268A:  MOVWF  FF6
268C:  MOVLW  03
268E:  MOVWF  FF7
2690:  CALL   07BE
....................             lcd_gotoxy(1,4); 
2694:  MOVLW  01
2696:  MOVWF  xD9
2698:  MOVLW  04
269A:  MOVWF  xDA
269C:  CALL   06FE
....................             printf(lcd_putc,"                    "); 
26A0:  MOVLW  D0
26A2:  MOVWF  FF6
26A4:  MOVLW  03
26A6:  MOVWF  FF7
26A8:  CALL   07BE
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");} 
26AC:  MOVLW  02
26AE:  MOVWF  xC7
26B0:  MOVLW  FA
26B2:  MOVWF  xDE
26B4:  CALL   058E
26B8:  DECFSZ xC7,F
26BA:  BRA    26B0
26BC:  MOVLW  0B
26BE:  MOVWF  1C
26C0:  MOVLW  0C
26C2:  MOVWF  xD8
26C4:  CALL   0760
....................        } 
....................                 
....................           if(unidad>11&&unidad<14) 
26C8:  MOVF   1C,W
26CA:  SUBLW  0B
26CC:  BC    26EC
26CE:  MOVF   1C,W
26D0:  SUBLW  0D
26D2:  BNC   26EC
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
26D4:  MOVLW  01
26D6:  SUBWF  1C,W
26D8:  MOVWF  xC7
26DA:  MOVWF  xD9
26DC:  MOVLW  04
26DE:  MOVWF  xDA
26E0:  CALL   06FE
....................             lcd_putc(t[1]); 
26E4:  MOVFF  36,D8
26E8:  CALL   0760
....................           } 
....................    }       
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu6.1--------------------------------------------------------------- 
....................    if(Menu == 61){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
26EC:  MOVF   19,W
26EE:  SUBLW  3D
26F0:  BTFSS  FD8.2
26F2:  BRA    2A02
....................    lcd_gotoxy(1,1); 
26F4:  MOVLW  01
26F6:  MOVWF  xD9
26F8:  MOVWF  xDA
26FA:  CALL   06FE
....................    printf(lcd_putc,"     Ingrese        "); 
26FE:  MOVLW  E6
2700:  MOVWF  FF6
2702:  MOVLW  03
2704:  MOVWF  FF7
2706:  CALL   07BE
....................    lcd_gotoxy(1,2); 
270A:  MOVLW  01
270C:  MOVWF  xD9
270E:  MOVLW  02
2710:  MOVWF  xDA
2712:  CALL   06FE
....................    printf(lcd_putc,"  Contraseña Nueva  "); 
2716:  MOVLW  FC
2718:  MOVWF  FF6
271A:  MOVLW  03
271C:  MOVWF  FF7
271E:  CALL   07BE
....................    lcd_gotoxy(1,3); 
2722:  MOVLW  01
2724:  MOVWF  xD9
2726:  MOVLW  03
2728:  MOVWF  xDA
272A:  CALL   06FE
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
272E:  MOVLW  12
2730:  MOVWF  FF6
2732:  MOVLW  04
2734:  MOVWF  FF7
2736:  MOVLW  0A
2738:  MOVWF  xCB
273A:  CALL   0BF2
273E:  MOVFF  38,C7
2742:  MOVLW  1F
2744:  MOVWF  xC8
2746:  CALL   0C38
274A:  MOVFF  39,C7
274E:  MOVLW  1F
2750:  MOVWF  xC8
2752:  CALL   0C38
2756:  MOVFF  3A,C7
275A:  MOVLW  1F
275C:  MOVWF  xC8
275E:  CALL   0C38
2762:  MOVFF  3B,C7
2766:  MOVLW  1F
2768:  MOVWF  xC8
276A:  CALL   0C38
276E:  MOVLW  20
2770:  MOVWF  xD8
2772:  CALL   0760
2776:  MOVLW  20
2778:  MOVWF  xD8
277A:  CALL   0760
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
277E:  BSF    F92.5
2780:  BTFSS  F80.5
2782:  BRA    27A6
....................       {  if(Flanco == 0)  
2784:  BTFSC  17.3
2786:  BRA    27A4
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
2788:  MOVLW  0B
278A:  SUBWF  1C,W
278C:  CLRF   03
278E:  ADDLW  38
2790:  MOVWF  FE9
2792:  MOVLW  00
2794:  ADDWFC 03,W
2796:  MOVWF  FEA
2798:  INCF   FEF,F
279A:  BSF    17.3
279C:  MOVLW  1E
279E:  MOVWF  xDE
27A0:  CALL   058E
....................          else 
27A4:  BRA    27A8
....................             {Flanco = 0;} 
27A6:  BCF    17.3
....................              
....................       if(DOWN)//Si oprime hacia abajo 
27A8:  BSF    F96.0
27AA:  BTFSS  F84.0
27AC:  BRA    27D0
....................       {  if(Flanco2 == 0)  
27AE:  BTFSC  17.5
27B0:  BRA    27CE
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
27B2:  MOVLW  0B
27B4:  SUBWF  1C,W
27B6:  CLRF   03
27B8:  ADDLW  38
27BA:  MOVWF  FE9
27BC:  MOVLW  00
27BE:  ADDWFC 03,W
27C0:  MOVWF  FEA
27C2:  DECF   FEF,F
27C4:  BSF    17.5
27C6:  MOVLW  1E
27C8:  MOVWF  xDE
27CA:  CALL   058E
....................          else 
27CE:  BRA    27D2
....................             {Flanco2 = 0;} 
27D0:  BCF    17.5
....................     
....................       if(RIGHT)// Si oprime Derecha 
27D2:  BSF    F96.1
27D4:  BTFSS  F84.1
27D6:  BRA    27F2
....................       {  if(Flanco1 == 0)  
27D8:  BTFSC  17.4
27DA:  BRA    27F0
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
27DC:  BSF    17.4
27DE:  INCF   1C,F
27E0:  MOVLW  1E
27E2:  MOVWF  xDE
27E4:  CALL   058E
27E8:  MOVLW  0C
27EA:  MOVWF  xD8
27EC:  CALL   0760
....................          else 
27F0:  BRA    27F4
....................             {Flanco1 = 0;}    
27F2:  BCF    17.4
....................              
....................        if(LEFT)// Si oprime Izquierda 
27F4:  BSF    F96.2
27F6:  BTFSS  F84.2
27F8:  BRA    2814
....................       {  if(Flanco3 == 0)  
27FA:  BTFSC  17.6
27FC:  BRA    2812
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");}} 
27FE:  BSF    17.6
2800:  DECF   1C,F
2802:  MOVLW  1E
2804:  MOVWF  xDE
2806:  CALL   058E
280A:  MOVLW  0C
280C:  MOVWF  xD8
280E:  CALL   0760
....................          else 
2812:  BRA    2816
....................             {Flanco3 = 0;}     
2814:  BCF    17.6
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
2816:  MOVLW  0B
2818:  SUBWF  1C,W
281A:  CLRF   03
281C:  ADDLW  38
281E:  MOVWF  FE9
2820:  MOVLW  00
2822:  ADDWFC 03,W
2824:  MOVWF  FEA
2826:  BTFSC  FEF.7
2828:  BRA    282C
282A:  BRA    2840
....................        {clave[unidad-11]=9;} 
282C:  MOVLW  0B
282E:  SUBWF  1C,W
2830:  CLRF   03
2832:  ADDLW  38
2834:  MOVWF  FE9
2836:  MOVLW  00
2838:  ADDWFC 03,W
283A:  MOVWF  FEA
283C:  MOVLW  09
283E:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
2840:  MOVLW  0B
2842:  SUBWF  1C,W
2844:  CLRF   03
2846:  ADDLW  38
2848:  MOVWF  FE9
284A:  MOVLW  00
284C:  ADDWFC 03,W
284E:  MOVWF  FEA
2850:  BTFSC  FEF.7
2852:  BRA    286C
2854:  MOVF   FEF,W
2856:  SUBLW  09
2858:  BC    286C
....................        {clave[unidad-11]=0;} 
285A:  MOVLW  0B
285C:  SUBWF  1C,W
285E:  CLRF   03
2860:  ADDLW  38
2862:  MOVWF  FE9
2864:  MOVLW  00
2866:  ADDWFC 03,W
2868:  MOVWF  FEA
286A:  CLRF   FEF
....................        if(unidad<11) 
286C:  MOVF   1C,W
286E:  SUBLW  0A
2870:  BNC   287A
....................        {Menu=5;unidad=11;} 
2872:  MOVLW  05
2874:  MOVWF  19
2876:  MOVLW  0B
2878:  MOVWF  1C
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
287A:  MOVFF  1C,D9
287E:  MOVLW  04
2880:  MOVWF  xDA
2882:  CALL   06FE
....................        lcd_putc(t[2]); 
2886:  MOVFF  37,D8
288A:  CALL   0760
....................        if(unidad>14)// Si ya ingreso la nueva contraseña. 
288E:  MOVF   1C,W
2890:  SUBLW  0E
2892:  BTFSC  FD8.0
2894:  BRA    29DE
....................        { 
....................             lcd_gotoxy(1,1); 
2896:  MOVLW  01
2898:  MOVWF  xD9
289A:  MOVWF  xDA
289C:  CALL   06FE
....................             printf(lcd_putc,"                    "); 
28A0:  MOVLW  28
28A2:  MOVWF  FF6
28A4:  MOVLW  04
28A6:  MOVWF  FF7
28A8:  CALL   07BE
....................             lcd_gotoxy(1,2); 
28AC:  MOVLW  01
28AE:  MOVWF  xD9
28B0:  MOVLW  02
28B2:  MOVWF  xDA
28B4:  CALL   06FE
....................             printf(lcd_putc,"     Contraseña     "); 
28B8:  MOVLW  3E
28BA:  MOVWF  FF6
28BC:  MOVLW  04
28BE:  MOVWF  FF7
28C0:  CALL   07BE
....................             lcd_gotoxy(1,3); 
28C4:  MOVLW  01
28C6:  MOVWF  xD9
28C8:  MOVLW  03
28CA:  MOVWF  xDA
28CC:  CALL   06FE
....................             printf(lcd_putc,"     Almacenada     "); 
28D0:  MOVLW  54
28D2:  MOVWF  FF6
28D4:  MOVLW  04
28D6:  MOVWF  FF7
28D8:  CALL   07BE
....................             lcd_gotoxy(1,4); 
28DC:  MOVLW  01
28DE:  MOVWF  xD9
28E0:  MOVLW  04
28E2:  MOVWF  xDA
28E4:  CALL   06FE
....................             printf(lcd_putc,"                    "); 
28E8:  MOVLW  6A
28EA:  MOVWF  FF6
28EC:  MOVLW  04
28EE:  MOVWF  FF7
28F0:  CALL   07BE
....................             write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
28F4:  CLRF   FA9
28F6:  MOVFF  38,FA8
28FA:  BCF    FA6.6
28FC:  BCF    FA6.7
28FE:  BSF    FA6.2
2900:  MOVF   FF2,W
2902:  MOVWF  00
2904:  BCF    FF2.7
2906:  MOVLB  F
2908:  MOVLW  55
290A:  MOVWF  FA7
290C:  MOVLW  AA
290E:  MOVWF  FA7
2910:  BSF    FA6.1
2912:  BTFSC  FA6.1
2914:  BRA    2912
2916:  BCF    FA6.2
2918:  MOVF   00,W
291A:  IORWF  FF2,F
291C:  MOVLW  14
291E:  MOVLB  0
2920:  MOVWF  xDE
2922:  CALL   058E
2926:  MOVLW  01
2928:  MOVWF  FA9
292A:  MOVFF  39,FA8
292E:  BCF    FA6.6
2930:  BCF    FA6.7
2932:  BSF    FA6.2
2934:  MOVF   FF2,W
2936:  MOVWF  00
2938:  BCF    FF2.7
293A:  MOVLB  F
293C:  MOVLW  55
293E:  MOVWF  FA7
2940:  MOVLW  AA
2942:  MOVWF  FA7
2944:  BSF    FA6.1
2946:  BTFSC  FA6.1
2948:  BRA    2946
294A:  BCF    FA6.2
294C:  MOVF   00,W
294E:  IORWF  FF2,F
2950:  MOVLW  14
2952:  MOVLB  0
2954:  MOVWF  xDE
2956:  CALL   058E
....................             write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
295A:  MOVLW  02
295C:  MOVWF  FA9
295E:  MOVFF  3A,FA8
2962:  BCF    FA6.6
2964:  BCF    FA6.7
2966:  BSF    FA6.2
2968:  MOVF   FF2,W
296A:  MOVWF  00
296C:  BCF    FF2.7
296E:  MOVLB  F
2970:  MOVLW  55
2972:  MOVWF  FA7
2974:  MOVLW  AA
2976:  MOVWF  FA7
2978:  BSF    FA6.1
297A:  BTFSC  FA6.1
297C:  BRA    297A
297E:  BCF    FA6.2
2980:  MOVF   00,W
2982:  IORWF  FF2,F
2984:  MOVLW  14
2986:  MOVLB  0
2988:  MOVWF  xDE
298A:  CALL   058E
298E:  MOVLW  03
2990:  MOVWF  FA9
2992:  MOVFF  3B,FA8
2996:  BCF    FA6.6
2998:  BCF    FA6.7
299A:  BSF    FA6.2
299C:  MOVF   FF2,W
299E:  MOVWF  00
29A0:  BCF    FF2.7
29A2:  MOVLB  F
29A4:  MOVLW  55
29A6:  MOVWF  FA7
29A8:  MOVLW  AA
29AA:  MOVWF  FA7
29AC:  BSF    FA6.1
29AE:  BTFSC  FA6.1
29B0:  BRA    29AE
29B2:  BCF    FA6.2
29B4:  MOVF   00,W
29B6:  IORWF  FF2,F
29B8:  MOVLW  14
29BA:  MOVLB  0
29BC:  MOVWF  xDE
29BE:  CALL   058E
....................             delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
29C2:  MOVLW  02
29C4:  MOVWF  xC7
29C6:  MOVLW  FA
29C8:  MOVWF  xDE
29CA:  CALL   058E
29CE:  DECFSZ xC7,F
29D0:  BRA    29C6
29D2:  MOVLW  01
29D4:  MOVWF  19
29D6:  CLRF   33
29D8:  MOVLW  02
29DA:  MOVWF  1D
29DC:  MOVWF  1F
....................        } 
....................        
....................            if(unidad>11&&unidad<14) 
29DE:  MOVF   1C,W
29E0:  SUBLW  0B
29E2:  BC    2A02
29E4:  MOVF   1C,W
29E6:  SUBLW  0D
29E8:  BNC   2A02
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
29EA:  MOVLW  01
29EC:  SUBWF  1C,W
29EE:  MOVWF  xC7
29F0:  MOVWF  xD9
29F2:  MOVLW  04
29F4:  MOVWF  xDA
29F6:  CALL   06FE
....................             lcd_putc(t[1]); 
29FA:  MOVFF  36,D8
29FE:  CALL   0760
....................           } 
....................    }       
.................... //----------------Fin-Menu6.1--------------------------------------------------------------- 
....................     
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu de tiempo de trabajo de Luz UV 
2A02:  MOVF   19,W
2A04:  SUBLW  04
2A06:  BTFSS  FD8.2
2A08:  BRA    2BA6
....................    lcd_gotoxy(1,1); 
2A0A:  MOVLW  01
2A0C:  MOVWF  xD9
2A0E:  MOVWF  xDA
2A10:  CALL   06FE
....................    printf(lcd_putc,"  Duracion Actual   "); 
2A14:  MOVLW  80
2A16:  MOVWF  FF6
2A18:  MOVLW  04
2A1A:  MOVWF  FF7
2A1C:  CALL   07BE
....................    lcd_gotoxy(1,2); 
2A20:  MOVLW  01
2A22:  MOVWF  xD9
2A24:  MOVLW  02
2A26:  MOVWF  xDA
2A28:  CALL   06FE
....................    printf(lcd_putc,"   Tiempo= %05Lu   ",horas); 
2A2C:  MOVLW  96
2A2E:  MOVWF  FF6
2A30:  MOVLW  04
2A32:  MOVWF  FF7
2A34:  MOVLW  0B
2A36:  MOVWF  xCB
2A38:  CALL   0BF2
2A3C:  MOVLW  08
2A3E:  MOVWF  FE9
2A40:  MOVFF  48,C8
2A44:  MOVFF  47,C7
2A48:  GOTO   0DCE
2A4C:  MOVLW  20
2A4E:  MOVWF  xD8
2A50:  CALL   0760
2A54:  MOVLW  20
2A56:  MOVWF  xD8
2A58:  CALL   0760
2A5C:  MOVLW  20
2A5E:  MOVWF  xD8
2A60:  CALL   0760
....................    lcd_gotoxy(1,4); 
2A64:  MOVLW  01
2A66:  MOVWF  xD9
2A68:  MOVLW  04
2A6A:  MOVWF  xDA
2A6C:  CALL   06FE
....................    printf(lcd_putc," RESET= Oprima ^ y > "); 
2A70:  MOVLW  AA
2A72:  MOVWF  FF6
2A74:  MOVLW  04
2A76:  MOVWF  FF7
2A78:  CALL   07BE
....................     
....................       if(UP && RIGHT)//Si oprime hacia arriba 
2A7C:  BSF    F92.5
2A7E:  BTFSS  F80.5
2A80:  BRA    2B72
2A82:  BSF    F96.1
2A84:  BTFSS  F84.1
2A86:  BRA    2B72
....................       {   
....................          delay_ms(200); 
2A88:  MOVLW  C8
2A8A:  MOVWF  xDE
2A8C:  CALL   058E
....................          printf(lcd_putc,"\f"); 
2A90:  MOVLW  0C
2A92:  MOVWF  xD8
2A94:  CALL   0760
....................          lcd_gotoxy(1,2); 
2A98:  MOVLW  01
2A9A:  MOVWF  xD9
2A9C:  MOVLW  02
2A9E:  MOVWF  xDA
2AA0:  CALL   06FE
....................          printf(lcd_putc," Reset de tiempo "); 
2AA4:  MOVLW  C0
2AA6:  MOVWF  FF6
2AA8:  MOVLW  04
2AAA:  MOVWF  FF7
2AAC:  CALL   07BE
....................          lcd_gotoxy(1,3); 
2AB0:  MOVLW  01
2AB2:  MOVWF  xD9
2AB4:  MOVLW  03
2AB6:  MOVWF  xDA
2AB8:  CALL   06FE
....................          printf(lcd_putc,"     Exitoso     "); 
2ABC:  MOVLW  D2
2ABE:  MOVWF  FF6
2AC0:  MOVLW  04
2AC2:  MOVWF  FF7
2AC4:  CALL   07BE
....................          write_eeprom(50,0);write_eeprom(51,0);write_eeprom(52,0); 
2AC8:  MOVLW  32
2ACA:  MOVWF  FA9
2ACC:  CLRF   FA8
2ACE:  BCF    FA6.6
2AD0:  BCF    FA6.7
2AD2:  BSF    FA6.2
2AD4:  MOVF   FF2,W
2AD6:  MOVWF  00
2AD8:  BCF    FF2.7
2ADA:  MOVLB  F
2ADC:  MOVLW  55
2ADE:  MOVWF  FA7
2AE0:  MOVLW  AA
2AE2:  MOVWF  FA7
2AE4:  BSF    FA6.1
2AE6:  BTFSC  FA6.1
2AE8:  BRA    2AE6
2AEA:  BCF    FA6.2
2AEC:  MOVF   00,W
2AEE:  IORWF  FF2,F
2AF0:  MOVLW  33
2AF2:  MOVWF  FA9
2AF4:  CLRF   FA8
2AF6:  BCF    FA6.6
2AF8:  BCF    FA6.7
2AFA:  BSF    FA6.2
2AFC:  MOVF   FF2,W
2AFE:  MOVWF  00
2B00:  BCF    FF2.7
2B02:  MOVLW  55
2B04:  MOVWF  FA7
2B06:  MOVLW  AA
2B08:  MOVWF  FA7
2B0A:  BSF    FA6.1
2B0C:  BTFSC  FA6.1
2B0E:  BRA    2B0C
2B10:  BCF    FA6.2
2B12:  MOVF   00,W
2B14:  IORWF  FF2,F
2B16:  MOVLW  34
2B18:  MOVWF  FA9
2B1A:  CLRF   FA8
2B1C:  BCF    FA6.6
2B1E:  BCF    FA6.7
2B20:  BSF    FA6.2
2B22:  MOVF   FF2,W
2B24:  MOVWF  00
2B26:  BCF    FF2.7
2B28:  MOVLW  55
2B2A:  MOVWF  FA7
2B2C:  MOVLW  AA
2B2E:  MOVWF  FA7
2B30:  BSF    FA6.1
2B32:  BTFSC  FA6.1
2B34:  BRA    2B32
2B36:  BCF    FA6.2
2B38:  MOVF   00,W
2B3A:  IORWF  FF2,F
....................          delay_ms(700); 
2B3C:  MOVLW  04
2B3E:  MOVLB  0
2B40:  MOVWF  xC7
2B42:  MOVLW  AF
2B44:  MOVWF  xDE
2B46:  CALL   058E
2B4A:  DECFSZ xC7,F
2B4C:  BRA    2B42
....................          segundos=0;minutos=0;horas=0; 
2B4E:  CLRF   22
2B50:  CLRF   23
2B52:  CLRF   48
2B54:  CLRF   47
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2B56:  MOVLW  1E
2B58:  MOVWF  xDE
2B5A:  CALL   058E
2B5E:  MOVLW  01
2B60:  MOVWF  19
2B62:  CLRF   33
2B64:  MOVLW  02
2B66:  MOVWF  1D
2B68:  MOVWF  1F
2B6A:  MOVLW  0C
2B6C:  MOVWF  xD8
2B6E:  CALL   0760
....................       } 
....................              
....................       if(LEFT)// Si oprime Izquierda 
2B72:  BSF    F96.2
2B74:  BTFSS  F84.2
2B76:  BRA    2BA4
....................       { 
....................          if(Flanco3 == 0) 
2B78:  BTFSC  17.6
2B7A:  BRA    2BA2
....................          { 
....................             Flanco3 = 1;delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2B7C:  BSF    17.6
2B7E:  MOVLW  02
2B80:  MOVWF  xC7
2B82:  MOVLW  FA
2B84:  MOVWF  xDE
2B86:  CALL   058E
2B8A:  DECFSZ xC7,F
2B8C:  BRA    2B82
2B8E:  MOVLW  01
2B90:  MOVWF  19
2B92:  CLRF   33
2B94:  MOVLW  02
2B96:  MOVWF  1D
2B98:  MOVWF  1F
2B9A:  MOVLW  0C
2B9C:  MOVWF  xD8
2B9E:  CALL   0760
....................          } 
....................       } 
....................       else 
2BA2:  BRA    2BA6
....................       { 
....................          Flanco3 = 0; 
2BA4:  BCF    17.6
....................       } 
....................    } 
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 5){ // Menu de Punto Cero 
2BA6:  MOVF   19,W
2BA8:  SUBLW  05
2BAA:  BTFSS  FD8.2
2BAC:  BRA    2DCC
....................       lcd_gotoxy(1,1); 
2BAE:  MOVLW  01
2BB0:  MOVWF  xD9
2BB2:  MOVWF  xDA
2BB4:  CALL   06FE
....................       printf(lcd_putc,"  Zero Point Config "); 
2BB8:  MOVLW  E4
2BBA:  MOVWF  FF6
2BBC:  MOVLW  04
2BBE:  MOVWF  FF7
2BC0:  CALL   07BE
....................       lcd_gotoxy(1,2); 
2BC4:  MOVLW  01
2BC6:  MOVWF  xD9
2BC8:  MOVLW  02
2BCA:  MOVWF  xDA
2BCC:  CALL   06FE
....................       printf(lcd_putc,"Presion= %3.2f inH2O ",(Leer_Sensor_Presion(5)*4.02)); 
2BD0:  MOVLW  05
2BD2:  MOVWF  xC7
2BD4:  CALL   0EF8
2BD8:  MOVFF  00,C7
2BDC:  MOVFF  01,C8
2BE0:  MOVFF  02,C9
2BE4:  MOVFF  03,CA
2BE8:  MOVFF  03,DE
2BEC:  MOVFF  02,DD
2BF0:  MOVFF  01,DC
2BF4:  MOVFF  00,DB
2BF8:  MOVLW  D7
2BFA:  MOVWF  xE2
2BFC:  MOVLW  A3
2BFE:  MOVWF  xE1
2C00:  CLRF   xE0
2C02:  MOVLW  81
2C04:  MOVWF  xDF
2C06:  CALL   1092
2C0A:  MOVFF  00,C7
2C0E:  MOVFF  01,C8
2C12:  MOVFF  02,C9
2C16:  MOVFF  03,CA
2C1A:  MOVLW  FA
2C1C:  MOVWF  FF6
2C1E:  MOVLW  04
2C20:  MOVWF  FF7
2C22:  MOVLW  09
2C24:  MOVWF  xCB
2C26:  CALL   0BF2
2C2A:  MOVLW  02
2C2C:  MOVWF  FE9
2C2E:  MOVFF  CA,CE
2C32:  MOVFF  C9,CD
2C36:  MOVFF  C8,CC
2C3A:  MOVFF  C7,CB
2C3E:  MOVWF  xCF
2C40:  CALL   123E
2C44:  MOVLW  08
2C46:  MOVWF  FF6
2C48:  MOVLW  05
2C4A:  MOVWF  FF7
2C4C:  MOVLW  07
2C4E:  MOVWF  xCB
2C50:  CALL   0BF2
....................       lcd_gotoxy(1,3); 
2C54:  MOVLW  01
2C56:  MOVWF  xD9
2C58:  MOVLW  03
2C5A:  MOVWF  xDA
2C5C:  CALL   06FE
....................       printf(lcd_putc,"    ADC=%2.0f",sensores(1)); 
2C60:  MOVLW  01
2C62:  MOVWF  xCC
2C64:  CALL   06AC
2C68:  MOVFF  00,C7
2C6C:  MOVFF  01,C8
2C70:  MOVFF  02,C9
2C74:  MOVFF  03,CA
2C78:  MOVLW  10
2C7A:  MOVWF  FF6
2C7C:  MOVLW  05
2C7E:  MOVWF  FF7
2C80:  MOVLW  08
2C82:  MOVWF  xCB
2C84:  CALL   0BF2
2C88:  MOVLW  01
2C8A:  MOVWF  FE9
2C8C:  MOVFF  CA,CE
2C90:  MOVFF  C9,CD
2C94:  MOVFF  C8,CC
2C98:  MOVFF  C7,CB
2C9C:  CLRF   xCF
2C9E:  CALL   123E
....................       lcd_gotoxy(1,4); 
2CA2:  MOVLW  01
2CA4:  MOVWF  xD9
2CA6:  MOVLW  04
2CA8:  MOVWF  xDA
2CAA:  CALL   06FE
....................       printf(lcd_putc,"    ZF=%2.0f",G); 
2CAE:  MOVLW  1E
2CB0:  MOVWF  FF6
2CB2:  MOVLW  05
2CB4:  MOVWF  FF7
2CB6:  MOVLW  07
2CB8:  MOVWF  xCB
2CBA:  CALL   0BF2
2CBE:  MOVLW  01
2CC0:  MOVWF  FE9
2CC2:  MOVFF  C6,CE
2CC6:  MOVFF  C5,CD
2CCA:  MOVFF  C4,CC
2CCE:  MOVFF  C3,CB
2CD2:  CLRF   xCF
2CD4:  CALL   123E
....................      
....................       if(RIGHT)// Si oprime derecha 
2CD8:  BSF    F96.1
2CDA:  BTFSS  F84.1
2CDC:  BRA    2D9C
....................       {  if(Flanco1 == 0)  
2CDE:  BTFSC  17.4
2CE0:  BRA    2D9A
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
2CE2:  MOVLW  01
2CE4:  MOVWF  19
2CE6:  CLRF   33
2CE8:  MOVLW  02
2CEA:  MOVWF  1D
2CEC:  MOVWF  1F
2CEE:  MOVLW  0B
2CF0:  MOVWF  1C
2CF2:  MOVLW  02
2CF4:  MOVWF  xC7
2CF6:  MOVLW  FA
2CF8:  MOVWF  xDE
2CFA:  CALL   058E
2CFE:  DECFSZ xC7,F
2D00:  BRA    2CF6
2D02:  MOVLW  0C
2D04:  MOVWF  xD8
2D06:  CALL   0760
....................             G=sensores(1); 
2D0A:  MOVLW  01
2D0C:  MOVWF  xCC
2D0E:  CALL   06AC
2D12:  MOVFF  03,C6
2D16:  MOVFF  02,C5
2D1A:  MOVFF  01,C4
2D1E:  MOVFF  00,C3
....................             G16=(int16)G; 
2D22:  MOVFF  C6,DE
2D26:  MOVFF  C5,DD
2D2A:  MOVFF  C4,DC
2D2E:  MOVFF  C3,DB
2D32:  CALL   13C4
2D36:  MOVFF  02,4A
2D3A:  MOVFF  01,49
....................             G_l=G16; G_h=(G16>>8); 
2D3E:  MOVFF  49,26
2D42:  MOVFF  4A,27
....................              
....................             write_eeprom(60,G_l);write_eeprom(61,G_h);//Guardar valor de Setpoint en eeprom 
2D46:  MOVLW  3C
2D48:  MOVWF  FA9
2D4A:  MOVFF  26,FA8
2D4E:  BCF    FA6.6
2D50:  BCF    FA6.7
2D52:  BSF    FA6.2
2D54:  MOVF   FF2,W
2D56:  MOVWF  00
2D58:  BCF    FF2.7
2D5A:  MOVLB  F
2D5C:  MOVLW  55
2D5E:  MOVWF  FA7
2D60:  MOVLW  AA
2D62:  MOVWF  FA7
2D64:  BSF    FA6.1
2D66:  BTFSC  FA6.1
2D68:  BRA    2D66
2D6A:  BCF    FA6.2
2D6C:  MOVF   00,W
2D6E:  IORWF  FF2,F
2D70:  MOVLW  3D
2D72:  MOVWF  FA9
2D74:  MOVFF  27,FA8
2D78:  BCF    FA6.6
2D7A:  BCF    FA6.7
2D7C:  BSF    FA6.2
2D7E:  MOVF   FF2,W
2D80:  MOVWF  00
2D82:  BCF    FF2.7
2D84:  MOVLW  55
2D86:  MOVWF  FA7
2D88:  MOVLW  AA
2D8A:  MOVWF  FA7
2D8C:  BSF    FA6.1
2D8E:  BTFSC  FA6.1
2D90:  BRA    2D8E
2D92:  BCF    FA6.2
2D94:  MOVF   00,W
2D96:  IORWF  FF2,F
2D98:  MOVLB  0
....................             }} 
....................          else 
2D9A:  BRA    2D9E
....................             {Flanco1 = 0;}    
2D9C:  BCF    17.4
....................              
....................        if(LEFT)// Si oprime Izquierda 
2D9E:  BSF    F96.2
2DA0:  BTFSS  F84.2
2DA2:  BRA    2DCA
....................       {  if(Flanco3 == 0)  
2DA4:  BTFSC  17.6
2DA6:  BRA    2DC8
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f");}} 
2DA8:  MOVLW  01
2DAA:  MOVWF  19
2DAC:  CLRF   33
2DAE:  MOVLW  02
2DB0:  MOVWF  1D
2DB2:  MOVWF  1F
2DB4:  MOVLW  0B
2DB6:  MOVWF  1C
2DB8:  MOVLW  1E
2DBA:  MOVWF  xDE
2DBC:  CALL   058E
2DC0:  MOVLW  0C
2DC2:  MOVWF  xD8
2DC4:  CALL   0760
....................          else 
2DC8:  BRA    2DCC
....................             {Flanco3 = 0;}   
2DCA:  BCF    17.6
....................       } 
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu100--------------------------------------------------------------- 
....................    if(Menu == 100){ // Menu de seleccion de Estado de Luz UV 
2DCC:  MOVF   19,W
2DCE:  SUBLW  64
2DD0:  BTFSS  FD8.2
2DD2:  BRA    31C0
....................     
....................    if(Lectura==1) 
2DD4:  BTFSS  18.0
2DD6:  BRA    2DF2
....................    { 
....................       Lectura=0; 
2DD8:  BCF    18.0
....................       CaidaPresion=Leer_Sensor_Presion(5); 
2DDA:  MOVLW  05
2DDC:  MOVWF  xC7
2DDE:  CALL   0EF8
2DE2:  MOVFF  03,AA
2DE6:  MOVFF  02,A9
2DEA:  MOVFF  01,A8
2DEE:  MOVFF  00,A7
....................    } 
....................     
....................    lcd_gotoxy(1,1); 
2DF2:  MOVLW  01
2DF4:  MOVWF  xD9
2DF6:  MOVWF  xDA
2DF8:  CALL   06FE
....................    printf(lcd_putc,"JPCR DP:%3.2f inH2O ",(CaidaPresion*4.02)); 
2DFC:  MOVFF  AA,DE
2E00:  MOVFF  A9,DD
2E04:  MOVFF  A8,DC
2E08:  MOVFF  A7,DB
2E0C:  MOVLW  D7
2E0E:  MOVWF  xE2
2E10:  MOVLW  A3
2E12:  MOVWF  xE1
2E14:  CLRF   xE0
2E16:  MOVLW  81
2E18:  MOVWF  xDF
2E1A:  CALL   1092
2E1E:  MOVFF  00,C7
2E22:  MOVFF  01,C8
2E26:  MOVFF  02,C9
2E2A:  MOVFF  03,CA
2E2E:  MOVLW  2C
2E30:  MOVWF  FF6
2E32:  MOVLW  05
2E34:  MOVWF  FF7
2E36:  MOVLW  08
2E38:  MOVWF  xCB
2E3A:  CALL   0BF2
2E3E:  MOVLW  02
2E40:  MOVWF  FE9
2E42:  MOVFF  CA,CE
2E46:  MOVFF  C9,CD
2E4A:  MOVFF  C8,CC
2E4E:  MOVFF  C7,CB
2E52:  MOVWF  xCF
2E54:  CALL   123E
2E58:  MOVLW  39
2E5A:  MOVWF  FF6
2E5C:  MOVLW  05
2E5E:  MOVWF  FF7
2E60:  MOVLW  07
2E62:  MOVWF  xCB
2E64:  CALL   0BF2
....................    lcd_gotoxy(1,2); 
2E68:  MOVLW  01
2E6A:  MOVWF  xD9
2E6C:  MOVLW  02
2E6E:  MOVWF  xDA
2E70:  CALL   06FE
....................    printf(lcd_putc,"Filtro:"); 
2E74:  MOVLW  42
2E76:  MOVWF  FF6
2E78:  MOVLW  05
2E7A:  MOVWF  FF7
2E7C:  CALL   07BE
....................     
....................    Saturacion=(CaidaPresion/0.37)*11; 
2E80:  MOVFF  AA,DE
2E84:  MOVFF  A9,DD
2E88:  MOVFF  A8,DC
2E8C:  MOVFF  A7,DB
2E90:  MOVLW  A4
2E92:  MOVWF  xE2
2E94:  MOVLW  70
2E96:  MOVWF  xE1
2E98:  MOVLW  3D
2E9A:  MOVWF  xE0
2E9C:  MOVLW  7D
2E9E:  MOVWF  xDF
2EA0:  CALL   07DE
2EA4:  MOVFF  00,C7
2EA8:  MOVFF  01,C8
2EAC:  MOVFF  02,C9
2EB0:  MOVFF  03,CA
2EB4:  MOVFF  03,DE
2EB8:  MOVFF  02,DD
2EBC:  MOVFF  01,DC
2EC0:  MOVFF  00,DB
2EC4:  CLRF   xE2
2EC6:  CLRF   xE1
2EC8:  MOVLW  30
2ECA:  MOVWF  xE0
2ECC:  MOVLW  82
2ECE:  MOVWF  xDF
2ED0:  CALL   1092
2ED4:  MOVFF  03,A6
2ED8:  MOVFF  02,A5
2EDC:  MOVFF  01,A4
2EE0:  MOVFF  00,A3
....................    if(Saturacion>11) 
2EE4:  CLRF   xDE
2EE6:  CLRF   xDD
2EE8:  MOVLW  30
2EEA:  MOVWF  xDC
2EEC:  MOVLW  82
2EEE:  MOVWF  xDB
2EF0:  MOVFF  A6,E2
2EF4:  MOVFF  A5,E1
2EF8:  MOVFF  A4,E0
2EFC:  MOVFF  A3,DF
2F00:  CALL   0E82
2F04:  BNC   2F12
....................    { 
....................       Saturacion=11; 
2F06:  CLRF   xA6
2F08:  CLRF   xA5
2F0A:  MOVLW  30
2F0C:  MOVWF  xA4
2F0E:  MOVLW  82
2F10:  MOVWF  xA3
....................    } 
....................     
....................    for(i=0;i<floor(Saturacion);i++) 
2F12:  CLRF   2E
2F14:  MOVFF  A6,CA
2F18:  MOVFF  A5,C9
2F1C:  MOVFF  A4,C8
2F20:  MOVFF  A3,C7
2F24:  CALL   172E
2F28:  MOVFF  00,C7
2F2C:  MOVFF  01,C8
2F30:  MOVFF  02,C9
2F34:  MOVFF  03,CA
2F38:  CLRF   xE0
2F3A:  MOVFF  2E,DF
2F3E:  CALL   0676
2F42:  MOVFF  03,DE
2F46:  MOVFF  02,DD
2F4A:  MOVFF  01,DC
2F4E:  MOVFF  00,DB
2F52:  MOVFF  CA,E2
2F56:  MOVFF  C9,E1
2F5A:  MOVFF  C8,E0
2F5E:  MOVFF  C7,DF
2F62:  CALL   0E82
2F66:  BNC   2F84
....................    { 
....................       lcd_gotoxy(i+8,2); 
2F68:  MOVLW  08
2F6A:  ADDWF  2E,W
2F6C:  MOVWF  xC7
2F6E:  MOVWF  xD9
2F70:  MOVLW  02
2F72:  MOVWF  xDA
2F74:  CALL   06FE
....................       printf(lcd_putc,"Ñ"); 
2F78:  MOVLW  D1
2F7A:  MOVWF  xD8
2F7C:  CALL   0760
....................    } 
2F80:  INCF   2E,F
2F82:  BRA    2F14
....................     
....................    for(i=floor(Saturacion);i<11;i++) 
2F84:  MOVFF  A6,CA
2F88:  MOVFF  A5,C9
2F8C:  MOVFF  A4,C8
2F90:  MOVFF  A3,C7
2F94:  CALL   172E
2F98:  MOVFF  03,DE
2F9C:  MOVFF  02,DD
2FA0:  MOVFF  01,DC
2FA4:  MOVFF  00,DB
2FA8:  CALL   13C4
2FAC:  MOVFF  01,2E
2FB0:  MOVF   2E,W
2FB2:  SUBLW  0A
2FB4:  BNC   2FD2
....................    { 
....................       lcd_gotoxy(i+8,2); 
2FB6:  MOVLW  08
2FB8:  ADDWF  2E,W
2FBA:  MOVWF  xC7
2FBC:  MOVWF  xD9
2FBE:  MOVLW  02
2FC0:  MOVWF  xDA
2FC2:  CALL   06FE
....................       printf(lcd_putc," "); 
2FC6:  MOVLW  20
2FC8:  MOVWF  xD8
2FCA:  CALL   0760
....................    } 
2FCE:  INCF   2E,F
2FD0:  BRA    2FB0
....................     
....................    lcd_gotoxy(10,3); 
2FD2:  MOVLW  0A
2FD4:  MOVWF  xD9
2FD6:  MOVLW  03
2FD8:  MOVWF  xDA
2FDA:  CALL   06FE
....................    printf(lcd_putc,"Tempo:%02u:%02u",tempo_minutos,tempo_segundos); 
2FDE:  MOVLW  4A
2FE0:  MOVWF  FF6
2FE2:  MOVLW  05
2FE4:  MOVWF  FF7
2FE6:  MOVLW  06
2FE8:  MOVWF  xCB
2FEA:  CALL   0BF2
2FEE:  MOVFF  28,C7
2FF2:  MOVLW  01
2FF4:  MOVWF  xC8
2FF6:  CALL   0D68
2FFA:  MOVLW  3A
2FFC:  MOVWF  xD8
2FFE:  CALL   0760
3002:  MOVFF  29,C7
3006:  MOVLW  01
3008:  MOVWF  xC8
300A:  CALL   0D68
....................     
....................    if(estadomv==1) 
300E:  BTFSS  17.2
3010:  BRA    3034
....................    { 
....................       lcd_gotoxy(1,4); 
3012:  MOVLW  01
3014:  MOVWF  xD9
3016:  MOVLW  04
3018:  MOVWF  xDA
301A:  CALL   06FE
....................       printf(lcd_putc,"Motor:ON "); 
301E:  MOVLW  5A
3020:  MOVWF  FF6
3022:  MOVLW  05
3024:  MOVWF  FF7
3026:  CALL   07BE
....................       velocidades(1); 
302A:  MOVLW  01
302C:  MOVWF  xC7
302E:  CALL   1744
....................    } 
....................    else 
3032:  BRA    3052
....................    { 
....................       lcd_gotoxy(1,4); 
3034:  MOVLW  01
3036:  MOVWF  xD9
3038:  MOVLW  04
303A:  MOVWF  xDA
303C:  CALL   06FE
....................       printf(lcd_putc,"Motor:OFF"); 
3040:  MOVLW  64
3042:  MOVWF  FF6
3044:  MOVLW  05
3046:  MOVWF  FF7
3048:  CALL   07BE
....................       velocidades(0);  
304C:  CLRF   xC7
304E:  CALL   1744
....................    } 
....................     
....................    if(estadouv==1) 
3052:  BTFSS  17.0
3054:  BRA    309A
....................    { 
....................       lcd_gotoxy(13,4); 
3056:  MOVLW  0D
3058:  MOVWF  xD9
305A:  MOVLW  04
305C:  MOVWF  xDA
305E:  CALL   06FE
....................       printf(lcd_putc,"UV:ON "); 
3062:  MOVLW  6E
3064:  MOVWF  FF6
3066:  MOVLW  05
3068:  MOVWF  FF7
306A:  CALL   07BE
....................       estadomv=0; 
306E:  BCF    17.2
....................       velocidades(0); 
3070:  CLRF   xC7
3072:  CALL   1744
....................       estadofl=0; 
3076:  BCF    17.1
....................       Luz_Blanca_off; 
3078:  BCF    F8C.3
307A:  BCF    F95.3
....................       Luz_UV_on; 
307C:  BSF    F8C.0
307E:  BCF    F95.0
....................       tiempo_cumplido=0; 
3080:  BCF    17.7
....................       if(flaguv==0) 
3082:  BTFSC  18.1
3084:  BRA    3098
....................       { 
....................          delay_ms(50);lcd_init();flaguv=1;guardaruv=1; 
3086:  MOVLW  32
3088:  MOVWF  xDE
308A:  CALL   058E
308E:  CALL   0620
3092:  BSF    18.1
3094:  MOVLW  01
3096:  MOVWF  31
....................       } 
....................    } 
....................    else 
3098:  BRA    30CE
....................    { 
....................       estadouv=0; 
309A:  BCF    17.0
....................       lcd_gotoxy(13,4); 
309C:  MOVLW  0D
309E:  MOVWF  xD9
30A0:  MOVLW  04
30A2:  MOVWF  xDA
30A4:  CALL   06FE
....................       printf(lcd_putc,"UV:OFF"); 
30A8:  MOVLW  76
30AA:  MOVWF  FF6
30AC:  MOVLW  05
30AE:  MOVWF  FF7
30B0:  CALL   07BE
....................       Luz_UV_off; 
30B4:  BCF    F8C.0
30B6:  BCF    F95.0
....................       if(flaguv==1) 
30B8:  BTFSS  18.1
30BA:  BRA    30CE
....................       { 
....................          delay_ms(50);lcd_init();flaguv=0;guardaruv=1; 
30BC:  MOVLW  32
30BE:  MOVWF  xDE
30C0:  CALL   058E
30C4:  CALL   0620
30C8:  BCF    18.1
30CA:  MOVLW  01
30CC:  MOVWF  31
....................       } 
....................    } 
....................     
....................    if(estadofl==1) 
30CE:  BTFSS  17.1
30D0:  BRA    3102
....................    { 
....................       lcd_gotoxy(1,3); 
30D2:  MOVLW  01
30D4:  MOVWF  xD9
30D6:  MOVLW  03
30D8:  MOVWF  xDA
30DA:  CALL   06FE
....................       printf(lcd_putc,"Luz:ON "); 
30DE:  MOVLW  7E
30E0:  MOVWF  FF6
30E2:  MOVLW  05
30E4:  MOVWF  FF7
30E6:  CALL   07BE
....................       Luz_Blanca_on; 
30EA:  BSF    F8C.3
30EC:  BCF    F95.3
....................       if(flagfl==0) 
30EE:  BTFSC  18.2
30F0:  BRA    3100
....................       { 
....................          delay_ms(50);lcd_init();flagfl=1; 
30F2:  MOVLW  32
30F4:  MOVWF  xDE
30F6:  CALL   058E
30FA:  CALL   0620
30FE:  BSF    18.2
....................       } 
....................    } 
....................    else 
3100:  BRA    3130
....................    { 
....................       lcd_gotoxy(1,3); 
3102:  MOVLW  01
3104:  MOVWF  xD9
3106:  MOVLW  03
3108:  MOVWF  xDA
310A:  CALL   06FE
....................       printf(lcd_putc,"Luz:OFF"); 
310E:  MOVLW  86
3110:  MOVWF  FF6
3112:  MOVLW  05
3114:  MOVWF  FF7
3116:  CALL   07BE
....................       Luz_Blanca_off; 
311A:  BCF    F8C.3
311C:  BCF    F95.3
....................       if(flagfl==1) 
311E:  BTFSS  18.2
3120:  BRA    3130
....................       { 
....................          delay_ms(50);lcd_init();flagfl=0; 
3122:  MOVLW  32
3124:  MOVWF  xDE
3126:  CALL   058E
312A:  CALL   0620
312E:  BCF    18.2
....................       } 
....................    } 
....................     
....................   if(DOWN)//Si oprime hacia arriba 
3130:  BSF    F96.0
3132:  BTFSS  F84.0
3134:  BRA    3150
....................    { 
....................       if(Flanco == 0) 
3136:  BTFSC  17.3
3138:  BRA    314E
....................       { 
....................          estadofl=!estadofl;Flanco = 1;delay_ms(300); 
313A:  BTG    17.1
313C:  BSF    17.3
313E:  MOVLW  02
3140:  MOVWF  xC7
3142:  MOVLW  96
3144:  MOVWF  xDE
3146:  CALL   058E
314A:  DECFSZ xC7,F
314C:  BRA    3142
....................       } 
....................    } 
....................    else 
314E:  BRA    3152
....................    { 
....................       Flanco = 0; 
3150:  BCF    17.3
....................    } 
....................     
....................    if(RIGHT)//Si oprime hacia abajo 
3152:  BSF    F96.1
3154:  BTFSS  F84.1
3156:  BRA    3172
....................    { 
....................       if(Flanco1 == 0) 
3158:  BTFSC  17.4
315A:  BRA    3170
....................       { 
....................          estadomv=!estadomv;Flanco1 = 1;delay_ms(300); 
315C:  BTG    17.2
315E:  BSF    17.4
3160:  MOVLW  02
3162:  MOVWF  xC7
3164:  MOVLW  96
3166:  MOVWF  xDE
3168:  CALL   058E
316C:  DECFSZ xC7,F
316E:  BRA    3164
....................       } 
....................    } 
....................    else 
3170:  BRA    3174
....................    { 
....................       Flanco1 = 0; 
3172:  BCF    17.4
....................    } 
....................     
....................    if(UP)//Si oprime hacia izquierda 
3174:  BSF    F92.5
3176:  BTFSS  F80.5
3178:  BRA    319E
....................    { 
....................       printf(lcd_putc,"\f");delay_ms(300);Menu=1; paso=0;Flecha=2;Flecha2=2;    
317A:  MOVLW  0C
317C:  MOVWF  xD8
317E:  CALL   0760
3182:  MOVLW  02
3184:  MOVWF  xC7
3186:  MOVLW  96
3188:  MOVWF  xDE
318A:  CALL   058E
318E:  DECFSZ xC7,F
3190:  BRA    3186
3192:  MOVLW  01
3194:  MOVWF  19
3196:  CLRF   33
3198:  MOVLW  02
319A:  MOVWF  1D
319C:  MOVWF  1F
....................    } 
....................     
....................    if(LEFT)//Si oprime hacia izquierda 
319E:  BSF    F96.2
31A0:  BTFSS  F84.2
31A2:  BRA    31BE
....................    { 
....................       if(Flanco2 == 0) 
31A4:  BTFSC  17.5
31A6:  BRA    31BC
....................       { 
....................          estadouv=!estadouv;Flanco2 = 1;delay_ms(300); 
31A8:  BTG    17.0
31AA:  BSF    17.5
31AC:  MOVLW  02
31AE:  MOVWF  xC7
31B0:  MOVLW  96
31B2:  MOVWF  xDE
31B4:  CALL   058E
31B8:  DECFSZ xC7,F
31BA:  BRA    31B0
....................       } 
....................    } 
....................    else 
31BC:  BRA    31C0
....................    { 
....................       Flanco2 = 0; 
31BE:  BCF    17.5
....................    } 
....................      
....................    } 
.................... //----------------Fin-Menu100--------------------------------------------------------------    
....................    if(guardaruv==1) 
31C0:  DECFSZ 31,W
31C2:  BRA    3272
....................    { 
....................       write_eeprom(50,segundos);write_eeprom(51,minutos); 
31C4:  MOVLW  32
31C6:  MOVWF  FA9
31C8:  MOVFF  22,FA8
31CC:  BCF    FA6.6
31CE:  BCF    FA6.7
31D0:  BSF    FA6.2
31D2:  MOVF   FF2,W
31D4:  MOVWF  00
31D6:  BCF    FF2.7
31D8:  MOVLB  F
31DA:  MOVLW  55
31DC:  MOVWF  FA7
31DE:  MOVLW  AA
31E0:  MOVWF  FA7
31E2:  BSF    FA6.1
31E4:  BTFSC  FA6.1
31E6:  BRA    31E4
31E8:  BCF    FA6.2
31EA:  MOVF   00,W
31EC:  IORWF  FF2,F
31EE:  MOVLW  33
31F0:  MOVWF  FA9
31F2:  MOVFF  23,FA8
31F6:  BCF    FA6.6
31F8:  BCF    FA6.7
31FA:  BSF    FA6.2
31FC:  MOVF   FF2,W
31FE:  MOVWF  00
3200:  BCF    FF2.7
3202:  MOVLW  55
3204:  MOVWF  FA7
3206:  MOVLW  AA
3208:  MOVWF  FA7
320A:  BSF    FA6.1
320C:  BTFSC  FA6.1
320E:  BRA    320C
3210:  BCF    FA6.2
3212:  MOVF   00,W
3214:  IORWF  FF2,F
....................       horasL=(int8)horas; 
3216:  MOVFF  47,24
....................       horasH=(int8)(horas>>8); 
321A:  MOVF   48,W
321C:  MOVWF  25
....................       write_eeprom(52,horasL); 
321E:  MOVLW  34
3220:  MOVWF  FA9
3222:  MOVFF  24,FA8
3226:  BCF    FA6.6
3228:  BCF    FA6.7
322A:  BSF    FA6.2
322C:  MOVFF  FF2,00
3230:  BCF    FF2.7
3232:  MOVLW  55
3234:  MOVWF  FA7
3236:  MOVLW  AA
3238:  MOVWF  FA7
323A:  BSF    FA6.1
323C:  BTFSC  FA6.1
323E:  BRA    323C
3240:  BCF    FA6.2
3242:  MOVF   00,W
3244:  IORWF  FF2,F
....................       write_eeprom(53,horasH); 
3246:  MOVLW  35
3248:  MOVWF  FA9
324A:  MOVFF  25,FA8
324E:  BCF    FA6.6
3250:  BCF    FA6.7
3252:  BSF    FA6.2
3254:  MOVFF  FF2,00
3258:  BCF    FF2.7
325A:  MOVLW  55
325C:  MOVWF  FA7
325E:  MOVLW  AA
3260:  MOVWF  FA7
3262:  BSF    FA6.1
3264:  BTFSC  FA6.1
3266:  BRA    3264
3268:  BCF    FA6.2
326A:  MOVF   00,W
326C:  IORWF  FF2,F
....................       guardaruv=0; 
326E:  CLRF   31
3270:  MOVLB  0
....................    } 
....................    
....................    if(tiemporeset>=20) 
3272:  MOVF   30,W
3274:  SUBLW  13
3276:  BC    327E
....................    { 
....................       lcd_init(); 
3278:  CALL   0620
....................       tiemporeset=0; 
327C:  CLRF   30
....................    }    
....................     
....................    if(segundos>=60) 
327E:  MOVF   22,W
3280:  SUBLW  3B
3282:  BC    3288
....................    { 
....................       segundos=0;minutos++; 
3284:  CLRF   22
3286:  INCF   23,F
....................    } 
....................    if(minutos==60) 
3288:  MOVF   23,W
328A:  SUBLW  3C
328C:  BNZ   3296
....................    { 
....................       minutos=0;horas++; 
328E:  CLRF   23
3290:  INCF   47,F
3292:  BTFSC  FD8.2
3294:  INCF   48,F
....................    } 
....................     
....................    } 
3296:  GOTO   1C10
.................... } 
....................  
329A:  SLEEP 

Configuration Fuses:
   Word  1: CE20   IESO FCMEN HSPLL PLL1 CPUDIV1 USBDIV
   Word  2: 1E1E   BROWNOUT NOWDT BORV20 PUT WDT32768 NOVREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
